var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function _mergeNamespaces(n2, m4) {
  for (var i2 = 0; i2 < m4.length; i2++) {
    const e3 = m4[i2];
    if (typeof e3 !== "string" && !Array.isArray(e3)) {
      for (const k3 in e3) {
        if (k3 !== "default" && !(k3 in n2)) {
          const d4 = Object.getOwnPropertyDescriptor(e3, k3);
          if (d4) {
            Object.defineProperty(n2, k3, d4.get ? d4 : {
              enumerable: true,
              get: () => e3[k3]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
function getDefaultExportFromCjs(x3) {
  return x3 && x3.__esModule && Object.prototype.hasOwnProperty.call(x3, "default") ? x3["default"] : x3;
}
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReact_production_min;
function requireReact_production_min() {
  if (hasRequiredReact_production_min)
    return react_production_min;
  hasRequiredReact_production_min = 1;
  var l2 = Symbol.for("react.element"), n2 = Symbol.for("react.portal"), p2 = Symbol.for("react.fragment"), q2 = Symbol.for("react.strict_mode"), r2 = Symbol.for("react.profiler"), t3 = Symbol.for("react.provider"), u3 = Symbol.for("react.context"), v2 = Symbol.for("react.forward_ref"), w3 = Symbol.for("react.suspense"), x3 = Symbol.for("react.memo"), y4 = Symbol.for("react.lazy"), z2 = Symbol.iterator;
  function A2(a4) {
    if (null === a4 || "object" !== typeof a4)
      return null;
    a4 = z2 && a4[z2] || a4["@@iterator"];
    return "function" === typeof a4 ? a4 : null;
  }
  var B2 = { isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, C2 = Object.assign, D3 = {};
  function E3(a4, b3, e3) {
    this.props = a4;
    this.context = b3;
    this.refs = D3;
    this.updater = e3 || B2;
  }
  E3.prototype.isReactComponent = {};
  E3.prototype.setState = function(a4, b3) {
    if ("object" !== typeof a4 && "function" !== typeof a4 && null != a4)
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a4, b3, "setState");
  };
  E3.prototype.forceUpdate = function(a4) {
    this.updater.enqueueForceUpdate(this, a4, "forceUpdate");
  };
  function F2() {
  }
  F2.prototype = E3.prototype;
  function G2(a4, b3, e3) {
    this.props = a4;
    this.context = b3;
    this.refs = D3;
    this.updater = e3 || B2;
  }
  var H3 = G2.prototype = new F2();
  H3.constructor = G2;
  C2(H3, E3.prototype);
  H3.isPureReactComponent = true;
  var I3 = Array.isArray, J = Object.prototype.hasOwnProperty, K2 = { current: null }, L2 = { key: true, ref: true, __self: true, __source: true };
  function M4(a4, b3, e3) {
    var d4, c3 = {}, k3 = null, h4 = null;
    if (null != b3)
      for (d4 in void 0 !== b3.ref && (h4 = b3.ref), void 0 !== b3.key && (k3 = "" + b3.key), b3)
        J.call(b3, d4) && !L2.hasOwnProperty(d4) && (c3[d4] = b3[d4]);
    var g2 = arguments.length - 2;
    if (1 === g2)
      c3.children = e3;
    else if (1 < g2) {
      for (var f2 = Array(g2), m4 = 0; m4 < g2; m4++)
        f2[m4] = arguments[m4 + 2];
      c3.children = f2;
    }
    if (a4 && a4.defaultProps)
      for (d4 in g2 = a4.defaultProps, g2)
        void 0 === c3[d4] && (c3[d4] = g2[d4]);
    return { $$typeof: l2, type: a4, key: k3, ref: h4, props: c3, _owner: K2.current };
  }
  function N(a4, b3) {
    return { $$typeof: l2, type: a4.type, key: b3, ref: a4.ref, props: a4.props, _owner: a4._owner };
  }
  function O3(a4) {
    return "object" === typeof a4 && null !== a4 && a4.$$typeof === l2;
  }
  function escape(a4) {
    var b3 = { "=": "=0", ":": "=2" };
    return "$" + a4.replace(/[=:]/g, function(a5) {
      return b3[a5];
    });
  }
  var P2 = /\/+/g;
  function Q2(a4, b3) {
    return "object" === typeof a4 && null !== a4 && null != a4.key ? escape("" + a4.key) : b3.toString(36);
  }
  function R3(a4, b3, e3, d4, c3) {
    var k3 = typeof a4;
    if ("undefined" === k3 || "boolean" === k3)
      a4 = null;
    var h4 = false;
    if (null === a4)
      h4 = true;
    else
      switch (k3) {
        case "string":
        case "number":
          h4 = true;
          break;
        case "object":
          switch (a4.$$typeof) {
            case l2:
            case n2:
              h4 = true;
          }
      }
    if (h4)
      return h4 = a4, c3 = c3(h4), a4 = "" === d4 ? "." + Q2(h4, 0) : d4, I3(c3) ? (e3 = "", null != a4 && (e3 = a4.replace(P2, "$&/") + "/"), R3(c3, b3, e3, "", function(a5) {
        return a5;
      })) : null != c3 && (O3(c3) && (c3 = N(c3, e3 + (!c3.key || h4 && h4.key === c3.key ? "" : ("" + c3.key).replace(P2, "$&/") + "/") + a4)), b3.push(c3)), 1;
    h4 = 0;
    d4 = "" === d4 ? "." : d4 + ":";
    if (I3(a4))
      for (var g2 = 0; g2 < a4.length; g2++) {
        k3 = a4[g2];
        var f2 = d4 + Q2(k3, g2);
        h4 += R3(k3, b3, e3, f2, c3);
      }
    else if (f2 = A2(a4), "function" === typeof f2)
      for (a4 = f2.call(a4), g2 = 0; !(k3 = a4.next()).done; )
        k3 = k3.value, f2 = d4 + Q2(k3, g2++), h4 += R3(k3, b3, e3, f2, c3);
    else if ("object" === k3)
      throw b3 = String(a4), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b3 ? "object with keys {" + Object.keys(a4).join(", ") + "}" : b3) + "). If you meant to render a collection of children, use an array instead.");
    return h4;
  }
  function S4(a4, b3, e3) {
    if (null == a4)
      return a4;
    var d4 = [], c3 = 0;
    R3(a4, d4, "", "", function(a5) {
      return b3.call(e3, a5, c3++);
    });
    return d4;
  }
  function T3(a4) {
    if (-1 === a4._status) {
      var b3 = a4._result;
      b3 = b3();
      b3.then(function(b4) {
        if (0 === a4._status || -1 === a4._status)
          a4._status = 1, a4._result = b4;
      }, function(b4) {
        if (0 === a4._status || -1 === a4._status)
          a4._status = 2, a4._result = b4;
      });
      -1 === a4._status && (a4._status = 0, a4._result = b3);
    }
    if (1 === a4._status)
      return a4._result.default;
    throw a4._result;
  }
  var U2 = { current: null }, V2 = { transition: null }, W = { ReactCurrentDispatcher: U2, ReactCurrentBatchConfig: V2, ReactCurrentOwner: K2 };
  react_production_min.Children = { map: S4, forEach: function(a4, b3, e3) {
    S4(a4, function() {
      b3.apply(this, arguments);
    }, e3);
  }, count: function(a4) {
    var b3 = 0;
    S4(a4, function() {
      b3++;
    });
    return b3;
  }, toArray: function(a4) {
    return S4(a4, function(a5) {
      return a5;
    }) || [];
  }, only: function(a4) {
    if (!O3(a4))
      throw Error("React.Children.only expected to receive a single React element child.");
    return a4;
  } };
  react_production_min.Component = E3;
  react_production_min.Fragment = p2;
  react_production_min.Profiler = r2;
  react_production_min.PureComponent = G2;
  react_production_min.StrictMode = q2;
  react_production_min.Suspense = w3;
  react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
  react_production_min.cloneElement = function(a4, b3, e3) {
    if (null === a4 || void 0 === a4)
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a4 + ".");
    var d4 = C2({}, a4.props), c3 = a4.key, k3 = a4.ref, h4 = a4._owner;
    if (null != b3) {
      void 0 !== b3.ref && (k3 = b3.ref, h4 = K2.current);
      void 0 !== b3.key && (c3 = "" + b3.key);
      if (a4.type && a4.type.defaultProps)
        var g2 = a4.type.defaultProps;
      for (f2 in b3)
        J.call(b3, f2) && !L2.hasOwnProperty(f2) && (d4[f2] = void 0 === b3[f2] && void 0 !== g2 ? g2[f2] : b3[f2]);
    }
    var f2 = arguments.length - 2;
    if (1 === f2)
      d4.children = e3;
    else if (1 < f2) {
      g2 = Array(f2);
      for (var m4 = 0; m4 < f2; m4++)
        g2[m4] = arguments[m4 + 2];
      d4.children = g2;
    }
    return { $$typeof: l2, type: a4.type, key: c3, ref: k3, props: d4, _owner: h4 };
  };
  react_production_min.createContext = function(a4) {
    a4 = { $$typeof: u3, _currentValue: a4, _currentValue2: a4, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
    a4.Provider = { $$typeof: t3, _context: a4 };
    return a4.Consumer = a4;
  };
  react_production_min.createElement = M4;
  react_production_min.createFactory = function(a4) {
    var b3 = M4.bind(null, a4);
    b3.type = a4;
    return b3;
  };
  react_production_min.createRef = function() {
    return { current: null };
  };
  react_production_min.forwardRef = function(a4) {
    return { $$typeof: v2, render: a4 };
  };
  react_production_min.isValidElement = O3;
  react_production_min.lazy = function(a4) {
    return { $$typeof: y4, _payload: { _status: -1, _result: a4 }, _init: T3 };
  };
  react_production_min.memo = function(a4, b3) {
    return { $$typeof: x3, type: a4, compare: void 0 === b3 ? null : b3 };
  };
  react_production_min.startTransition = function(a4) {
    var b3 = V2.transition;
    V2.transition = {};
    try {
      a4();
    } finally {
      V2.transition = b3;
    }
  };
  react_production_min.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
  };
  react_production_min.useCallback = function(a4, b3) {
    return U2.current.useCallback(a4, b3);
  };
  react_production_min.useContext = function(a4) {
    return U2.current.useContext(a4);
  };
  react_production_min.useDebugValue = function() {
  };
  react_production_min.useDeferredValue = function(a4) {
    return U2.current.useDeferredValue(a4);
  };
  react_production_min.useEffect = function(a4, b3) {
    return U2.current.useEffect(a4, b3);
  };
  react_production_min.useId = function() {
    return U2.current.useId();
  };
  react_production_min.useImperativeHandle = function(a4, b3, e3) {
    return U2.current.useImperativeHandle(a4, b3, e3);
  };
  react_production_min.useInsertionEffect = function(a4, b3) {
    return U2.current.useInsertionEffect(a4, b3);
  };
  react_production_min.useLayoutEffect = function(a4, b3) {
    return U2.current.useLayoutEffect(a4, b3);
  };
  react_production_min.useMemo = function(a4, b3) {
    return U2.current.useMemo(a4, b3);
  };
  react_production_min.useReducer = function(a4, b3, e3) {
    return U2.current.useReducer(a4, b3, e3);
  };
  react_production_min.useRef = function(a4) {
    return U2.current.useRef(a4);
  };
  react_production_min.useState = function(a4) {
    return U2.current.useState(a4);
  };
  react_production_min.useSyncExternalStore = function(a4, b3, e3) {
    return U2.current.useSyncExternalStore(a4, b3, e3);
  };
  react_production_min.useTransition = function() {
    return U2.current.useTransition();
  };
  react_production_min.version = "18.2.0";
  return react_production_min;
}
var react_development = { exports: {} };
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
react_development.exports;
var hasRequiredReact_development;
function requireReact_development() {
  if (hasRequiredReact_development)
    return react_development.exports;
  hasRequiredReact_development = 1;
  (function(module, exports) {
    if (process.env.NODE_ENV !== "production") {
      (function() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn2(format2) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format2, args);
            }
          }
        }
        function error(format2) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format2, args);
            }
          }
        }
        function printWarning(level, format2, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign2 = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component2.prototype.isReactComponent = {};
        Component2.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component2.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component2.prototype, methodName, {
              get: function() {
                warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component2.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign2(pureComponentPrototype, Component2.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a4) {
          return isArrayImpl(a4);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e3) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init2(payload));
                } catch (x3) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign2({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match2) {
            return escaperLookup[match2];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index2) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index2.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                return c3;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren2(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren2(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren2(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren2(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue2) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue2,
            _currentValue2: defaultValue2,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps2;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef2(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render2.name && !render2.displayName) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context2) {
          var dispatcher = resolveDispatcher();
          {
            if (Context2._context !== void 0) {
              var realContext = Context2._context;
              if (realContext.Consumer === Context2) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context2) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context2);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer2, initialArg, init2) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer2, initialArg, init2);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create2, deps);
        }
        function useInsertionEffect2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create2, deps);
        }
        function useLayoutEffect(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create2, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create2, deps);
        }
        function useImperativeHandle(ref, create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create2, deps);
        }
        function useDebugValue2(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x3) {
                var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn3, construct) {
          if (!fn3 || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn3);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x3) {
                  control = x3;
                }
                Reflect.construct(fn3, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x3) {
                  control = x3;
                }
                fn3.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x3) {
                control = x3;
              }
              fn3();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s4 = sampleLines.length - 1;
              var c3 = controlLines.length - 1;
              while (s4 >= 1 && c3 >= 0 && sampleLines[s4] !== controlLines[c3]) {
                c3--;
              }
              for (; s4 >= 1 && c3 >= 0; s4--, c3--) {
                if (sampleLines[s4] !== controlLines[c3]) {
                  if (s4 !== 1 || c3 !== 1) {
                    do {
                      s4--;
                      c3--;
                      if (c3 < 0 || sampleLines[s4] !== controlLines[c3]) {
                        var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                        if (fn3.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn3.displayName);
                        }
                        {
                          if (typeof fn3 === "function") {
                            componentFrameCache.set(fn3, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s4 >= 1 && c3 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn3 ? fn3.displayName || fn3.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn3 === "function") {
              componentFrameCache.set(fn3, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn3, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn3, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                } catch (x3) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray(node2)) {
            for (var i2 = 0; i2 < node2.length; i2++) {
              var child = node2[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys2 = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys2.length; i2++) {
              var key = keys2[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i2 = 0;
              try {
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i2 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren2,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component2;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef2;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue2;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect2;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  })(react_development, react_development.exports);
  return react_development.exports;
}
if (process.env.NODE_ENV === "production") {
  react.exports = requireReact_production_min();
} else {
  react.exports = requireReact_development();
}
var reactExports = react.exports;
const e$1 = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: e$1
}, [reactExports]);
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredScheduler_production_min;
function requireScheduler_production_min() {
  if (hasRequiredScheduler_production_min)
    return scheduler_production_min;
  hasRequiredScheduler_production_min = 1;
  (function(exports) {
    function f2(a4, b3) {
      var c3 = a4.length;
      a4.push(b3);
      a:
        for (; 0 < c3; ) {
          var d4 = c3 - 1 >>> 1, e3 = a4[d4];
          if (0 < g2(e3, b3))
            a4[d4] = b3, a4[c3] = e3, c3 = d4;
          else
            break a;
        }
    }
    function h4(a4) {
      return 0 === a4.length ? null : a4[0];
    }
    function k3(a4) {
      if (0 === a4.length)
        return null;
      var b3 = a4[0], c3 = a4.pop();
      if (c3 !== b3) {
        a4[0] = c3;
        a:
          for (var d4 = 0, e3 = a4.length, w3 = e3 >>> 1; d4 < w3; ) {
            var m4 = 2 * (d4 + 1) - 1, C2 = a4[m4], n2 = m4 + 1, x3 = a4[n2];
            if (0 > g2(C2, c3))
              n2 < e3 && 0 > g2(x3, C2) ? (a4[d4] = x3, a4[n2] = c3, d4 = n2) : (a4[d4] = C2, a4[m4] = c3, d4 = m4);
            else if (n2 < e3 && 0 > g2(x3, c3))
              a4[d4] = x3, a4[n2] = c3, d4 = n2;
            else
              break a;
          }
      }
      return b3;
    }
    function g2(a4, b3) {
      var c3 = a4.sortIndex - b3.sortIndex;
      return 0 !== c3 ? c3 : a4.id - b3.id;
    }
    if ("object" === typeof performance && "function" === typeof performance.now) {
      var l2 = performance;
      exports.unstable_now = function() {
        return l2.now();
      };
    } else {
      var p2 = Date, q2 = p2.now();
      exports.unstable_now = function() {
        return p2.now() - q2;
      };
    }
    var r2 = [], t3 = [], u3 = 1, v2 = null, y4 = 3, z2 = false, A2 = false, B2 = false, D3 = "function" === typeof setTimeout ? setTimeout : null, E3 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G2(a4) {
      for (var b3 = h4(t3); null !== b3; ) {
        if (null === b3.callback)
          k3(t3);
        else if (b3.startTime <= a4)
          k3(t3), b3.sortIndex = b3.expirationTime, f2(r2, b3);
        else
          break;
        b3 = h4(t3);
      }
    }
    function H3(a4) {
      B2 = false;
      G2(a4);
      if (!A2)
        if (null !== h4(r2))
          A2 = true, I3(J);
        else {
          var b3 = h4(t3);
          null !== b3 && K2(H3, b3.startTime - a4);
        }
    }
    function J(a4, b3) {
      A2 = false;
      B2 && (B2 = false, E3(L2), L2 = -1);
      z2 = true;
      var c3 = y4;
      try {
        G2(b3);
        for (v2 = h4(r2); null !== v2 && (!(v2.expirationTime > b3) || a4 && !M4()); ) {
          var d4 = v2.callback;
          if ("function" === typeof d4) {
            v2.callback = null;
            y4 = v2.priorityLevel;
            var e3 = d4(v2.expirationTime <= b3);
            b3 = exports.unstable_now();
            "function" === typeof e3 ? v2.callback = e3 : v2 === h4(r2) && k3(r2);
            G2(b3);
          } else
            k3(r2);
          v2 = h4(r2);
        }
        if (null !== v2)
          var w3 = true;
        else {
          var m4 = h4(t3);
          null !== m4 && K2(H3, m4.startTime - b3);
          w3 = false;
        }
        return w3;
      } finally {
        v2 = null, y4 = c3, z2 = false;
      }
    }
    var N = false, O3 = null, L2 = -1, P2 = 5, Q2 = -1;
    function M4() {
      return exports.unstable_now() - Q2 < P2 ? false : true;
    }
    function R3() {
      if (null !== O3) {
        var a4 = exports.unstable_now();
        Q2 = a4;
        var b3 = true;
        try {
          b3 = O3(true, a4);
        } finally {
          b3 ? S4() : (N = false, O3 = null);
        }
      } else
        N = false;
    }
    var S4;
    if ("function" === typeof F2)
      S4 = function() {
        F2(R3);
      };
    else if ("undefined" !== typeof MessageChannel) {
      var T3 = new MessageChannel(), U2 = T3.port2;
      T3.port1.onmessage = R3;
      S4 = function() {
        U2.postMessage(null);
      };
    } else
      S4 = function() {
        D3(R3, 0);
      };
    function I3(a4) {
      O3 = a4;
      N || (N = true, S4());
    }
    function K2(a4, b3) {
      L2 = D3(function() {
        a4(exports.unstable_now());
      }, b3);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a4) {
      a4.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A2 || z2 || (A2 = true, I3(J));
    };
    exports.unstable_forceFrameRate = function(a4) {
      0 > a4 || 125 < a4 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a4 ? Math.floor(1e3 / a4) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y4;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h4(r2);
    };
    exports.unstable_next = function(a4) {
      switch (y4) {
        case 1:
        case 2:
        case 3:
          var b3 = 3;
          break;
        default:
          b3 = y4;
      }
      var c3 = y4;
      y4 = b3;
      try {
        return a4();
      } finally {
        y4 = c3;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a4, b3) {
      switch (a4) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a4 = 3;
      }
      var c3 = y4;
      y4 = a4;
      try {
        return b3();
      } finally {
        y4 = c3;
      }
    };
    exports.unstable_scheduleCallback = function(a4, b3, c3) {
      var d4 = exports.unstable_now();
      "object" === typeof c3 && null !== c3 ? (c3 = c3.delay, c3 = "number" === typeof c3 && 0 < c3 ? d4 + c3 : d4) : c3 = d4;
      switch (a4) {
        case 1:
          var e3 = -1;
          break;
        case 2:
          e3 = 250;
          break;
        case 5:
          e3 = 1073741823;
          break;
        case 4:
          e3 = 1e4;
          break;
        default:
          e3 = 5e3;
      }
      e3 = c3 + e3;
      a4 = { id: u3++, callback: b3, priorityLevel: a4, startTime: c3, expirationTime: e3, sortIndex: -1 };
      c3 > d4 ? (a4.sortIndex = c3, f2(t3, a4), null === h4(r2) && a4 === h4(t3) && (B2 ? (E3(L2), L2 = -1) : B2 = true, K2(H3, c3 - d4))) : (a4.sortIndex = e3, f2(r2, a4), A2 || z2 || (A2 = true, I3(J)));
      return a4;
    };
    exports.unstable_shouldYield = M4;
    exports.unstable_wrapCallback = function(a4) {
      var b3 = y4;
      return function() {
        var c3 = y4;
        y4 = b3;
        try {
          return a4.apply(this, arguments);
        } finally {
          y4 = c3;
        }
      };
    };
  })(scheduler_production_min);
  return scheduler_production_min;
}
var scheduler_development = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredScheduler_development;
function requireScheduler_development() {
  if (hasRequiredScheduler_development)
    return scheduler_development;
  hasRequiredScheduler_development = 1;
  (function(exports) {
    if (process.env.NODE_ENV !== "production") {
      (function() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node2) {
          var index2 = heap.length;
          heap.push(node2);
          siftUp(heap, node2, index2);
        }
        function peek2(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first2 = heap[0];
          var last = heap.pop();
          if (last !== first2) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first2;
        }
        function siftUp(heap, node2, i2) {
          var index2 = i2;
          while (index2 > 0) {
            var parentIndex = index2 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node2) > 0) {
              heap[parentIndex] = node2;
              heap[index2] = parent;
              index2 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node2, i2) {
          var index2 = i2;
          var length2 = heap.length;
          var halfLength = length2 >>> 1;
          while (index2 < halfLength) {
            var leftIndex = (index2 + 1) * 2 - 1;
            var left2 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right2 = heap[rightIndex];
            if (compare(left2, node2) < 0) {
              if (rightIndex < length2 && compare(right2, left2) < 0) {
                heap[index2] = right2;
                heap[rightIndex] = node2;
                index2 = rightIndex;
              } else {
                heap[index2] = left2;
                heap[leftIndex] = node2;
                index2 = leftIndex;
              }
            } else if (rightIndex < length2 && compare(right2, node2) < 0) {
              heap[index2] = right2;
              heap[rightIndex] = node2;
              index2 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a4, b3) {
          var diff = a4.sortIndex - b3.sortIndex;
          return diff !== 0 ? diff : a4.id - b3.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek2(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek2(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek2(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            var currentTime;
            if (enableProfiling)
              ;
            else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek2(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek2(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek2(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek2(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  })(scheduler_development);
  return scheduler_development;
}
var hasRequiredScheduler;
function requireScheduler() {
  if (hasRequiredScheduler)
    return scheduler.exports;
  hasRequiredScheduler = 1;
  if (process.env.NODE_ENV === "production") {
    scheduler.exports = requireScheduler_production_min();
  } else {
    scheduler.exports = requireScheduler_development();
  }
  return scheduler.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDom_production_min;
function requireReactDom_production_min() {
  if (hasRequiredReactDom_production_min)
    return reactDom_production_min;
  hasRequiredReactDom_production_min = 1;
  var aa = reactExports, ca = requireScheduler();
  function p2(a4) {
    for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a4, c3 = 1; c3 < arguments.length; c3++)
      b3 += "&args[]=" + encodeURIComponent(arguments[c3]);
    return "Minified React error #" + a4 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var da = /* @__PURE__ */ new Set(), ea = {};
  function fa(a4, b3) {
    ha(a4, b3);
    ha(a4 + "Capture", b3);
  }
  function ha(a4, b3) {
    ea[a4] = b3;
    for (a4 = 0; a4 < b3.length; a4++)
      da.add(b3[a4]);
  }
  var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
  function oa(a4) {
    if (ja.call(ma, a4))
      return true;
    if (ja.call(la, a4))
      return false;
    if (ka.test(a4))
      return ma[a4] = true;
    la[a4] = true;
    return false;
  }
  function pa(a4, b3, c3, d4) {
    if (null !== c3 && 0 === c3.type)
      return false;
    switch (typeof b3) {
      case "function":
      case "symbol":
        return true;
      case "boolean":
        if (d4)
          return false;
        if (null !== c3)
          return !c3.acceptsBooleans;
        a4 = a4.toLowerCase().slice(0, 5);
        return "data-" !== a4 && "aria-" !== a4;
      default:
        return false;
    }
  }
  function qa(a4, b3, c3, d4) {
    if (null === b3 || "undefined" === typeof b3 || pa(a4, b3, c3, d4))
      return true;
    if (d4)
      return false;
    if (null !== c3)
      switch (c3.type) {
        case 3:
          return !b3;
        case 4:
          return false === b3;
        case 5:
          return isNaN(b3);
        case 6:
          return isNaN(b3) || 1 > b3;
      }
    return false;
  }
  function v2(a4, b3, c3, d4, e3, f2, g2) {
    this.acceptsBooleans = 2 === b3 || 3 === b3 || 4 === b3;
    this.attributeName = d4;
    this.attributeNamespace = e3;
    this.mustUseProperty = c3;
    this.propertyName = a4;
    this.type = b3;
    this.sanitizeURL = f2;
    this.removeEmptyString = g2;
  }
  var z2 = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a4) {
    z2[a4] = new v2(a4, 0, false, a4, null, false, false);
  });
  [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a4) {
    var b3 = a4[0];
    z2[b3] = new v2(b3, 1, false, a4[1], null, false, false);
  });
  ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a4) {
    z2[a4] = new v2(a4, 2, false, a4.toLowerCase(), null, false, false);
  });
  ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a4) {
    z2[a4] = new v2(a4, 2, false, a4, null, false, false);
  });
  "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a4) {
    z2[a4] = new v2(a4, 3, false, a4.toLowerCase(), null, false, false);
  });
  ["checked", "multiple", "muted", "selected"].forEach(function(a4) {
    z2[a4] = new v2(a4, 3, true, a4, null, false, false);
  });
  ["capture", "download"].forEach(function(a4) {
    z2[a4] = new v2(a4, 4, false, a4, null, false, false);
  });
  ["cols", "rows", "size", "span"].forEach(function(a4) {
    z2[a4] = new v2(a4, 6, false, a4, null, false, false);
  });
  ["rowSpan", "start"].forEach(function(a4) {
    z2[a4] = new v2(a4, 5, false, a4.toLowerCase(), null, false, false);
  });
  var ra = /[\-:]([a-z])/g;
  function sa(a4) {
    return a4[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a4) {
    var b3 = a4.replace(
      ra,
      sa
    );
    z2[b3] = new v2(b3, 1, false, a4, null, false, false);
  });
  "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a4) {
    var b3 = a4.replace(ra, sa);
    z2[b3] = new v2(b3, 1, false, a4, "http://www.w3.org/1999/xlink", false, false);
  });
  ["xml:base", "xml:lang", "xml:space"].forEach(function(a4) {
    var b3 = a4.replace(ra, sa);
    z2[b3] = new v2(b3, 1, false, a4, "http://www.w3.org/XML/1998/namespace", false, false);
  });
  ["tabIndex", "crossOrigin"].forEach(function(a4) {
    z2[a4] = new v2(a4, 1, false, a4.toLowerCase(), null, false, false);
  });
  z2.xlinkHref = new v2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
  ["src", "href", "action", "formAction"].forEach(function(a4) {
    z2[a4] = new v2(a4, 1, false, a4.toLowerCase(), null, true, true);
  });
  function ta2(a4, b3, c3, d4) {
    var e3 = z2.hasOwnProperty(b3) ? z2[b3] : null;
    if (null !== e3 ? 0 !== e3.type : d4 || !(2 < b3.length) || "o" !== b3[0] && "O" !== b3[0] || "n" !== b3[1] && "N" !== b3[1])
      qa(b3, c3, e3, d4) && (c3 = null), d4 || null === e3 ? oa(b3) && (null === c3 ? a4.removeAttribute(b3) : a4.setAttribute(b3, "" + c3)) : e3.mustUseProperty ? a4[e3.propertyName] = null === c3 ? 3 === e3.type ? false : "" : c3 : (b3 = e3.attributeName, d4 = e3.attributeNamespace, null === c3 ? a4.removeAttribute(b3) : (e3 = e3.type, c3 = 3 === e3 || 4 === e3 && true === c3 ? "" : "" + c3, d4 ? a4.setAttributeNS(d4, b3, c3) : a4.setAttribute(b3, c3)));
  }
  var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
  var Ia = Symbol.for("react.offscreen");
  var Ja = Symbol.iterator;
  function Ka(a4) {
    if (null === a4 || "object" !== typeof a4)
      return null;
    a4 = Ja && a4[Ja] || a4["@@iterator"];
    return "function" === typeof a4 ? a4 : null;
  }
  var A2 = Object.assign, La;
  function Ma(a4) {
    if (void 0 === La)
      try {
        throw Error();
      } catch (c3) {
        var b3 = c3.stack.trim().match(/\n( *(at )?)/);
        La = b3 && b3[1] || "";
      }
    return "\n" + La + a4;
  }
  var Na = false;
  function Oa(a4, b3) {
    if (!a4 || Na)
      return "";
    Na = true;
    var c3 = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (b3)
        if (b3 = function() {
          throw Error();
        }, Object.defineProperty(b3.prototype, "props", { set: function() {
          throw Error();
        } }), "object" === typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b3, []);
          } catch (l2) {
            var d4 = l2;
          }
          Reflect.construct(a4, [], b3);
        } else {
          try {
            b3.call();
          } catch (l2) {
            d4 = l2;
          }
          a4.call(b3.prototype);
        }
      else {
        try {
          throw Error();
        } catch (l2) {
          d4 = l2;
        }
        a4();
      }
    } catch (l2) {
      if (l2 && d4 && "string" === typeof l2.stack) {
        for (var e3 = l2.stack.split("\n"), f2 = d4.stack.split("\n"), g2 = e3.length - 1, h4 = f2.length - 1; 1 <= g2 && 0 <= h4 && e3[g2] !== f2[h4]; )
          h4--;
        for (; 1 <= g2 && 0 <= h4; g2--, h4--)
          if (e3[g2] !== f2[h4]) {
            if (1 !== g2 || 1 !== h4) {
              do
                if (g2--, h4--, 0 > h4 || e3[g2] !== f2[h4]) {
                  var k3 = "\n" + e3[g2].replace(" at new ", " at ");
                  a4.displayName && k3.includes("<anonymous>") && (k3 = k3.replace("<anonymous>", a4.displayName));
                  return k3;
                }
              while (1 <= g2 && 0 <= h4);
            }
            break;
          }
      }
    } finally {
      Na = false, Error.prepareStackTrace = c3;
    }
    return (a4 = a4 ? a4.displayName || a4.name : "") ? Ma(a4) : "";
  }
  function Pa(a4) {
    switch (a4.tag) {
      case 5:
        return Ma(a4.type);
      case 16:
        return Ma("Lazy");
      case 13:
        return Ma("Suspense");
      case 19:
        return Ma("SuspenseList");
      case 0:
      case 2:
      case 15:
        return a4 = Oa(a4.type, false), a4;
      case 11:
        return a4 = Oa(a4.type.render, false), a4;
      case 1:
        return a4 = Oa(a4.type, true), a4;
      default:
        return "";
    }
  }
  function Qa(a4) {
    if (null == a4)
      return null;
    if ("function" === typeof a4)
      return a4.displayName || a4.name || null;
    if ("string" === typeof a4)
      return a4;
    switch (a4) {
      case ya:
        return "Fragment";
      case wa:
        return "Portal";
      case Aa:
        return "Profiler";
      case za:
        return "StrictMode";
      case Ea:
        return "Suspense";
      case Fa:
        return "SuspenseList";
    }
    if ("object" === typeof a4)
      switch (a4.$$typeof) {
        case Ca:
          return (a4.displayName || "Context") + ".Consumer";
        case Ba:
          return (a4._context.displayName || "Context") + ".Provider";
        case Da:
          var b3 = a4.render;
          a4 = a4.displayName;
          a4 || (a4 = b3.displayName || b3.name || "", a4 = "" !== a4 ? "ForwardRef(" + a4 + ")" : "ForwardRef");
          return a4;
        case Ga:
          return b3 = a4.displayName || null, null !== b3 ? b3 : Qa(a4.type) || "Memo";
        case Ha:
          b3 = a4._payload;
          a4 = a4._init;
          try {
            return Qa(a4(b3));
          } catch (c3) {
          }
      }
    return null;
  }
  function Ra(a4) {
    var b3 = a4.type;
    switch (a4.tag) {
      case 24:
        return "Cache";
      case 9:
        return (b3.displayName || "Context") + ".Consumer";
      case 10:
        return (b3._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return a4 = b3.render, a4 = a4.displayName || a4.name || "", b3.displayName || ("" !== a4 ? "ForwardRef(" + a4 + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return b3;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return Qa(b3);
      case 8:
        return b3 === za ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof b3)
          return b3.displayName || b3.name || null;
        if ("string" === typeof b3)
          return b3;
    }
    return null;
  }
  function Sa(a4) {
    switch (typeof a4) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return a4;
      case "object":
        return a4;
      default:
        return "";
    }
  }
  function Ta(a4) {
    var b3 = a4.type;
    return (a4 = a4.nodeName) && "input" === a4.toLowerCase() && ("checkbox" === b3 || "radio" === b3);
  }
  function Ua(a4) {
    var b3 = Ta(a4) ? "checked" : "value", c3 = Object.getOwnPropertyDescriptor(a4.constructor.prototype, b3), d4 = "" + a4[b3];
    if (!a4.hasOwnProperty(b3) && "undefined" !== typeof c3 && "function" === typeof c3.get && "function" === typeof c3.set) {
      var e3 = c3.get, f2 = c3.set;
      Object.defineProperty(a4, b3, { configurable: true, get: function() {
        return e3.call(this);
      }, set: function(a5) {
        d4 = "" + a5;
        f2.call(this, a5);
      } });
      Object.defineProperty(a4, b3, { enumerable: c3.enumerable });
      return { getValue: function() {
        return d4;
      }, setValue: function(a5) {
        d4 = "" + a5;
      }, stopTracking: function() {
        a4._valueTracker = null;
        delete a4[b3];
      } };
    }
  }
  function Va(a4) {
    a4._valueTracker || (a4._valueTracker = Ua(a4));
  }
  function Wa(a4) {
    if (!a4)
      return false;
    var b3 = a4._valueTracker;
    if (!b3)
      return true;
    var c3 = b3.getValue();
    var d4 = "";
    a4 && (d4 = Ta(a4) ? a4.checked ? "true" : "false" : a4.value);
    a4 = d4;
    return a4 !== c3 ? (b3.setValue(a4), true) : false;
  }
  function Xa(a4) {
    a4 = a4 || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a4)
      return null;
    try {
      return a4.activeElement || a4.body;
    } catch (b3) {
      return a4.body;
    }
  }
  function Ya(a4, b3) {
    var c3 = b3.checked;
    return A2({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c3 ? c3 : a4._wrapperState.initialChecked });
  }
  function Za(a4, b3) {
    var c3 = null == b3.defaultValue ? "" : b3.defaultValue, d4 = null != b3.checked ? b3.checked : b3.defaultChecked;
    c3 = Sa(null != b3.value ? b3.value : c3);
    a4._wrapperState = { initialChecked: d4, initialValue: c3, controlled: "checkbox" === b3.type || "radio" === b3.type ? null != b3.checked : null != b3.value };
  }
  function ab(a4, b3) {
    b3 = b3.checked;
    null != b3 && ta2(a4, "checked", b3, false);
  }
  function bb(a4, b3) {
    ab(a4, b3);
    var c3 = Sa(b3.value), d4 = b3.type;
    if (null != c3)
      if ("number" === d4) {
        if (0 === c3 && "" === a4.value || a4.value != c3)
          a4.value = "" + c3;
      } else
        a4.value !== "" + c3 && (a4.value = "" + c3);
    else if ("submit" === d4 || "reset" === d4) {
      a4.removeAttribute("value");
      return;
    }
    b3.hasOwnProperty("value") ? cb(a4, b3.type, c3) : b3.hasOwnProperty("defaultValue") && cb(a4, b3.type, Sa(b3.defaultValue));
    null == b3.checked && null != b3.defaultChecked && (a4.defaultChecked = !!b3.defaultChecked);
  }
  function db(a4, b3, c3) {
    if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
      var d4 = b3.type;
      if (!("submit" !== d4 && "reset" !== d4 || void 0 !== b3.value && null !== b3.value))
        return;
      b3 = "" + a4._wrapperState.initialValue;
      c3 || b3 === a4.value || (a4.value = b3);
      a4.defaultValue = b3;
    }
    c3 = a4.name;
    "" !== c3 && (a4.name = "");
    a4.defaultChecked = !!a4._wrapperState.initialChecked;
    "" !== c3 && (a4.name = c3);
  }
  function cb(a4, b3, c3) {
    if ("number" !== b3 || Xa(a4.ownerDocument) !== a4)
      null == c3 ? a4.defaultValue = "" + a4._wrapperState.initialValue : a4.defaultValue !== "" + c3 && (a4.defaultValue = "" + c3);
  }
  var eb = Array.isArray;
  function fb(a4, b3, c3, d4) {
    a4 = a4.options;
    if (b3) {
      b3 = {};
      for (var e3 = 0; e3 < c3.length; e3++)
        b3["$" + c3[e3]] = true;
      for (c3 = 0; c3 < a4.length; c3++)
        e3 = b3.hasOwnProperty("$" + a4[c3].value), a4[c3].selected !== e3 && (a4[c3].selected = e3), e3 && d4 && (a4[c3].defaultSelected = true);
    } else {
      c3 = "" + Sa(c3);
      b3 = null;
      for (e3 = 0; e3 < a4.length; e3++) {
        if (a4[e3].value === c3) {
          a4[e3].selected = true;
          d4 && (a4[e3].defaultSelected = true);
          return;
        }
        null !== b3 || a4[e3].disabled || (b3 = a4[e3]);
      }
      null !== b3 && (b3.selected = true);
    }
  }
  function gb(a4, b3) {
    if (null != b3.dangerouslySetInnerHTML)
      throw Error(p2(91));
    return A2({}, b3, { value: void 0, defaultValue: void 0, children: "" + a4._wrapperState.initialValue });
  }
  function hb(a4, b3) {
    var c3 = b3.value;
    if (null == c3) {
      c3 = b3.children;
      b3 = b3.defaultValue;
      if (null != c3) {
        if (null != b3)
          throw Error(p2(92));
        if (eb(c3)) {
          if (1 < c3.length)
            throw Error(p2(93));
          c3 = c3[0];
        }
        b3 = c3;
      }
      null == b3 && (b3 = "");
      c3 = b3;
    }
    a4._wrapperState = { initialValue: Sa(c3) };
  }
  function ib(a4, b3) {
    var c3 = Sa(b3.value), d4 = Sa(b3.defaultValue);
    null != c3 && (c3 = "" + c3, c3 !== a4.value && (a4.value = c3), null == b3.defaultValue && a4.defaultValue !== c3 && (a4.defaultValue = c3));
    null != d4 && (a4.defaultValue = "" + d4);
  }
  function jb(a4) {
    var b3 = a4.textContent;
    b3 === a4._wrapperState.initialValue && "" !== b3 && null !== b3 && (a4.value = b3);
  }
  function kb(a4) {
    switch (a4) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function lb(a4, b3) {
    return null == a4 || "http://www.w3.org/1999/xhtml" === a4 ? kb(b3) : "http://www.w3.org/2000/svg" === a4 && "foreignObject" === b3 ? "http://www.w3.org/1999/xhtml" : a4;
  }
  var mb, nb = function(a4) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b3, c3, d4, e3) {
      MSApp.execUnsafeLocalFunction(function() {
        return a4(b3, c3, d4, e3);
      });
    } : a4;
  }(function(a4, b3) {
    if ("http://www.w3.org/2000/svg" !== a4.namespaceURI || "innerHTML" in a4)
      a4.innerHTML = b3;
    else {
      mb = mb || document.createElement("div");
      mb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
      for (b3 = mb.firstChild; a4.firstChild; )
        a4.removeChild(a4.firstChild);
      for (; b3.firstChild; )
        a4.appendChild(b3.firstChild);
    }
  });
  function ob(a4, b3) {
    if (b3) {
      var c3 = a4.firstChild;
      if (c3 && c3 === a4.lastChild && 3 === c3.nodeType) {
        c3.nodeValue = b3;
        return;
      }
    }
    a4.textContent = b3;
  }
  var pb = {
    animationIterationCount: true,
    aspectRatio: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  }, qb = ["Webkit", "ms", "Moz", "O"];
  Object.keys(pb).forEach(function(a4) {
    qb.forEach(function(b3) {
      b3 = b3 + a4.charAt(0).toUpperCase() + a4.substring(1);
      pb[b3] = pb[a4];
    });
  });
  function rb(a4, b3, c3) {
    return null == b3 || "boolean" === typeof b3 || "" === b3 ? "" : c3 || "number" !== typeof b3 || 0 === b3 || pb.hasOwnProperty(a4) && pb[a4] ? ("" + b3).trim() : b3 + "px";
  }
  function sb(a4, b3) {
    a4 = a4.style;
    for (var c3 in b3)
      if (b3.hasOwnProperty(c3)) {
        var d4 = 0 === c3.indexOf("--"), e3 = rb(c3, b3[c3], d4);
        "float" === c3 && (c3 = "cssFloat");
        d4 ? a4.setProperty(c3, e3) : a4[c3] = e3;
      }
  }
  var tb = A2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
  function ub(a4, b3) {
    if (b3) {
      if (tb[a4] && (null != b3.children || null != b3.dangerouslySetInnerHTML))
        throw Error(p2(137, a4));
      if (null != b3.dangerouslySetInnerHTML) {
        if (null != b3.children)
          throw Error(p2(60));
        if ("object" !== typeof b3.dangerouslySetInnerHTML || !("__html" in b3.dangerouslySetInnerHTML))
          throw Error(p2(61));
      }
      if (null != b3.style && "object" !== typeof b3.style)
        throw Error(p2(62));
    }
  }
  function vb(a4, b3) {
    if (-1 === a4.indexOf("-"))
      return "string" === typeof b3.is;
    switch (a4) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var wb = null;
  function xb(a4) {
    a4 = a4.target || a4.srcElement || window;
    a4.correspondingUseElement && (a4 = a4.correspondingUseElement);
    return 3 === a4.nodeType ? a4.parentNode : a4;
  }
  var yb = null, zb = null, Ab = null;
  function Bb(a4) {
    if (a4 = Cb(a4)) {
      if ("function" !== typeof yb)
        throw Error(p2(280));
      var b3 = a4.stateNode;
      b3 && (b3 = Db(b3), yb(a4.stateNode, a4.type, b3));
    }
  }
  function Eb(a4) {
    zb ? Ab ? Ab.push(a4) : Ab = [a4] : zb = a4;
  }
  function Fb() {
    if (zb) {
      var a4 = zb, b3 = Ab;
      Ab = zb = null;
      Bb(a4);
      if (b3)
        for (a4 = 0; a4 < b3.length; a4++)
          Bb(b3[a4]);
    }
  }
  function Gb(a4, b3) {
    return a4(b3);
  }
  function Hb() {
  }
  var Ib = false;
  function Jb(a4, b3, c3) {
    if (Ib)
      return a4(b3, c3);
    Ib = true;
    try {
      return Gb(a4, b3, c3);
    } finally {
      if (Ib = false, null !== zb || null !== Ab)
        Hb(), Fb();
    }
  }
  function Kb(a4, b3) {
    var c3 = a4.stateNode;
    if (null === c3)
      return null;
    var d4 = Db(c3);
    if (null === d4)
      return null;
    c3 = d4[b3];
    a:
      switch (b3) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d4 = !d4.disabled) || (a4 = a4.type, d4 = !("button" === a4 || "input" === a4 || "select" === a4 || "textarea" === a4));
          a4 = !d4;
          break a;
        default:
          a4 = false;
      }
    if (a4)
      return null;
    if (c3 && "function" !== typeof c3)
      throw Error(p2(231, b3, typeof c3));
    return c3;
  }
  var Lb = false;
  if (ia)
    try {
      var Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a4) {
      Lb = false;
    }
  function Nb(a4, b3, c3, d4, e3, f2, g2, h4, k3) {
    var l2 = Array.prototype.slice.call(arguments, 3);
    try {
      b3.apply(c3, l2);
    } catch (m4) {
      this.onError(m4);
    }
  }
  var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a4) {
    Ob = true;
    Pb = a4;
  } };
  function Tb(a4, b3, c3, d4, e3, f2, g2, h4, k3) {
    Ob = false;
    Pb = null;
    Nb.apply(Sb, arguments);
  }
  function Ub(a4, b3, c3, d4, e3, f2, g2, h4, k3) {
    Tb.apply(this, arguments);
    if (Ob) {
      if (Ob) {
        var l2 = Pb;
        Ob = false;
        Pb = null;
      } else
        throw Error(p2(198));
      Qb || (Qb = true, Rb = l2);
    }
  }
  function Vb(a4) {
    var b3 = a4, c3 = a4;
    if (a4.alternate)
      for (; b3.return; )
        b3 = b3.return;
    else {
      a4 = b3;
      do
        b3 = a4, 0 !== (b3.flags & 4098) && (c3 = b3.return), a4 = b3.return;
      while (a4);
    }
    return 3 === b3.tag ? c3 : null;
  }
  function Wb(a4) {
    if (13 === a4.tag) {
      var b3 = a4.memoizedState;
      null === b3 && (a4 = a4.alternate, null !== a4 && (b3 = a4.memoizedState));
      if (null !== b3)
        return b3.dehydrated;
    }
    return null;
  }
  function Xb(a4) {
    if (Vb(a4) !== a4)
      throw Error(p2(188));
  }
  function Yb(a4) {
    var b3 = a4.alternate;
    if (!b3) {
      b3 = Vb(a4);
      if (null === b3)
        throw Error(p2(188));
      return b3 !== a4 ? null : a4;
    }
    for (var c3 = a4, d4 = b3; ; ) {
      var e3 = c3.return;
      if (null === e3)
        break;
      var f2 = e3.alternate;
      if (null === f2) {
        d4 = e3.return;
        if (null !== d4) {
          c3 = d4;
          continue;
        }
        break;
      }
      if (e3.child === f2.child) {
        for (f2 = e3.child; f2; ) {
          if (f2 === c3)
            return Xb(e3), a4;
          if (f2 === d4)
            return Xb(e3), b3;
          f2 = f2.sibling;
        }
        throw Error(p2(188));
      }
      if (c3.return !== d4.return)
        c3 = e3, d4 = f2;
      else {
        for (var g2 = false, h4 = e3.child; h4; ) {
          if (h4 === c3) {
            g2 = true;
            c3 = e3;
            d4 = f2;
            break;
          }
          if (h4 === d4) {
            g2 = true;
            d4 = e3;
            c3 = f2;
            break;
          }
          h4 = h4.sibling;
        }
        if (!g2) {
          for (h4 = f2.child; h4; ) {
            if (h4 === c3) {
              g2 = true;
              c3 = f2;
              d4 = e3;
              break;
            }
            if (h4 === d4) {
              g2 = true;
              d4 = f2;
              c3 = e3;
              break;
            }
            h4 = h4.sibling;
          }
          if (!g2)
            throw Error(p2(189));
        }
      }
      if (c3.alternate !== d4)
        throw Error(p2(190));
    }
    if (3 !== c3.tag)
      throw Error(p2(188));
    return c3.stateNode.current === c3 ? a4 : b3;
  }
  function Zb(a4) {
    a4 = Yb(a4);
    return null !== a4 ? $b(a4) : null;
  }
  function $b(a4) {
    if (5 === a4.tag || 6 === a4.tag)
      return a4;
    for (a4 = a4.child; null !== a4; ) {
      var b3 = $b(a4);
      if (null !== b3)
        return b3;
      a4 = a4.sibling;
    }
    return null;
  }
  var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B2 = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
  function mc(a4) {
    if (lc && "function" === typeof lc.onCommitFiberRoot)
      try {
        lc.onCommitFiberRoot(kc, a4, void 0, 128 === (a4.current.flags & 128));
      } catch (b3) {
      }
  }
  var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
  function nc(a4) {
    a4 >>>= 0;
    return 0 === a4 ? 32 : 31 - (pc(a4) / qc | 0) | 0;
  }
  var rc = 64, sc = 4194304;
  function tc(a4) {
    switch (a4 & -a4) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a4 & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return a4 & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return a4;
    }
  }
  function uc(a4, b3) {
    var c3 = a4.pendingLanes;
    if (0 === c3)
      return 0;
    var d4 = 0, e3 = a4.suspendedLanes, f2 = a4.pingedLanes, g2 = c3 & 268435455;
    if (0 !== g2) {
      var h4 = g2 & ~e3;
      0 !== h4 ? d4 = tc(h4) : (f2 &= g2, 0 !== f2 && (d4 = tc(f2)));
    } else
      g2 = c3 & ~e3, 0 !== g2 ? d4 = tc(g2) : 0 !== f2 && (d4 = tc(f2));
    if (0 === d4)
      return 0;
    if (0 !== b3 && b3 !== d4 && 0 === (b3 & e3) && (e3 = d4 & -d4, f2 = b3 & -b3, e3 >= f2 || 16 === e3 && 0 !== (f2 & 4194240)))
      return b3;
    0 !== (d4 & 4) && (d4 |= c3 & 16);
    b3 = a4.entangledLanes;
    if (0 !== b3)
      for (a4 = a4.entanglements, b3 &= d4; 0 < b3; )
        c3 = 31 - oc(b3), e3 = 1 << c3, d4 |= a4[c3], b3 &= ~e3;
    return d4;
  }
  function vc(a4, b3) {
    switch (a4) {
      case 1:
      case 2:
      case 4:
        return b3 + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return b3 + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function wc(a4, b3) {
    for (var c3 = a4.suspendedLanes, d4 = a4.pingedLanes, e3 = a4.expirationTimes, f2 = a4.pendingLanes; 0 < f2; ) {
      var g2 = 31 - oc(f2), h4 = 1 << g2, k3 = e3[g2];
      if (-1 === k3) {
        if (0 === (h4 & c3) || 0 !== (h4 & d4))
          e3[g2] = vc(h4, b3);
      } else
        k3 <= b3 && (a4.expiredLanes |= h4);
      f2 &= ~h4;
    }
  }
  function xc(a4) {
    a4 = a4.pendingLanes & -1073741825;
    return 0 !== a4 ? a4 : a4 & 1073741824 ? 1073741824 : 0;
  }
  function yc() {
    var a4 = rc;
    rc <<= 1;
    0 === (rc & 4194240) && (rc = 64);
    return a4;
  }
  function zc(a4) {
    for (var b3 = [], c3 = 0; 31 > c3; c3++)
      b3.push(a4);
    return b3;
  }
  function Ac(a4, b3, c3) {
    a4.pendingLanes |= b3;
    536870912 !== b3 && (a4.suspendedLanes = 0, a4.pingedLanes = 0);
    a4 = a4.eventTimes;
    b3 = 31 - oc(b3);
    a4[b3] = c3;
  }
  function Bc(a4, b3) {
    var c3 = a4.pendingLanes & ~b3;
    a4.pendingLanes = b3;
    a4.suspendedLanes = 0;
    a4.pingedLanes = 0;
    a4.expiredLanes &= b3;
    a4.mutableReadLanes &= b3;
    a4.entangledLanes &= b3;
    b3 = a4.entanglements;
    var d4 = a4.eventTimes;
    for (a4 = a4.expirationTimes; 0 < c3; ) {
      var e3 = 31 - oc(c3), f2 = 1 << e3;
      b3[e3] = 0;
      d4[e3] = -1;
      a4[e3] = -1;
      c3 &= ~f2;
    }
  }
  function Cc(a4, b3) {
    var c3 = a4.entangledLanes |= b3;
    for (a4 = a4.entanglements; c3; ) {
      var d4 = 31 - oc(c3), e3 = 1 << d4;
      e3 & b3 | a4[d4] & b3 && (a4[d4] |= b3);
      c3 &= ~e3;
    }
  }
  var C2 = 0;
  function Dc(a4) {
    a4 &= -a4;
    return 1 < a4 ? 4 < a4 ? 0 !== (a4 & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Sc(a4, b3) {
    switch (a4) {
      case "focusin":
      case "focusout":
        Lc = null;
        break;
      case "dragenter":
      case "dragleave":
        Mc = null;
        break;
      case "mouseover":
      case "mouseout":
        Nc = null;
        break;
      case "pointerover":
      case "pointerout":
        Oc.delete(b3.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Pc.delete(b3.pointerId);
    }
  }
  function Tc(a4, b3, c3, d4, e3, f2) {
    if (null === a4 || a4.nativeEvent !== f2)
      return a4 = { blockedOn: b3, domEventName: c3, eventSystemFlags: d4, nativeEvent: f2, targetContainers: [e3] }, null !== b3 && (b3 = Cb(b3), null !== b3 && Fc(b3)), a4;
    a4.eventSystemFlags |= d4;
    b3 = a4.targetContainers;
    null !== e3 && -1 === b3.indexOf(e3) && b3.push(e3);
    return a4;
  }
  function Uc(a4, b3, c3, d4, e3) {
    switch (b3) {
      case "focusin":
        return Lc = Tc(Lc, a4, b3, c3, d4, e3), true;
      case "dragenter":
        return Mc = Tc(Mc, a4, b3, c3, d4, e3), true;
      case "mouseover":
        return Nc = Tc(Nc, a4, b3, c3, d4, e3), true;
      case "pointerover":
        var f2 = e3.pointerId;
        Oc.set(f2, Tc(Oc.get(f2) || null, a4, b3, c3, d4, e3));
        return true;
      case "gotpointercapture":
        return f2 = e3.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a4, b3, c3, d4, e3)), true;
    }
    return false;
  }
  function Vc(a4) {
    var b3 = Wc(a4.target);
    if (null !== b3) {
      var c3 = Vb(b3);
      if (null !== c3) {
        if (b3 = c3.tag, 13 === b3) {
          if (b3 = Wb(c3), null !== b3) {
            a4.blockedOn = b3;
            Ic(a4.priority, function() {
              Gc(c3);
            });
            return;
          }
        } else if (3 === b3 && c3.stateNode.current.memoizedState.isDehydrated) {
          a4.blockedOn = 3 === c3.tag ? c3.stateNode.containerInfo : null;
          return;
        }
      }
    }
    a4.blockedOn = null;
  }
  function Xc(a4) {
    if (null !== a4.blockedOn)
      return false;
    for (var b3 = a4.targetContainers; 0 < b3.length; ) {
      var c3 = Yc(a4.domEventName, a4.eventSystemFlags, b3[0], a4.nativeEvent);
      if (null === c3) {
        c3 = a4.nativeEvent;
        var d4 = new c3.constructor(c3.type, c3);
        wb = d4;
        c3.target.dispatchEvent(d4);
        wb = null;
      } else
        return b3 = Cb(c3), null !== b3 && Fc(b3), a4.blockedOn = c3, false;
      b3.shift();
    }
    return true;
  }
  function Zc(a4, b3, c3) {
    Xc(a4) && c3.delete(b3);
  }
  function $c() {
    Jc = false;
    null !== Lc && Xc(Lc) && (Lc = null);
    null !== Mc && Xc(Mc) && (Mc = null);
    null !== Nc && Xc(Nc) && (Nc = null);
    Oc.forEach(Zc);
    Pc.forEach(Zc);
  }
  function ad(a4, b3) {
    a4.blockedOn === b3 && (a4.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
  }
  function bd(a4) {
    function b3(b4) {
      return ad(b4, a4);
    }
    if (0 < Kc.length) {
      ad(Kc[0], a4);
      for (var c3 = 1; c3 < Kc.length; c3++) {
        var d4 = Kc[c3];
        d4.blockedOn === a4 && (d4.blockedOn = null);
      }
    }
    null !== Lc && ad(Lc, a4);
    null !== Mc && ad(Mc, a4);
    null !== Nc && ad(Nc, a4);
    Oc.forEach(b3);
    Pc.forEach(b3);
    for (c3 = 0; c3 < Qc.length; c3++)
      d4 = Qc[c3], d4.blockedOn === a4 && (d4.blockedOn = null);
    for (; 0 < Qc.length && (c3 = Qc[0], null === c3.blockedOn); )
      Vc(c3), null === c3.blockedOn && Qc.shift();
  }
  var cd = ua.ReactCurrentBatchConfig, dd = true;
  function ed(a4, b3, c3, d4) {
    var e3 = C2, f2 = cd.transition;
    cd.transition = null;
    try {
      C2 = 1, fd(a4, b3, c3, d4);
    } finally {
      C2 = e3, cd.transition = f2;
    }
  }
  function gd(a4, b3, c3, d4) {
    var e3 = C2, f2 = cd.transition;
    cd.transition = null;
    try {
      C2 = 4, fd(a4, b3, c3, d4);
    } finally {
      C2 = e3, cd.transition = f2;
    }
  }
  function fd(a4, b3, c3, d4) {
    if (dd) {
      var e3 = Yc(a4, b3, c3, d4);
      if (null === e3)
        hd(a4, b3, d4, id, c3), Sc(a4, d4);
      else if (Uc(e3, a4, b3, c3, d4))
        d4.stopPropagation();
      else if (Sc(a4, d4), b3 & 4 && -1 < Rc.indexOf(a4)) {
        for (; null !== e3; ) {
          var f2 = Cb(e3);
          null !== f2 && Ec(f2);
          f2 = Yc(a4, b3, c3, d4);
          null === f2 && hd(a4, b3, d4, id, c3);
          if (f2 === e3)
            break;
          e3 = f2;
        }
        null !== e3 && d4.stopPropagation();
      } else
        hd(a4, b3, d4, null, c3);
    }
  }
  var id = null;
  function Yc(a4, b3, c3, d4) {
    id = null;
    a4 = xb(d4);
    a4 = Wc(a4);
    if (null !== a4)
      if (b3 = Vb(a4), null === b3)
        a4 = null;
      else if (c3 = b3.tag, 13 === c3) {
        a4 = Wb(b3);
        if (null !== a4)
          return a4;
        a4 = null;
      } else if (3 === c3) {
        if (b3.stateNode.current.memoizedState.isDehydrated)
          return 3 === b3.tag ? b3.stateNode.containerInfo : null;
        a4 = null;
      } else
        b3 !== a4 && (a4 = null);
    id = a4;
    return null;
  }
  function jd(a4) {
    switch (a4) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (ec()) {
          case fc:
            return 1;
          case gc:
            return 4;
          case hc:
          case ic:
            return 16;
          case jc:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var kd = null, ld = null, md = null;
  function nd() {
    if (md)
      return md;
    var a4, b3 = ld, c3 = b3.length, d4, e3 = "value" in kd ? kd.value : kd.textContent, f2 = e3.length;
    for (a4 = 0; a4 < c3 && b3[a4] === e3[a4]; a4++)
      ;
    var g2 = c3 - a4;
    for (d4 = 1; d4 <= g2 && b3[c3 - d4] === e3[f2 - d4]; d4++)
      ;
    return md = e3.slice(a4, 1 < d4 ? 1 - d4 : void 0);
  }
  function od(a4) {
    var b3 = a4.keyCode;
    "charCode" in a4 ? (a4 = a4.charCode, 0 === a4 && 13 === b3 && (a4 = 13)) : a4 = b3;
    10 === a4 && (a4 = 13);
    return 32 <= a4 || 13 === a4 ? a4 : 0;
  }
  function pd() {
    return true;
  }
  function qd() {
    return false;
  }
  function rd(a4) {
    function b3(b4, d4, e3, f2, g2) {
      this._reactName = b4;
      this._targetInst = e3;
      this.type = d4;
      this.nativeEvent = f2;
      this.target = g2;
      this.currentTarget = null;
      for (var c3 in a4)
        a4.hasOwnProperty(c3) && (b4 = a4[c3], this[c3] = b4 ? b4(f2) : f2[c3]);
      this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
      this.isPropagationStopped = qd;
      return this;
    }
    A2(b3.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var a5 = this.nativeEvent;
      a5 && (a5.preventDefault ? a5.preventDefault() : "unknown" !== typeof a5.returnValue && (a5.returnValue = false), this.isDefaultPrevented = pd);
    }, stopPropagation: function() {
      var a5 = this.nativeEvent;
      a5 && (a5.stopPropagation ? a5.stopPropagation() : "unknown" !== typeof a5.cancelBubble && (a5.cancelBubble = true), this.isPropagationStopped = pd);
    }, persist: function() {
    }, isPersistent: pd });
    return b3;
  }
  var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a4) {
    return a4.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A2({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a4) {
    return void 0 === a4.relatedTarget ? a4.fromElement === a4.srcElement ? a4.toElement : a4.fromElement : a4.relatedTarget;
  }, movementX: function(a4) {
    if ("movementX" in a4)
      return a4.movementX;
    a4 !== yd && (yd && "mousemove" === a4.type ? (wd = a4.screenX - yd.screenX, xd = a4.screenY - yd.screenY) : xd = wd = 0, yd = a4);
    return wd;
  }, movementY: function(a4) {
    return "movementY" in a4 ? a4.movementY : xd;
  } }), Bd = rd(Ad), Cd = A2({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A2({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A2({}, sd, { clipboardData: function(a4) {
    return "clipboardData" in a4 ? a4.clipboardData : window.clipboardData;
  } }), Jd = rd(Id), Kd = A2({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
  function Pd(a4) {
    var b3 = this.nativeEvent;
    return b3.getModifierState ? b3.getModifierState(a4) : (a4 = Od[a4]) ? !!b3[a4] : false;
  }
  function zd() {
    return Pd;
  }
  var Qd = A2({}, ud, { key: function(a4) {
    if (a4.key) {
      var b3 = Md[a4.key] || a4.key;
      if ("Unidentified" !== b3)
        return b3;
    }
    return "keypress" === a4.type ? (a4 = od(a4), 13 === a4 ? "Enter" : String.fromCharCode(a4)) : "keydown" === a4.type || "keyup" === a4.type ? Nd[a4.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a4) {
    return "keypress" === a4.type ? od(a4) : 0;
  }, keyCode: function(a4) {
    return "keydown" === a4.type || "keyup" === a4.type ? a4.keyCode : 0;
  }, which: function(a4) {
    return "keypress" === a4.type ? od(a4) : "keydown" === a4.type || "keyup" === a4.type ? a4.keyCode : 0;
  } }), Rd = rd(Qd), Sd = A2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A2({}, Ad, {
    deltaX: function(a4) {
      return "deltaX" in a4 ? a4.deltaX : "wheelDeltaX" in a4 ? -a4.wheelDeltaX : 0;
    },
    deltaY: function(a4) {
      return "deltaY" in a4 ? a4.deltaY : "wheelDeltaY" in a4 ? -a4.wheelDeltaY : "wheelDelta" in a4 ? -a4.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae2 = ia && "CompositionEvent" in window, be2 = null;
  ia && "documentMode" in document && (be2 = document.documentMode);
  var ce = ia && "TextEvent" in window && !be2, de2 = ia && (!ae2 || be2 && 8 < be2 && 11 >= be2), ee = String.fromCharCode(32), fe2 = false;
  function ge2(a4, b3) {
    switch (a4) {
      case "keyup":
        return -1 !== $d.indexOf(b3.keyCode);
      case "keydown":
        return 229 !== b3.keyCode;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function he2(a4) {
    a4 = a4.detail;
    return "object" === typeof a4 && "data" in a4 ? a4.data : null;
  }
  var ie2 = false;
  function je2(a4, b3) {
    switch (a4) {
      case "compositionend":
        return he2(b3);
      case "keypress":
        if (32 !== b3.which)
          return null;
        fe2 = true;
        return ee;
      case "textInput":
        return a4 = b3.data, a4 === ee && fe2 ? null : a4;
      default:
        return null;
    }
  }
  function ke2(a4, b3) {
    if (ie2)
      return "compositionend" === a4 || !ae2 && ge2(a4, b3) ? (a4 = nd(), md = ld = kd = null, ie2 = false, a4) : null;
    switch (a4) {
      case "paste":
        return null;
      case "keypress":
        if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
          if (b3.char && 1 < b3.char.length)
            return b3.char;
          if (b3.which)
            return String.fromCharCode(b3.which);
        }
        return null;
      case "compositionend":
        return de2 && "ko" !== b3.locale ? null : b3.data;
      default:
        return null;
    }
  }
  var le2 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
  function me2(a4) {
    var b3 = a4 && a4.nodeName && a4.nodeName.toLowerCase();
    return "input" === b3 ? !!le2[a4.type] : "textarea" === b3 ? true : false;
  }
  function ne(a4, b3, c3, d4) {
    Eb(d4);
    b3 = oe(b3, "onChange");
    0 < b3.length && (c3 = new td("onChange", "change", null, c3, d4), a4.push({ event: c3, listeners: b3 }));
  }
  var pe = null, qe2 = null;
  function re(a4) {
    se(a4, 0);
  }
  function te(a4) {
    var b3 = ue2(a4);
    if (Wa(b3))
      return a4;
  }
  function ve2(a4, b3) {
    if ("change" === a4)
      return b3;
  }
  var we2 = false;
  if (ia) {
    var xe2;
    if (ia) {
      var ye2 = "oninput" in document;
      if (!ye2) {
        var ze = document.createElement("div");
        ze.setAttribute("oninput", "return;");
        ye2 = "function" === typeof ze.oninput;
      }
      xe2 = ye2;
    } else
      xe2 = false;
    we2 = xe2 && (!document.documentMode || 9 < document.documentMode);
  }
  function Ae2() {
    pe && (pe.detachEvent("onpropertychange", Be2), qe2 = pe = null);
  }
  function Be2(a4) {
    if ("value" === a4.propertyName && te(qe2)) {
      var b3 = [];
      ne(b3, qe2, a4, xb(a4));
      Jb(re, b3);
    }
  }
  function Ce2(a4, b3, c3) {
    "focusin" === a4 ? (Ae2(), pe = b3, qe2 = c3, pe.attachEvent("onpropertychange", Be2)) : "focusout" === a4 && Ae2();
  }
  function De2(a4) {
    if ("selectionchange" === a4 || "keyup" === a4 || "keydown" === a4)
      return te(qe2);
  }
  function Ee2(a4, b3) {
    if ("click" === a4)
      return te(b3);
  }
  function Fe2(a4, b3) {
    if ("input" === a4 || "change" === a4)
      return te(b3);
  }
  function Ge2(a4, b3) {
    return a4 === b3 && (0 !== a4 || 1 / a4 === 1 / b3) || a4 !== a4 && b3 !== b3;
  }
  var He2 = "function" === typeof Object.is ? Object.is : Ge2;
  function Ie2(a4, b3) {
    if (He2(a4, b3))
      return true;
    if ("object" !== typeof a4 || null === a4 || "object" !== typeof b3 || null === b3)
      return false;
    var c3 = Object.keys(a4), d4 = Object.keys(b3);
    if (c3.length !== d4.length)
      return false;
    for (d4 = 0; d4 < c3.length; d4++) {
      var e3 = c3[d4];
      if (!ja.call(b3, e3) || !He2(a4[e3], b3[e3]))
        return false;
    }
    return true;
  }
  function Je2(a4) {
    for (; a4 && a4.firstChild; )
      a4 = a4.firstChild;
    return a4;
  }
  function Ke2(a4, b3) {
    var c3 = Je2(a4);
    a4 = 0;
    for (var d4; c3; ) {
      if (3 === c3.nodeType) {
        d4 = a4 + c3.textContent.length;
        if (a4 <= b3 && d4 >= b3)
          return { node: c3, offset: b3 - a4 };
        a4 = d4;
      }
      a: {
        for (; c3; ) {
          if (c3.nextSibling) {
            c3 = c3.nextSibling;
            break a;
          }
          c3 = c3.parentNode;
        }
        c3 = void 0;
      }
      c3 = Je2(c3);
    }
  }
  function Le2(a4, b3) {
    return a4 && b3 ? a4 === b3 ? true : a4 && 3 === a4.nodeType ? false : b3 && 3 === b3.nodeType ? Le2(a4, b3.parentNode) : "contains" in a4 ? a4.contains(b3) : a4.compareDocumentPosition ? !!(a4.compareDocumentPosition(b3) & 16) : false : false;
  }
  function Me2() {
    for (var a4 = window, b3 = Xa(); b3 instanceof a4.HTMLIFrameElement; ) {
      try {
        var c3 = "string" === typeof b3.contentWindow.location.href;
      } catch (d4) {
        c3 = false;
      }
      if (c3)
        a4 = b3.contentWindow;
      else
        break;
      b3 = Xa(a4.document);
    }
    return b3;
  }
  function Ne2(a4) {
    var b3 = a4 && a4.nodeName && a4.nodeName.toLowerCase();
    return b3 && ("input" === b3 && ("text" === a4.type || "search" === a4.type || "tel" === a4.type || "url" === a4.type || "password" === a4.type) || "textarea" === b3 || "true" === a4.contentEditable);
  }
  function Oe2(a4) {
    var b3 = Me2(), c3 = a4.focusedElem, d4 = a4.selectionRange;
    if (b3 !== c3 && c3 && c3.ownerDocument && Le2(c3.ownerDocument.documentElement, c3)) {
      if (null !== d4 && Ne2(c3)) {
        if (b3 = d4.start, a4 = d4.end, void 0 === a4 && (a4 = b3), "selectionStart" in c3)
          c3.selectionStart = b3, c3.selectionEnd = Math.min(a4, c3.value.length);
        else if (a4 = (b3 = c3.ownerDocument || document) && b3.defaultView || window, a4.getSelection) {
          a4 = a4.getSelection();
          var e3 = c3.textContent.length, f2 = Math.min(d4.start, e3);
          d4 = void 0 === d4.end ? f2 : Math.min(d4.end, e3);
          !a4.extend && f2 > d4 && (e3 = d4, d4 = f2, f2 = e3);
          e3 = Ke2(c3, f2);
          var g2 = Ke2(
            c3,
            d4
          );
          e3 && g2 && (1 !== a4.rangeCount || a4.anchorNode !== e3.node || a4.anchorOffset !== e3.offset || a4.focusNode !== g2.node || a4.focusOffset !== g2.offset) && (b3 = b3.createRange(), b3.setStart(e3.node, e3.offset), a4.removeAllRanges(), f2 > d4 ? (a4.addRange(b3), a4.extend(g2.node, g2.offset)) : (b3.setEnd(g2.node, g2.offset), a4.addRange(b3)));
        }
      }
      b3 = [];
      for (a4 = c3; a4 = a4.parentNode; )
        1 === a4.nodeType && b3.push({ element: a4, left: a4.scrollLeft, top: a4.scrollTop });
      "function" === typeof c3.focus && c3.focus();
      for (c3 = 0; c3 < b3.length; c3++)
        a4 = b3[c3], a4.element.scrollLeft = a4.left, a4.element.scrollTop = a4.top;
    }
  }
  var Pe2 = ia && "documentMode" in document && 11 >= document.documentMode, Qe2 = null, Re2 = null, Se2 = null, Te2 = false;
  function Ue(a4, b3, c3) {
    var d4 = c3.window === c3 ? c3.document : 9 === c3.nodeType ? c3 : c3.ownerDocument;
    Te2 || null == Qe2 || Qe2 !== Xa(d4) || (d4 = Qe2, "selectionStart" in d4 && Ne2(d4) ? d4 = { start: d4.selectionStart, end: d4.selectionEnd } : (d4 = (d4.ownerDocument && d4.ownerDocument.defaultView || window).getSelection(), d4 = { anchorNode: d4.anchorNode, anchorOffset: d4.anchorOffset, focusNode: d4.focusNode, focusOffset: d4.focusOffset }), Se2 && Ie2(Se2, d4) || (Se2 = d4, d4 = oe(Re2, "onSelect"), 0 < d4.length && (b3 = new td("onSelect", "select", null, b3, c3), a4.push({ event: b3, listeners: d4 }), b3.target = Qe2)));
  }
  function Ve2(a4, b3) {
    var c3 = {};
    c3[a4.toLowerCase()] = b3.toLowerCase();
    c3["Webkit" + a4] = "webkit" + b3;
    c3["Moz" + a4] = "moz" + b3;
    return c3;
  }
  var We2 = { animationend: Ve2("Animation", "AnimationEnd"), animationiteration: Ve2("Animation", "AnimationIteration"), animationstart: Ve2("Animation", "AnimationStart"), transitionend: Ve2("Transition", "TransitionEnd") }, Xe2 = {}, Ye2 = {};
  ia && (Ye2 = document.createElement("div").style, "AnimationEvent" in window || (delete We2.animationend.animation, delete We2.animationiteration.animation, delete We2.animationstart.animation), "TransitionEvent" in window || delete We2.transitionend.transition);
  function Ze2(a4) {
    if (Xe2[a4])
      return Xe2[a4];
    if (!We2[a4])
      return a4;
    var b3 = We2[a4], c3;
    for (c3 in b3)
      if (b3.hasOwnProperty(c3) && c3 in Ye2)
        return Xe2[a4] = b3[c3];
    return a4;
  }
  var $e2 = Ze2("animationend"), af = Ze2("animationiteration"), bf = Ze2("animationstart"), cf = Ze2("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function ff(a4, b3) {
    df.set(a4, b3);
    fa(b3, [a4]);
  }
  for (var gf = 0; gf < ef.length; gf++) {
    var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
    ff(jf, "on" + kf);
  }
  ff($e2, "onAnimationEnd");
  ff(af, "onAnimationIteration");
  ff(bf, "onAnimationStart");
  ff("dblclick", "onDoubleClick");
  ff("focusin", "onFocus");
  ff("focusout", "onBlur");
  ff(cf, "onTransitionEnd");
  ha("onMouseEnter", ["mouseout", "mouseover"]);
  ha("onMouseLeave", ["mouseout", "mouseover"]);
  ha("onPointerEnter", ["pointerout", "pointerover"]);
  ha("onPointerLeave", ["pointerout", "pointerover"]);
  fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
  fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
  fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
  fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
  function nf(a4, b3, c3) {
    var d4 = a4.type || "unknown-event";
    a4.currentTarget = c3;
    Ub(d4, b3, void 0, a4);
    a4.currentTarget = null;
  }
  function se(a4, b3) {
    b3 = 0 !== (b3 & 4);
    for (var c3 = 0; c3 < a4.length; c3++) {
      var d4 = a4[c3], e3 = d4.event;
      d4 = d4.listeners;
      a: {
        var f2 = void 0;
        if (b3)
          for (var g2 = d4.length - 1; 0 <= g2; g2--) {
            var h4 = d4[g2], k3 = h4.instance, l2 = h4.currentTarget;
            h4 = h4.listener;
            if (k3 !== f2 && e3.isPropagationStopped())
              break a;
            nf(e3, h4, l2);
            f2 = k3;
          }
        else
          for (g2 = 0; g2 < d4.length; g2++) {
            h4 = d4[g2];
            k3 = h4.instance;
            l2 = h4.currentTarget;
            h4 = h4.listener;
            if (k3 !== f2 && e3.isPropagationStopped())
              break a;
            nf(e3, h4, l2);
            f2 = k3;
          }
      }
    }
    if (Qb)
      throw a4 = Rb, Qb = false, Rb = null, a4;
  }
  function D3(a4, b3) {
    var c3 = b3[of];
    void 0 === c3 && (c3 = b3[of] = /* @__PURE__ */ new Set());
    var d4 = a4 + "__bubble";
    c3.has(d4) || (pf(b3, a4, 2, false), c3.add(d4));
  }
  function qf(a4, b3, c3) {
    var d4 = 0;
    b3 && (d4 |= 4);
    pf(c3, a4, d4, b3);
  }
  var rf = "_reactListening" + Math.random().toString(36).slice(2);
  function sf(a4) {
    if (!a4[rf]) {
      a4[rf] = true;
      da.forEach(function(b4) {
        "selectionchange" !== b4 && (mf.has(b4) || qf(b4, false, a4), qf(b4, true, a4));
      });
      var b3 = 9 === a4.nodeType ? a4 : a4.ownerDocument;
      null === b3 || b3[rf] || (b3[rf] = true, qf("selectionchange", false, b3));
    }
  }
  function pf(a4, b3, c3, d4) {
    switch (jd(b3)) {
      case 1:
        var e3 = ed;
        break;
      case 4:
        e3 = gd;
        break;
      default:
        e3 = fd;
    }
    c3 = e3.bind(null, b3, c3, a4);
    e3 = void 0;
    !Lb || "touchstart" !== b3 && "touchmove" !== b3 && "wheel" !== b3 || (e3 = true);
    d4 ? void 0 !== e3 ? a4.addEventListener(b3, c3, { capture: true, passive: e3 }) : a4.addEventListener(b3, c3, true) : void 0 !== e3 ? a4.addEventListener(b3, c3, { passive: e3 }) : a4.addEventListener(b3, c3, false);
  }
  function hd(a4, b3, c3, d4, e3) {
    var f2 = d4;
    if (0 === (b3 & 1) && 0 === (b3 & 2) && null !== d4)
      a:
        for (; ; ) {
          if (null === d4)
            return;
          var g2 = d4.tag;
          if (3 === g2 || 4 === g2) {
            var h4 = d4.stateNode.containerInfo;
            if (h4 === e3 || 8 === h4.nodeType && h4.parentNode === e3)
              break;
            if (4 === g2)
              for (g2 = d4.return; null !== g2; ) {
                var k3 = g2.tag;
                if (3 === k3 || 4 === k3) {
                  if (k3 = g2.stateNode.containerInfo, k3 === e3 || 8 === k3.nodeType && k3.parentNode === e3)
                    return;
                }
                g2 = g2.return;
              }
            for (; null !== h4; ) {
              g2 = Wc(h4);
              if (null === g2)
                return;
              k3 = g2.tag;
              if (5 === k3 || 6 === k3) {
                d4 = f2 = g2;
                continue a;
              }
              h4 = h4.parentNode;
            }
          }
          d4 = d4.return;
        }
    Jb(function() {
      var d5 = f2, e4 = xb(c3), g3 = [];
      a: {
        var h5 = df.get(a4);
        if (void 0 !== h5) {
          var k4 = td, n2 = a4;
          switch (a4) {
            case "keypress":
              if (0 === od(c3))
                break a;
            case "keydown":
            case "keyup":
              k4 = Rd;
              break;
            case "focusin":
              n2 = "focus";
              k4 = Fd;
              break;
            case "focusout":
              n2 = "blur";
              k4 = Fd;
              break;
            case "beforeblur":
            case "afterblur":
              k4 = Fd;
              break;
            case "click":
              if (2 === c3.button)
                break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k4 = Bd;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k4 = Dd;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k4 = Vd;
              break;
            case $e2:
            case af:
            case bf:
              k4 = Hd;
              break;
            case cf:
              k4 = Xd;
              break;
            case "scroll":
              k4 = vd;
              break;
            case "wheel":
              k4 = Zd;
              break;
            case "copy":
            case "cut":
            case "paste":
              k4 = Jd;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k4 = Td;
          }
          var t3 = 0 !== (b3 & 4), J = !t3 && "scroll" === a4, x3 = t3 ? null !== h5 ? h5 + "Capture" : null : h5;
          t3 = [];
          for (var w3 = d5, u3; null !== w3; ) {
            u3 = w3;
            var F2 = u3.stateNode;
            5 === u3.tag && null !== F2 && (u3 = F2, null !== x3 && (F2 = Kb(w3, x3), null != F2 && t3.push(tf(w3, F2, u3))));
            if (J)
              break;
            w3 = w3.return;
          }
          0 < t3.length && (h5 = new k4(h5, n2, null, c3, e4), g3.push({ event: h5, listeners: t3 }));
        }
      }
      if (0 === (b3 & 7)) {
        a: {
          h5 = "mouseover" === a4 || "pointerover" === a4;
          k4 = "mouseout" === a4 || "pointerout" === a4;
          if (h5 && c3 !== wb && (n2 = c3.relatedTarget || c3.fromElement) && (Wc(n2) || n2[uf]))
            break a;
          if (k4 || h5) {
            h5 = e4.window === e4 ? e4 : (h5 = e4.ownerDocument) ? h5.defaultView || h5.parentWindow : window;
            if (k4) {
              if (n2 = c3.relatedTarget || c3.toElement, k4 = d5, n2 = n2 ? Wc(n2) : null, null !== n2 && (J = Vb(n2), n2 !== J || 5 !== n2.tag && 6 !== n2.tag))
                n2 = null;
            } else
              k4 = null, n2 = d5;
            if (k4 !== n2) {
              t3 = Bd;
              F2 = "onMouseLeave";
              x3 = "onMouseEnter";
              w3 = "mouse";
              if ("pointerout" === a4 || "pointerover" === a4)
                t3 = Td, F2 = "onPointerLeave", x3 = "onPointerEnter", w3 = "pointer";
              J = null == k4 ? h5 : ue2(k4);
              u3 = null == n2 ? h5 : ue2(n2);
              h5 = new t3(F2, w3 + "leave", k4, c3, e4);
              h5.target = J;
              h5.relatedTarget = u3;
              F2 = null;
              Wc(e4) === d5 && (t3 = new t3(x3, w3 + "enter", n2, c3, e4), t3.target = u3, t3.relatedTarget = J, F2 = t3);
              J = F2;
              if (k4 && n2)
                b: {
                  t3 = k4;
                  x3 = n2;
                  w3 = 0;
                  for (u3 = t3; u3; u3 = vf(u3))
                    w3++;
                  u3 = 0;
                  for (F2 = x3; F2; F2 = vf(F2))
                    u3++;
                  for (; 0 < w3 - u3; )
                    t3 = vf(t3), w3--;
                  for (; 0 < u3 - w3; )
                    x3 = vf(x3), u3--;
                  for (; w3--; ) {
                    if (t3 === x3 || null !== x3 && t3 === x3.alternate)
                      break b;
                    t3 = vf(t3);
                    x3 = vf(x3);
                  }
                  t3 = null;
                }
              else
                t3 = null;
              null !== k4 && wf(g3, h5, k4, t3, false);
              null !== n2 && null !== J && wf(g3, J, n2, t3, true);
            }
          }
        }
        a: {
          h5 = d5 ? ue2(d5) : window;
          k4 = h5.nodeName && h5.nodeName.toLowerCase();
          if ("select" === k4 || "input" === k4 && "file" === h5.type)
            var na = ve2;
          else if (me2(h5))
            if (we2)
              na = Fe2;
            else {
              na = De2;
              var xa = Ce2;
            }
          else
            (k4 = h5.nodeName) && "input" === k4.toLowerCase() && ("checkbox" === h5.type || "radio" === h5.type) && (na = Ee2);
          if (na && (na = na(a4, d5))) {
            ne(g3, na, c3, e4);
            break a;
          }
          xa && xa(a4, h5, d5);
          "focusout" === a4 && (xa = h5._wrapperState) && xa.controlled && "number" === h5.type && cb(h5, "number", h5.value);
        }
        xa = d5 ? ue2(d5) : window;
        switch (a4) {
          case "focusin":
            if (me2(xa) || "true" === xa.contentEditable)
              Qe2 = xa, Re2 = d5, Se2 = null;
            break;
          case "focusout":
            Se2 = Re2 = Qe2 = null;
            break;
          case "mousedown":
            Te2 = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te2 = false;
            Ue(g3, c3, e4);
            break;
          case "selectionchange":
            if (Pe2)
              break;
          case "keydown":
          case "keyup":
            Ue(g3, c3, e4);
        }
        var $a;
        if (ae2)
          b: {
            switch (a4) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
        else
          ie2 ? ge2(a4, c3) && (ba = "onCompositionEnd") : "keydown" === a4 && 229 === c3.keyCode && (ba = "onCompositionStart");
        ba && (de2 && "ko" !== c3.locale && (ie2 || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie2 && ($a = nd()) : (kd = e4, ld = "value" in kd ? kd.value : kd.textContent, ie2 = true)), xa = oe(d5, ba), 0 < xa.length && (ba = new Ld(ba, a4, null, c3, e4), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he2(c3), null !== $a && (ba.data = $a))));
        if ($a = ce ? je2(a4, c3) : ke2(a4, c3))
          d5 = oe(d5, "onBeforeInput"), 0 < d5.length && (e4 = new Ld("onBeforeInput", "beforeinput", null, c3, e4), g3.push({ event: e4, listeners: d5 }), e4.data = $a);
      }
      se(g3, b3);
    });
  }
  function tf(a4, b3, c3) {
    return { instance: a4, listener: b3, currentTarget: c3 };
  }
  function oe(a4, b3) {
    for (var c3 = b3 + "Capture", d4 = []; null !== a4; ) {
      var e3 = a4, f2 = e3.stateNode;
      5 === e3.tag && null !== f2 && (e3 = f2, f2 = Kb(a4, c3), null != f2 && d4.unshift(tf(a4, f2, e3)), f2 = Kb(a4, b3), null != f2 && d4.push(tf(a4, f2, e3)));
      a4 = a4.return;
    }
    return d4;
  }
  function vf(a4) {
    if (null === a4)
      return null;
    do
      a4 = a4.return;
    while (a4 && 5 !== a4.tag);
    return a4 ? a4 : null;
  }
  function wf(a4, b3, c3, d4, e3) {
    for (var f2 = b3._reactName, g2 = []; null !== c3 && c3 !== d4; ) {
      var h4 = c3, k3 = h4.alternate, l2 = h4.stateNode;
      if (null !== k3 && k3 === d4)
        break;
      5 === h4.tag && null !== l2 && (h4 = l2, e3 ? (k3 = Kb(c3, f2), null != k3 && g2.unshift(tf(c3, k3, h4))) : e3 || (k3 = Kb(c3, f2), null != k3 && g2.push(tf(c3, k3, h4))));
      c3 = c3.return;
    }
    0 !== g2.length && a4.push({ event: b3, listeners: g2 });
  }
  var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
  function zf(a4) {
    return ("string" === typeof a4 ? a4 : "" + a4).replace(xf, "\n").replace(yf, "");
  }
  function Af(a4, b3, c3) {
    b3 = zf(b3);
    if (zf(a4) !== b3 && c3)
      throw Error(p2(425));
  }
  function Bf() {
  }
  var Cf = null, Df = null;
  function Ef(a4, b3) {
    return "textarea" === a4 || "noscript" === a4 || "string" === typeof b3.children || "number" === typeof b3.children || "object" === typeof b3.dangerouslySetInnerHTML && null !== b3.dangerouslySetInnerHTML && null != b3.dangerouslySetInnerHTML.__html;
  }
  var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a4) {
    return Hf.resolve(null).then(a4).catch(If);
  } : Ff;
  function If(a4) {
    setTimeout(function() {
      throw a4;
    });
  }
  function Kf(a4, b3) {
    var c3 = b3, d4 = 0;
    do {
      var e3 = c3.nextSibling;
      a4.removeChild(c3);
      if (e3 && 8 === e3.nodeType)
        if (c3 = e3.data, "/$" === c3) {
          if (0 === d4) {
            a4.removeChild(e3);
            bd(b3);
            return;
          }
          d4--;
        } else
          "$" !== c3 && "$?" !== c3 && "$!" !== c3 || d4++;
      c3 = e3;
    } while (c3);
    bd(b3);
  }
  function Lf(a4) {
    for (; null != a4; a4 = a4.nextSibling) {
      var b3 = a4.nodeType;
      if (1 === b3 || 3 === b3)
        break;
      if (8 === b3) {
        b3 = a4.data;
        if ("$" === b3 || "$!" === b3 || "$?" === b3)
          break;
        if ("/$" === b3)
          return null;
      }
    }
    return a4;
  }
  function Mf(a4) {
    a4 = a4.previousSibling;
    for (var b3 = 0; a4; ) {
      if (8 === a4.nodeType) {
        var c3 = a4.data;
        if ("$" === c3 || "$!" === c3 || "$?" === c3) {
          if (0 === b3)
            return a4;
          b3--;
        } else
          "/$" === c3 && b3++;
      }
      a4 = a4.previousSibling;
    }
    return null;
  }
  var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
  function Wc(a4) {
    var b3 = a4[Of];
    if (b3)
      return b3;
    for (var c3 = a4.parentNode; c3; ) {
      if (b3 = c3[uf] || c3[Of]) {
        c3 = b3.alternate;
        if (null !== b3.child || null !== c3 && null !== c3.child)
          for (a4 = Mf(a4); null !== a4; ) {
            if (c3 = a4[Of])
              return c3;
            a4 = Mf(a4);
          }
        return b3;
      }
      a4 = c3;
      c3 = a4.parentNode;
    }
    return null;
  }
  function Cb(a4) {
    a4 = a4[Of] || a4[uf];
    return !a4 || 5 !== a4.tag && 6 !== a4.tag && 13 !== a4.tag && 3 !== a4.tag ? null : a4;
  }
  function ue2(a4) {
    if (5 === a4.tag || 6 === a4.tag)
      return a4.stateNode;
    throw Error(p2(33));
  }
  function Db(a4) {
    return a4[Pf] || null;
  }
  var Sf = [], Tf = -1;
  function Uf(a4) {
    return { current: a4 };
  }
  function E3(a4) {
    0 > Tf || (a4.current = Sf[Tf], Sf[Tf] = null, Tf--);
  }
  function G2(a4, b3) {
    Tf++;
    Sf[Tf] = a4.current;
    a4.current = b3;
  }
  var Vf = {}, H3 = Uf(Vf), Wf = Uf(false), Xf = Vf;
  function Yf(a4, b3) {
    var c3 = a4.type.contextTypes;
    if (!c3)
      return Vf;
    var d4 = a4.stateNode;
    if (d4 && d4.__reactInternalMemoizedUnmaskedChildContext === b3)
      return d4.__reactInternalMemoizedMaskedChildContext;
    var e3 = {}, f2;
    for (f2 in c3)
      e3[f2] = b3[f2];
    d4 && (a4 = a4.stateNode, a4.__reactInternalMemoizedUnmaskedChildContext = b3, a4.__reactInternalMemoizedMaskedChildContext = e3);
    return e3;
  }
  function Zf(a4) {
    a4 = a4.childContextTypes;
    return null !== a4 && void 0 !== a4;
  }
  function $f() {
    E3(Wf);
    E3(H3);
  }
  function ag(a4, b3, c3) {
    if (H3.current !== Vf)
      throw Error(p2(168));
    G2(H3, b3);
    G2(Wf, c3);
  }
  function bg(a4, b3, c3) {
    var d4 = a4.stateNode;
    b3 = b3.childContextTypes;
    if ("function" !== typeof d4.getChildContext)
      return c3;
    d4 = d4.getChildContext();
    for (var e3 in d4)
      if (!(e3 in b3))
        throw Error(p2(108, Ra(a4) || "Unknown", e3));
    return A2({}, c3, d4);
  }
  function cg(a4) {
    a4 = (a4 = a4.stateNode) && a4.__reactInternalMemoizedMergedChildContext || Vf;
    Xf = H3.current;
    G2(H3, a4);
    G2(Wf, Wf.current);
    return true;
  }
  function dg(a4, b3, c3) {
    var d4 = a4.stateNode;
    if (!d4)
      throw Error(p2(169));
    c3 ? (a4 = bg(a4, b3, Xf), d4.__reactInternalMemoizedMergedChildContext = a4, E3(Wf), E3(H3), G2(H3, a4)) : E3(Wf);
    G2(Wf, c3);
  }
  var eg = null, fg = false, gg = false;
  function hg(a4) {
    null === eg ? eg = [a4] : eg.push(a4);
  }
  function ig(a4) {
    fg = true;
    hg(a4);
  }
  function jg() {
    if (!gg && null !== eg) {
      gg = true;
      var a4 = 0, b3 = C2;
      try {
        var c3 = eg;
        for (C2 = 1; a4 < c3.length; a4++) {
          var d4 = c3[a4];
          do
            d4 = d4(true);
          while (null !== d4);
        }
        eg = null;
        fg = false;
      } catch (e3) {
        throw null !== eg && (eg = eg.slice(a4 + 1)), ac(fc, jg), e3;
      } finally {
        C2 = b3, gg = false;
      }
    }
    return null;
  }
  var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
  function tg(a4, b3) {
    kg[lg++] = ng;
    kg[lg++] = mg;
    mg = a4;
    ng = b3;
  }
  function ug(a4, b3, c3) {
    og[pg++] = rg;
    og[pg++] = sg;
    og[pg++] = qg;
    qg = a4;
    var d4 = rg;
    a4 = sg;
    var e3 = 32 - oc(d4) - 1;
    d4 &= ~(1 << e3);
    c3 += 1;
    var f2 = 32 - oc(b3) + e3;
    if (30 < f2) {
      var g2 = e3 - e3 % 5;
      f2 = (d4 & (1 << g2) - 1).toString(32);
      d4 >>= g2;
      e3 -= g2;
      rg = 1 << 32 - oc(b3) + e3 | c3 << e3 | d4;
      sg = f2 + a4;
    } else
      rg = 1 << f2 | c3 << e3 | d4, sg = a4;
  }
  function vg(a4) {
    null !== a4.return && (tg(a4, 1), ug(a4, 1, 0));
  }
  function wg(a4) {
    for (; a4 === mg; )
      mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
    for (; a4 === qg; )
      qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
  }
  var xg = null, yg = null, I3 = false, zg = null;
  function Ag(a4, b3) {
    var c3 = Bg(5, null, null, 0);
    c3.elementType = "DELETED";
    c3.stateNode = b3;
    c3.return = a4;
    b3 = a4.deletions;
    null === b3 ? (a4.deletions = [c3], a4.flags |= 16) : b3.push(c3);
  }
  function Cg(a4, b3) {
    switch (a4.tag) {
      case 5:
        var c3 = a4.type;
        b3 = 1 !== b3.nodeType || c3.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
        return null !== b3 ? (a4.stateNode = b3, xg = a4, yg = Lf(b3.firstChild), true) : false;
      case 6:
        return b3 = "" === a4.pendingProps || 3 !== b3.nodeType ? null : b3, null !== b3 ? (a4.stateNode = b3, xg = a4, yg = null, true) : false;
      case 13:
        return b3 = 8 !== b3.nodeType ? null : b3, null !== b3 ? (c3 = null !== qg ? { id: rg, overflow: sg } : null, a4.memoizedState = { dehydrated: b3, treeContext: c3, retryLane: 1073741824 }, c3 = Bg(18, null, null, 0), c3.stateNode = b3, c3.return = a4, a4.child = c3, xg = a4, yg = null, true) : false;
      default:
        return false;
    }
  }
  function Dg(a4) {
    return 0 !== (a4.mode & 1) && 0 === (a4.flags & 128);
  }
  function Eg(a4) {
    if (I3) {
      var b3 = yg;
      if (b3) {
        var c3 = b3;
        if (!Cg(a4, b3)) {
          if (Dg(a4))
            throw Error(p2(418));
          b3 = Lf(c3.nextSibling);
          var d4 = xg;
          b3 && Cg(a4, b3) ? Ag(d4, c3) : (a4.flags = a4.flags & -4097 | 2, I3 = false, xg = a4);
        }
      } else {
        if (Dg(a4))
          throw Error(p2(418));
        a4.flags = a4.flags & -4097 | 2;
        I3 = false;
        xg = a4;
      }
    }
  }
  function Fg(a4) {
    for (a4 = a4.return; null !== a4 && 5 !== a4.tag && 3 !== a4.tag && 13 !== a4.tag; )
      a4 = a4.return;
    xg = a4;
  }
  function Gg(a4) {
    if (a4 !== xg)
      return false;
    if (!I3)
      return Fg(a4), I3 = true, false;
    var b3;
    (b3 = 3 !== a4.tag) && !(b3 = 5 !== a4.tag) && (b3 = a4.type, b3 = "head" !== b3 && "body" !== b3 && !Ef(a4.type, a4.memoizedProps));
    if (b3 && (b3 = yg)) {
      if (Dg(a4))
        throw Hg(), Error(p2(418));
      for (; b3; )
        Ag(a4, b3), b3 = Lf(b3.nextSibling);
    }
    Fg(a4);
    if (13 === a4.tag) {
      a4 = a4.memoizedState;
      a4 = null !== a4 ? a4.dehydrated : null;
      if (!a4)
        throw Error(p2(317));
      a: {
        a4 = a4.nextSibling;
        for (b3 = 0; a4; ) {
          if (8 === a4.nodeType) {
            var c3 = a4.data;
            if ("/$" === c3) {
              if (0 === b3) {
                yg = Lf(a4.nextSibling);
                break a;
              }
              b3--;
            } else
              "$" !== c3 && "$!" !== c3 && "$?" !== c3 || b3++;
          }
          a4 = a4.nextSibling;
        }
        yg = null;
      }
    } else
      yg = xg ? Lf(a4.stateNode.nextSibling) : null;
    return true;
  }
  function Hg() {
    for (var a4 = yg; a4; )
      a4 = Lf(a4.nextSibling);
  }
  function Ig() {
    yg = xg = null;
    I3 = false;
  }
  function Jg(a4) {
    null === zg ? zg = [a4] : zg.push(a4);
  }
  var Kg = ua.ReactCurrentBatchConfig;
  function Lg(a4, b3) {
    if (a4 && a4.defaultProps) {
      b3 = A2({}, b3);
      a4 = a4.defaultProps;
      for (var c3 in a4)
        void 0 === b3[c3] && (b3[c3] = a4[c3]);
      return b3;
    }
    return b3;
  }
  var Mg = Uf(null), Ng = null, Og = null, Pg = null;
  function Qg() {
    Pg = Og = Ng = null;
  }
  function Rg(a4) {
    var b3 = Mg.current;
    E3(Mg);
    a4._currentValue = b3;
  }
  function Sg(a4, b3, c3) {
    for (; null !== a4; ) {
      var d4 = a4.alternate;
      (a4.childLanes & b3) !== b3 ? (a4.childLanes |= b3, null !== d4 && (d4.childLanes |= b3)) : null !== d4 && (d4.childLanes & b3) !== b3 && (d4.childLanes |= b3);
      if (a4 === c3)
        break;
      a4 = a4.return;
    }
  }
  function Tg(a4, b3) {
    Ng = a4;
    Pg = Og = null;
    a4 = a4.dependencies;
    null !== a4 && null !== a4.firstContext && (0 !== (a4.lanes & b3) && (Ug = true), a4.firstContext = null);
  }
  function Vg(a4) {
    var b3 = a4._currentValue;
    if (Pg !== a4)
      if (a4 = { context: a4, memoizedValue: b3, next: null }, null === Og) {
        if (null === Ng)
          throw Error(p2(308));
        Og = a4;
        Ng.dependencies = { lanes: 0, firstContext: a4 };
      } else
        Og = Og.next = a4;
    return b3;
  }
  var Wg = null;
  function Xg(a4) {
    null === Wg ? Wg = [a4] : Wg.push(a4);
  }
  function Yg(a4, b3, c3, d4) {
    var e3 = b3.interleaved;
    null === e3 ? (c3.next = c3, Xg(b3)) : (c3.next = e3.next, e3.next = c3);
    b3.interleaved = c3;
    return Zg(a4, d4);
  }
  function Zg(a4, b3) {
    a4.lanes |= b3;
    var c3 = a4.alternate;
    null !== c3 && (c3.lanes |= b3);
    c3 = a4;
    for (a4 = a4.return; null !== a4; )
      a4.childLanes |= b3, c3 = a4.alternate, null !== c3 && (c3.childLanes |= b3), c3 = a4, a4 = a4.return;
    return 3 === c3.tag ? c3.stateNode : null;
  }
  var $g = false;
  function ah(a4) {
    a4.updateQueue = { baseState: a4.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function bh(a4, b3) {
    a4 = a4.updateQueue;
    b3.updateQueue === a4 && (b3.updateQueue = { baseState: a4.baseState, firstBaseUpdate: a4.firstBaseUpdate, lastBaseUpdate: a4.lastBaseUpdate, shared: a4.shared, effects: a4.effects });
  }
  function ch(a4, b3) {
    return { eventTime: a4, lane: b3, tag: 0, payload: null, callback: null, next: null };
  }
  function dh(a4, b3, c3) {
    var d4 = a4.updateQueue;
    if (null === d4)
      return null;
    d4 = d4.shared;
    if (0 !== (K2 & 2)) {
      var e3 = d4.pending;
      null === e3 ? b3.next = b3 : (b3.next = e3.next, e3.next = b3);
      d4.pending = b3;
      return Zg(a4, c3);
    }
    e3 = d4.interleaved;
    null === e3 ? (b3.next = b3, Xg(d4)) : (b3.next = e3.next, e3.next = b3);
    d4.interleaved = b3;
    return Zg(a4, c3);
  }
  function eh(a4, b3, c3) {
    b3 = b3.updateQueue;
    if (null !== b3 && (b3 = b3.shared, 0 !== (c3 & 4194240))) {
      var d4 = b3.lanes;
      d4 &= a4.pendingLanes;
      c3 |= d4;
      b3.lanes = c3;
      Cc(a4, c3);
    }
  }
  function fh(a4, b3) {
    var c3 = a4.updateQueue, d4 = a4.alternate;
    if (null !== d4 && (d4 = d4.updateQueue, c3 === d4)) {
      var e3 = null, f2 = null;
      c3 = c3.firstBaseUpdate;
      if (null !== c3) {
        do {
          var g2 = { eventTime: c3.eventTime, lane: c3.lane, tag: c3.tag, payload: c3.payload, callback: c3.callback, next: null };
          null === f2 ? e3 = f2 = g2 : f2 = f2.next = g2;
          c3 = c3.next;
        } while (null !== c3);
        null === f2 ? e3 = f2 = b3 : f2 = f2.next = b3;
      } else
        e3 = f2 = b3;
      c3 = { baseState: d4.baseState, firstBaseUpdate: e3, lastBaseUpdate: f2, shared: d4.shared, effects: d4.effects };
      a4.updateQueue = c3;
      return;
    }
    a4 = c3.lastBaseUpdate;
    null === a4 ? c3.firstBaseUpdate = b3 : a4.next = b3;
    c3.lastBaseUpdate = b3;
  }
  function gh(a4, b3, c3, d4) {
    var e3 = a4.updateQueue;
    $g = false;
    var f2 = e3.firstBaseUpdate, g2 = e3.lastBaseUpdate, h4 = e3.shared.pending;
    if (null !== h4) {
      e3.shared.pending = null;
      var k3 = h4, l2 = k3.next;
      k3.next = null;
      null === g2 ? f2 = l2 : g2.next = l2;
      g2 = k3;
      var m4 = a4.alternate;
      null !== m4 && (m4 = m4.updateQueue, h4 = m4.lastBaseUpdate, h4 !== g2 && (null === h4 ? m4.firstBaseUpdate = l2 : h4.next = l2, m4.lastBaseUpdate = k3));
    }
    if (null !== f2) {
      var q2 = e3.baseState;
      g2 = 0;
      m4 = l2 = k3 = null;
      h4 = f2;
      do {
        var r2 = h4.lane, y4 = h4.eventTime;
        if ((d4 & r2) === r2) {
          null !== m4 && (m4 = m4.next = {
            eventTime: y4,
            lane: 0,
            tag: h4.tag,
            payload: h4.payload,
            callback: h4.callback,
            next: null
          });
          a: {
            var n2 = a4, t3 = h4;
            r2 = b3;
            y4 = c3;
            switch (t3.tag) {
              case 1:
                n2 = t3.payload;
                if ("function" === typeof n2) {
                  q2 = n2.call(y4, q2, r2);
                  break a;
                }
                q2 = n2;
                break a;
              case 3:
                n2.flags = n2.flags & -65537 | 128;
              case 0:
                n2 = t3.payload;
                r2 = "function" === typeof n2 ? n2.call(y4, q2, r2) : n2;
                if (null === r2 || void 0 === r2)
                  break a;
                q2 = A2({}, q2, r2);
                break a;
              case 2:
                $g = true;
            }
          }
          null !== h4.callback && 0 !== h4.lane && (a4.flags |= 64, r2 = e3.effects, null === r2 ? e3.effects = [h4] : r2.push(h4));
        } else
          y4 = { eventTime: y4, lane: r2, tag: h4.tag, payload: h4.payload, callback: h4.callback, next: null }, null === m4 ? (l2 = m4 = y4, k3 = q2) : m4 = m4.next = y4, g2 |= r2;
        h4 = h4.next;
        if (null === h4)
          if (h4 = e3.shared.pending, null === h4)
            break;
          else
            r2 = h4, h4 = r2.next, r2.next = null, e3.lastBaseUpdate = r2, e3.shared.pending = null;
      } while (1);
      null === m4 && (k3 = q2);
      e3.baseState = k3;
      e3.firstBaseUpdate = l2;
      e3.lastBaseUpdate = m4;
      b3 = e3.shared.interleaved;
      if (null !== b3) {
        e3 = b3;
        do
          g2 |= e3.lane, e3 = e3.next;
        while (e3 !== b3);
      } else
        null === f2 && (e3.shared.lanes = 0);
      hh |= g2;
      a4.lanes = g2;
      a4.memoizedState = q2;
    }
  }
  function ih(a4, b3, c3) {
    a4 = b3.effects;
    b3.effects = null;
    if (null !== a4)
      for (b3 = 0; b3 < a4.length; b3++) {
        var d4 = a4[b3], e3 = d4.callback;
        if (null !== e3) {
          d4.callback = null;
          d4 = c3;
          if ("function" !== typeof e3)
            throw Error(p2(191, e3));
          e3.call(d4);
        }
      }
  }
  var jh = new aa.Component().refs;
  function kh(a4, b3, c3, d4) {
    b3 = a4.memoizedState;
    c3 = c3(d4, b3);
    c3 = null === c3 || void 0 === c3 ? b3 : A2({}, b3, c3);
    a4.memoizedState = c3;
    0 === a4.lanes && (a4.updateQueue.baseState = c3);
  }
  var nh = { isMounted: function(a4) {
    return (a4 = a4._reactInternals) ? Vb(a4) === a4 : false;
  }, enqueueSetState: function(a4, b3, c3) {
    a4 = a4._reactInternals;
    var d4 = L2(), e3 = lh(a4), f2 = ch(d4, e3);
    f2.payload = b3;
    void 0 !== c3 && null !== c3 && (f2.callback = c3);
    b3 = dh(a4, f2, e3);
    null !== b3 && (mh(b3, a4, e3, d4), eh(b3, a4, e3));
  }, enqueueReplaceState: function(a4, b3, c3) {
    a4 = a4._reactInternals;
    var d4 = L2(), e3 = lh(a4), f2 = ch(d4, e3);
    f2.tag = 1;
    f2.payload = b3;
    void 0 !== c3 && null !== c3 && (f2.callback = c3);
    b3 = dh(a4, f2, e3);
    null !== b3 && (mh(b3, a4, e3, d4), eh(b3, a4, e3));
  }, enqueueForceUpdate: function(a4, b3) {
    a4 = a4._reactInternals;
    var c3 = L2(), d4 = lh(a4), e3 = ch(c3, d4);
    e3.tag = 2;
    void 0 !== b3 && null !== b3 && (e3.callback = b3);
    b3 = dh(a4, e3, d4);
    null !== b3 && (mh(b3, a4, d4, c3), eh(b3, a4, d4));
  } };
  function oh(a4, b3, c3, d4, e3, f2, g2) {
    a4 = a4.stateNode;
    return "function" === typeof a4.shouldComponentUpdate ? a4.shouldComponentUpdate(d4, f2, g2) : b3.prototype && b3.prototype.isPureReactComponent ? !Ie2(c3, d4) || !Ie2(e3, f2) : true;
  }
  function ph(a4, b3, c3) {
    var d4 = false, e3 = Vf;
    var f2 = b3.contextType;
    "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e3 = Zf(b3) ? Xf : H3.current, d4 = b3.contextTypes, f2 = (d4 = null !== d4 && void 0 !== d4) ? Yf(a4, e3) : Vf);
    b3 = new b3(c3, f2);
    a4.memoizedState = null !== b3.state && void 0 !== b3.state ? b3.state : null;
    b3.updater = nh;
    a4.stateNode = b3;
    b3._reactInternals = a4;
    d4 && (a4 = a4.stateNode, a4.__reactInternalMemoizedUnmaskedChildContext = e3, a4.__reactInternalMemoizedMaskedChildContext = f2);
    return b3;
  }
  function qh(a4, b3, c3, d4) {
    a4 = b3.state;
    "function" === typeof b3.componentWillReceiveProps && b3.componentWillReceiveProps(c3, d4);
    "function" === typeof b3.UNSAFE_componentWillReceiveProps && b3.UNSAFE_componentWillReceiveProps(c3, d4);
    b3.state !== a4 && nh.enqueueReplaceState(b3, b3.state, null);
  }
  function rh(a4, b3, c3, d4) {
    var e3 = a4.stateNode;
    e3.props = c3;
    e3.state = a4.memoizedState;
    e3.refs = jh;
    ah(a4);
    var f2 = b3.contextType;
    "object" === typeof f2 && null !== f2 ? e3.context = Vg(f2) : (f2 = Zf(b3) ? Xf : H3.current, e3.context = Yf(a4, f2));
    e3.state = a4.memoizedState;
    f2 = b3.getDerivedStateFromProps;
    "function" === typeof f2 && (kh(a4, b3, f2, c3), e3.state = a4.memoizedState);
    "function" === typeof b3.getDerivedStateFromProps || "function" === typeof e3.getSnapshotBeforeUpdate || "function" !== typeof e3.UNSAFE_componentWillMount && "function" !== typeof e3.componentWillMount || (b3 = e3.state, "function" === typeof e3.componentWillMount && e3.componentWillMount(), "function" === typeof e3.UNSAFE_componentWillMount && e3.UNSAFE_componentWillMount(), b3 !== e3.state && nh.enqueueReplaceState(e3, e3.state, null), gh(a4, c3, e3, d4), e3.state = a4.memoizedState);
    "function" === typeof e3.componentDidMount && (a4.flags |= 4194308);
  }
  function sh(a4, b3, c3) {
    a4 = c3.ref;
    if (null !== a4 && "function" !== typeof a4 && "object" !== typeof a4) {
      if (c3._owner) {
        c3 = c3._owner;
        if (c3) {
          if (1 !== c3.tag)
            throw Error(p2(309));
          var d4 = c3.stateNode;
        }
        if (!d4)
          throw Error(p2(147, a4));
        var e3 = d4, f2 = "" + a4;
        if (null !== b3 && null !== b3.ref && "function" === typeof b3.ref && b3.ref._stringRef === f2)
          return b3.ref;
        b3 = function(a5) {
          var b4 = e3.refs;
          b4 === jh && (b4 = e3.refs = {});
          null === a5 ? delete b4[f2] : b4[f2] = a5;
        };
        b3._stringRef = f2;
        return b3;
      }
      if ("string" !== typeof a4)
        throw Error(p2(284));
      if (!c3._owner)
        throw Error(p2(290, a4));
    }
    return a4;
  }
  function th(a4, b3) {
    a4 = Object.prototype.toString.call(b3);
    throw Error(p2(31, "[object Object]" === a4 ? "object with keys {" + Object.keys(b3).join(", ") + "}" : a4));
  }
  function uh(a4) {
    var b3 = a4._init;
    return b3(a4._payload);
  }
  function vh(a4) {
    function b3(b4, c4) {
      if (a4) {
        var d5 = b4.deletions;
        null === d5 ? (b4.deletions = [c4], b4.flags |= 16) : d5.push(c4);
      }
    }
    function c3(c4, d5) {
      if (!a4)
        return null;
      for (; null !== d5; )
        b3(c4, d5), d5 = d5.sibling;
      return null;
    }
    function d4(a5, b4) {
      for (a5 = /* @__PURE__ */ new Map(); null !== b4; )
        null !== b4.key ? a5.set(b4.key, b4) : a5.set(b4.index, b4), b4 = b4.sibling;
      return a5;
    }
    function e3(a5, b4) {
      a5 = wh(a5, b4);
      a5.index = 0;
      a5.sibling = null;
      return a5;
    }
    function f2(b4, c4, d5) {
      b4.index = d5;
      if (!a4)
        return b4.flags |= 1048576, c4;
      d5 = b4.alternate;
      if (null !== d5)
        return d5 = d5.index, d5 < c4 ? (b4.flags |= 2, c4) : d5;
      b4.flags |= 2;
      return c4;
    }
    function g2(b4) {
      a4 && null === b4.alternate && (b4.flags |= 2);
      return b4;
    }
    function h4(a5, b4, c4, d5) {
      if (null === b4 || 6 !== b4.tag)
        return b4 = xh(c4, a5.mode, d5), b4.return = a5, b4;
      b4 = e3(b4, c4);
      b4.return = a5;
      return b4;
    }
    function k3(a5, b4, c4, d5) {
      var f3 = c4.type;
      if (f3 === ya)
        return m4(a5, b4, c4.props.children, d5, c4.key);
      if (null !== b4 && (b4.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b4.type))
        return d5 = e3(b4, c4.props), d5.ref = sh(a5, b4, c4), d5.return = a5, d5;
      d5 = yh(c4.type, c4.key, c4.props, null, a5.mode, d5);
      d5.ref = sh(a5, b4, c4);
      d5.return = a5;
      return d5;
    }
    function l2(a5, b4, c4, d5) {
      if (null === b4 || 4 !== b4.tag || b4.stateNode.containerInfo !== c4.containerInfo || b4.stateNode.implementation !== c4.implementation)
        return b4 = zh(c4, a5.mode, d5), b4.return = a5, b4;
      b4 = e3(b4, c4.children || []);
      b4.return = a5;
      return b4;
    }
    function m4(a5, b4, c4, d5, f3) {
      if (null === b4 || 7 !== b4.tag)
        return b4 = Ah(c4, a5.mode, d5, f3), b4.return = a5, b4;
      b4 = e3(b4, c4);
      b4.return = a5;
      return b4;
    }
    function q2(a5, b4, c4) {
      if ("string" === typeof b4 && "" !== b4 || "number" === typeof b4)
        return b4 = xh("" + b4, a5.mode, c4), b4.return = a5, b4;
      if ("object" === typeof b4 && null !== b4) {
        switch (b4.$$typeof) {
          case va:
            return c4 = yh(b4.type, b4.key, b4.props, null, a5.mode, c4), c4.ref = sh(a5, null, b4), c4.return = a5, c4;
          case wa:
            return b4 = zh(b4, a5.mode, c4), b4.return = a5, b4;
          case Ha:
            var d5 = b4._init;
            return q2(a5, d5(b4._payload), c4);
        }
        if (eb(b4) || Ka(b4))
          return b4 = Ah(b4, a5.mode, c4, null), b4.return = a5, b4;
        th(a5, b4);
      }
      return null;
    }
    function r2(a5, b4, c4, d5) {
      var e4 = null !== b4 ? b4.key : null;
      if ("string" === typeof c4 && "" !== c4 || "number" === typeof c4)
        return null !== e4 ? null : h4(a5, b4, "" + c4, d5);
      if ("object" === typeof c4 && null !== c4) {
        switch (c4.$$typeof) {
          case va:
            return c4.key === e4 ? k3(a5, b4, c4, d5) : null;
          case wa:
            return c4.key === e4 ? l2(a5, b4, c4, d5) : null;
          case Ha:
            return e4 = c4._init, r2(
              a5,
              b4,
              e4(c4._payload),
              d5
            );
        }
        if (eb(c4) || Ka(c4))
          return null !== e4 ? null : m4(a5, b4, c4, d5, null);
        th(a5, c4);
      }
      return null;
    }
    function y4(a5, b4, c4, d5, e4) {
      if ("string" === typeof d5 && "" !== d5 || "number" === typeof d5)
        return a5 = a5.get(c4) || null, h4(b4, a5, "" + d5, e4);
      if ("object" === typeof d5 && null !== d5) {
        switch (d5.$$typeof) {
          case va:
            return a5 = a5.get(null === d5.key ? c4 : d5.key) || null, k3(b4, a5, d5, e4);
          case wa:
            return a5 = a5.get(null === d5.key ? c4 : d5.key) || null, l2(b4, a5, d5, e4);
          case Ha:
            var f3 = d5._init;
            return y4(a5, b4, c4, f3(d5._payload), e4);
        }
        if (eb(d5) || Ka(d5))
          return a5 = a5.get(c4) || null, m4(b4, a5, d5, e4, null);
        th(b4, d5);
      }
      return null;
    }
    function n2(e4, g3, h5, k4) {
      for (var l3 = null, m5 = null, u3 = g3, w3 = g3 = 0, x3 = null; null !== u3 && w3 < h5.length; w3++) {
        u3.index > w3 ? (x3 = u3, u3 = null) : x3 = u3.sibling;
        var n3 = r2(e4, u3, h5[w3], k4);
        if (null === n3) {
          null === u3 && (u3 = x3);
          break;
        }
        a4 && u3 && null === n3.alternate && b3(e4, u3);
        g3 = f2(n3, g3, w3);
        null === m5 ? l3 = n3 : m5.sibling = n3;
        m5 = n3;
        u3 = x3;
      }
      if (w3 === h5.length)
        return c3(e4, u3), I3 && tg(e4, w3), l3;
      if (null === u3) {
        for (; w3 < h5.length; w3++)
          u3 = q2(e4, h5[w3], k4), null !== u3 && (g3 = f2(u3, g3, w3), null === m5 ? l3 = u3 : m5.sibling = u3, m5 = u3);
        I3 && tg(e4, w3);
        return l3;
      }
      for (u3 = d4(e4, u3); w3 < h5.length; w3++)
        x3 = y4(u3, e4, w3, h5[w3], k4), null !== x3 && (a4 && null !== x3.alternate && u3.delete(null === x3.key ? w3 : x3.key), g3 = f2(x3, g3, w3), null === m5 ? l3 = x3 : m5.sibling = x3, m5 = x3);
      a4 && u3.forEach(function(a5) {
        return b3(e4, a5);
      });
      I3 && tg(e4, w3);
      return l3;
    }
    function t3(e4, g3, h5, k4) {
      var l3 = Ka(h5);
      if ("function" !== typeof l3)
        throw Error(p2(150));
      h5 = l3.call(h5);
      if (null == h5)
        throw Error(p2(151));
      for (var u3 = l3 = null, m5 = g3, w3 = g3 = 0, x3 = null, n3 = h5.next(); null !== m5 && !n3.done; w3++, n3 = h5.next()) {
        m5.index > w3 ? (x3 = m5, m5 = null) : x3 = m5.sibling;
        var t4 = r2(e4, m5, n3.value, k4);
        if (null === t4) {
          null === m5 && (m5 = x3);
          break;
        }
        a4 && m5 && null === t4.alternate && b3(e4, m5);
        g3 = f2(t4, g3, w3);
        null === u3 ? l3 = t4 : u3.sibling = t4;
        u3 = t4;
        m5 = x3;
      }
      if (n3.done)
        return c3(
          e4,
          m5
        ), I3 && tg(e4, w3), l3;
      if (null === m5) {
        for (; !n3.done; w3++, n3 = h5.next())
          n3 = q2(e4, n3.value, k4), null !== n3 && (g3 = f2(n3, g3, w3), null === u3 ? l3 = n3 : u3.sibling = n3, u3 = n3);
        I3 && tg(e4, w3);
        return l3;
      }
      for (m5 = d4(e4, m5); !n3.done; w3++, n3 = h5.next())
        n3 = y4(m5, e4, w3, n3.value, k4), null !== n3 && (a4 && null !== n3.alternate && m5.delete(null === n3.key ? w3 : n3.key), g3 = f2(n3, g3, w3), null === u3 ? l3 = n3 : u3.sibling = n3, u3 = n3);
      a4 && m5.forEach(function(a5) {
        return b3(e4, a5);
      });
      I3 && tg(e4, w3);
      return l3;
    }
    function J(a5, d5, f3, h5) {
      "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
      if ("object" === typeof f3 && null !== f3) {
        switch (f3.$$typeof) {
          case va:
            a: {
              for (var k4 = f3.key, l3 = d5; null !== l3; ) {
                if (l3.key === k4) {
                  k4 = f3.type;
                  if (k4 === ya) {
                    if (7 === l3.tag) {
                      c3(a5, l3.sibling);
                      d5 = e3(l3, f3.props.children);
                      d5.return = a5;
                      a5 = d5;
                      break a;
                    }
                  } else if (l3.elementType === k4 || "object" === typeof k4 && null !== k4 && k4.$$typeof === Ha && uh(k4) === l3.type) {
                    c3(a5, l3.sibling);
                    d5 = e3(l3, f3.props);
                    d5.ref = sh(a5, l3, f3);
                    d5.return = a5;
                    a5 = d5;
                    break a;
                  }
                  c3(a5, l3);
                  break;
                } else
                  b3(a5, l3);
                l3 = l3.sibling;
              }
              f3.type === ya ? (d5 = Ah(f3.props.children, a5.mode, h5, f3.key), d5.return = a5, a5 = d5) : (h5 = yh(f3.type, f3.key, f3.props, null, a5.mode, h5), h5.ref = sh(a5, d5, f3), h5.return = a5, a5 = h5);
            }
            return g2(a5);
          case wa:
            a: {
              for (l3 = f3.key; null !== d5; ) {
                if (d5.key === l3)
                  if (4 === d5.tag && d5.stateNode.containerInfo === f3.containerInfo && d5.stateNode.implementation === f3.implementation) {
                    c3(a5, d5.sibling);
                    d5 = e3(d5, f3.children || []);
                    d5.return = a5;
                    a5 = d5;
                    break a;
                  } else {
                    c3(a5, d5);
                    break;
                  }
                else
                  b3(a5, d5);
                d5 = d5.sibling;
              }
              d5 = zh(f3, a5.mode, h5);
              d5.return = a5;
              a5 = d5;
            }
            return g2(a5);
          case Ha:
            return l3 = f3._init, J(a5, d5, l3(f3._payload), h5);
        }
        if (eb(f3))
          return n2(a5, d5, f3, h5);
        if (Ka(f3))
          return t3(a5, d5, f3, h5);
        th(a5, f3);
      }
      return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d5 && 6 === d5.tag ? (c3(a5, d5.sibling), d5 = e3(d5, f3), d5.return = a5, a5 = d5) : (c3(a5, d5), d5 = xh(f3, a5.mode, h5), d5.return = a5, a5 = d5), g2(a5)) : c3(a5, d5);
    }
    return J;
  }
  var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
  function Hh(a4) {
    if (a4 === Dh)
      throw Error(p2(174));
    return a4;
  }
  function Ih(a4, b3) {
    G2(Gh, b3);
    G2(Fh, a4);
    G2(Eh, Dh);
    a4 = b3.nodeType;
    switch (a4) {
      case 9:
      case 11:
        b3 = (b3 = b3.documentElement) ? b3.namespaceURI : lb(null, "");
        break;
      default:
        a4 = 8 === a4 ? b3.parentNode : b3, b3 = a4.namespaceURI || null, a4 = a4.tagName, b3 = lb(b3, a4);
    }
    E3(Eh);
    G2(Eh, b3);
  }
  function Jh() {
    E3(Eh);
    E3(Fh);
    E3(Gh);
  }
  function Kh(a4) {
    Hh(Gh.current);
    var b3 = Hh(Eh.current);
    var c3 = lb(b3, a4.type);
    b3 !== c3 && (G2(Fh, a4), G2(Eh, c3));
  }
  function Lh(a4) {
    Fh.current === a4 && (E3(Eh), E3(Fh));
  }
  var M4 = Uf(0);
  function Mh(a4) {
    for (var b3 = a4; null !== b3; ) {
      if (13 === b3.tag) {
        var c3 = b3.memoizedState;
        if (null !== c3 && (c3 = c3.dehydrated, null === c3 || "$?" === c3.data || "$!" === c3.data))
          return b3;
      } else if (19 === b3.tag && void 0 !== b3.memoizedProps.revealOrder) {
        if (0 !== (b3.flags & 128))
          return b3;
      } else if (null !== b3.child) {
        b3.child.return = b3;
        b3 = b3.child;
        continue;
      }
      if (b3 === a4)
        break;
      for (; null === b3.sibling; ) {
        if (null === b3.return || b3.return === a4)
          return null;
        b3 = b3.return;
      }
      b3.sibling.return = b3.return;
      b3 = b3.sibling;
    }
    return null;
  }
  var Nh = [];
  function Oh() {
    for (var a4 = 0; a4 < Nh.length; a4++)
      Nh[a4]._workInProgressVersionPrimary = null;
    Nh.length = 0;
  }
  var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N = null, O3 = null, P2 = null, Sh = false, Th = false, Uh = 0, Vh = 0;
  function Q2() {
    throw Error(p2(321));
  }
  function Wh(a4, b3) {
    if (null === b3)
      return false;
    for (var c3 = 0; c3 < b3.length && c3 < a4.length; c3++)
      if (!He2(a4[c3], b3[c3]))
        return false;
    return true;
  }
  function Xh(a4, b3, c3, d4, e3, f2) {
    Rh = f2;
    N = b3;
    b3.memoizedState = null;
    b3.updateQueue = null;
    b3.lanes = 0;
    Ph.current = null === a4 || null === a4.memoizedState ? Yh : Zh;
    a4 = c3(d4, e3);
    if (Th) {
      f2 = 0;
      do {
        Th = false;
        Uh = 0;
        if (25 <= f2)
          throw Error(p2(301));
        f2 += 1;
        P2 = O3 = null;
        b3.updateQueue = null;
        Ph.current = $h;
        a4 = c3(d4, e3);
      } while (Th);
    }
    Ph.current = ai;
    b3 = null !== O3 && null !== O3.next;
    Rh = 0;
    P2 = O3 = N = null;
    Sh = false;
    if (b3)
      throw Error(p2(300));
    return a4;
  }
  function bi() {
    var a4 = 0 !== Uh;
    Uh = 0;
    return a4;
  }
  function ci() {
    var a4 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    null === P2 ? N.memoizedState = P2 = a4 : P2 = P2.next = a4;
    return P2;
  }
  function di() {
    if (null === O3) {
      var a4 = N.alternate;
      a4 = null !== a4 ? a4.memoizedState : null;
    } else
      a4 = O3.next;
    var b3 = null === P2 ? N.memoizedState : P2.next;
    if (null !== b3)
      P2 = b3, O3 = a4;
    else {
      if (null === a4)
        throw Error(p2(310));
      O3 = a4;
      a4 = { memoizedState: O3.memoizedState, baseState: O3.baseState, baseQueue: O3.baseQueue, queue: O3.queue, next: null };
      null === P2 ? N.memoizedState = P2 = a4 : P2 = P2.next = a4;
    }
    return P2;
  }
  function ei(a4, b3) {
    return "function" === typeof b3 ? b3(a4) : b3;
  }
  function fi(a4) {
    var b3 = di(), c3 = b3.queue;
    if (null === c3)
      throw Error(p2(311));
    c3.lastRenderedReducer = a4;
    var d4 = O3, e3 = d4.baseQueue, f2 = c3.pending;
    if (null !== f2) {
      if (null !== e3) {
        var g2 = e3.next;
        e3.next = f2.next;
        f2.next = g2;
      }
      d4.baseQueue = e3 = f2;
      c3.pending = null;
    }
    if (null !== e3) {
      f2 = e3.next;
      d4 = d4.baseState;
      var h4 = g2 = null, k3 = null, l2 = f2;
      do {
        var m4 = l2.lane;
        if ((Rh & m4) === m4)
          null !== k3 && (k3 = k3.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d4 = l2.hasEagerState ? l2.eagerState : a4(d4, l2.action);
        else {
          var q2 = {
            lane: m4,
            action: l2.action,
            hasEagerState: l2.hasEagerState,
            eagerState: l2.eagerState,
            next: null
          };
          null === k3 ? (h4 = k3 = q2, g2 = d4) : k3 = k3.next = q2;
          N.lanes |= m4;
          hh |= m4;
        }
        l2 = l2.next;
      } while (null !== l2 && l2 !== f2);
      null === k3 ? g2 = d4 : k3.next = h4;
      He2(d4, b3.memoizedState) || (Ug = true);
      b3.memoizedState = d4;
      b3.baseState = g2;
      b3.baseQueue = k3;
      c3.lastRenderedState = d4;
    }
    a4 = c3.interleaved;
    if (null !== a4) {
      e3 = a4;
      do
        f2 = e3.lane, N.lanes |= f2, hh |= f2, e3 = e3.next;
      while (e3 !== a4);
    } else
      null === e3 && (c3.lanes = 0);
    return [b3.memoizedState, c3.dispatch];
  }
  function gi(a4) {
    var b3 = di(), c3 = b3.queue;
    if (null === c3)
      throw Error(p2(311));
    c3.lastRenderedReducer = a4;
    var d4 = c3.dispatch, e3 = c3.pending, f2 = b3.memoizedState;
    if (null !== e3) {
      c3.pending = null;
      var g2 = e3 = e3.next;
      do
        f2 = a4(f2, g2.action), g2 = g2.next;
      while (g2 !== e3);
      He2(f2, b3.memoizedState) || (Ug = true);
      b3.memoizedState = f2;
      null === b3.baseQueue && (b3.baseState = f2);
      c3.lastRenderedState = f2;
    }
    return [f2, d4];
  }
  function hi() {
  }
  function ii(a4, b3) {
    var c3 = N, d4 = di(), e3 = b3(), f2 = !He2(d4.memoizedState, e3);
    f2 && (d4.memoizedState = e3, Ug = true);
    d4 = d4.queue;
    ji(ki.bind(null, c3, d4, a4), [a4]);
    if (d4.getSnapshot !== b3 || f2 || null !== P2 && P2.memoizedState.tag & 1) {
      c3.flags |= 2048;
      li(9, mi.bind(null, c3, d4, e3, b3), void 0, null);
      if (null === R3)
        throw Error(p2(349));
      0 !== (Rh & 30) || ni(c3, b3, e3);
    }
    return e3;
  }
  function ni(a4, b3, c3) {
    a4.flags |= 16384;
    a4 = { getSnapshot: b3, value: c3 };
    b3 = N.updateQueue;
    null === b3 ? (b3 = { lastEffect: null, stores: null }, N.updateQueue = b3, b3.stores = [a4]) : (c3 = b3.stores, null === c3 ? b3.stores = [a4] : c3.push(a4));
  }
  function mi(a4, b3, c3, d4) {
    b3.value = c3;
    b3.getSnapshot = d4;
    oi(b3) && pi(a4);
  }
  function ki(a4, b3, c3) {
    return c3(function() {
      oi(b3) && pi(a4);
    });
  }
  function oi(a4) {
    var b3 = a4.getSnapshot;
    a4 = a4.value;
    try {
      var c3 = b3();
      return !He2(a4, c3);
    } catch (d4) {
      return true;
    }
  }
  function pi(a4) {
    var b3 = Zg(a4, 1);
    null !== b3 && mh(b3, a4, 1, -1);
  }
  function qi(a4) {
    var b3 = ci();
    "function" === typeof a4 && (a4 = a4());
    b3.memoizedState = b3.baseState = a4;
    a4 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a4 };
    b3.queue = a4;
    a4 = a4.dispatch = ri.bind(null, N, a4);
    return [b3.memoizedState, a4];
  }
  function li(a4, b3, c3, d4) {
    a4 = { tag: a4, create: b3, destroy: c3, deps: d4, next: null };
    b3 = N.updateQueue;
    null === b3 ? (b3 = { lastEffect: null, stores: null }, N.updateQueue = b3, b3.lastEffect = a4.next = a4) : (c3 = b3.lastEffect, null === c3 ? b3.lastEffect = a4.next = a4 : (d4 = c3.next, c3.next = a4, a4.next = d4, b3.lastEffect = a4));
    return a4;
  }
  function si() {
    return di().memoizedState;
  }
  function ti(a4, b3, c3, d4) {
    var e3 = ci();
    N.flags |= a4;
    e3.memoizedState = li(1 | b3, c3, void 0, void 0 === d4 ? null : d4);
  }
  function ui(a4, b3, c3, d4) {
    var e3 = di();
    d4 = void 0 === d4 ? null : d4;
    var f2 = void 0;
    if (null !== O3) {
      var g2 = O3.memoizedState;
      f2 = g2.destroy;
      if (null !== d4 && Wh(d4, g2.deps)) {
        e3.memoizedState = li(b3, c3, f2, d4);
        return;
      }
    }
    N.flags |= a4;
    e3.memoizedState = li(1 | b3, c3, f2, d4);
  }
  function vi2(a4, b3) {
    return ti(8390656, 8, a4, b3);
  }
  function ji(a4, b3) {
    return ui(2048, 8, a4, b3);
  }
  function wi(a4, b3) {
    return ui(4, 2, a4, b3);
  }
  function xi(a4, b3) {
    return ui(4, 4, a4, b3);
  }
  function yi(a4, b3) {
    if ("function" === typeof b3)
      return a4 = a4(), b3(a4), function() {
        b3(null);
      };
    if (null !== b3 && void 0 !== b3)
      return a4 = a4(), b3.current = a4, function() {
        b3.current = null;
      };
  }
  function zi(a4, b3, c3) {
    c3 = null !== c3 && void 0 !== c3 ? c3.concat([a4]) : null;
    return ui(4, 4, yi.bind(null, b3, a4), c3);
  }
  function Ai() {
  }
  function Bi(a4, b3) {
    var c3 = di();
    b3 = void 0 === b3 ? null : b3;
    var d4 = c3.memoizedState;
    if (null !== d4 && null !== b3 && Wh(b3, d4[1]))
      return d4[0];
    c3.memoizedState = [a4, b3];
    return a4;
  }
  function Ci(a4, b3) {
    var c3 = di();
    b3 = void 0 === b3 ? null : b3;
    var d4 = c3.memoizedState;
    if (null !== d4 && null !== b3 && Wh(b3, d4[1]))
      return d4[0];
    a4 = a4();
    c3.memoizedState = [a4, b3];
    return a4;
  }
  function Di(a4, b3, c3) {
    if (0 === (Rh & 21))
      return a4.baseState && (a4.baseState = false, Ug = true), a4.memoizedState = c3;
    He2(c3, b3) || (c3 = yc(), N.lanes |= c3, hh |= c3, a4.baseState = true);
    return b3;
  }
  function Ei(a4, b3) {
    var c3 = C2;
    C2 = 0 !== c3 && 4 > c3 ? c3 : 4;
    a4(true);
    var d4 = Qh.transition;
    Qh.transition = {};
    try {
      a4(false), b3();
    } finally {
      C2 = c3, Qh.transition = d4;
    }
  }
  function Fi() {
    return di().memoizedState;
  }
  function Gi(a4, b3, c3) {
    var d4 = lh(a4);
    c3 = { lane: d4, action: c3, hasEagerState: false, eagerState: null, next: null };
    if (Hi(a4))
      Ii(b3, c3);
    else if (c3 = Yg(a4, b3, c3, d4), null !== c3) {
      var e3 = L2();
      mh(c3, a4, d4, e3);
      Ji(c3, b3, d4);
    }
  }
  function ri(a4, b3, c3) {
    var d4 = lh(a4), e3 = { lane: d4, action: c3, hasEagerState: false, eagerState: null, next: null };
    if (Hi(a4))
      Ii(b3, e3);
    else {
      var f2 = a4.alternate;
      if (0 === a4.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b3.lastRenderedReducer, null !== f2))
        try {
          var g2 = b3.lastRenderedState, h4 = f2(g2, c3);
          e3.hasEagerState = true;
          e3.eagerState = h4;
          if (He2(h4, g2)) {
            var k3 = b3.interleaved;
            null === k3 ? (e3.next = e3, Xg(b3)) : (e3.next = k3.next, k3.next = e3);
            b3.interleaved = e3;
            return;
          }
        } catch (l2) {
        } finally {
        }
      c3 = Yg(a4, b3, e3, d4);
      null !== c3 && (e3 = L2(), mh(c3, a4, d4, e3), Ji(c3, b3, d4));
    }
  }
  function Hi(a4) {
    var b3 = a4.alternate;
    return a4 === N || null !== b3 && b3 === N;
  }
  function Ii(a4, b3) {
    Th = Sh = true;
    var c3 = a4.pending;
    null === c3 ? b3.next = b3 : (b3.next = c3.next, c3.next = b3);
    a4.pending = b3;
  }
  function Ji(a4, b3, c3) {
    if (0 !== (c3 & 4194240)) {
      var d4 = b3.lanes;
      d4 &= a4.pendingLanes;
      c3 |= d4;
      b3.lanes = c3;
      Cc(a4, c3);
    }
  }
  var ai = { readContext: Vg, useCallback: Q2, useContext: Q2, useEffect: Q2, useImperativeHandle: Q2, useInsertionEffect: Q2, useLayoutEffect: Q2, useMemo: Q2, useReducer: Q2, useRef: Q2, useState: Q2, useDebugValue: Q2, useDeferredValue: Q2, useTransition: Q2, useMutableSource: Q2, useSyncExternalStore: Q2, useId: Q2, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a4, b3) {
    ci().memoizedState = [a4, void 0 === b3 ? null : b3];
    return a4;
  }, useContext: Vg, useEffect: vi2, useImperativeHandle: function(a4, b3, c3) {
    c3 = null !== c3 && void 0 !== c3 ? c3.concat([a4]) : null;
    return ti(
      4194308,
      4,
      yi.bind(null, b3, a4),
      c3
    );
  }, useLayoutEffect: function(a4, b3) {
    return ti(4194308, 4, a4, b3);
  }, useInsertionEffect: function(a4, b3) {
    return ti(4, 2, a4, b3);
  }, useMemo: function(a4, b3) {
    var c3 = ci();
    b3 = void 0 === b3 ? null : b3;
    a4 = a4();
    c3.memoizedState = [a4, b3];
    return a4;
  }, useReducer: function(a4, b3, c3) {
    var d4 = ci();
    b3 = void 0 !== c3 ? c3(b3) : b3;
    d4.memoizedState = d4.baseState = b3;
    a4 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a4, lastRenderedState: b3 };
    d4.queue = a4;
    a4 = a4.dispatch = Gi.bind(null, N, a4);
    return [d4.memoizedState, a4];
  }, useRef: function(a4) {
    var b3 = ci();
    a4 = { current: a4 };
    return b3.memoizedState = a4;
  }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a4) {
    return ci().memoizedState = a4;
  }, useTransition: function() {
    var a4 = qi(false), b3 = a4[0];
    a4 = Ei.bind(null, a4[1]);
    ci().memoizedState = a4;
    return [b3, a4];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(a4, b3, c3) {
    var d4 = N, e3 = ci();
    if (I3) {
      if (void 0 === c3)
        throw Error(p2(407));
      c3 = c3();
    } else {
      c3 = b3();
      if (null === R3)
        throw Error(p2(349));
      0 !== (Rh & 30) || ni(d4, b3, c3);
    }
    e3.memoizedState = c3;
    var f2 = { value: c3, getSnapshot: b3 };
    e3.queue = f2;
    vi2(ki.bind(
      null,
      d4,
      f2,
      a4
    ), [a4]);
    d4.flags |= 2048;
    li(9, mi.bind(null, d4, f2, c3, b3), void 0, null);
    return c3;
  }, useId: function() {
    var a4 = ci(), b3 = R3.identifierPrefix;
    if (I3) {
      var c3 = sg;
      var d4 = rg;
      c3 = (d4 & ~(1 << 32 - oc(d4) - 1)).toString(32) + c3;
      b3 = ":" + b3 + "R" + c3;
      c3 = Uh++;
      0 < c3 && (b3 += "H" + c3.toString(32));
      b3 += ":";
    } else
      c3 = Vh++, b3 = ":" + b3 + "r" + c3.toString(32) + ":";
    return a4.memoizedState = b3;
  }, unstable_isNewReconciler: false }, Zh = {
    readContext: Vg,
    useCallback: Bi,
    useContext: Vg,
    useEffect: ji,
    useImperativeHandle: zi,
    useInsertionEffect: wi,
    useLayoutEffect: xi,
    useMemo: Ci,
    useReducer: fi,
    useRef: si,
    useState: function() {
      return fi(ei);
    },
    useDebugValue: Ai,
    useDeferredValue: function(a4) {
      var b3 = di();
      return Di(b3, O3.memoizedState, a4);
    },
    useTransition: function() {
      var a4 = fi(ei)[0], b3 = di().memoizedState;
      return [a4, b3];
    },
    useMutableSource: hi,
    useSyncExternalStore: ii,
    useId: Fi,
    unstable_isNewReconciler: false
  }, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
    return gi(ei);
  }, useDebugValue: Ai, useDeferredValue: function(a4) {
    var b3 = di();
    return null === O3 ? b3.memoizedState = a4 : Di(b3, O3.memoizedState, a4);
  }, useTransition: function() {
    var a4 = gi(ei)[0], b3 = di().memoizedState;
    return [a4, b3];
  }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
  function Ki(a4, b3) {
    try {
      var c3 = "", d4 = b3;
      do
        c3 += Pa(d4), d4 = d4.return;
      while (d4);
      var e3 = c3;
    } catch (f2) {
      e3 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
    }
    return { value: a4, source: b3, stack: e3, digest: null };
  }
  function Li(a4, b3, c3) {
    return { value: a4, source: null, stack: null != c3 ? c3 : null, digest: null != b3 ? b3 : null };
  }
  function Mi(a4, b3) {
    try {
      console.error(b3.value);
    } catch (c3) {
      setTimeout(function() {
        throw c3;
      });
    }
  }
  var Ni = "function" === typeof WeakMap ? WeakMap : Map;
  function Oi(a4, b3, c3) {
    c3 = ch(-1, c3);
    c3.tag = 3;
    c3.payload = { element: null };
    var d4 = b3.value;
    c3.callback = function() {
      Pi || (Pi = true, Qi = d4);
      Mi(a4, b3);
    };
    return c3;
  }
  function Ri(a4, b3, c3) {
    c3 = ch(-1, c3);
    c3.tag = 3;
    var d4 = a4.type.getDerivedStateFromError;
    if ("function" === typeof d4) {
      var e3 = b3.value;
      c3.payload = function() {
        return d4(e3);
      };
      c3.callback = function() {
        Mi(a4, b3);
      };
    }
    var f2 = a4.stateNode;
    null !== f2 && "function" === typeof f2.componentDidCatch && (c3.callback = function() {
      Mi(a4, b3);
      "function" !== typeof d4 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
      var c4 = b3.stack;
      this.componentDidCatch(b3.value, { componentStack: null !== c4 ? c4 : "" });
    });
    return c3;
  }
  function Ti(a4, b3, c3) {
    var d4 = a4.pingCache;
    if (null === d4) {
      d4 = a4.pingCache = new Ni();
      var e3 = /* @__PURE__ */ new Set();
      d4.set(b3, e3);
    } else
      e3 = d4.get(b3), void 0 === e3 && (e3 = /* @__PURE__ */ new Set(), d4.set(b3, e3));
    e3.has(c3) || (e3.add(c3), a4 = Ui.bind(null, a4, b3, c3), b3.then(a4, a4));
  }
  function Vi(a4) {
    do {
      var b3;
      if (b3 = 13 === a4.tag)
        b3 = a4.memoizedState, b3 = null !== b3 ? null !== b3.dehydrated ? true : false : true;
      if (b3)
        return a4;
      a4 = a4.return;
    } while (null !== a4);
    return null;
  }
  function Wi(a4, b3, c3, d4, e3) {
    if (0 === (a4.mode & 1))
      return a4 === b3 ? a4.flags |= 65536 : (a4.flags |= 128, c3.flags |= 131072, c3.flags &= -52805, 1 === c3.tag && (null === c3.alternate ? c3.tag = 17 : (b3 = ch(-1, 1), b3.tag = 2, dh(c3, b3, 1))), c3.lanes |= 1), a4;
    a4.flags |= 65536;
    a4.lanes = e3;
    return a4;
  }
  var Xi = ua.ReactCurrentOwner, Ug = false;
  function Yi(a4, b3, c3, d4) {
    b3.child = null === a4 ? Ch(b3, null, c3, d4) : Bh(b3, a4.child, c3, d4);
  }
  function Zi(a4, b3, c3, d4, e3) {
    c3 = c3.render;
    var f2 = b3.ref;
    Tg(b3, e3);
    d4 = Xh(a4, b3, c3, d4, f2, e3);
    c3 = bi();
    if (null !== a4 && !Ug)
      return b3.updateQueue = a4.updateQueue, b3.flags &= -2053, a4.lanes &= ~e3, $i(a4, b3, e3);
    I3 && c3 && vg(b3);
    b3.flags |= 1;
    Yi(a4, b3, d4, e3);
    return b3.child;
  }
  function aj(a4, b3, c3, d4, e3) {
    if (null === a4) {
      var f2 = c3.type;
      if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c3.compare && void 0 === c3.defaultProps)
        return b3.tag = 15, b3.type = f2, cj(a4, b3, f2, d4, e3);
      a4 = yh(c3.type, null, d4, b3, b3.mode, e3);
      a4.ref = b3.ref;
      a4.return = b3;
      return b3.child = a4;
    }
    f2 = a4.child;
    if (0 === (a4.lanes & e3)) {
      var g2 = f2.memoizedProps;
      c3 = c3.compare;
      c3 = null !== c3 ? c3 : Ie2;
      if (c3(g2, d4) && a4.ref === b3.ref)
        return $i(a4, b3, e3);
    }
    b3.flags |= 1;
    a4 = wh(f2, d4);
    a4.ref = b3.ref;
    a4.return = b3;
    return b3.child = a4;
  }
  function cj(a4, b3, c3, d4, e3) {
    if (null !== a4) {
      var f2 = a4.memoizedProps;
      if (Ie2(f2, d4) && a4.ref === b3.ref)
        if (Ug = false, b3.pendingProps = d4 = f2, 0 !== (a4.lanes & e3))
          0 !== (a4.flags & 131072) && (Ug = true);
        else
          return b3.lanes = a4.lanes, $i(a4, b3, e3);
    }
    return dj(a4, b3, c3, d4, e3);
  }
  function ej(a4, b3, c3) {
    var d4 = b3.pendingProps, e3 = d4.children, f2 = null !== a4 ? a4.memoizedState : null;
    if ("hidden" === d4.mode)
      if (0 === (b3.mode & 1))
        b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G2(fj, gj), gj |= c3;
      else {
        if (0 === (c3 & 1073741824))
          return a4 = null !== f2 ? f2.baseLanes | c3 : c3, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a4, cachePool: null, transitions: null }, b3.updateQueue = null, G2(fj, gj), gj |= a4, null;
        b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d4 = null !== f2 ? f2.baseLanes : c3;
        G2(fj, gj);
        gj |= d4;
      }
    else
      null !== f2 ? (d4 = f2.baseLanes | c3, b3.memoizedState = null) : d4 = c3, G2(fj, gj), gj |= d4;
    Yi(a4, b3, e3, c3);
    return b3.child;
  }
  function hj(a4, b3) {
    var c3 = b3.ref;
    if (null === a4 && null !== c3 || null !== a4 && a4.ref !== c3)
      b3.flags |= 512, b3.flags |= 2097152;
  }
  function dj(a4, b3, c3, d4, e3) {
    var f2 = Zf(c3) ? Xf : H3.current;
    f2 = Yf(b3, f2);
    Tg(b3, e3);
    c3 = Xh(a4, b3, c3, d4, f2, e3);
    d4 = bi();
    if (null !== a4 && !Ug)
      return b3.updateQueue = a4.updateQueue, b3.flags &= -2053, a4.lanes &= ~e3, $i(a4, b3, e3);
    I3 && d4 && vg(b3);
    b3.flags |= 1;
    Yi(a4, b3, c3, e3);
    return b3.child;
  }
  function ij(a4, b3, c3, d4, e3) {
    if (Zf(c3)) {
      var f2 = true;
      cg(b3);
    } else
      f2 = false;
    Tg(b3, e3);
    if (null === b3.stateNode)
      jj(a4, b3), ph(b3, c3, d4), rh(b3, c3, d4, e3), d4 = true;
    else if (null === a4) {
      var g2 = b3.stateNode, h4 = b3.memoizedProps;
      g2.props = h4;
      var k3 = g2.context, l2 = c3.contextType;
      "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c3) ? Xf : H3.current, l2 = Yf(b3, l2));
      var m4 = c3.getDerivedStateFromProps, q2 = "function" === typeof m4 || "function" === typeof g2.getSnapshotBeforeUpdate;
      q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h4 !== d4 || k3 !== l2) && qh(b3, g2, d4, l2);
      $g = false;
      var r2 = b3.memoizedState;
      g2.state = r2;
      gh(b3, d4, g2, e3);
      k3 = b3.memoizedState;
      h4 !== d4 || r2 !== k3 || Wf.current || $g ? ("function" === typeof m4 && (kh(b3, c3, m4, d4), k3 = b3.memoizedState), (h4 = $g || oh(b3, c3, h4, d4, r2, k3, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b3.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b3.flags |= 4194308), b3.memoizedProps = d4, b3.memoizedState = k3), g2.props = d4, g2.state = k3, g2.context = l2, d4 = h4) : ("function" === typeof g2.componentDidMount && (b3.flags |= 4194308), d4 = false);
    } else {
      g2 = b3.stateNode;
      bh(a4, b3);
      h4 = b3.memoizedProps;
      l2 = b3.type === b3.elementType ? h4 : Lg(b3.type, h4);
      g2.props = l2;
      q2 = b3.pendingProps;
      r2 = g2.context;
      k3 = c3.contextType;
      "object" === typeof k3 && null !== k3 ? k3 = Vg(k3) : (k3 = Zf(c3) ? Xf : H3.current, k3 = Yf(b3, k3));
      var y4 = c3.getDerivedStateFromProps;
      (m4 = "function" === typeof y4 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h4 !== q2 || r2 !== k3) && qh(b3, g2, d4, k3);
      $g = false;
      r2 = b3.memoizedState;
      g2.state = r2;
      gh(b3, d4, g2, e3);
      var n2 = b3.memoizedState;
      h4 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y4 && (kh(b3, c3, y4, d4), n2 = b3.memoizedState), (l2 = $g || oh(b3, c3, l2, d4, r2, n2, k3) || false) ? (m4 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d4, n2, k3), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d4, n2, k3)), "function" === typeof g2.componentDidUpdate && (b3.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b3.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h4 === a4.memoizedProps && r2 === a4.memoizedState || (b3.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h4 === a4.memoizedProps && r2 === a4.memoizedState || (b3.flags |= 1024), b3.memoizedProps = d4, b3.memoizedState = n2), g2.props = d4, g2.state = n2, g2.context = k3, d4 = l2) : ("function" !== typeof g2.componentDidUpdate || h4 === a4.memoizedProps && r2 === a4.memoizedState || (b3.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h4 === a4.memoizedProps && r2 === a4.memoizedState || (b3.flags |= 1024), d4 = false);
    }
    return kj(a4, b3, c3, d4, f2, e3);
  }
  function kj(a4, b3, c3, d4, e3, f2) {
    hj(a4, b3);
    var g2 = 0 !== (b3.flags & 128);
    if (!d4 && !g2)
      return e3 && dg(b3, c3, false), $i(a4, b3, f2);
    d4 = b3.stateNode;
    Xi.current = b3;
    var h4 = g2 && "function" !== typeof c3.getDerivedStateFromError ? null : d4.render();
    b3.flags |= 1;
    null !== a4 && g2 ? (b3.child = Bh(b3, a4.child, null, f2), b3.child = Bh(b3, null, h4, f2)) : Yi(a4, b3, h4, f2);
    b3.memoizedState = d4.state;
    e3 && dg(b3, c3, true);
    return b3.child;
  }
  function lj(a4) {
    var b3 = a4.stateNode;
    b3.pendingContext ? ag(a4, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && ag(a4, b3.context, false);
    Ih(a4, b3.containerInfo);
  }
  function mj(a4, b3, c3, d4, e3) {
    Ig();
    Jg(e3);
    b3.flags |= 256;
    Yi(a4, b3, c3, d4);
    return b3.child;
  }
  var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
  function oj(a4) {
    return { baseLanes: a4, cachePool: null, transitions: null };
  }
  function pj(a4, b3, c3) {
    var d4 = b3.pendingProps, e3 = M4.current, f2 = false, g2 = 0 !== (b3.flags & 128), h4;
    (h4 = g2) || (h4 = null !== a4 && null === a4.memoizedState ? false : 0 !== (e3 & 2));
    if (h4)
      f2 = true, b3.flags &= -129;
    else if (null === a4 || null !== a4.memoizedState)
      e3 |= 1;
    G2(M4, e3 & 1);
    if (null === a4) {
      Eg(b3);
      a4 = b3.memoizedState;
      if (null !== a4 && (a4 = a4.dehydrated, null !== a4))
        return 0 === (b3.mode & 1) ? b3.lanes = 1 : "$!" === a4.data ? b3.lanes = 8 : b3.lanes = 1073741824, null;
      g2 = d4.children;
      a4 = d4.fallback;
      return f2 ? (d4 = b3.mode, f2 = b3.child, g2 = { mode: "hidden", children: g2 }, 0 === (d4 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d4, 0, null), a4 = Ah(a4, d4, c3, null), f2.return = b3, a4.return = b3, f2.sibling = a4, b3.child = f2, b3.child.memoizedState = oj(c3), b3.memoizedState = nj, a4) : rj(b3, g2);
    }
    e3 = a4.memoizedState;
    if (null !== e3 && (h4 = e3.dehydrated, null !== h4))
      return sj(a4, b3, g2, d4, h4, e3, c3);
    if (f2) {
      f2 = d4.fallback;
      g2 = b3.mode;
      e3 = a4.child;
      h4 = e3.sibling;
      var k3 = { mode: "hidden", children: d4.children };
      0 === (g2 & 1) && b3.child !== e3 ? (d4 = b3.child, d4.childLanes = 0, d4.pendingProps = k3, b3.deletions = null) : (d4 = wh(e3, k3), d4.subtreeFlags = e3.subtreeFlags & 14680064);
      null !== h4 ? f2 = wh(h4, f2) : (f2 = Ah(f2, g2, c3, null), f2.flags |= 2);
      f2.return = b3;
      d4.return = b3;
      d4.sibling = f2;
      b3.child = d4;
      d4 = f2;
      f2 = b3.child;
      g2 = a4.child.memoizedState;
      g2 = null === g2 ? oj(c3) : { baseLanes: g2.baseLanes | c3, cachePool: null, transitions: g2.transitions };
      f2.memoizedState = g2;
      f2.childLanes = a4.childLanes & ~c3;
      b3.memoizedState = nj;
      return d4;
    }
    f2 = a4.child;
    a4 = f2.sibling;
    d4 = wh(f2, { mode: "visible", children: d4.children });
    0 === (b3.mode & 1) && (d4.lanes = c3);
    d4.return = b3;
    d4.sibling = null;
    null !== a4 && (c3 = b3.deletions, null === c3 ? (b3.deletions = [a4], b3.flags |= 16) : c3.push(a4));
    b3.child = d4;
    b3.memoizedState = null;
    return d4;
  }
  function rj(a4, b3) {
    b3 = qj({ mode: "visible", children: b3 }, a4.mode, 0, null);
    b3.return = a4;
    return a4.child = b3;
  }
  function tj(a4, b3, c3, d4) {
    null !== d4 && Jg(d4);
    Bh(b3, a4.child, null, c3);
    a4 = rj(b3, b3.pendingProps.children);
    a4.flags |= 2;
    b3.memoizedState = null;
    return a4;
  }
  function sj(a4, b3, c3, d4, e3, f2, g2) {
    if (c3) {
      if (b3.flags & 256)
        return b3.flags &= -257, d4 = Li(Error(p2(422))), tj(a4, b3, g2, d4);
      if (null !== b3.memoizedState)
        return b3.child = a4.child, b3.flags |= 128, null;
      f2 = d4.fallback;
      e3 = b3.mode;
      d4 = qj({ mode: "visible", children: d4.children }, e3, 0, null);
      f2 = Ah(f2, e3, g2, null);
      f2.flags |= 2;
      d4.return = b3;
      f2.return = b3;
      d4.sibling = f2;
      b3.child = d4;
      0 !== (b3.mode & 1) && Bh(b3, a4.child, null, g2);
      b3.child.memoizedState = oj(g2);
      b3.memoizedState = nj;
      return f2;
    }
    if (0 === (b3.mode & 1))
      return tj(a4, b3, g2, null);
    if ("$!" === e3.data) {
      d4 = e3.nextSibling && e3.nextSibling.dataset;
      if (d4)
        var h4 = d4.dgst;
      d4 = h4;
      f2 = Error(p2(419));
      d4 = Li(f2, d4, void 0);
      return tj(a4, b3, g2, d4);
    }
    h4 = 0 !== (g2 & a4.childLanes);
    if (Ug || h4) {
      d4 = R3;
      if (null !== d4) {
        switch (g2 & -g2) {
          case 4:
            e3 = 2;
            break;
          case 16:
            e3 = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            e3 = 32;
            break;
          case 536870912:
            e3 = 268435456;
            break;
          default:
            e3 = 0;
        }
        e3 = 0 !== (e3 & (d4.suspendedLanes | g2)) ? 0 : e3;
        0 !== e3 && e3 !== f2.retryLane && (f2.retryLane = e3, Zg(a4, e3), mh(d4, a4, e3, -1));
      }
      uj();
      d4 = Li(Error(p2(421)));
      return tj(a4, b3, g2, d4);
    }
    if ("$?" === e3.data)
      return b3.flags |= 128, b3.child = a4.child, b3 = vj.bind(null, a4), e3._reactRetry = b3, null;
    a4 = f2.treeContext;
    yg = Lf(e3.nextSibling);
    xg = b3;
    I3 = true;
    zg = null;
    null !== a4 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a4.id, sg = a4.overflow, qg = b3);
    b3 = rj(b3, d4.children);
    b3.flags |= 4096;
    return b3;
  }
  function wj(a4, b3, c3) {
    a4.lanes |= b3;
    var d4 = a4.alternate;
    null !== d4 && (d4.lanes |= b3);
    Sg(a4.return, b3, c3);
  }
  function xj(a4, b3, c3, d4, e3) {
    var f2 = a4.memoizedState;
    null === f2 ? a4.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d4, tail: c3, tailMode: e3 } : (f2.isBackwards = b3, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d4, f2.tail = c3, f2.tailMode = e3);
  }
  function yj(a4, b3, c3) {
    var d4 = b3.pendingProps, e3 = d4.revealOrder, f2 = d4.tail;
    Yi(a4, b3, d4.children, c3);
    d4 = M4.current;
    if (0 !== (d4 & 2))
      d4 = d4 & 1 | 2, b3.flags |= 128;
    else {
      if (null !== a4 && 0 !== (a4.flags & 128))
        a:
          for (a4 = b3.child; null !== a4; ) {
            if (13 === a4.tag)
              null !== a4.memoizedState && wj(a4, c3, b3);
            else if (19 === a4.tag)
              wj(a4, c3, b3);
            else if (null !== a4.child) {
              a4.child.return = a4;
              a4 = a4.child;
              continue;
            }
            if (a4 === b3)
              break a;
            for (; null === a4.sibling; ) {
              if (null === a4.return || a4.return === b3)
                break a;
              a4 = a4.return;
            }
            a4.sibling.return = a4.return;
            a4 = a4.sibling;
          }
      d4 &= 1;
    }
    G2(M4, d4);
    if (0 === (b3.mode & 1))
      b3.memoizedState = null;
    else
      switch (e3) {
        case "forwards":
          c3 = b3.child;
          for (e3 = null; null !== c3; )
            a4 = c3.alternate, null !== a4 && null === Mh(a4) && (e3 = c3), c3 = c3.sibling;
          c3 = e3;
          null === c3 ? (e3 = b3.child, b3.child = null) : (e3 = c3.sibling, c3.sibling = null);
          xj(b3, false, e3, c3, f2);
          break;
        case "backwards":
          c3 = null;
          e3 = b3.child;
          for (b3.child = null; null !== e3; ) {
            a4 = e3.alternate;
            if (null !== a4 && null === Mh(a4)) {
              b3.child = e3;
              break;
            }
            a4 = e3.sibling;
            e3.sibling = c3;
            c3 = e3;
            e3 = a4;
          }
          xj(b3, true, c3, null, f2);
          break;
        case "together":
          xj(b3, false, null, null, void 0);
          break;
        default:
          b3.memoizedState = null;
      }
    return b3.child;
  }
  function jj(a4, b3) {
    0 === (b3.mode & 1) && null !== a4 && (a4.alternate = null, b3.alternate = null, b3.flags |= 2);
  }
  function $i(a4, b3, c3) {
    null !== a4 && (b3.dependencies = a4.dependencies);
    hh |= b3.lanes;
    if (0 === (c3 & b3.childLanes))
      return null;
    if (null !== a4 && b3.child !== a4.child)
      throw Error(p2(153));
    if (null !== b3.child) {
      a4 = b3.child;
      c3 = wh(a4, a4.pendingProps);
      b3.child = c3;
      for (c3.return = b3; null !== a4.sibling; )
        a4 = a4.sibling, c3 = c3.sibling = wh(a4, a4.pendingProps), c3.return = b3;
      c3.sibling = null;
    }
    return b3.child;
  }
  function zj(a4, b3, c3) {
    switch (b3.tag) {
      case 3:
        lj(b3);
        Ig();
        break;
      case 5:
        Kh(b3);
        break;
      case 1:
        Zf(b3.type) && cg(b3);
        break;
      case 4:
        Ih(b3, b3.stateNode.containerInfo);
        break;
      case 10:
        var d4 = b3.type._context, e3 = b3.memoizedProps.value;
        G2(Mg, d4._currentValue);
        d4._currentValue = e3;
        break;
      case 13:
        d4 = b3.memoizedState;
        if (null !== d4) {
          if (null !== d4.dehydrated)
            return G2(M4, M4.current & 1), b3.flags |= 128, null;
          if (0 !== (c3 & b3.child.childLanes))
            return pj(a4, b3, c3);
          G2(M4, M4.current & 1);
          a4 = $i(a4, b3, c3);
          return null !== a4 ? a4.sibling : null;
        }
        G2(M4, M4.current & 1);
        break;
      case 19:
        d4 = 0 !== (c3 & b3.childLanes);
        if (0 !== (a4.flags & 128)) {
          if (d4)
            return yj(a4, b3, c3);
          b3.flags |= 128;
        }
        e3 = b3.memoizedState;
        null !== e3 && (e3.rendering = null, e3.tail = null, e3.lastEffect = null);
        G2(M4, M4.current);
        if (d4)
          break;
        else
          return null;
      case 22:
      case 23:
        return b3.lanes = 0, ej(a4, b3, c3);
    }
    return $i(a4, b3, c3);
  }
  var Aj, Bj, Cj, Dj;
  Aj = function(a4, b3) {
    for (var c3 = b3.child; null !== c3; ) {
      if (5 === c3.tag || 6 === c3.tag)
        a4.appendChild(c3.stateNode);
      else if (4 !== c3.tag && null !== c3.child) {
        c3.child.return = c3;
        c3 = c3.child;
        continue;
      }
      if (c3 === b3)
        break;
      for (; null === c3.sibling; ) {
        if (null === c3.return || c3.return === b3)
          return;
        c3 = c3.return;
      }
      c3.sibling.return = c3.return;
      c3 = c3.sibling;
    }
  };
  Bj = function() {
  };
  Cj = function(a4, b3, c3, d4) {
    var e3 = a4.memoizedProps;
    if (e3 !== d4) {
      a4 = b3.stateNode;
      Hh(Eh.current);
      var f2 = null;
      switch (c3) {
        case "input":
          e3 = Ya(a4, e3);
          d4 = Ya(a4, d4);
          f2 = [];
          break;
        case "select":
          e3 = A2({}, e3, { value: void 0 });
          d4 = A2({}, d4, { value: void 0 });
          f2 = [];
          break;
        case "textarea":
          e3 = gb(a4, e3);
          d4 = gb(a4, d4);
          f2 = [];
          break;
        default:
          "function" !== typeof e3.onClick && "function" === typeof d4.onClick && (a4.onclick = Bf);
      }
      ub(c3, d4);
      var g2;
      c3 = null;
      for (l2 in e3)
        if (!d4.hasOwnProperty(l2) && e3.hasOwnProperty(l2) && null != e3[l2])
          if ("style" === l2) {
            var h4 = e3[l2];
            for (g2 in h4)
              h4.hasOwnProperty(g2) && (c3 || (c3 = {}), c3[g2] = "");
          } else
            "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
      for (l2 in d4) {
        var k3 = d4[l2];
        h4 = null != e3 ? e3[l2] : void 0;
        if (d4.hasOwnProperty(l2) && k3 !== h4 && (null != k3 || null != h4))
          if ("style" === l2)
            if (h4) {
              for (g2 in h4)
                !h4.hasOwnProperty(g2) || k3 && k3.hasOwnProperty(g2) || (c3 || (c3 = {}), c3[g2] = "");
              for (g2 in k3)
                k3.hasOwnProperty(g2) && h4[g2] !== k3[g2] && (c3 || (c3 = {}), c3[g2] = k3[g2]);
            } else
              c3 || (f2 || (f2 = []), f2.push(
                l2,
                c3
              )), c3 = k3;
          else
            "dangerouslySetInnerHTML" === l2 ? (k3 = k3 ? k3.__html : void 0, h4 = h4 ? h4.__html : void 0, null != k3 && h4 !== k3 && (f2 = f2 || []).push(l2, k3)) : "children" === l2 ? "string" !== typeof k3 && "number" !== typeof k3 || (f2 = f2 || []).push(l2, "" + k3) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k3 && "onScroll" === l2 && D3("scroll", a4), f2 || h4 === k3 || (f2 = [])) : (f2 = f2 || []).push(l2, k3));
      }
      c3 && (f2 = f2 || []).push("style", c3);
      var l2 = f2;
      if (b3.updateQueue = l2)
        b3.flags |= 4;
    }
  };
  Dj = function(a4, b3, c3, d4) {
    c3 !== d4 && (b3.flags |= 4);
  };
  function Ej(a4, b3) {
    if (!I3)
      switch (a4.tailMode) {
        case "hidden":
          b3 = a4.tail;
          for (var c3 = null; null !== b3; )
            null !== b3.alternate && (c3 = b3), b3 = b3.sibling;
          null === c3 ? a4.tail = null : c3.sibling = null;
          break;
        case "collapsed":
          c3 = a4.tail;
          for (var d4 = null; null !== c3; )
            null !== c3.alternate && (d4 = c3), c3 = c3.sibling;
          null === d4 ? b3 || null === a4.tail ? a4.tail = null : a4.tail.sibling = null : d4.sibling = null;
      }
  }
  function S4(a4) {
    var b3 = null !== a4.alternate && a4.alternate.child === a4.child, c3 = 0, d4 = 0;
    if (b3)
      for (var e3 = a4.child; null !== e3; )
        c3 |= e3.lanes | e3.childLanes, d4 |= e3.subtreeFlags & 14680064, d4 |= e3.flags & 14680064, e3.return = a4, e3 = e3.sibling;
    else
      for (e3 = a4.child; null !== e3; )
        c3 |= e3.lanes | e3.childLanes, d4 |= e3.subtreeFlags, d4 |= e3.flags, e3.return = a4, e3 = e3.sibling;
    a4.subtreeFlags |= d4;
    a4.childLanes = c3;
    return b3;
  }
  function Fj(a4, b3, c3) {
    var d4 = b3.pendingProps;
    wg(b3);
    switch (b3.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return S4(b3), null;
      case 1:
        return Zf(b3.type) && $f(), S4(b3), null;
      case 3:
        d4 = b3.stateNode;
        Jh();
        E3(Wf);
        E3(H3);
        Oh();
        d4.pendingContext && (d4.context = d4.pendingContext, d4.pendingContext = null);
        if (null === a4 || null === a4.child)
          Gg(b3) ? b3.flags |= 4 : null === a4 || a4.memoizedState.isDehydrated && 0 === (b3.flags & 256) || (b3.flags |= 1024, null !== zg && (Gj(zg), zg = null));
        Bj(a4, b3);
        S4(b3);
        return null;
      case 5:
        Lh(b3);
        var e3 = Hh(Gh.current);
        c3 = b3.type;
        if (null !== a4 && null != b3.stateNode)
          Cj(a4, b3, c3, d4, e3), a4.ref !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
        else {
          if (!d4) {
            if (null === b3.stateNode)
              throw Error(p2(166));
            S4(b3);
            return null;
          }
          a4 = Hh(Eh.current);
          if (Gg(b3)) {
            d4 = b3.stateNode;
            c3 = b3.type;
            var f2 = b3.memoizedProps;
            d4[Of] = b3;
            d4[Pf] = f2;
            a4 = 0 !== (b3.mode & 1);
            switch (c3) {
              case "dialog":
                D3("cancel", d4);
                D3("close", d4);
                break;
              case "iframe":
              case "object":
              case "embed":
                D3("load", d4);
                break;
              case "video":
              case "audio":
                for (e3 = 0; e3 < lf.length; e3++)
                  D3(lf[e3], d4);
                break;
              case "source":
                D3("error", d4);
                break;
              case "img":
              case "image":
              case "link":
                D3(
                  "error",
                  d4
                );
                D3("load", d4);
                break;
              case "details":
                D3("toggle", d4);
                break;
              case "input":
                Za(d4, f2);
                D3("invalid", d4);
                break;
              case "select":
                d4._wrapperState = { wasMultiple: !!f2.multiple };
                D3("invalid", d4);
                break;
              case "textarea":
                hb(d4, f2), D3("invalid", d4);
            }
            ub(c3, f2);
            e3 = null;
            for (var g2 in f2)
              if (f2.hasOwnProperty(g2)) {
                var h4 = f2[g2];
                "children" === g2 ? "string" === typeof h4 ? d4.textContent !== h4 && (true !== f2.suppressHydrationWarning && Af(d4.textContent, h4, a4), e3 = ["children", h4]) : "number" === typeof h4 && d4.textContent !== "" + h4 && (true !== f2.suppressHydrationWarning && Af(
                  d4.textContent,
                  h4,
                  a4
                ), e3 = ["children", "" + h4]) : ea.hasOwnProperty(g2) && null != h4 && "onScroll" === g2 && D3("scroll", d4);
              }
            switch (c3) {
              case "input":
                Va(d4);
                db(d4, f2, true);
                break;
              case "textarea":
                Va(d4);
                jb(d4);
                break;
              case "select":
              case "option":
                break;
              default:
                "function" === typeof f2.onClick && (d4.onclick = Bf);
            }
            d4 = e3;
            b3.updateQueue = d4;
            null !== d4 && (b3.flags |= 4);
          } else {
            g2 = 9 === e3.nodeType ? e3 : e3.ownerDocument;
            "http://www.w3.org/1999/xhtml" === a4 && (a4 = kb(c3));
            "http://www.w3.org/1999/xhtml" === a4 ? "script" === c3 ? (a4 = g2.createElement("div"), a4.innerHTML = "<script><\/script>", a4 = a4.removeChild(a4.firstChild)) : "string" === typeof d4.is ? a4 = g2.createElement(c3, { is: d4.is }) : (a4 = g2.createElement(c3), "select" === c3 && (g2 = a4, d4.multiple ? g2.multiple = true : d4.size && (g2.size = d4.size))) : a4 = g2.createElementNS(a4, c3);
            a4[Of] = b3;
            a4[Pf] = d4;
            Aj(a4, b3, false, false);
            b3.stateNode = a4;
            a: {
              g2 = vb(c3, d4);
              switch (c3) {
                case "dialog":
                  D3("cancel", a4);
                  D3("close", a4);
                  e3 = d4;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D3("load", a4);
                  e3 = d4;
                  break;
                case "video":
                case "audio":
                  for (e3 = 0; e3 < lf.length; e3++)
                    D3(lf[e3], a4);
                  e3 = d4;
                  break;
                case "source":
                  D3("error", a4);
                  e3 = d4;
                  break;
                case "img":
                case "image":
                case "link":
                  D3(
                    "error",
                    a4
                  );
                  D3("load", a4);
                  e3 = d4;
                  break;
                case "details":
                  D3("toggle", a4);
                  e3 = d4;
                  break;
                case "input":
                  Za(a4, d4);
                  e3 = Ya(a4, d4);
                  D3("invalid", a4);
                  break;
                case "option":
                  e3 = d4;
                  break;
                case "select":
                  a4._wrapperState = { wasMultiple: !!d4.multiple };
                  e3 = A2({}, d4, { value: void 0 });
                  D3("invalid", a4);
                  break;
                case "textarea":
                  hb(a4, d4);
                  e3 = gb(a4, d4);
                  D3("invalid", a4);
                  break;
                default:
                  e3 = d4;
              }
              ub(c3, e3);
              h4 = e3;
              for (f2 in h4)
                if (h4.hasOwnProperty(f2)) {
                  var k3 = h4[f2];
                  "style" === f2 ? sb(a4, k3) : "dangerouslySetInnerHTML" === f2 ? (k3 = k3 ? k3.__html : void 0, null != k3 && nb(a4, k3)) : "children" === f2 ? "string" === typeof k3 ? ("textarea" !== c3 || "" !== k3) && ob(a4, k3) : "number" === typeof k3 && ob(a4, "" + k3) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k3 && "onScroll" === f2 && D3("scroll", a4) : null != k3 && ta2(a4, f2, k3, g2));
                }
              switch (c3) {
                case "input":
                  Va(a4);
                  db(a4, d4, false);
                  break;
                case "textarea":
                  Va(a4);
                  jb(a4);
                  break;
                case "option":
                  null != d4.value && a4.setAttribute("value", "" + Sa(d4.value));
                  break;
                case "select":
                  a4.multiple = !!d4.multiple;
                  f2 = d4.value;
                  null != f2 ? fb(a4, !!d4.multiple, f2, false) : null != d4.defaultValue && fb(
                    a4,
                    !!d4.multiple,
                    d4.defaultValue,
                    true
                  );
                  break;
                default:
                  "function" === typeof e3.onClick && (a4.onclick = Bf);
              }
              switch (c3) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  d4 = !!d4.autoFocus;
                  break a;
                case "img":
                  d4 = true;
                  break a;
                default:
                  d4 = false;
              }
            }
            d4 && (b3.flags |= 4);
          }
          null !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
        }
        S4(b3);
        return null;
      case 6:
        if (a4 && null != b3.stateNode)
          Dj(a4, b3, a4.memoizedProps, d4);
        else {
          if ("string" !== typeof d4 && null === b3.stateNode)
            throw Error(p2(166));
          c3 = Hh(Gh.current);
          Hh(Eh.current);
          if (Gg(b3)) {
            d4 = b3.stateNode;
            c3 = b3.memoizedProps;
            d4[Of] = b3;
            if (f2 = d4.nodeValue !== c3) {
              if (a4 = xg, null !== a4)
                switch (a4.tag) {
                  case 3:
                    Af(d4.nodeValue, c3, 0 !== (a4.mode & 1));
                    break;
                  case 5:
                    true !== a4.memoizedProps.suppressHydrationWarning && Af(d4.nodeValue, c3, 0 !== (a4.mode & 1));
                }
            }
            f2 && (b3.flags |= 4);
          } else
            d4 = (9 === c3.nodeType ? c3 : c3.ownerDocument).createTextNode(d4), d4[Of] = b3, b3.stateNode = d4;
        }
        S4(b3);
        return null;
      case 13:
        E3(M4);
        d4 = b3.memoizedState;
        if (null === a4 || null !== a4.memoizedState && null !== a4.memoizedState.dehydrated) {
          if (I3 && null !== yg && 0 !== (b3.mode & 1) && 0 === (b3.flags & 128))
            Hg(), Ig(), b3.flags |= 98560, f2 = false;
          else if (f2 = Gg(b3), null !== d4 && null !== d4.dehydrated) {
            if (null === a4) {
              if (!f2)
                throw Error(p2(318));
              f2 = b3.memoizedState;
              f2 = null !== f2 ? f2.dehydrated : null;
              if (!f2)
                throw Error(p2(317));
              f2[Of] = b3;
            } else
              Ig(), 0 === (b3.flags & 128) && (b3.memoizedState = null), b3.flags |= 4;
            S4(b3);
            f2 = false;
          } else
            null !== zg && (Gj(zg), zg = null), f2 = true;
          if (!f2)
            return b3.flags & 65536 ? b3 : null;
        }
        if (0 !== (b3.flags & 128))
          return b3.lanes = c3, b3;
        d4 = null !== d4;
        d4 !== (null !== a4 && null !== a4.memoizedState) && d4 && (b3.child.flags |= 8192, 0 !== (b3.mode & 1) && (null === a4 || 0 !== (M4.current & 1) ? 0 === T3 && (T3 = 3) : uj()));
        null !== b3.updateQueue && (b3.flags |= 4);
        S4(b3);
        return null;
      case 4:
        return Jh(), Bj(a4, b3), null === a4 && sf(b3.stateNode.containerInfo), S4(b3), null;
      case 10:
        return Rg(b3.type._context), S4(b3), null;
      case 17:
        return Zf(b3.type) && $f(), S4(b3), null;
      case 19:
        E3(M4);
        f2 = b3.memoizedState;
        if (null === f2)
          return S4(b3), null;
        d4 = 0 !== (b3.flags & 128);
        g2 = f2.rendering;
        if (null === g2)
          if (d4)
            Ej(f2, false);
          else {
            if (0 !== T3 || null !== a4 && 0 !== (a4.flags & 128))
              for (a4 = b3.child; null !== a4; ) {
                g2 = Mh(a4);
                if (null !== g2) {
                  b3.flags |= 128;
                  Ej(f2, false);
                  d4 = g2.updateQueue;
                  null !== d4 && (b3.updateQueue = d4, b3.flags |= 4);
                  b3.subtreeFlags = 0;
                  d4 = c3;
                  for (c3 = b3.child; null !== c3; )
                    f2 = c3, a4 = d4, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a4, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a4 = g2.dependencies, f2.dependencies = null === a4 ? null : { lanes: a4.lanes, firstContext: a4.firstContext }), c3 = c3.sibling;
                  G2(M4, M4.current & 1 | 2);
                  return b3.child;
                }
                a4 = a4.sibling;
              }
            null !== f2.tail && B2() > Hj && (b3.flags |= 128, d4 = true, Ej(f2, false), b3.lanes = 4194304);
          }
        else {
          if (!d4)
            if (a4 = Mh(g2), null !== a4) {
              if (b3.flags |= 128, d4 = true, c3 = a4.updateQueue, null !== c3 && (b3.updateQueue = c3, b3.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I3)
                return S4(b3), null;
            } else
              2 * B2() - f2.renderingStartTime > Hj && 1073741824 !== c3 && (b3.flags |= 128, d4 = true, Ej(f2, false), b3.lanes = 4194304);
          f2.isBackwards ? (g2.sibling = b3.child, b3.child = g2) : (c3 = f2.last, null !== c3 ? c3.sibling = g2 : b3.child = g2, f2.last = g2);
        }
        if (null !== f2.tail)
          return b3 = f2.tail, f2.rendering = b3, f2.tail = b3.sibling, f2.renderingStartTime = B2(), b3.sibling = null, c3 = M4.current, G2(M4, d4 ? c3 & 1 | 2 : c3 & 1), b3;
        S4(b3);
        return null;
      case 22:
      case 23:
        return Ij(), d4 = null !== b3.memoizedState, null !== a4 && null !== a4.memoizedState !== d4 && (b3.flags |= 8192), d4 && 0 !== (b3.mode & 1) ? 0 !== (gj & 1073741824) && (S4(b3), b3.subtreeFlags & 6 && (b3.flags |= 8192)) : S4(b3), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(p2(156, b3.tag));
  }
  function Jj(a4, b3) {
    wg(b3);
    switch (b3.tag) {
      case 1:
        return Zf(b3.type) && $f(), a4 = b3.flags, a4 & 65536 ? (b3.flags = a4 & -65537 | 128, b3) : null;
      case 3:
        return Jh(), E3(Wf), E3(H3), Oh(), a4 = b3.flags, 0 !== (a4 & 65536) && 0 === (a4 & 128) ? (b3.flags = a4 & -65537 | 128, b3) : null;
      case 5:
        return Lh(b3), null;
      case 13:
        E3(M4);
        a4 = b3.memoizedState;
        if (null !== a4 && null !== a4.dehydrated) {
          if (null === b3.alternate)
            throw Error(p2(340));
          Ig();
        }
        a4 = b3.flags;
        return a4 & 65536 ? (b3.flags = a4 & -65537 | 128, b3) : null;
      case 19:
        return E3(M4), null;
      case 4:
        return Jh(), null;
      case 10:
        return Rg(b3.type._context), null;
      case 22:
      case 23:
        return Ij(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Kj = false, U2 = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V2 = null;
  function Mj(a4, b3) {
    var c3 = a4.ref;
    if (null !== c3)
      if ("function" === typeof c3)
        try {
          c3(null);
        } catch (d4) {
          W(a4, b3, d4);
        }
      else
        c3.current = null;
  }
  function Nj(a4, b3, c3) {
    try {
      c3();
    } catch (d4) {
      W(a4, b3, d4);
    }
  }
  var Oj = false;
  function Pj(a4, b3) {
    Cf = dd;
    a4 = Me2();
    if (Ne2(a4)) {
      if ("selectionStart" in a4)
        var c3 = { start: a4.selectionStart, end: a4.selectionEnd };
      else
        a: {
          c3 = (c3 = a4.ownerDocument) && c3.defaultView || window;
          var d4 = c3.getSelection && c3.getSelection();
          if (d4 && 0 !== d4.rangeCount) {
            c3 = d4.anchorNode;
            var e3 = d4.anchorOffset, f2 = d4.focusNode;
            d4 = d4.focusOffset;
            try {
              c3.nodeType, f2.nodeType;
            } catch (F2) {
              c3 = null;
              break a;
            }
            var g2 = 0, h4 = -1, k3 = -1, l2 = 0, m4 = 0, q2 = a4, r2 = null;
            b:
              for (; ; ) {
                for (var y4; ; ) {
                  q2 !== c3 || 0 !== e3 && 3 !== q2.nodeType || (h4 = g2 + e3);
                  q2 !== f2 || 0 !== d4 && 3 !== q2.nodeType || (k3 = g2 + d4);
                  3 === q2.nodeType && (g2 += q2.nodeValue.length);
                  if (null === (y4 = q2.firstChild))
                    break;
                  r2 = q2;
                  q2 = y4;
                }
                for (; ; ) {
                  if (q2 === a4)
                    break b;
                  r2 === c3 && ++l2 === e3 && (h4 = g2);
                  r2 === f2 && ++m4 === d4 && (k3 = g2);
                  if (null !== (y4 = q2.nextSibling))
                    break;
                  q2 = r2;
                  r2 = q2.parentNode;
                }
                q2 = y4;
              }
            c3 = -1 === h4 || -1 === k3 ? null : { start: h4, end: k3 };
          } else
            c3 = null;
        }
      c3 = c3 || { start: 0, end: 0 };
    } else
      c3 = null;
    Df = { focusedElem: a4, selectionRange: c3 };
    dd = false;
    for (V2 = b3; null !== V2; )
      if (b3 = V2, a4 = b3.child, 0 !== (b3.subtreeFlags & 1028) && null !== a4)
        a4.return = b3, V2 = a4;
      else
        for (; null !== V2; ) {
          b3 = V2;
          try {
            var n2 = b3.alternate;
            if (0 !== (b3.flags & 1024))
              switch (b3.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (null !== n2) {
                    var t3 = n2.memoizedProps, J = n2.memoizedState, x3 = b3.stateNode, w3 = x3.getSnapshotBeforeUpdate(b3.elementType === b3.type ? t3 : Lg(b3.type, t3), J);
                    x3.__reactInternalSnapshotBeforeUpdate = w3;
                  }
                  break;
                case 3:
                  var u3 = b3.stateNode.containerInfo;
                  1 === u3.nodeType ? u3.textContent = "" : 9 === u3.nodeType && u3.documentElement && u3.removeChild(u3.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(p2(163));
              }
          } catch (F2) {
            W(b3, b3.return, F2);
          }
          a4 = b3.sibling;
          if (null !== a4) {
            a4.return = b3.return;
            V2 = a4;
            break;
          }
          V2 = b3.return;
        }
    n2 = Oj;
    Oj = false;
    return n2;
  }
  function Qj(a4, b3, c3) {
    var d4 = b3.updateQueue;
    d4 = null !== d4 ? d4.lastEffect : null;
    if (null !== d4) {
      var e3 = d4 = d4.next;
      do {
        if ((e3.tag & a4) === a4) {
          var f2 = e3.destroy;
          e3.destroy = void 0;
          void 0 !== f2 && Nj(b3, c3, f2);
        }
        e3 = e3.next;
      } while (e3 !== d4);
    }
  }
  function Rj(a4, b3) {
    b3 = b3.updateQueue;
    b3 = null !== b3 ? b3.lastEffect : null;
    if (null !== b3) {
      var c3 = b3 = b3.next;
      do {
        if ((c3.tag & a4) === a4) {
          var d4 = c3.create;
          c3.destroy = d4();
        }
        c3 = c3.next;
      } while (c3 !== b3);
    }
  }
  function Sj(a4) {
    var b3 = a4.ref;
    if (null !== b3) {
      var c3 = a4.stateNode;
      switch (a4.tag) {
        case 5:
          a4 = c3;
          break;
        default:
          a4 = c3;
      }
      "function" === typeof b3 ? b3(a4) : b3.current = a4;
    }
  }
  function Tj(a4) {
    var b3 = a4.alternate;
    null !== b3 && (a4.alternate = null, Tj(b3));
    a4.child = null;
    a4.deletions = null;
    a4.sibling = null;
    5 === a4.tag && (b3 = a4.stateNode, null !== b3 && (delete b3[Of], delete b3[Pf], delete b3[of], delete b3[Qf], delete b3[Rf]));
    a4.stateNode = null;
    a4.return = null;
    a4.dependencies = null;
    a4.memoizedProps = null;
    a4.memoizedState = null;
    a4.pendingProps = null;
    a4.stateNode = null;
    a4.updateQueue = null;
  }
  function Uj(a4) {
    return 5 === a4.tag || 3 === a4.tag || 4 === a4.tag;
  }
  function Vj(a4) {
    a:
      for (; ; ) {
        for (; null === a4.sibling; ) {
          if (null === a4.return || Uj(a4.return))
            return null;
          a4 = a4.return;
        }
        a4.sibling.return = a4.return;
        for (a4 = a4.sibling; 5 !== a4.tag && 6 !== a4.tag && 18 !== a4.tag; ) {
          if (a4.flags & 2)
            continue a;
          if (null === a4.child || 4 === a4.tag)
            continue a;
          else
            a4.child.return = a4, a4 = a4.child;
        }
        if (!(a4.flags & 2))
          return a4.stateNode;
      }
  }
  function Wj(a4, b3, c3) {
    var d4 = a4.tag;
    if (5 === d4 || 6 === d4)
      a4 = a4.stateNode, b3 ? 8 === c3.nodeType ? c3.parentNode.insertBefore(a4, b3) : c3.insertBefore(a4, b3) : (8 === c3.nodeType ? (b3 = c3.parentNode, b3.insertBefore(a4, c3)) : (b3 = c3, b3.appendChild(a4)), c3 = c3._reactRootContainer, null !== c3 && void 0 !== c3 || null !== b3.onclick || (b3.onclick = Bf));
    else if (4 !== d4 && (a4 = a4.child, null !== a4))
      for (Wj(a4, b3, c3), a4 = a4.sibling; null !== a4; )
        Wj(a4, b3, c3), a4 = a4.sibling;
  }
  function Xj(a4, b3, c3) {
    var d4 = a4.tag;
    if (5 === d4 || 6 === d4)
      a4 = a4.stateNode, b3 ? c3.insertBefore(a4, b3) : c3.appendChild(a4);
    else if (4 !== d4 && (a4 = a4.child, null !== a4))
      for (Xj(a4, b3, c3), a4 = a4.sibling; null !== a4; )
        Xj(a4, b3, c3), a4 = a4.sibling;
  }
  var X2 = null, Yj = false;
  function Zj(a4, b3, c3) {
    for (c3 = c3.child; null !== c3; )
      ak(a4, b3, c3), c3 = c3.sibling;
  }
  function ak(a4, b3, c3) {
    if (lc && "function" === typeof lc.onCommitFiberUnmount)
      try {
        lc.onCommitFiberUnmount(kc, c3);
      } catch (h4) {
      }
    switch (c3.tag) {
      case 5:
        U2 || Mj(c3, b3);
      case 6:
        var d4 = X2, e3 = Yj;
        X2 = null;
        Zj(a4, b3, c3);
        X2 = d4;
        Yj = e3;
        null !== X2 && (Yj ? (a4 = X2, c3 = c3.stateNode, 8 === a4.nodeType ? a4.parentNode.removeChild(c3) : a4.removeChild(c3)) : X2.removeChild(c3.stateNode));
        break;
      case 18:
        null !== X2 && (Yj ? (a4 = X2, c3 = c3.stateNode, 8 === a4.nodeType ? Kf(a4.parentNode, c3) : 1 === a4.nodeType && Kf(a4, c3), bd(a4)) : Kf(X2, c3.stateNode));
        break;
      case 4:
        d4 = X2;
        e3 = Yj;
        X2 = c3.stateNode.containerInfo;
        Yj = true;
        Zj(a4, b3, c3);
        X2 = d4;
        Yj = e3;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (!U2 && (d4 = c3.updateQueue, null !== d4 && (d4 = d4.lastEffect, null !== d4))) {
          e3 = d4 = d4.next;
          do {
            var f2 = e3, g2 = f2.destroy;
            f2 = f2.tag;
            void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c3, b3, g2) : 0 !== (f2 & 4) && Nj(c3, b3, g2));
            e3 = e3.next;
          } while (e3 !== d4);
        }
        Zj(a4, b3, c3);
        break;
      case 1:
        if (!U2 && (Mj(c3, b3), d4 = c3.stateNode, "function" === typeof d4.componentWillUnmount))
          try {
            d4.props = c3.memoizedProps, d4.state = c3.memoizedState, d4.componentWillUnmount();
          } catch (h4) {
            W(c3, b3, h4);
          }
        Zj(a4, b3, c3);
        break;
      case 21:
        Zj(a4, b3, c3);
        break;
      case 22:
        c3.mode & 1 ? (U2 = (d4 = U2) || null !== c3.memoizedState, Zj(a4, b3, c3), U2 = d4) : Zj(a4, b3, c3);
        break;
      default:
        Zj(a4, b3, c3);
    }
  }
  function bk(a4) {
    var b3 = a4.updateQueue;
    if (null !== b3) {
      a4.updateQueue = null;
      var c3 = a4.stateNode;
      null === c3 && (c3 = a4.stateNode = new Lj());
      b3.forEach(function(b4) {
        var d4 = ck.bind(null, a4, b4);
        c3.has(b4) || (c3.add(b4), b4.then(d4, d4));
      });
    }
  }
  function dk(a4, b3) {
    var c3 = b3.deletions;
    if (null !== c3)
      for (var d4 = 0; d4 < c3.length; d4++) {
        var e3 = c3[d4];
        try {
          var f2 = a4, g2 = b3, h4 = g2;
          a:
            for (; null !== h4; ) {
              switch (h4.tag) {
                case 5:
                  X2 = h4.stateNode;
                  Yj = false;
                  break a;
                case 3:
                  X2 = h4.stateNode.containerInfo;
                  Yj = true;
                  break a;
                case 4:
                  X2 = h4.stateNode.containerInfo;
                  Yj = true;
                  break a;
              }
              h4 = h4.return;
            }
          if (null === X2)
            throw Error(p2(160));
          ak(f2, g2, e3);
          X2 = null;
          Yj = false;
          var k3 = e3.alternate;
          null !== k3 && (k3.return = null);
          e3.return = null;
        } catch (l2) {
          W(e3, b3, l2);
        }
      }
    if (b3.subtreeFlags & 12854)
      for (b3 = b3.child; null !== b3; )
        ek(b3, a4), b3 = b3.sibling;
  }
  function ek(a4, b3) {
    var c3 = a4.alternate, d4 = a4.flags;
    switch (a4.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        dk(b3, a4);
        fk(a4);
        if (d4 & 4) {
          try {
            Qj(3, a4, a4.return), Rj(3, a4);
          } catch (t3) {
            W(a4, a4.return, t3);
          }
          try {
            Qj(5, a4, a4.return);
          } catch (t3) {
            W(a4, a4.return, t3);
          }
        }
        break;
      case 1:
        dk(b3, a4);
        fk(a4);
        d4 & 512 && null !== c3 && Mj(c3, c3.return);
        break;
      case 5:
        dk(b3, a4);
        fk(a4);
        d4 & 512 && null !== c3 && Mj(c3, c3.return);
        if (a4.flags & 32) {
          var e3 = a4.stateNode;
          try {
            ob(e3, "");
          } catch (t3) {
            W(a4, a4.return, t3);
          }
        }
        if (d4 & 4 && (e3 = a4.stateNode, null != e3)) {
          var f2 = a4.memoizedProps, g2 = null !== c3 ? c3.memoizedProps : f2, h4 = a4.type, k3 = a4.updateQueue;
          a4.updateQueue = null;
          if (null !== k3)
            try {
              "input" === h4 && "radio" === f2.type && null != f2.name && ab(e3, f2);
              vb(h4, g2);
              var l2 = vb(h4, f2);
              for (g2 = 0; g2 < k3.length; g2 += 2) {
                var m4 = k3[g2], q2 = k3[g2 + 1];
                "style" === m4 ? sb(e3, q2) : "dangerouslySetInnerHTML" === m4 ? nb(e3, q2) : "children" === m4 ? ob(e3, q2) : ta2(e3, m4, q2, l2);
              }
              switch (h4) {
                case "input":
                  bb(e3, f2);
                  break;
                case "textarea":
                  ib(e3, f2);
                  break;
                case "select":
                  var r2 = e3._wrapperState.wasMultiple;
                  e3._wrapperState.wasMultiple = !!f2.multiple;
                  var y4 = f2.value;
                  null != y4 ? fb(e3, !!f2.multiple, y4, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                    e3,
                    !!f2.multiple,
                    f2.defaultValue,
                    true
                  ) : fb(e3, !!f2.multiple, f2.multiple ? [] : "", false));
              }
              e3[Pf] = f2;
            } catch (t3) {
              W(a4, a4.return, t3);
            }
        }
        break;
      case 6:
        dk(b3, a4);
        fk(a4);
        if (d4 & 4) {
          if (null === a4.stateNode)
            throw Error(p2(162));
          e3 = a4.stateNode;
          f2 = a4.memoizedProps;
          try {
            e3.nodeValue = f2;
          } catch (t3) {
            W(a4, a4.return, t3);
          }
        }
        break;
      case 3:
        dk(b3, a4);
        fk(a4);
        if (d4 & 4 && null !== c3 && c3.memoizedState.isDehydrated)
          try {
            bd(b3.containerInfo);
          } catch (t3) {
            W(a4, a4.return, t3);
          }
        break;
      case 4:
        dk(b3, a4);
        fk(a4);
        break;
      case 13:
        dk(b3, a4);
        fk(a4);
        e3 = a4.child;
        e3.flags & 8192 && (f2 = null !== e3.memoizedState, e3.stateNode.isHidden = f2, !f2 || null !== e3.alternate && null !== e3.alternate.memoizedState || (gk = B2()));
        d4 & 4 && bk(a4);
        break;
      case 22:
        m4 = null !== c3 && null !== c3.memoizedState;
        a4.mode & 1 ? (U2 = (l2 = U2) || m4, dk(b3, a4), U2 = l2) : dk(b3, a4);
        fk(a4);
        if (d4 & 8192) {
          l2 = null !== a4.memoizedState;
          if ((a4.stateNode.isHidden = l2) && !m4 && 0 !== (a4.mode & 1))
            for (V2 = a4, m4 = a4.child; null !== m4; ) {
              for (q2 = V2 = m4; null !== V2; ) {
                r2 = V2;
                y4 = r2.child;
                switch (r2.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Qj(4, r2, r2.return);
                    break;
                  case 1:
                    Mj(r2, r2.return);
                    var n2 = r2.stateNode;
                    if ("function" === typeof n2.componentWillUnmount) {
                      d4 = r2;
                      c3 = r2.return;
                      try {
                        b3 = d4, n2.props = b3.memoizedProps, n2.state = b3.memoizedState, n2.componentWillUnmount();
                      } catch (t3) {
                        W(d4, c3, t3);
                      }
                    }
                    break;
                  case 5:
                    Mj(r2, r2.return);
                    break;
                  case 22:
                    if (null !== r2.memoizedState) {
                      hk(q2);
                      continue;
                    }
                }
                null !== y4 ? (y4.return = r2, V2 = y4) : hk(q2);
              }
              m4 = m4.sibling;
            }
          a:
            for (m4 = null, q2 = a4; ; ) {
              if (5 === q2.tag) {
                if (null === m4) {
                  m4 = q2;
                  try {
                    e3 = q2.stateNode, l2 ? (f2 = e3.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h4 = q2.stateNode, k3 = q2.memoizedProps.style, g2 = void 0 !== k3 && null !== k3 && k3.hasOwnProperty("display") ? k3.display : null, h4.style.display = rb("display", g2));
                  } catch (t3) {
                    W(a4, a4.return, t3);
                  }
                }
              } else if (6 === q2.tag) {
                if (null === m4)
                  try {
                    q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                  } catch (t3) {
                    W(a4, a4.return, t3);
                  }
              } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a4) && null !== q2.child) {
                q2.child.return = q2;
                q2 = q2.child;
                continue;
              }
              if (q2 === a4)
                break a;
              for (; null === q2.sibling; ) {
                if (null === q2.return || q2.return === a4)
                  break a;
                m4 === q2 && (m4 = null);
                q2 = q2.return;
              }
              m4 === q2 && (m4 = null);
              q2.sibling.return = q2.return;
              q2 = q2.sibling;
            }
        }
        break;
      case 19:
        dk(b3, a4);
        fk(a4);
        d4 & 4 && bk(a4);
        break;
      case 21:
        break;
      default:
        dk(
          b3,
          a4
        ), fk(a4);
    }
  }
  function fk(a4) {
    var b3 = a4.flags;
    if (b3 & 2) {
      try {
        a: {
          for (var c3 = a4.return; null !== c3; ) {
            if (Uj(c3)) {
              var d4 = c3;
              break a;
            }
            c3 = c3.return;
          }
          throw Error(p2(160));
        }
        switch (d4.tag) {
          case 5:
            var e3 = d4.stateNode;
            d4.flags & 32 && (ob(e3, ""), d4.flags &= -33);
            var f2 = Vj(a4);
            Xj(a4, f2, e3);
            break;
          case 3:
          case 4:
            var g2 = d4.stateNode.containerInfo, h4 = Vj(a4);
            Wj(a4, h4, g2);
            break;
          default:
            throw Error(p2(161));
        }
      } catch (k3) {
        W(a4, a4.return, k3);
      }
      a4.flags &= -3;
    }
    b3 & 4096 && (a4.flags &= -4097);
  }
  function ik(a4, b3, c3) {
    V2 = a4;
    jk(a4);
  }
  function jk(a4, b3, c3) {
    for (var d4 = 0 !== (a4.mode & 1); null !== V2; ) {
      var e3 = V2, f2 = e3.child;
      if (22 === e3.tag && d4) {
        var g2 = null !== e3.memoizedState || Kj;
        if (!g2) {
          var h4 = e3.alternate, k3 = null !== h4 && null !== h4.memoizedState || U2;
          h4 = Kj;
          var l2 = U2;
          Kj = g2;
          if ((U2 = k3) && !l2)
            for (V2 = e3; null !== V2; )
              g2 = V2, k3 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e3) : null !== k3 ? (k3.return = g2, V2 = k3) : kk(e3);
          for (; null !== f2; )
            V2 = f2, jk(f2), f2 = f2.sibling;
          V2 = e3;
          Kj = h4;
          U2 = l2;
        }
        lk(a4);
      } else
        0 !== (e3.subtreeFlags & 8772) && null !== f2 ? (f2.return = e3, V2 = f2) : lk(a4);
    }
  }
  function lk(a4) {
    for (; null !== V2; ) {
      var b3 = V2;
      if (0 !== (b3.flags & 8772)) {
        var c3 = b3.alternate;
        try {
          if (0 !== (b3.flags & 8772))
            switch (b3.tag) {
              case 0:
              case 11:
              case 15:
                U2 || Rj(5, b3);
                break;
              case 1:
                var d4 = b3.stateNode;
                if (b3.flags & 4 && !U2)
                  if (null === c3)
                    d4.componentDidMount();
                  else {
                    var e3 = b3.elementType === b3.type ? c3.memoizedProps : Lg(b3.type, c3.memoizedProps);
                    d4.componentDidUpdate(e3, c3.memoizedState, d4.__reactInternalSnapshotBeforeUpdate);
                  }
                var f2 = b3.updateQueue;
                null !== f2 && ih(b3, f2, d4);
                break;
              case 3:
                var g2 = b3.updateQueue;
                if (null !== g2) {
                  c3 = null;
                  if (null !== b3.child)
                    switch (b3.child.tag) {
                      case 5:
                        c3 = b3.child.stateNode;
                        break;
                      case 1:
                        c3 = b3.child.stateNode;
                    }
                  ih(b3, g2, c3);
                }
                break;
              case 5:
                var h4 = b3.stateNode;
                if (null === c3 && b3.flags & 4) {
                  c3 = h4;
                  var k3 = b3.memoizedProps;
                  switch (b3.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k3.autoFocus && c3.focus();
                      break;
                    case "img":
                      k3.src && (c3.src = k3.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b3.memoizedState) {
                  var l2 = b3.alternate;
                  if (null !== l2) {
                    var m4 = l2.memoizedState;
                    if (null !== m4) {
                      var q2 = m4.dehydrated;
                      null !== q2 && bd(q2);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p2(163));
            }
          U2 || b3.flags & 512 && Sj(b3);
        } catch (r2) {
          W(b3, b3.return, r2);
        }
      }
      if (b3 === a4) {
        V2 = null;
        break;
      }
      c3 = b3.sibling;
      if (null !== c3) {
        c3.return = b3.return;
        V2 = c3;
        break;
      }
      V2 = b3.return;
    }
  }
  function hk(a4) {
    for (; null !== V2; ) {
      var b3 = V2;
      if (b3 === a4) {
        V2 = null;
        break;
      }
      var c3 = b3.sibling;
      if (null !== c3) {
        c3.return = b3.return;
        V2 = c3;
        break;
      }
      V2 = b3.return;
    }
  }
  function kk(a4) {
    for (; null !== V2; ) {
      var b3 = V2;
      try {
        switch (b3.tag) {
          case 0:
          case 11:
          case 15:
            var c3 = b3.return;
            try {
              Rj(4, b3);
            } catch (k3) {
              W(b3, c3, k3);
            }
            break;
          case 1:
            var d4 = b3.stateNode;
            if ("function" === typeof d4.componentDidMount) {
              var e3 = b3.return;
              try {
                d4.componentDidMount();
              } catch (k3) {
                W(b3, e3, k3);
              }
            }
            var f2 = b3.return;
            try {
              Sj(b3);
            } catch (k3) {
              W(b3, f2, k3);
            }
            break;
          case 5:
            var g2 = b3.return;
            try {
              Sj(b3);
            } catch (k3) {
              W(b3, g2, k3);
            }
        }
      } catch (k3) {
        W(b3, b3.return, k3);
      }
      if (b3 === a4) {
        V2 = null;
        break;
      }
      var h4 = b3.sibling;
      if (null !== h4) {
        h4.return = b3.return;
        V2 = h4;
        break;
      }
      V2 = b3.return;
    }
  }
  var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K2 = 0, R3 = null, Y2 = null, Z = 0, gj = 0, fj = Uf(0), T3 = 0, qk = null, hh = 0, rk = 0, sk = 0, tk2 = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
  function L2() {
    return 0 !== (K2 & 6) ? B2() : -1 !== Bk ? Bk : Bk = B2();
  }
  function lh(a4) {
    if (0 === (a4.mode & 1))
      return 1;
    if (0 !== (K2 & 2) && 0 !== Z)
      return Z & -Z;
    if (null !== Kg.transition)
      return 0 === Ck && (Ck = yc()), Ck;
    a4 = C2;
    if (0 !== a4)
      return a4;
    a4 = window.event;
    a4 = void 0 === a4 ? 16 : jd(a4.type);
    return a4;
  }
  function mh(a4, b3, c3, d4) {
    if (50 < zk)
      throw zk = 0, Ak = null, Error(p2(185));
    Ac(a4, c3, d4);
    if (0 === (K2 & 2) || a4 !== R3)
      a4 === R3 && (0 === (K2 & 2) && (rk |= c3), 4 === T3 && Dk(a4, Z)), Ek(a4, d4), 1 === c3 && 0 === K2 && 0 === (b3.mode & 1) && (Hj = B2() + 500, fg && jg());
  }
  function Ek(a4, b3) {
    var c3 = a4.callbackNode;
    wc(a4, b3);
    var d4 = uc(a4, a4 === R3 ? Z : 0);
    if (0 === d4)
      null !== c3 && bc(c3), a4.callbackNode = null, a4.callbackPriority = 0;
    else if (b3 = d4 & -d4, a4.callbackPriority !== b3) {
      null != c3 && bc(c3);
      if (1 === b3)
        0 === a4.tag ? ig(Fk.bind(null, a4)) : hg(Fk.bind(null, a4)), Jf(function() {
          0 === (K2 & 6) && jg();
        }), c3 = null;
      else {
        switch (Dc(d4)) {
          case 1:
            c3 = fc;
            break;
          case 4:
            c3 = gc;
            break;
          case 16:
            c3 = hc;
            break;
          case 536870912:
            c3 = jc;
            break;
          default:
            c3 = hc;
        }
        c3 = Gk(c3, Hk.bind(null, a4));
      }
      a4.callbackPriority = b3;
      a4.callbackNode = c3;
    }
  }
  function Hk(a4, b3) {
    Bk = -1;
    Ck = 0;
    if (0 !== (K2 & 6))
      throw Error(p2(327));
    var c3 = a4.callbackNode;
    if (Ik() && a4.callbackNode !== c3)
      return null;
    var d4 = uc(a4, a4 === R3 ? Z : 0);
    if (0 === d4)
      return null;
    if (0 !== (d4 & 30) || 0 !== (d4 & a4.expiredLanes) || b3)
      b3 = Jk(a4, d4);
    else {
      b3 = d4;
      var e3 = K2;
      K2 |= 2;
      var f2 = Kk();
      if (R3 !== a4 || Z !== b3)
        vk = null, Hj = B2() + 500, Lk(a4, b3);
      do
        try {
          Mk();
          break;
        } catch (h4) {
          Nk(a4, h4);
        }
      while (1);
      Qg();
      nk.current = f2;
      K2 = e3;
      null !== Y2 ? b3 = 0 : (R3 = null, Z = 0, b3 = T3);
    }
    if (0 !== b3) {
      2 === b3 && (e3 = xc(a4), 0 !== e3 && (d4 = e3, b3 = Ok(a4, e3)));
      if (1 === b3)
        throw c3 = qk, Lk(a4, 0), Dk(a4, d4), Ek(a4, B2()), c3;
      if (6 === b3)
        Dk(a4, d4);
      else {
        e3 = a4.current.alternate;
        if (0 === (d4 & 30) && !Pk(e3) && (b3 = Jk(a4, d4), 2 === b3 && (f2 = xc(a4), 0 !== f2 && (d4 = f2, b3 = Ok(a4, f2))), 1 === b3))
          throw c3 = qk, Lk(a4, 0), Dk(a4, d4), Ek(a4, B2()), c3;
        a4.finishedWork = e3;
        a4.finishedLanes = d4;
        switch (b3) {
          case 0:
          case 1:
            throw Error(p2(345));
          case 2:
            Qk(a4, uk, vk);
            break;
          case 3:
            Dk(a4, d4);
            if ((d4 & 130023424) === d4 && (b3 = gk + 500 - B2(), 10 < b3)) {
              if (0 !== uc(a4, 0))
                break;
              e3 = a4.suspendedLanes;
              if ((e3 & d4) !== d4) {
                L2();
                a4.pingedLanes |= a4.suspendedLanes & e3;
                break;
              }
              a4.timeoutHandle = Ff(Qk.bind(null, a4, uk, vk), b3);
              break;
            }
            Qk(a4, uk, vk);
            break;
          case 4:
            Dk(a4, d4);
            if ((d4 & 4194240) === d4)
              break;
            b3 = a4.eventTimes;
            for (e3 = -1; 0 < d4; ) {
              var g2 = 31 - oc(d4);
              f2 = 1 << g2;
              g2 = b3[g2];
              g2 > e3 && (e3 = g2);
              d4 &= ~f2;
            }
            d4 = e3;
            d4 = B2() - d4;
            d4 = (120 > d4 ? 120 : 480 > d4 ? 480 : 1080 > d4 ? 1080 : 1920 > d4 ? 1920 : 3e3 > d4 ? 3e3 : 4320 > d4 ? 4320 : 1960 * mk(d4 / 1960)) - d4;
            if (10 < d4) {
              a4.timeoutHandle = Ff(Qk.bind(null, a4, uk, vk), d4);
              break;
            }
            Qk(a4, uk, vk);
            break;
          case 5:
            Qk(a4, uk, vk);
            break;
          default:
            throw Error(p2(329));
        }
      }
    }
    Ek(a4, B2());
    return a4.callbackNode === c3 ? Hk.bind(null, a4) : null;
  }
  function Ok(a4, b3) {
    var c3 = tk2;
    a4.current.memoizedState.isDehydrated && (Lk(a4, b3).flags |= 256);
    a4 = Jk(a4, b3);
    2 !== a4 && (b3 = uk, uk = c3, null !== b3 && Gj(b3));
    return a4;
  }
  function Gj(a4) {
    null === uk ? uk = a4 : uk.push.apply(uk, a4);
  }
  function Pk(a4) {
    for (var b3 = a4; ; ) {
      if (b3.flags & 16384) {
        var c3 = b3.updateQueue;
        if (null !== c3 && (c3 = c3.stores, null !== c3))
          for (var d4 = 0; d4 < c3.length; d4++) {
            var e3 = c3[d4], f2 = e3.getSnapshot;
            e3 = e3.value;
            try {
              if (!He2(f2(), e3))
                return false;
            } catch (g2) {
              return false;
            }
          }
      }
      c3 = b3.child;
      if (b3.subtreeFlags & 16384 && null !== c3)
        c3.return = b3, b3 = c3;
      else {
        if (b3 === a4)
          break;
        for (; null === b3.sibling; ) {
          if (null === b3.return || b3.return === a4)
            return true;
          b3 = b3.return;
        }
        b3.sibling.return = b3.return;
        b3 = b3.sibling;
      }
    }
    return true;
  }
  function Dk(a4, b3) {
    b3 &= ~sk;
    b3 &= ~rk;
    a4.suspendedLanes |= b3;
    a4.pingedLanes &= ~b3;
    for (a4 = a4.expirationTimes; 0 < b3; ) {
      var c3 = 31 - oc(b3), d4 = 1 << c3;
      a4[c3] = -1;
      b3 &= ~d4;
    }
  }
  function Fk(a4) {
    if (0 !== (K2 & 6))
      throw Error(p2(327));
    Ik();
    var b3 = uc(a4, 0);
    if (0 === (b3 & 1))
      return Ek(a4, B2()), null;
    var c3 = Jk(a4, b3);
    if (0 !== a4.tag && 2 === c3) {
      var d4 = xc(a4);
      0 !== d4 && (b3 = d4, c3 = Ok(a4, d4));
    }
    if (1 === c3)
      throw c3 = qk, Lk(a4, 0), Dk(a4, b3), Ek(a4, B2()), c3;
    if (6 === c3)
      throw Error(p2(345));
    a4.finishedWork = a4.current.alternate;
    a4.finishedLanes = b3;
    Qk(a4, uk, vk);
    Ek(a4, B2());
    return null;
  }
  function Rk(a4, b3) {
    var c3 = K2;
    K2 |= 1;
    try {
      return a4(b3);
    } finally {
      K2 = c3, 0 === K2 && (Hj = B2() + 500, fg && jg());
    }
  }
  function Sk(a4) {
    null !== xk && 0 === xk.tag && 0 === (K2 & 6) && Ik();
    var b3 = K2;
    K2 |= 1;
    var c3 = pk.transition, d4 = C2;
    try {
      if (pk.transition = null, C2 = 1, a4)
        return a4();
    } finally {
      C2 = d4, pk.transition = c3, K2 = b3, 0 === (K2 & 6) && jg();
    }
  }
  function Ij() {
    gj = fj.current;
    E3(fj);
  }
  function Lk(a4, b3) {
    a4.finishedWork = null;
    a4.finishedLanes = 0;
    var c3 = a4.timeoutHandle;
    -1 !== c3 && (a4.timeoutHandle = -1, Gf(c3));
    if (null !== Y2)
      for (c3 = Y2.return; null !== c3; ) {
        var d4 = c3;
        wg(d4);
        switch (d4.tag) {
          case 1:
            d4 = d4.type.childContextTypes;
            null !== d4 && void 0 !== d4 && $f();
            break;
          case 3:
            Jh();
            E3(Wf);
            E3(H3);
            Oh();
            break;
          case 5:
            Lh(d4);
            break;
          case 4:
            Jh();
            break;
          case 13:
            E3(M4);
            break;
          case 19:
            E3(M4);
            break;
          case 10:
            Rg(d4.type._context);
            break;
          case 22:
          case 23:
            Ij();
        }
        c3 = c3.return;
      }
    R3 = a4;
    Y2 = a4 = wh(a4.current, null);
    Z = gj = b3;
    T3 = 0;
    qk = null;
    sk = rk = hh = 0;
    uk = tk2 = null;
    if (null !== Wg) {
      for (b3 = 0; b3 < Wg.length; b3++)
        if (c3 = Wg[b3], d4 = c3.interleaved, null !== d4) {
          c3.interleaved = null;
          var e3 = d4.next, f2 = c3.pending;
          if (null !== f2) {
            var g2 = f2.next;
            f2.next = e3;
            d4.next = g2;
          }
          c3.pending = d4;
        }
      Wg = null;
    }
    return a4;
  }
  function Nk(a4, b3) {
    do {
      var c3 = Y2;
      try {
        Qg();
        Ph.current = ai;
        if (Sh) {
          for (var d4 = N.memoizedState; null !== d4; ) {
            var e3 = d4.queue;
            null !== e3 && (e3.pending = null);
            d4 = d4.next;
          }
          Sh = false;
        }
        Rh = 0;
        P2 = O3 = N = null;
        Th = false;
        Uh = 0;
        ok.current = null;
        if (null === c3 || null === c3.return) {
          T3 = 1;
          qk = b3;
          Y2 = null;
          break;
        }
        a: {
          var f2 = a4, g2 = c3.return, h4 = c3, k3 = b3;
          b3 = Z;
          h4.flags |= 32768;
          if (null !== k3 && "object" === typeof k3 && "function" === typeof k3.then) {
            var l2 = k3, m4 = h4, q2 = m4.tag;
            if (0 === (m4.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
              var r2 = m4.alternate;
              r2 ? (m4.updateQueue = r2.updateQueue, m4.memoizedState = r2.memoizedState, m4.lanes = r2.lanes) : (m4.updateQueue = null, m4.memoizedState = null);
            }
            var y4 = Vi(g2);
            if (null !== y4) {
              y4.flags &= -257;
              Wi(y4, g2, h4, f2, b3);
              y4.mode & 1 && Ti(f2, l2, b3);
              b3 = y4;
              k3 = l2;
              var n2 = b3.updateQueue;
              if (null === n2) {
                var t3 = /* @__PURE__ */ new Set();
                t3.add(k3);
                b3.updateQueue = t3;
              } else
                n2.add(k3);
              break a;
            } else {
              if (0 === (b3 & 1)) {
                Ti(f2, l2, b3);
                uj();
                break a;
              }
              k3 = Error(p2(426));
            }
          } else if (I3 && h4.mode & 1) {
            var J = Vi(g2);
            if (null !== J) {
              0 === (J.flags & 65536) && (J.flags |= 256);
              Wi(J, g2, h4, f2, b3);
              Jg(Ki(k3, h4));
              break a;
            }
          }
          f2 = k3 = Ki(k3, h4);
          4 !== T3 && (T3 = 2);
          null === tk2 ? tk2 = [f2] : tk2.push(f2);
          f2 = g2;
          do {
            switch (f2.tag) {
              case 3:
                f2.flags |= 65536;
                b3 &= -b3;
                f2.lanes |= b3;
                var x3 = Oi(f2, k3, b3);
                fh(f2, x3);
                break a;
              case 1:
                h4 = k3;
                var w3 = f2.type, u3 = f2.stateNode;
                if (0 === (f2.flags & 128) && ("function" === typeof w3.getDerivedStateFromError || null !== u3 && "function" === typeof u3.componentDidCatch && (null === Si || !Si.has(u3)))) {
                  f2.flags |= 65536;
                  b3 &= -b3;
                  f2.lanes |= b3;
                  var F2 = Ri(f2, h4, b3);
                  fh(f2, F2);
                  break a;
                }
            }
            f2 = f2.return;
          } while (null !== f2);
        }
        Tk(c3);
      } catch (na) {
        b3 = na;
        Y2 === c3 && null !== c3 && (Y2 = c3 = c3.return);
        continue;
      }
      break;
    } while (1);
  }
  function Kk() {
    var a4 = nk.current;
    nk.current = ai;
    return null === a4 ? ai : a4;
  }
  function uj() {
    if (0 === T3 || 3 === T3 || 2 === T3)
      T3 = 4;
    null === R3 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R3, Z);
  }
  function Jk(a4, b3) {
    var c3 = K2;
    K2 |= 2;
    var d4 = Kk();
    if (R3 !== a4 || Z !== b3)
      vk = null, Lk(a4, b3);
    do
      try {
        Uk();
        break;
      } catch (e3) {
        Nk(a4, e3);
      }
    while (1);
    Qg();
    K2 = c3;
    nk.current = d4;
    if (null !== Y2)
      throw Error(p2(261));
    R3 = null;
    Z = 0;
    return T3;
  }
  function Uk() {
    for (; null !== Y2; )
      Vk(Y2);
  }
  function Mk() {
    for (; null !== Y2 && !cc(); )
      Vk(Y2);
  }
  function Vk(a4) {
    var b3 = Wk(a4.alternate, a4, gj);
    a4.memoizedProps = a4.pendingProps;
    null === b3 ? Tk(a4) : Y2 = b3;
    ok.current = null;
  }
  function Tk(a4) {
    var b3 = a4;
    do {
      var c3 = b3.alternate;
      a4 = b3.return;
      if (0 === (b3.flags & 32768)) {
        if (c3 = Fj(c3, b3, gj), null !== c3) {
          Y2 = c3;
          return;
        }
      } else {
        c3 = Jj(c3, b3);
        if (null !== c3) {
          c3.flags &= 32767;
          Y2 = c3;
          return;
        }
        if (null !== a4)
          a4.flags |= 32768, a4.subtreeFlags = 0, a4.deletions = null;
        else {
          T3 = 6;
          Y2 = null;
          return;
        }
      }
      b3 = b3.sibling;
      if (null !== b3) {
        Y2 = b3;
        return;
      }
      Y2 = b3 = a4;
    } while (null !== b3);
    0 === T3 && (T3 = 5);
  }
  function Qk(a4, b3, c3) {
    var d4 = C2, e3 = pk.transition;
    try {
      pk.transition = null, C2 = 1, Xk(a4, b3, c3, d4);
    } finally {
      pk.transition = e3, C2 = d4;
    }
    return null;
  }
  function Xk(a4, b3, c3, d4) {
    do
      Ik();
    while (null !== xk);
    if (0 !== (K2 & 6))
      throw Error(p2(327));
    c3 = a4.finishedWork;
    var e3 = a4.finishedLanes;
    if (null === c3)
      return null;
    a4.finishedWork = null;
    a4.finishedLanes = 0;
    if (c3 === a4.current)
      throw Error(p2(177));
    a4.callbackNode = null;
    a4.callbackPriority = 0;
    var f2 = c3.lanes | c3.childLanes;
    Bc(a4, f2);
    a4 === R3 && (Y2 = R3 = null, Z = 0);
    0 === (c3.subtreeFlags & 2064) && 0 === (c3.flags & 2064) || wk || (wk = true, Gk(hc, function() {
      Ik();
      return null;
    }));
    f2 = 0 !== (c3.flags & 15990);
    if (0 !== (c3.subtreeFlags & 15990) || f2) {
      f2 = pk.transition;
      pk.transition = null;
      var g2 = C2;
      C2 = 1;
      var h4 = K2;
      K2 |= 4;
      ok.current = null;
      Pj(a4, c3);
      ek(c3, a4);
      Oe2(Df);
      dd = !!Cf;
      Df = Cf = null;
      a4.current = c3;
      ik(c3);
      dc();
      K2 = h4;
      C2 = g2;
      pk.transition = f2;
    } else
      a4.current = c3;
    wk && (wk = false, xk = a4, yk = e3);
    f2 = a4.pendingLanes;
    0 === f2 && (Si = null);
    mc(c3.stateNode);
    Ek(a4, B2());
    if (null !== b3)
      for (d4 = a4.onRecoverableError, c3 = 0; c3 < b3.length; c3++)
        e3 = b3[c3], d4(e3.value, { componentStack: e3.stack, digest: e3.digest });
    if (Pi)
      throw Pi = false, a4 = Qi, Qi = null, a4;
    0 !== (yk & 1) && 0 !== a4.tag && Ik();
    f2 = a4.pendingLanes;
    0 !== (f2 & 1) ? a4 === Ak ? zk++ : (zk = 0, Ak = a4) : zk = 0;
    jg();
    return null;
  }
  function Ik() {
    if (null !== xk) {
      var a4 = Dc(yk), b3 = pk.transition, c3 = C2;
      try {
        pk.transition = null;
        C2 = 16 > a4 ? 16 : a4;
        if (null === xk)
          var d4 = false;
        else {
          a4 = xk;
          xk = null;
          yk = 0;
          if (0 !== (K2 & 6))
            throw Error(p2(331));
          var e3 = K2;
          K2 |= 4;
          for (V2 = a4.current; null !== V2; ) {
            var f2 = V2, g2 = f2.child;
            if (0 !== (V2.flags & 16)) {
              var h4 = f2.deletions;
              if (null !== h4) {
                for (var k3 = 0; k3 < h4.length; k3++) {
                  var l2 = h4[k3];
                  for (V2 = l2; null !== V2; ) {
                    var m4 = V2;
                    switch (m4.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(8, m4, f2);
                    }
                    var q2 = m4.child;
                    if (null !== q2)
                      q2.return = m4, V2 = q2;
                    else
                      for (; null !== V2; ) {
                        m4 = V2;
                        var r2 = m4.sibling, y4 = m4.return;
                        Tj(m4);
                        if (m4 === l2) {
                          V2 = null;
                          break;
                        }
                        if (null !== r2) {
                          r2.return = y4;
                          V2 = r2;
                          break;
                        }
                        V2 = y4;
                      }
                  }
                }
                var n2 = f2.alternate;
                if (null !== n2) {
                  var t3 = n2.child;
                  if (null !== t3) {
                    n2.child = null;
                    do {
                      var J = t3.sibling;
                      t3.sibling = null;
                      t3 = J;
                    } while (null !== t3);
                  }
                }
                V2 = f2;
              }
            }
            if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
              g2.return = f2, V2 = g2;
            else
              b:
                for (; null !== V2; ) {
                  f2 = V2;
                  if (0 !== (f2.flags & 2048))
                    switch (f2.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, f2, f2.return);
                    }
                  var x3 = f2.sibling;
                  if (null !== x3) {
                    x3.return = f2.return;
                    V2 = x3;
                    break b;
                  }
                  V2 = f2.return;
                }
          }
          var w3 = a4.current;
          for (V2 = w3; null !== V2; ) {
            g2 = V2;
            var u3 = g2.child;
            if (0 !== (g2.subtreeFlags & 2064) && null !== u3)
              u3.return = g2, V2 = u3;
            else
              b:
                for (g2 = w3; null !== V2; ) {
                  h4 = V2;
                  if (0 !== (h4.flags & 2048))
                    try {
                      switch (h4.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Rj(9, h4);
                      }
                    } catch (na) {
                      W(h4, h4.return, na);
                    }
                  if (h4 === g2) {
                    V2 = null;
                    break b;
                  }
                  var F2 = h4.sibling;
                  if (null !== F2) {
                    F2.return = h4.return;
                    V2 = F2;
                    break b;
                  }
                  V2 = h4.return;
                }
          }
          K2 = e3;
          jg();
          if (lc && "function" === typeof lc.onPostCommitFiberRoot)
            try {
              lc.onPostCommitFiberRoot(kc, a4);
            } catch (na) {
            }
          d4 = true;
        }
        return d4;
      } finally {
        C2 = c3, pk.transition = b3;
      }
    }
    return false;
  }
  function Yk(a4, b3, c3) {
    b3 = Ki(c3, b3);
    b3 = Oi(a4, b3, 1);
    a4 = dh(a4, b3, 1);
    b3 = L2();
    null !== a4 && (Ac(a4, 1, b3), Ek(a4, b3));
  }
  function W(a4, b3, c3) {
    if (3 === a4.tag)
      Yk(a4, a4, c3);
    else
      for (; null !== b3; ) {
        if (3 === b3.tag) {
          Yk(b3, a4, c3);
          break;
        } else if (1 === b3.tag) {
          var d4 = b3.stateNode;
          if ("function" === typeof b3.type.getDerivedStateFromError || "function" === typeof d4.componentDidCatch && (null === Si || !Si.has(d4))) {
            a4 = Ki(c3, a4);
            a4 = Ri(b3, a4, 1);
            b3 = dh(b3, a4, 1);
            a4 = L2();
            null !== b3 && (Ac(b3, 1, a4), Ek(b3, a4));
            break;
          }
        }
        b3 = b3.return;
      }
  }
  function Ui(a4, b3, c3) {
    var d4 = a4.pingCache;
    null !== d4 && d4.delete(b3);
    b3 = L2();
    a4.pingedLanes |= a4.suspendedLanes & c3;
    R3 === a4 && (Z & c3) === c3 && (4 === T3 || 3 === T3 && (Z & 130023424) === Z && 500 > B2() - gk ? Lk(a4, 0) : sk |= c3);
    Ek(a4, b3);
  }
  function Zk(a4, b3) {
    0 === b3 && (0 === (a4.mode & 1) ? b3 = 1 : (b3 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
    var c3 = L2();
    a4 = Zg(a4, b3);
    null !== a4 && (Ac(a4, b3, c3), Ek(a4, c3));
  }
  function vj(a4) {
    var b3 = a4.memoizedState, c3 = 0;
    null !== b3 && (c3 = b3.retryLane);
    Zk(a4, c3);
  }
  function ck(a4, b3) {
    var c3 = 0;
    switch (a4.tag) {
      case 13:
        var d4 = a4.stateNode;
        var e3 = a4.memoizedState;
        null !== e3 && (c3 = e3.retryLane);
        break;
      case 19:
        d4 = a4.stateNode;
        break;
      default:
        throw Error(p2(314));
    }
    null !== d4 && d4.delete(b3);
    Zk(a4, c3);
  }
  var Wk;
  Wk = function(a4, b3, c3) {
    if (null !== a4)
      if (a4.memoizedProps !== b3.pendingProps || Wf.current)
        Ug = true;
      else {
        if (0 === (a4.lanes & c3) && 0 === (b3.flags & 128))
          return Ug = false, zj(a4, b3, c3);
        Ug = 0 !== (a4.flags & 131072) ? true : false;
      }
    else
      Ug = false, I3 && 0 !== (b3.flags & 1048576) && ug(b3, ng, b3.index);
    b3.lanes = 0;
    switch (b3.tag) {
      case 2:
        var d4 = b3.type;
        jj(a4, b3);
        a4 = b3.pendingProps;
        var e3 = Yf(b3, H3.current);
        Tg(b3, c3);
        e3 = Xh(null, b3, d4, a4, e3, c3);
        var f2 = bi();
        b3.flags |= 1;
        "object" === typeof e3 && null !== e3 && "function" === typeof e3.render && void 0 === e3.$$typeof ? (b3.tag = 1, b3.memoizedState = null, b3.updateQueue = null, Zf(d4) ? (f2 = true, cg(b3)) : f2 = false, b3.memoizedState = null !== e3.state && void 0 !== e3.state ? e3.state : null, ah(b3), e3.updater = nh, b3.stateNode = e3, e3._reactInternals = b3, rh(b3, d4, a4, c3), b3 = kj(null, b3, d4, true, f2, c3)) : (b3.tag = 0, I3 && f2 && vg(b3), Yi(null, b3, e3, c3), b3 = b3.child);
        return b3;
      case 16:
        d4 = b3.elementType;
        a: {
          jj(a4, b3);
          a4 = b3.pendingProps;
          e3 = d4._init;
          d4 = e3(d4._payload);
          b3.type = d4;
          e3 = b3.tag = $k(d4);
          a4 = Lg(d4, a4);
          switch (e3) {
            case 0:
              b3 = dj(null, b3, d4, a4, c3);
              break a;
            case 1:
              b3 = ij(null, b3, d4, a4, c3);
              break a;
            case 11:
              b3 = Zi(null, b3, d4, a4, c3);
              break a;
            case 14:
              b3 = aj(null, b3, d4, Lg(d4.type, a4), c3);
              break a;
          }
          throw Error(p2(
            306,
            d4,
            ""
          ));
        }
        return b3;
      case 0:
        return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), dj(a4, b3, d4, e3, c3);
      case 1:
        return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), ij(a4, b3, d4, e3, c3);
      case 3:
        a: {
          lj(b3);
          if (null === a4)
            throw Error(p2(387));
          d4 = b3.pendingProps;
          f2 = b3.memoizedState;
          e3 = f2.element;
          bh(a4, b3);
          gh(b3, d4, null, c3);
          var g2 = b3.memoizedState;
          d4 = g2.element;
          if (f2.isDehydrated)
            if (f2 = { element: d4, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b3.updateQueue.baseState = f2, b3.memoizedState = f2, b3.flags & 256) {
              e3 = Ki(Error(p2(423)), b3);
              b3 = mj(a4, b3, d4, c3, e3);
              break a;
            } else if (d4 !== e3) {
              e3 = Ki(Error(p2(424)), b3);
              b3 = mj(a4, b3, d4, c3, e3);
              break a;
            } else
              for (yg = Lf(b3.stateNode.containerInfo.firstChild), xg = b3, I3 = true, zg = null, c3 = Ch(b3, null, d4, c3), b3.child = c3; c3; )
                c3.flags = c3.flags & -3 | 4096, c3 = c3.sibling;
          else {
            Ig();
            if (d4 === e3) {
              b3 = $i(a4, b3, c3);
              break a;
            }
            Yi(a4, b3, d4, c3);
          }
          b3 = b3.child;
        }
        return b3;
      case 5:
        return Kh(b3), null === a4 && Eg(b3), d4 = b3.type, e3 = b3.pendingProps, f2 = null !== a4 ? a4.memoizedProps : null, g2 = e3.children, Ef(d4, e3) ? g2 = null : null !== f2 && Ef(d4, f2) && (b3.flags |= 32), hj(a4, b3), Yi(a4, b3, g2, c3), b3.child;
      case 6:
        return null === a4 && Eg(b3), null;
      case 13:
        return pj(a4, b3, c3);
      case 4:
        return Ih(b3, b3.stateNode.containerInfo), d4 = b3.pendingProps, null === a4 ? b3.child = Bh(b3, null, d4, c3) : Yi(a4, b3, d4, c3), b3.child;
      case 11:
        return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), Zi(a4, b3, d4, e3, c3);
      case 7:
        return Yi(a4, b3, b3.pendingProps, c3), b3.child;
      case 8:
        return Yi(a4, b3, b3.pendingProps.children, c3), b3.child;
      case 12:
        return Yi(a4, b3, b3.pendingProps.children, c3), b3.child;
      case 10:
        a: {
          d4 = b3.type._context;
          e3 = b3.pendingProps;
          f2 = b3.memoizedProps;
          g2 = e3.value;
          G2(Mg, d4._currentValue);
          d4._currentValue = g2;
          if (null !== f2)
            if (He2(f2.value, g2)) {
              if (f2.children === e3.children && !Wf.current) {
                b3 = $i(a4, b3, c3);
                break a;
              }
            } else
              for (f2 = b3.child, null !== f2 && (f2.return = b3); null !== f2; ) {
                var h4 = f2.dependencies;
                if (null !== h4) {
                  g2 = f2.child;
                  for (var k3 = h4.firstContext; null !== k3; ) {
                    if (k3.context === d4) {
                      if (1 === f2.tag) {
                        k3 = ch(-1, c3 & -c3);
                        k3.tag = 2;
                        var l2 = f2.updateQueue;
                        if (null !== l2) {
                          l2 = l2.shared;
                          var m4 = l2.pending;
                          null === m4 ? k3.next = k3 : (k3.next = m4.next, m4.next = k3);
                          l2.pending = k3;
                        }
                      }
                      f2.lanes |= c3;
                      k3 = f2.alternate;
                      null !== k3 && (k3.lanes |= c3);
                      Sg(
                        f2.return,
                        c3,
                        b3
                      );
                      h4.lanes |= c3;
                      break;
                    }
                    k3 = k3.next;
                  }
                } else if (10 === f2.tag)
                  g2 = f2.type === b3.type ? null : f2.child;
                else if (18 === f2.tag) {
                  g2 = f2.return;
                  if (null === g2)
                    throw Error(p2(341));
                  g2.lanes |= c3;
                  h4 = g2.alternate;
                  null !== h4 && (h4.lanes |= c3);
                  Sg(g2, c3, b3);
                  g2 = f2.sibling;
                } else
                  g2 = f2.child;
                if (null !== g2)
                  g2.return = f2;
                else
                  for (g2 = f2; null !== g2; ) {
                    if (g2 === b3) {
                      g2 = null;
                      break;
                    }
                    f2 = g2.sibling;
                    if (null !== f2) {
                      f2.return = g2.return;
                      g2 = f2;
                      break;
                    }
                    g2 = g2.return;
                  }
                f2 = g2;
              }
          Yi(a4, b3, e3.children, c3);
          b3 = b3.child;
        }
        return b3;
      case 9:
        return e3 = b3.type, d4 = b3.pendingProps.children, Tg(b3, c3), e3 = Vg(e3), d4 = d4(e3), b3.flags |= 1, Yi(a4, b3, d4, c3), b3.child;
      case 14:
        return d4 = b3.type, e3 = Lg(d4, b3.pendingProps), e3 = Lg(d4.type, e3), aj(a4, b3, d4, e3, c3);
      case 15:
        return cj(a4, b3, b3.type, b3.pendingProps, c3);
      case 17:
        return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), jj(a4, b3), b3.tag = 1, Zf(d4) ? (a4 = true, cg(b3)) : a4 = false, Tg(b3, c3), ph(b3, d4, e3), rh(b3, d4, e3, c3), kj(null, b3, d4, true, a4, c3);
      case 19:
        return yj(a4, b3, c3);
      case 22:
        return ej(a4, b3, c3);
    }
    throw Error(p2(156, b3.tag));
  };
  function Gk(a4, b3) {
    return ac(a4, b3);
  }
  function al(a4, b3, c3, d4) {
    this.tag = a4;
    this.key = c3;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b3;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d4;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function Bg(a4, b3, c3, d4) {
    return new al(a4, b3, c3, d4);
  }
  function bj(a4) {
    a4 = a4.prototype;
    return !(!a4 || !a4.isReactComponent);
  }
  function $k(a4) {
    if ("function" === typeof a4)
      return bj(a4) ? 1 : 0;
    if (void 0 !== a4 && null !== a4) {
      a4 = a4.$$typeof;
      if (a4 === Da)
        return 11;
      if (a4 === Ga)
        return 14;
    }
    return 2;
  }
  function wh(a4, b3) {
    var c3 = a4.alternate;
    null === c3 ? (c3 = Bg(a4.tag, b3, a4.key, a4.mode), c3.elementType = a4.elementType, c3.type = a4.type, c3.stateNode = a4.stateNode, c3.alternate = a4, a4.alternate = c3) : (c3.pendingProps = b3, c3.type = a4.type, c3.flags = 0, c3.subtreeFlags = 0, c3.deletions = null);
    c3.flags = a4.flags & 14680064;
    c3.childLanes = a4.childLanes;
    c3.lanes = a4.lanes;
    c3.child = a4.child;
    c3.memoizedProps = a4.memoizedProps;
    c3.memoizedState = a4.memoizedState;
    c3.updateQueue = a4.updateQueue;
    b3 = a4.dependencies;
    c3.dependencies = null === b3 ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
    c3.sibling = a4.sibling;
    c3.index = a4.index;
    c3.ref = a4.ref;
    return c3;
  }
  function yh(a4, b3, c3, d4, e3, f2) {
    var g2 = 2;
    d4 = a4;
    if ("function" === typeof a4)
      bj(a4) && (g2 = 1);
    else if ("string" === typeof a4)
      g2 = 5;
    else
      a:
        switch (a4) {
          case ya:
            return Ah(c3.children, e3, f2, b3);
          case za:
            g2 = 8;
            e3 |= 8;
            break;
          case Aa:
            return a4 = Bg(12, c3, b3, e3 | 2), a4.elementType = Aa, a4.lanes = f2, a4;
          case Ea:
            return a4 = Bg(13, c3, b3, e3), a4.elementType = Ea, a4.lanes = f2, a4;
          case Fa:
            return a4 = Bg(19, c3, b3, e3), a4.elementType = Fa, a4.lanes = f2, a4;
          case Ia:
            return qj(c3, e3, f2, b3);
          default:
            if ("object" === typeof a4 && null !== a4)
              switch (a4.$$typeof) {
                case Ba:
                  g2 = 10;
                  break a;
                case Ca:
                  g2 = 9;
                  break a;
                case Da:
                  g2 = 11;
                  break a;
                case Ga:
                  g2 = 14;
                  break a;
                case Ha:
                  g2 = 16;
                  d4 = null;
                  break a;
              }
            throw Error(p2(130, null == a4 ? a4 : typeof a4, ""));
        }
    b3 = Bg(g2, c3, b3, e3);
    b3.elementType = a4;
    b3.type = d4;
    b3.lanes = f2;
    return b3;
  }
  function Ah(a4, b3, c3, d4) {
    a4 = Bg(7, a4, d4, b3);
    a4.lanes = c3;
    return a4;
  }
  function qj(a4, b3, c3, d4) {
    a4 = Bg(22, a4, d4, b3);
    a4.elementType = Ia;
    a4.lanes = c3;
    a4.stateNode = { isHidden: false };
    return a4;
  }
  function xh(a4, b3, c3) {
    a4 = Bg(6, a4, null, b3);
    a4.lanes = c3;
    return a4;
  }
  function zh(a4, b3, c3) {
    b3 = Bg(4, null !== a4.children ? a4.children : [], a4.key, b3);
    b3.lanes = c3;
    b3.stateNode = { containerInfo: a4.containerInfo, pendingChildren: null, implementation: a4.implementation };
    return b3;
  }
  function bl(a4, b3, c3, d4, e3) {
    this.tag = b3;
    this.containerInfo = a4;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = zc(0);
    this.expirationTimes = zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = zc(0);
    this.identifierPrefix = d4;
    this.onRecoverableError = e3;
    this.mutableSourceEagerHydrationData = null;
  }
  function cl(a4, b3, c3, d4, e3, f2, g2, h4, k3) {
    a4 = new bl(a4, b3, c3, h4, k3);
    1 === b3 ? (b3 = 1, true === f2 && (b3 |= 8)) : b3 = 0;
    f2 = Bg(3, null, null, b3);
    a4.current = f2;
    f2.stateNode = a4;
    f2.memoizedState = { element: d4, isDehydrated: c3, cache: null, transitions: null, pendingSuspenseBoundaries: null };
    ah(f2);
    return a4;
  }
  function dl(a4, b3, c3) {
    var d4 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return { $$typeof: wa, key: null == d4 ? null : "" + d4, children: a4, containerInfo: b3, implementation: c3 };
  }
  function el(a4) {
    if (!a4)
      return Vf;
    a4 = a4._reactInternals;
    a: {
      if (Vb(a4) !== a4 || 1 !== a4.tag)
        throw Error(p2(170));
      var b3 = a4;
      do {
        switch (b3.tag) {
          case 3:
            b3 = b3.stateNode.context;
            break a;
          case 1:
            if (Zf(b3.type)) {
              b3 = b3.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }
        }
        b3 = b3.return;
      } while (null !== b3);
      throw Error(p2(171));
    }
    if (1 === a4.tag) {
      var c3 = a4.type;
      if (Zf(c3))
        return bg(a4, c3, b3);
    }
    return b3;
  }
  function fl(a4, b3, c3, d4, e3, f2, g2, h4, k3) {
    a4 = cl(c3, d4, true, a4, e3, f2, g2, h4, k3);
    a4.context = el(null);
    c3 = a4.current;
    d4 = L2();
    e3 = lh(c3);
    f2 = ch(d4, e3);
    f2.callback = void 0 !== b3 && null !== b3 ? b3 : null;
    dh(c3, f2, e3);
    a4.current.lanes = e3;
    Ac(a4, e3, d4);
    Ek(a4, d4);
    return a4;
  }
  function gl(a4, b3, c3, d4) {
    var e3 = b3.current, f2 = L2(), g2 = lh(e3);
    c3 = el(c3);
    null === b3.context ? b3.context = c3 : b3.pendingContext = c3;
    b3 = ch(f2, g2);
    b3.payload = { element: a4 };
    d4 = void 0 === d4 ? null : d4;
    null !== d4 && (b3.callback = d4);
    a4 = dh(e3, b3, g2);
    null !== a4 && (mh(a4, e3, g2, f2), eh(a4, e3, g2));
    return g2;
  }
  function hl(a4) {
    a4 = a4.current;
    if (!a4.child)
      return null;
    switch (a4.child.tag) {
      case 5:
        return a4.child.stateNode;
      default:
        return a4.child.stateNode;
    }
  }
  function il(a4, b3) {
    a4 = a4.memoizedState;
    if (null !== a4 && null !== a4.dehydrated) {
      var c3 = a4.retryLane;
      a4.retryLane = 0 !== c3 && c3 < b3 ? c3 : b3;
    }
  }
  function jl(a4, b3) {
    il(a4, b3);
    (a4 = a4.alternate) && il(a4, b3);
  }
  function kl() {
    return null;
  }
  var ll = "function" === typeof reportError ? reportError : function(a4) {
    console.error(a4);
  };
  function ml(a4) {
    this._internalRoot = a4;
  }
  nl.prototype.render = ml.prototype.render = function(a4) {
    var b3 = this._internalRoot;
    if (null === b3)
      throw Error(p2(409));
    gl(a4, b3, null, null);
  };
  nl.prototype.unmount = ml.prototype.unmount = function() {
    var a4 = this._internalRoot;
    if (null !== a4) {
      this._internalRoot = null;
      var b3 = a4.containerInfo;
      Sk(function() {
        gl(null, a4, null, null);
      });
      b3[uf] = null;
    }
  };
  function nl(a4) {
    this._internalRoot = a4;
  }
  nl.prototype.unstable_scheduleHydration = function(a4) {
    if (a4) {
      var b3 = Hc();
      a4 = { blockedOn: null, target: a4, priority: b3 };
      for (var c3 = 0; c3 < Qc.length && 0 !== b3 && b3 < Qc[c3].priority; c3++)
        ;
      Qc.splice(c3, 0, a4);
      0 === c3 && Vc(a4);
    }
  };
  function ol(a4) {
    return !(!a4 || 1 !== a4.nodeType && 9 !== a4.nodeType && 11 !== a4.nodeType);
  }
  function pl(a4) {
    return !(!a4 || 1 !== a4.nodeType && 9 !== a4.nodeType && 11 !== a4.nodeType && (8 !== a4.nodeType || " react-mount-point-unstable " !== a4.nodeValue));
  }
  function ql() {
  }
  function rl(a4, b3, c3, d4, e3) {
    if (e3) {
      if ("function" === typeof d4) {
        var f2 = d4;
        d4 = function() {
          var a5 = hl(g2);
          f2.call(a5);
        };
      }
      var g2 = fl(b3, d4, a4, 0, null, false, false, "", ql);
      a4._reactRootContainer = g2;
      a4[uf] = g2.current;
      sf(8 === a4.nodeType ? a4.parentNode : a4);
      Sk();
      return g2;
    }
    for (; e3 = a4.lastChild; )
      a4.removeChild(e3);
    if ("function" === typeof d4) {
      var h4 = d4;
      d4 = function() {
        var a5 = hl(k3);
        h4.call(a5);
      };
    }
    var k3 = cl(a4, 0, false, null, null, false, false, "", ql);
    a4._reactRootContainer = k3;
    a4[uf] = k3.current;
    sf(8 === a4.nodeType ? a4.parentNode : a4);
    Sk(function() {
      gl(b3, k3, c3, d4);
    });
    return k3;
  }
  function sl(a4, b3, c3, d4, e3) {
    var f2 = c3._reactRootContainer;
    if (f2) {
      var g2 = f2;
      if ("function" === typeof e3) {
        var h4 = e3;
        e3 = function() {
          var a5 = hl(g2);
          h4.call(a5);
        };
      }
      gl(b3, g2, a4, e3);
    } else
      g2 = rl(c3, b3, a4, e3, d4);
    return hl(g2);
  }
  Ec = function(a4) {
    switch (a4.tag) {
      case 3:
        var b3 = a4.stateNode;
        if (b3.current.memoizedState.isDehydrated) {
          var c3 = tc(b3.pendingLanes);
          0 !== c3 && (Cc(b3, c3 | 1), Ek(b3, B2()), 0 === (K2 & 6) && (Hj = B2() + 500, jg()));
        }
        break;
      case 13:
        Sk(function() {
          var b4 = Zg(a4, 1);
          if (null !== b4) {
            var c4 = L2();
            mh(b4, a4, 1, c4);
          }
        }), jl(a4, 1);
    }
  };
  Fc = function(a4) {
    if (13 === a4.tag) {
      var b3 = Zg(a4, 134217728);
      if (null !== b3) {
        var c3 = L2();
        mh(b3, a4, 134217728, c3);
      }
      jl(a4, 134217728);
    }
  };
  Gc = function(a4) {
    if (13 === a4.tag) {
      var b3 = lh(a4), c3 = Zg(a4, b3);
      if (null !== c3) {
        var d4 = L2();
        mh(c3, a4, b3, d4);
      }
      jl(a4, b3);
    }
  };
  Hc = function() {
    return C2;
  };
  Ic = function(a4, b3) {
    var c3 = C2;
    try {
      return C2 = a4, b3();
    } finally {
      C2 = c3;
    }
  };
  yb = function(a4, b3, c3) {
    switch (b3) {
      case "input":
        bb(a4, c3);
        b3 = c3.name;
        if ("radio" === c3.type && null != b3) {
          for (c3 = a4; c3.parentNode; )
            c3 = c3.parentNode;
          c3 = c3.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
          for (b3 = 0; b3 < c3.length; b3++) {
            var d4 = c3[b3];
            if (d4 !== a4 && d4.form === a4.form) {
              var e3 = Db(d4);
              if (!e3)
                throw Error(p2(90));
              Wa(d4);
              bb(d4, e3);
            }
          }
        }
        break;
      case "textarea":
        ib(a4, c3);
        break;
      case "select":
        b3 = c3.value, null != b3 && fb(a4, !!c3.multiple, b3, false);
    }
  };
  Gb = Rk;
  Hb = Sk;
  var tl = { usingClientEntryPoint: false, Events: [Cb, ue2, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
  var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a4) {
    a4 = Zb(a4);
    return null === a4 ? null : a4.stateNode;
  }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!wl.isDisabled && wl.supportsFiber)
      try {
        kc = wl.inject(vl), lc = wl;
      } catch (a4) {
      }
  }
  reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
  reactDom_production_min.createPortal = function(a4, b3) {
    var c3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!ol(b3))
      throw Error(p2(200));
    return dl(a4, b3, null, c3);
  };
  reactDom_production_min.createRoot = function(a4, b3) {
    if (!ol(a4))
      throw Error(p2(299));
    var c3 = false, d4 = "", e3 = ll;
    null !== b3 && void 0 !== b3 && (true === b3.unstable_strictMode && (c3 = true), void 0 !== b3.identifierPrefix && (d4 = b3.identifierPrefix), void 0 !== b3.onRecoverableError && (e3 = b3.onRecoverableError));
    b3 = cl(a4, 1, false, null, null, c3, false, d4, e3);
    a4[uf] = b3.current;
    sf(8 === a4.nodeType ? a4.parentNode : a4);
    return new ml(b3);
  };
  reactDom_production_min.findDOMNode = function(a4) {
    if (null == a4)
      return null;
    if (1 === a4.nodeType)
      return a4;
    var b3 = a4._reactInternals;
    if (void 0 === b3) {
      if ("function" === typeof a4.render)
        throw Error(p2(188));
      a4 = Object.keys(a4).join(",");
      throw Error(p2(268, a4));
    }
    a4 = Zb(b3);
    a4 = null === a4 ? null : a4.stateNode;
    return a4;
  };
  reactDom_production_min.flushSync = function(a4) {
    return Sk(a4);
  };
  reactDom_production_min.hydrate = function(a4, b3, c3) {
    if (!pl(b3))
      throw Error(p2(200));
    return sl(null, a4, b3, true, c3);
  };
  reactDom_production_min.hydrateRoot = function(a4, b3, c3) {
    if (!ol(a4))
      throw Error(p2(405));
    var d4 = null != c3 && c3.hydratedSources || null, e3 = false, f2 = "", g2 = ll;
    null !== c3 && void 0 !== c3 && (true === c3.unstable_strictMode && (e3 = true), void 0 !== c3.identifierPrefix && (f2 = c3.identifierPrefix), void 0 !== c3.onRecoverableError && (g2 = c3.onRecoverableError));
    b3 = fl(b3, null, a4, 1, null != c3 ? c3 : null, e3, false, f2, g2);
    a4[uf] = b3.current;
    sf(a4);
    if (d4)
      for (a4 = 0; a4 < d4.length; a4++)
        c3 = d4[a4], e3 = c3._getVersion, e3 = e3(c3._source), null == b3.mutableSourceEagerHydrationData ? b3.mutableSourceEagerHydrationData = [c3, e3] : b3.mutableSourceEagerHydrationData.push(
          c3,
          e3
        );
    return new nl(b3);
  };
  reactDom_production_min.render = function(a4, b3, c3) {
    if (!pl(b3))
      throw Error(p2(200));
    return sl(null, a4, b3, false, c3);
  };
  reactDom_production_min.unmountComponentAtNode = function(a4) {
    if (!pl(a4))
      throw Error(p2(40));
    return a4._reactRootContainer ? (Sk(function() {
      sl(null, null, a4, false, function() {
        a4._reactRootContainer = null;
        a4[uf] = null;
      });
    }), true) : false;
  };
  reactDom_production_min.unstable_batchedUpdates = Rk;
  reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a4, b3, c3, d4) {
    if (!pl(c3))
      throw Error(p2(200));
    if (null == a4 || void 0 === a4._reactInternals)
      throw Error(p2(38));
    return sl(a4, b3, c3, false, d4);
  };
  reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
  return reactDom_production_min;
}
var reactDom_development = {};
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDom_development;
function requireReactDom_development() {
  if (hasRequiredReactDom_development)
    return reactDom_development;
  hasRequiredReactDom_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var React2 = reactExports;
      var Scheduler = requireScheduler();
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn2(format2) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format2, args);
          }
        }
      }
      function error(format2) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
      }
      function printWarning(level, format2, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format2 += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format2);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment2 = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = false;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var allNativeEvents = /* @__PURE__ */ new Set();
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i2 = 0; i2 < dependencies.length; i2++) {
          allNativeEvents.add(dependencies[i2]);
        }
      }
      var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e3) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix3 = name.toLowerCase().slice(0, 5);
              return prefix3 !== "data-" && prefix3 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties2.hasOwnProperty(name) ? properties2[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties2 = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref2) {
        var name = _ref2[0], attributeName = _ref2[1];
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize2 = function(token2) {
        return token2[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          false,
          // sanitizeURL
          false
        );
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          false,
          // sanitizeURL
          false
        );
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties2[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var xlinkHref = "xlinkHref";
      properties2[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        false,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        // sanitizeURL
        false
      );
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties2[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          true,
          // sanitizeURL
          true
        );
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node2, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node2[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node2.hasAttribute(attributeName)) {
                var value = node2.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node2.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node2.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node2.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node2.hasAttribute(name)) {
            return expected === void 0 ? void 0 : null;
          }
          var value = node2.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node2, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node2.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node2.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node2[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node2[propertyName] = value;
          }
          return;
        }
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
          node2.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node2.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x3) {
              var match2 = x3.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn3, construct) {
        if (!fn3 || reentry) {
          return "";
        }
        {
          var frame2 = componentFrameCache.get(fn3);
          if (frame2 !== void 0) {
            return frame2;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x3) {
                control = x3;
              }
              Reflect.construct(fn3, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x3) {
                control = x3;
              }
              fn3.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x3) {
              control = x3;
            }
            fn3();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s4 = sampleLines.length - 1;
            var c3 = controlLines.length - 1;
            while (s4 >= 1 && c3 >= 0 && sampleLines[s4] !== controlLines[c3]) {
              c3--;
            }
            for (; s4 >= 1 && c3 >= 0; s4--, c3--) {
              if (sampleLines[s4] !== controlLines[c3]) {
                if (s4 !== 1 || c3 !== 1) {
                  do {
                    s4--;
                    c3--;
                    if (c3 < 0 || sampleLines[s4] !== controlLines[c3]) {
                      var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                      if (fn3.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn3.displayName);
                      }
                      {
                        if (typeof fn3 === "function") {
                          componentFrameCache.set(fn3, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s4 >= 1 && c3 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn3 ? fn3.displayName || fn3.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn3 === "function") {
            componentFrameCache.set(fn3, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn3, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn3, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
              } catch (x3) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        fiber._debugOwner ? fiber._debugOwner.type : null;
        fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node2 = workInProgress2;
          do {
            info += describeFiber(node2);
            node2 = node2.return;
          } while (node2);
          return info;
        } catch (x3) {
          return "\nError generating stack: " + x3.message + "\n" + x3.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x3) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment2:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node2) {
        return node2._valueTracker;
      }
      function detachTracker(node2) {
        node2._valueTracker = null;
      }
      function getValueFromNode(node2) {
        var value = "";
        if (!node2) {
          return value;
        }
        if (isCheckable(node2)) {
          value = node2.checked ? "true" : "false";
        } else {
          value = node2.value;
        }
        return value;
      }
      function trackValueOnNode(node2) {
        var valueField = isCheckable(node2) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node2[valueField]);
        }
        var currentValue = "" + node2[valueField];
        if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var get3 = descriptor.get, set3 = descriptor.set;
        Object.defineProperty(node2, valueField, {
          configurable: true,
          get: function() {
            return get3.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set3.call(this, value);
          }
        });
        Object.defineProperty(node2, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node2);
            delete node2[valueField];
          }
        };
        return tracker;
      }
      function track(node2) {
        if (getTracker(node2)) {
          return;
        }
        node2._valueTracker = trackValueOnNode(node2);
      }
      function updateValueIfChanged(node2) {
        if (!node2) {
          return false;
        }
        var tracker = getTracker(node2);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node2);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc2) {
        doc2 = doc2 || (typeof document !== "undefined" ? document : void 0);
        if (typeof doc2 === "undefined") {
          return null;
        }
        try {
          return doc2.activeElement || doc2.body;
        } catch (e3) {
          return doc2.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node2 = element;
        var checked = props.checked;
        var hostProps = assign2({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked != null ? checked : node2._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node2 = element;
        var defaultValue2 = props.defaultValue == null ? "" : props.defaultValue;
        node2._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue2),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node2 = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node2, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node2 = element;
        {
          var controlled = isControlled(props);
          if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
            // eslint-disable-next-line
            node2.value != value) {
              node2.value = toString(value);
            }
          } else if (node2.value !== toString(value)) {
            node2.value = toString(value);
          }
        } else if (type === "submit" || type === "reset") {
          node2.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node2, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node2.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node2 = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null)) {
            return;
          }
          var initialValue = toString(node2._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node2.value) {
                node2.value = initialValue;
              }
            }
          }
          {
            node2.defaultValue = initialValue;
          }
        }
        var name = node2.name;
        if (name !== "") {
          node2.name = "";
        }
        {
          node2.defaultChecked = !node2.defaultChecked;
          node2.defaultChecked = !!node2._wrapperState.initialChecked;
        }
        if (name !== "") {
          node2.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node2 = element;
        updateWrapper(node2, props);
        updateNamedCousins(node2, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i2 = 0; i2 < group.length; i2++) {
            var otherNode = group[i2];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node2, type, value) {
        if (
          // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
          type !== "number" || getActiveElement(node2.ownerDocument) !== node2
        ) {
          if (value == null) {
            node2.defaultValue = toString(node2._wrapperState.initialValue);
          } else if (node2.defaultValue !== toString(value)) {
            node2.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps2(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React2.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i2 = 0; i2 < valuePropNames.length; i2++) {
            var propName = valuePropNames[i2];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node2, multiple, propValue, setDefaultSelected) {
        var options2 = node2.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i2 = 0; i2 < selectedValues.length; i2++) {
            selectedValue["$" + selectedValues[i2]] = true;
          }
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign2({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node2 = element;
        {
          checkSelectPropTypes(props);
        }
        node2._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node2 = element;
        node2.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node2, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node2 = element;
        var wasMultiple = node2._wrapperState.wasMultiple;
        node2._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node2, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node2 = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node2 = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign2({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString(node2._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node2 = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue2 = props.defaultValue;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (defaultValue2 != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue2 = children;
            }
          }
          if (defaultValue2 == null) {
            defaultValue2 = "";
          }
          initialValue = defaultValue2;
        }
        node2._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node2 = element;
        var value = getToStringValue(props.value);
        var defaultValue2 = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node2.value) {
            node2.value = newValue;
          }
          if (props.defaultValue == null && node2.defaultValue !== newValue) {
            node2.defaultValue = newValue;
          }
        }
        if (defaultValue2 != null) {
          node2.defaultValue = toString(defaultValue2);
        }
      }
      function postMountWrapper$3(element, props) {
        var node2 = element;
        var textContent2 = node2.textContent;
        if (textContent2 === node2._wrapperState.initialValue) {
          if (textContent2 !== "" && textContent2 !== null) {
            node2.value = textContent2;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
        if (node2.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node2)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node2.firstChild) {
              node2.removeChild(node2.firstChild);
            }
            while (svgNode.firstChild) {
              node2.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node2.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node2, text) {
        if (text) {
          var firstChild = node2.firstChild;
          if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node2.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty3) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_2, character2) {
            return character2.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, "ms-"))
          );
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter2 = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
              delimiter2 = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node2, styles) {
        var style3 = node2.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty3 = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty3) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty3);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty3) {
            style3.setProperty(styleName, styleValue);
          } else {
            style3[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i2 = 0; i2 < longhands.length; i2++) {
            expanded[longhands[i2]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
        // NOTE: menuitem's close tag should be omitted, but that causes problems.
      };
      var voidElementTags = assign2({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid2 = validateProperty(type, key);
            if (!isValid2) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid2) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i2 = 0; i2 < queuedTargets.length; i2++) {
            restoreStateOfTarget(queuedTargets[i2]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn3, bookkeeping) {
        return fn3(bookkeeping);
      };
      var flushSyncImpl = function() {
      };
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn3, a4, b3) {
        if (isInsideEventHandler) {
          return fn3(a4, b3);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn3, a4, b3);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM2) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e3) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a4, b3, c3, d4, e3, f2) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a4, b3, c3, d4, e3, f2) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a4, b3, c3, d4, e3, f2) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a4, b3, c3, d4, e3, f2) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get2(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== void 0;
      }
      function set2(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = (
        /*                      */
        0
      );
      var PerformedWork = (
        /*                */
        1
      );
      var Placement = (
        /*                    */
        2
      );
      var Update = (
        /*                       */
        4
      );
      var ChildDeletion = (
        /*                */
        16
      );
      var ContentReset = (
        /*                 */
        32
      );
      var Callback = (
        /*                     */
        64
      );
      var DidCapture = (
        /*                   */
        128
      );
      var ForceClientRender = (
        /*            */
        256
      );
      var Ref = (
        /*                          */
        512
      );
      var Snapshot = (
        /*                     */
        1024
      );
      var Passive = (
        /*                      */
        2048
      );
      var Hydrating = (
        /*                    */
        4096
      );
      var Visibility = (
        /*                   */
        8192
      );
      var StoreConsistency = (
        /*             */
        16384
      );
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = (
        /*               */
        32767
      );
      var Incomplete = (
        /*                   */
        32768
      );
      var ShouldCapture = (
        /*                */
        65536
      );
      var ForceUpdateForLegacySuspense = (
        /* */
        131072
      );
      var Forked = (
        /*                       */
        1048576
      );
      var RefStatic = (
        /*                    */
        2097152
      );
      var LayoutStatic = (
        /*                 */
        4194304
      );
      var PassiveStatic = (
        /*                */
        8388608
      );
      var MountLayoutDev = (
        /*               */
        16777216
      );
      var MountPassiveDev = (
        /*              */
        33554432
      );
      var BeforeMutationMask = (
        // TODO: Remove Update flag from before mutation phase by re-landing Visibility
        // flag logic (see #20043)
        Update | Snapshot | 0
      );
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node2 = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node2;
          do {
            node2 = nextNode;
            if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node2.return;
            }
            nextNode = node2.return;
          } while (nextNode);
        } else {
          while (node2.return) {
            node2 = node2.return;
          }
        }
        if (node2.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get2(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a4 = fiber;
        var b3 = alternate;
        while (true) {
          var parentA = a4.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a4 = b3 = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a4) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b3) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a4.return !== b3.return) {
            a4 = parentA;
            b3 = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a4) {
                didFindChild = true;
                a4 = parentA;
                b3 = parentB;
                break;
              }
              if (_child === b3) {
                didFindChild = true;
                b3 = parentA;
                a4 = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a4) {
                  didFindChild = true;
                  a4 = parentB;
                  b3 = parentA;
                  break;
                }
                if (_child === b3) {
                  didFindChild = true;
                  b3 = parentB;
                  a4 = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a4.alternate !== b3) {
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a4.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a4.stateNode.current === a4) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node2) {
        if (node2.tag === HostComponent || node2.tag === HostText) {
          return node2;
        }
        var child = node2.child;
        while (child !== null) {
          var match2 = findCurrentHostFiberImpl(child);
          if (match2 !== null) {
            return match2;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node2) {
        if (node2.tag === HostComponent || node2.tag === HostText) {
          return node2;
        }
        var child = node2.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match2 !== null) {
              return match2;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback;
      var cancelCallback = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var unstable_yieldValue = Scheduler.unstable_yieldValue;
      var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign2({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue === "function") {
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map2 = /* @__PURE__ */ new Map();
          var lane = 1;
          for (var index3 = 0; index3 < TotalLanes; index3++) {
            var label = getLabelForLane(lane);
            map2.set(lane, label);
            lane *= 2;
          }
          return map2;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = (
        /*                         */
        0
      );
      var ConcurrentMode = (
        /*                 */
        1
      );
      var ProfileMode = (
        /*                    */
        2
      );
      var StrictLegacyMode = (
        /*               */
        8
      );
      var StrictEffectsMode = (
        /*              */
        16
      );
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x3) {
        var asUint = x3 >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = (
        /*                        */
        0
      );
      var NoLane = (
        /*                          */
        0
      );
      var SyncLane = (
        /*                        */
        1
      );
      var InputContinuousHydrationLane = (
        /*    */
        2
      );
      var InputContinuousLane = (
        /*             */
        4
      );
      var DefaultHydrationLane = (
        /*            */
        8
      );
      var DefaultLane = (
        /*                     */
        16
      );
      var TransitionHydrationLane = (
        /*                */
        32
      );
      var TransitionLanes = (
        /*                       */
        4194240
      );
      var TransitionLane1 = (
        /*                        */
        64
      );
      var TransitionLane2 = (
        /*                        */
        128
      );
      var TransitionLane3 = (
        /*                        */
        256
      );
      var TransitionLane4 = (
        /*                        */
        512
      );
      var TransitionLane5 = (
        /*                        */
        1024
      );
      var TransitionLane6 = (
        /*                        */
        2048
      );
      var TransitionLane7 = (
        /*                        */
        4096
      );
      var TransitionLane8 = (
        /*                        */
        8192
      );
      var TransitionLane9 = (
        /*                        */
        16384
      );
      var TransitionLane10 = (
        /*                       */
        32768
      );
      var TransitionLane11 = (
        /*                       */
        65536
      );
      var TransitionLane12 = (
        /*                       */
        131072
      );
      var TransitionLane13 = (
        /*                       */
        262144
      );
      var TransitionLane14 = (
        /*                       */
        524288
      );
      var TransitionLane15 = (
        /*                       */
        1048576
      );
      var TransitionLane16 = (
        /*                       */
        2097152
      );
      var RetryLanes = (
        /*                            */
        130023424
      );
      var RetryLane1 = (
        /*                             */
        4194304
      );
      var RetryLane2 = (
        /*                             */
        8388608
      );
      var RetryLane3 = (
        /*                             */
        16777216
      );
      var RetryLane4 = (
        /*                             */
        33554432
      );
      var RetryLane5 = (
        /*                             */
        67108864
      );
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = (
        /*          */
        134217728
      );
      var NonIdleLanes = (
        /*                          */
        268435455
      );
      var IdleHydrationLane = (
        /*               */
        268435456
      );
      var IdleLane = (
        /*                        */
        536870912
      );
      var OffscreenLane = (
        /*                   */
        1073741824
      );
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (
            // Tests whether the next lane is equal or lower priority than the wip
            // one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
          ) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            nextLanes |= entanglements[index3];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var eventTime = eventTimes[index3];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var expirationTime = expirationTimes[index3];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index3] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a4, b3) {
        return (a4 & b3) !== NoLanes;
      }
      function isSubsetOfLanes(set3, subset) {
        return (set3 & subset) === subset;
      }
      function mergeLanes(a4, b3) {
        return a4 | b3;
      }
      function removeLanes(set3, subset) {
        return set3 & ~subset;
      }
      function intersectLanes(a4, b3) {
        return a4 & b3;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a4, b3) {
        return a4 !== NoLane && a4 < b3 ? a4 : b3;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i2 = 0; i2 < TotalLanes; i2++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
        var eventTimes = root2.eventTimes;
        var index3 = laneToIndex(updateLane);
        eventTimes[index3] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          entanglements[index3] = NoLanes;
          eventTimes[index3] = NoTimestamp;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          if (
            // Is this one of the newly entangled lanes?
            lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
            entanglements[index3] & entangledLanes
          ) {
            entanglements[index3] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index3 = laneToIndex(lanes);
          var lane = 1 << index3;
          var updaters = pendingUpdatersLaneMap[index3];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index3 = laneToIndex(lanes);
          var lane = 1 << index3;
          var updaters = pendingUpdatersLaneMap[index3];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn3) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn3();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a4, b3) {
        return a4 !== 0 && a4 < b3 ? a4 : b3;
      }
      function lowerEventPriority(a4, b3) {
        return a4 === 0 || a4 > b3 ? a4 : b3;
      }
      function isHigherEventPriority(a4, b3) {
        return a4 !== 0 && a4 < b3;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn3) {
        _attemptSynchronousHydration = fn3;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn3) {
        attemptContinuousHydration = fn3;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn3) {
        attemptHydrationAtCurrentPriority = fn3;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn3) {
        getCurrentUpdatePriority$1 = fn3;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn3) {
        attemptHydrationAtPriority = fn3;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = /* @__PURE__ */ new Map();
      var queuedPointerCaptures = /* @__PURE__ */ new Map();
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        // Intentionally camelCase
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i2 = 0;
        for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
        if (i2 === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map2.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
            var queuedEvent = queuedDiscreteEvents[i2];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent2;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive: passive2
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
        target.addEventListener(eventType, listener, {
          passive: passive2
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText2();
        return true;
      }
      function reset2() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start2;
        var startValue = startText;
        var startLength = startValue.length;
        var end2;
        var endValue = getText2();
        var endLength = endValue.length;
        for (start2 = 0; start2 < startLength; start2++) {
          if (startValue[start2] !== endValue[start2]) {
            break;
          }
        }
        var minEnd = startLength - start2;
        for (end2 = 1; end2 <= minEnd; end2++) {
          if (startValue[startLength - end2] !== endValue[endLength - end2]) {
            break;
          }
        }
        var sliceTail = end2 > 1 ? 1 - end2 : void 0;
        fallbackText = endValue.slice(start2, sliceTail);
        return fallbackText;
      }
      function getText2() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize2 = Interface[_propName];
            if (normalize2) {
              this[_propName] = normalize2(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign2(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          /**
           * We release all dispatched `SyntheticEvent`s after each event loop, adding
           * them back into the pool. This allows a way to hold onto a reference that
           * won't be added back into the pool.
           */
          persist: function() {
          },
          /**
           * Checks if this event should be released back into the pool.
           *
           * @return {boolean} True if this should not be released, false otherwise.
           */
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign2({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign2({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === void 0)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign2({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign2({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign2({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign2({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign2({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign2({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign2({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign2({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign2({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign2({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : (
            // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            "wheelDeltaX" in event ? -event.wheelDeltaX : 0
          );
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : (
            // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            "wheelDeltaY" in event ? -event.wheelDeltaY : (
              // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
              "wheelDelta" in event ? -event.wheelDelta : 0
            )
          );
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM2 && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset2();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      /**
       * Checks if an event is supported in the current execution environment.
       *
       * NOTE: This will not work correctly for non-generic events such as `change`,
       * `reset`, `load`, `error`, and `select`.
       *
       * Borrows from Modernizr.
       *
       * @param {string} eventNameSuffix Event name, e.g. "click".
       * @return {boolean} True if the event is supported.
       * @internal
       * @license Modernizr 3.0.0pre (Custom Build) | MIT
       */
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM2) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM2) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node2) {
        var state = node2._wrapperState;
        if (!state || !state.controlled || node2.type !== "number") {
          return;
        }
        {
          setDefaultValue(node2, "number", node2.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc2 = nativeEventTarget.ownerDocument;
          if (doc2) {
            win = doc2.defaultView || doc2.parentWindow;
          } else {
            win = window;
          }
        }
        var from3;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from3 = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from3 = null;
          to = targetInst;
        }
        if (from3 === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from3 == null ? win : getNodeFromInstance(from3);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter2 = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter2 = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter2, from3, to);
      }
      function is(x3, y4) {
        return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i2 = 0; i2 < keysA.length; i2++) {
          var currentKey = keysA[i2];
          if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node2) {
        while (node2 && node2.firstChild) {
          node2 = node2.firstChild;
        }
        return node2;
      }
      function getSiblingNode(node2) {
        while (node2) {
          if (node2.nextSibling) {
            return node2.nextSibling;
          }
          node2 = node2.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset2) {
        var node2 = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node2) {
          if (node2.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node2.textContent.length;
            if (nodeStart <= offset2 && nodeEnd >= offset2) {
              return {
                node: node2,
                offset: offset2 - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node2 = getLeafNode(getSiblingNode(node2));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e3) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length2 = 0;
        var start2 = -1;
        var end2 = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node2 = outerNode;
        var parentNode2 = null;
        outer:
          while (true) {
            var next2 = null;
            while (true) {
              if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                start2 = length2 + anchorOffset;
              }
              if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                end2 = length2 + focusOffset;
              }
              if (node2.nodeType === TEXT_NODE) {
                length2 += node2.nodeValue.length;
              }
              if ((next2 = node2.firstChild) === null) {
                break;
              }
              parentNode2 = node2;
              node2 = next2;
            }
            while (true) {
              if (node2 === outerNode) {
                break outer;
              }
              if (parentNode2 === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start2 = length2;
              }
              if (parentNode2 === focusNode && ++indexWithinFocus === focusOffset) {
                end2 = length2;
              }
              if ((next2 = node2.nextSibling) !== null) {
                break;
              }
              node2 = parentNode2;
              parentNode2 = node2.parentNode;
            }
            node2 = next2;
          }
        if (start2 === -1 || end2 === -1) {
          return null;
        }
        return {
          start: start2,
          end: end2
        };
      }
      function setOffsets(node2, offsets) {
        var doc2 = node2.ownerDocument || document;
        var win = doc2 && doc2.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length2 = node2.textContent.length;
        var start2 = Math.min(offsets.start, length2);
        var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
        if (!selection.extend && start2 > end2) {
          var temp = end2;
          end2 = start2;
          start2 = temp;
        }
        var startMarker = getNodeForCharacterOffset(node2, start2);
        var endMarker = getNodeForCharacterOffset(node2, end2);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc2.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start2 > end2) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node2) {
        return node2 && node2.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node2) {
        return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i2 = 0; i2 < ancestors.length; i2++) {
            var info = ancestors[i2];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection2(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start2 = offsets.start;
        var end2 = offsets.end;
        if (end2 === void 0) {
          end2 = start2;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start2;
          input.selectionEnd = Math.min(end2, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node2) {
        if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
          return {
            start: node2.selectionStart,
            end: node2.selectionEnd
          };
        } else {
          var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc2 = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc2)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style2 = {};
      if (canUseDOM2) {
        style2 = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
          var eventName = simpleEventPluginEvents[i2];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === void 0) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
          // nonDelegatedEvents list in DOMPluginEventSystem.
          // Then we can remove this special list.
          // This is a breaking change that can wait until React 18.
          domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
            var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
          var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = void 0;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== void 0) {
            addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== void 0) {
            addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node2 = targetInst;
            mainLoop:
              while (true) {
                if (node2 === null) {
                  return;
                }
                var nodeTag = node2.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node2.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node2.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode2 = getClosestInstanceFromNode(container);
                    if (parentNode2 === null) {
                      return;
                    }
                    var parentTag = parentNode2.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node2 = ancestorInst = parentNode2;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node2 = node2.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to) {
        var common = from3 && to ? getLowestCommonAncestor(from3, to) : null;
        if (from3 !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          // There are working polyfills for <dialog>. Let people use it.
          dialog: true,
          // Electron ships a custom <webview> tag to display external web content in
          // an isolated frame and process.
          // This tag is not present in non Electron environments such as JSDom which
          // is often used for testing purposes.
          // @see https://electronjs.org/docs/api/webview-tag
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop2() {
      }
      function trapClickOnNonInteractiveElement(node2) {
        node2.onclick = noop2;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
          var propKey = updatePayload[i2];
          var propValue = updatePayload[i2 + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div2 = ownerDocument.createElement("div");
            div2.innerHTML = "<script><\/script>";
            var firstChild = div2.firstChild;
            domElement = div2.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node2 = domElement;
              if (props.multiple) {
                node2.multiple = true;
              } else if (props.size) {
                node2.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps2(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps2(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = /* @__PURE__ */ new Set();
          var attributes = domElement.attributes;
          for (var _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
          typeof isCustomComponentTag === "boolean") {
            var serverValue = void 0;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.
            propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
            ) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode2, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode2.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode2, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode2.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode2, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode2.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode2, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode2.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === void 0) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : void 0;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode2;
        if (container.nodeType === COMMENT_NODE) {
          parentNode2 = container.parentNode;
          parentNode2.insertBefore(child, container);
        } else {
          parentNode2 = container;
          parentNode2.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode2.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode2);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node2 = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node2.nextSibling;
          parentInstance.removeChild(node2);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node2 = nextNode;
        } while (node2);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        }
        retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style3 = instance.style;
        if (typeof style3.setProperty === "function") {
          style3.setProperty("display", "none", "important");
        } else {
          style3.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          if (container.documentElement) {
            container.removeChild(container.documentElement);
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node2) {
        for (; node2 != null; node2 = node2.nextSibling) {
          var nodeType = node2.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node2.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node2;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node2 = suspenseInstance.nextSibling;
        var depth = 0;
        while (node2) {
          if (node2.nodeType === COMMENT_NODE) {
            var data = node2.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node2);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node2 = node2.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node2 = targetInstance.previousSibling;
        var depth = 0;
        while (node2) {
          if (node2.nodeType === COMMENT_NODE) {
            var data = node2.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node2;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node2 = node2.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode2 = parentInstance.parentNode;
          if (parentNode2 !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode2, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode2, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode2 = parentInstance.parentNode;
          if (parentNode2 !== null)
            warnForInsertedHydratedElement(parentNode2, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode2 = parentInstance.parentNode;
          if (parentNode2 !== null)
            warnForInsertedHydratedText(parentNode2, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node2) {
        delete node2[internalInstanceKey];
        delete node2[internalPropsKey];
        delete node2[internalEventHandlersKey];
        delete node2[internalEventHandlerListenersKey];
        delete node2[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node2) {
        node2[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node2) {
        node2[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node2) {
        node2[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node2) {
        return !!node2[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode2 = targetNode.parentNode;
        while (parentNode2) {
          targetInst = parentNode2[internalContainerInstanceKey] || parentNode2[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode2;
          parentNode2 = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node2) {
        var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node2) {
        return node2[internalPropsKey] || null;
      }
      function updateFiberProps(node2, props) {
        node2[internalPropsKey] = props;
      }
      function getEventListenerSet(node2) {
        var elementListenerSet = node2[internalEventHandlersKey];
        if (elementListenerSet === void 0) {
          elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index2 = -1;
      function createCursor(defaultValue2) {
        return {
          current: defaultValue2
        };
      }
      function pop(cursor2, fiber) {
        if (index2 < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index2]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor2.current = valueStack[index2];
        valueStack[index2] = null;
        {
          fiberStack[index2] = null;
        }
        index2--;
      }
      function push(cursor2, value, fiber) {
        index2++;
        valueStack[index2] = cursor2.current;
        {
          fiberStack[index2] = fiber;
        }
        cursor2.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== void 0;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign2({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
          var node2 = fiber;
          do {
            switch (node2.tag) {
              case HostRoot:
                return node2.stateNode.context;
              case ClassComponent: {
                var Component2 = node2.type;
                if (isContextProvider(Component2)) {
                  return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node2 = node2.return;
          } while (node2 !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i2 = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (; i2 < queue.length; i2++) {
              var callback = queue[i2];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i2 + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index3) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index3 + 1;
        var length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length2 | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(
                returnFiber.type,
                returnFiber.memoizedProps,
                returnFiber.stateNode,
                instance,
                // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode
              );
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type,
                    _props,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode
                  );
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent2 = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent2, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(
                  parentContainer,
                  textInstance,
                  textContent2,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  textInstance,
                  textContent2,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode2
                );
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node2 = fiber;
          while (node2 !== null) {
            if (node2.mode & StrictLegacyMode) {
              maybeStrictRoot = node2;
            }
            node2 = node2.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set3) {
          var array = [];
          set3.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
          instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === void 0) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = /* @__PURE__ */ new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
      }
      function resolveDefaultProps(Component2, baseProps) {
        if (Component2 && Component2.defaultProps) {
          var props = assign2({}, baseProps);
          var defaultProps2 = Component2.defaultProps;
          for (var propName in defaultProps2) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps2[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node2 = parent;
        while (node2 !== null) {
          var alternate = node2.alternate;
          if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
            node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node2 === propagationRoot) {
            break;
          }
          node2 = node2.return;
        }
        {
          if (node2 !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) {
          concurrentQueues = [queue];
        } else {
          concurrentQueues.push(queue);
        }
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
            var queue = concurrentQueues[i2];
            var lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node2 = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node2 = parent;
          parent = parent.return;
        }
        if (node2.tag === HostRoot) {
          var root2 = node2.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === void 0) {
              return prevState;
            }
            return assign2({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && // If the update was already committed, we should not queue its
              // callback again.
              update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i2 = 0; i2 < effects.length; i2++) {
            var effect3 = effects[i2];
            var callback = effect3.callback;
            if (callback !== null) {
              effect3.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var emptyRefsObject = new React2.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
        didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
        didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
        didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
        didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === void 0) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== void 0 && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set2(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid2 = (
              // Allow null for conditional declaration
              contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
            );
            if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === void 0) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== void 0) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
            // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (refs === emptyRefsObject) {
                refs = resolvedInst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init2 = lazyType._init;
        return init2(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = /* @__PURE__ */ new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent2, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent2);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
            isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment2) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init2 = newChild._init;
                return createChild(returnFiber, init2(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init2 = newChild._init;
                return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init2 = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = /* @__PURE__ */ new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init2 = child._init;
                warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i2 = 0; i2 < newChildren.length; i2++) {
              var child = newChildren[i2];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent2, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent2);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment2) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init2 = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c3) {
        if (c3 === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
        return c3;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        workInProgress2.memoizedProps;
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node2 = row;
        while (node2 !== null) {
          if (node2.tag === SuspenseComponent) {
            var state = node2.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node2;
              }
            }
          } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
          // keep track of whether it suspended or not.
          node2.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node2.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node2;
            }
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === row) {
            return null;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === row) {
              return null;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return null;
      }
      var NoFlags$1 = (
        /*   */
        0
      );
      var HasEffect = (
        /* */
        1
      );
      var Insertion5 = (
        /*  */
        2
      );
      var Layout2 = (
        /*    */
        4
      );
      var Passive$1 = (
        /*   */
        8
      );
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
          var mutableSource = workInProgressSources[i2];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== void 0 && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                var oldHookName = hookTypesDev[i2];
                var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i2 + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
          if (objectIs(nextDeps[i2], prevDeps[i2])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component2(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component2(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
          // and creates false positives. To make this work in legacy mode, we'd
          // need to mark fibers that commit in an incomplete state, somehow. For
          // now I'll disable the warning that most of the bugs that would trigger
          // it are either exclusive to concurrent mode or exist in both.
          (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        } else {
          workInProgress2.flags &= ~(Passive | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer2, initialArg, init2) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init2 !== void 0) {
          initialState = init2(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer2,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer2, initialArg, init2) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer2;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first2 = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first2;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer2(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first2);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer2, initialArg, init2) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer2;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer2(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return void 0;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return void 0;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create2, destroy, deps) {
        var effect3 = {
          tag,
          create: create2,
          destroy,
          deps,
          // Circular
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect3.next = effect3;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect3.next = effect3;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect3;
            effect3.next = firstEffect;
            componentUpdateQueue.lastEffect = effect3;
          }
        }
        return effect3;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
      }
      function mountEffect(create2, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
        }
      }
      function updateEffect(create2, deps) {
        return updateEffectImpl(Passive, Passive$1, create2, deps);
      }
      function mountInsertionEffect(create2, deps) {
        return mountEffectImpl(Update, Insertion5, create2, deps);
      }
      function updateInsertionEffect(create2, deps) {
        return updateEffectImpl(Update, Insertion5, create2, deps);
      }
      function mountLayoutEffect(create2, deps) {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout2, create2, deps);
      }
      function updateLayoutEffect(create2, deps) {
        return updateEffectImpl(Update, Layout2, create2, deps);
      }
      function imperativeHandleEffect(create2, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create2();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== void 0) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create2();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create2, deps) {
        {
          if (typeof create2 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout2, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create2, deps) {
        {
          if (typeof create2 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start2 = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start2;
        return [isPending, start2];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start2 = hook.memoizedState;
        return [isPending, start2];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start2 = hook.memoizedState;
        return [isPending, start2];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer2, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer2, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        } catch (e3) {
          setTimeout(function() {
            throw e3;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1();
          threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === void 0) {
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = /* @__PURE__ */ new Set();
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node2 = returnFiber;
        do {
          if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
            return node2;
          }
          node2 = node2.return;
        } while (node2 !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(Component2)
              );
            }
          }
        }
        var render3 = Component2.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component2.type;
          if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
          Component2.defaultProps === void 0) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(type)
              );
            }
          }
          var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component2.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(
              _innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(_type)
            );
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component2.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                outerMemoType = init2(payload);
              } catch (x3) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  nextProps,
                  // Resolved (SimpleMemoComponent has no defaultProps)
                  "prop",
                  getComponentNameFromType(outerMemoType)
                );
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
          workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(Component2)
              );
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(Component2)
              );
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component2, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        workInProgress2.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node2 = child;
            while (node2) {
              node2.flags = node2.flags & ~Placement | Hydrating;
              node2 = node2.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init2 = lazyComponent._init;
        var Component2 = init2(payload);
        workInProgress2.type = Component2;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
        var resolvedProps = resolveDefaultProps(Component2, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
              workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
            }
            child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
            }
            child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
            }
            child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    resolvedProps,
                    // Resolved for outer only
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            child = updateMemoComponent(
              null,
              workInProgress2,
              Component2,
              resolveDefaultProps(Component2.type, resolvedProps),
              // The inner type can have defaults too
              renderLanes2
            );
            return child;
          }
        }
        var hint = "";
        {
          if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component2, nextProps);
        mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component2.prototype && typeof Component2.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            var _componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component2, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component2);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component2) {
        {
          if (Component2) {
            if (Component2.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (typeof Component2.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if (
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress2.child !== currentPrimaryChildFragment
        ) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2,
              // TODO: When we delete legacy mode, we should make this error argument
              // required — every concurrent mode path that causes hydration to
              // de-opt to client rendering should have an error message.
              null
            );
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            }
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else if (workInProgress2.memoizedState !== null) {
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node2 = firstChild;
        while (node2 !== null) {
          if (node2.tag === SuspenseComponent) {
            var state = node2.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
            }
          } else if (node2.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === workInProgress2) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === workInProgress2) {
              return;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index3) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                if (!validateSuspenseListNestedChild(children[i2], i2)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(
                workInProgress2,
                false,
                // isBackwards
                tail,
                lastContentRow,
                tailMode
              );
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(
                workInProgress2,
                true,
                // isBackwards
                _tail,
                null,
                // last
                tailMode
              );
              break;
            }
            case "together": {
              initSuspenseListRenderState(
                workInProgress2,
                false,
                // isBackwards
                null,
                // tail
                null,
                // last
                void 0
              );
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === void 0) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render3 = newProps.children;
        {
          if (typeof render3 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render3(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
          workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
            // may not be work scheduled on `current`, so we check for this flag.
            (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component2 = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment2:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    _resolvedProps3,
                    // Resolved for outer only
                    "prop",
                    getComponentNameFromType(_type2)
                  );
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node2 = workInProgress2.child;
          while (node2 !== null) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              appendInitialChild(parent, node2.stateNode);
            } else if (node2.tag === HostPortal)
              ;
            else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === workInProgress2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === workInProgress2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment2:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (
                    // Check if this is a client root
                    !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                    (workInProgress2.flags & ForceClientRender) !== NoFlags
                  ) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ShouldCapture) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (
                  // The time it took to render last row is greater than the remaining
                  // time we have to render. So rendering one more row would likely
                  // exceed it.
                  now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                ) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next2 = renderState.tail;
              renderState.rendering = next2;
              renderState.tail = next2.sibling;
              renderState.renderingStartTime = now();
              next2.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next2;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
              !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            interruptedWork.stateNode;
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout2, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        prepareForCommit(root2.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect3 = firstEffect;
          do {
            if ((effect3.tag & flags) === flags) {
              var destroy = effect3.destroy;
              effect3.destroy = void 0;
              if (destroy !== void 0) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout2) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion5) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion5) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout2) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect3 = effect3.next;
          } while (effect3 !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect3 = firstEffect;
          do {
            if ((effect3.tag & flags) === flags) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout2) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create2 = effect3.create;
              {
                if ((flags & Insertion5) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect3.destroy = create2();
              {
                if ((flags & Insertion5) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout2) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect3.destroy;
                if (destroy !== void 0 && typeof destroy !== "function") {
                  var hookName = void 0;
                  if ((effect3.tag & Layout2) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect3.tag & Insertion5) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = void 0;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect3 = effect3.next;
          } while (effect3 !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node2) {
        switch (node2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
              } finally {
                recordLayoutEffectDuration(node2);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
            }
            break;
          }
          case ClassComponent: {
            var instance = node2.stateNode;
            if (typeof instance.componentDidMount === "function") {
              safelyCallComponentDidMount(node2, node2.return, instance);
            }
            safelyAttachRef(node2, node2.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node2, node2.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node2 = finishedWork;
          while (true) {
            if (node2.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node2;
                try {
                  var instance = node2.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node2.stateNode, node2.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node2.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node2.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node2.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
              ;
            else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === finishedWork) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node2) {
                hostSubtreeRoot = null;
              }
              node2 = node2.return;
            }
            if (hostSubtreeRoot === node2) {
              hostSubtreeRoot = null;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node2 = fiber;
        siblings:
          while (true) {
            while (node2.sibling === null) {
              if (node2.return === null || isHostParent(node2.return)) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
            while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
              if (node2.flags & Placement) {
                continue siblings;
              }
              if (node2.child === null || node2.tag === HostPortal) {
                continue siblings;
              } else {
                node2.child.return = node2;
                node2 = node2.child;
              }
            }
            if (!(node2.flags & Placement)) {
              return node2.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
        var tag = node2.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node2.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node2.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node2, before, parent) {
        var tag = node2.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node2.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node2.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect3 = firstEffect;
                  do {
                    var _effect = effect3, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== void 0) {
                      if ((tag & Insertion5) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout2) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect3 = effect3.next;
                  } while (effect3 !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (
              // TODO: Remove this dead flag
              deletedFiber.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i2 = 0; i2 < deletions.length; i2++) {
            var childToDelete = deletions[i2];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion5 | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion5 | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode;
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              offscreenInstance.isHidden = isHidden;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (
              // TODO: Remove this dead flag
              finishedWork.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags & Visibility) {
              var _offscreenInstance = finishedWork.stateNode;
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              _offscreenInstance.isHidden = _isHidden;
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root2, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(
                  child,
                  // New root; bubble back up to here and stop.
                  root2,
                  committedLanes
                );
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout2, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var fiberToDelete = deletions[i2];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout2 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout2 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("selector.component");
        symbolFor("selector.has_pseudo_class");
        symbolFor("selector.role");
        symbolFor("selector.test_id");
        symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
      var NoContext = (
        /*             */
        0
      );
      var BatchedContext = (
        /*               */
        1
      );
      var RenderContext = (
        /*                */
        2
      );
      var CommitContext = (
        /*                */
        4
      );
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root2, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (
          // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
          // decided not to enable it.
          (executionContext & RenderContext) !== NoContext
        );
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root2.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node2 = finishedWork;
        while (true) {
          if (node2.flags & StoreConsistency) {
            var updateQueue = node2.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i2 = 0; i2 < checks.length; i2++) {
                  var check = checks[i2];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node2.child;
          if (node2.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node2;
            node2 = child;
            continue;
          }
          if (node2 === finishedWork) {
            return true;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === finishedWork) {
              return true;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root2, now());
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2, now());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn3, a4) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn3(a4);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn3, a4, b3, c3, d4) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn3(a4, b3, c3, d4);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn3) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn3) {
            return fn3();
          } else {
            return void 0;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            if (enableSchedulingProfiler) {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next2;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next2 === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next2;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next2 = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next2 = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next2 = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next2 !== null) {
              workInProgress = next2;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveTransitions = transitions;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit(root2.containerInfo);
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
            var recoverableError = recoverableErrors[i2];
            var componentStack = recoverableError.stack;
            var digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i2 = 0; i2 < profilerEffects.length; i2++) {
            var _fiber = profilerEffects[i2];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              var eventTime = requestEventTime();
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type !== null && type !== void 0 && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== void 0) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = /* @__PURE__ */ new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== void 0) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) {
              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = /* @__PURE__ */ new Set();
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node2 = fiber;
          while (true) {
            switch (node2.tag) {
              case HostComponent:
                hostInstances.add(node2.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node2.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node2.stateNode.containerInfo);
                return;
            }
            if (node2.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node2 = node2.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node2 = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node2.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node2.stateNode);
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === fiber) {
              return foundHostInstances;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === fiber) {
                return foundHostInstances;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
          /* @__PURE__ */ new Set([nonExtensibleObject]);
        } catch (e3) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component2) {
        if (typeof Component2 === "function") {
          return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
        } else if (Component2 !== void 0 && Component2 !== null) {
          var $$typeof = Component2.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment2, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          // Used by persistent updates
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0; _i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          // This tag allow us to uniquely identify this as a React Portal
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get2(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component2 = fiber.type;
          if (isContextProvider(Component2)) {
            return processChildContext(fiber, Component2, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get2(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys2 = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== void 0 && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane, eventTime);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === void 0 ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index3) {
          var key = path[index3];
          var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
          if (index3 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
          var oldKey = oldPath[index3];
          var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
          if (index3 + 1 === oldPath.length) {
            var newKey = newPath[index3];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(
              // $FlowFixMe number or string is fine here
              obj[oldKey],
              oldPath,
              newPath,
              index3 + 1
            );
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn2("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i2 = 0; i2 < newPath.length - 1; i2++) {
              if (oldPath[i2] !== newPath[i2]) {
                warn2("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index3, value) {
          if (index3 >= path.length) {
            return value;
          }
          var key = path[index3];
          var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          // React Refresh
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          // Enables DevTools to append owner stacks to error messages in DEV mode.
          getCurrentFiber: getCurrentFiberForDevTools,
          // Enables DevTools to detect reconciler version rather than renderer version
          // which may not match for third party renderers.
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? (
        // In modern browsers, reportError will dispatch an error event,
        // emulating an uncaught JavaScript error.
        reportError
      ) : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts one argument.");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot2(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== void 0) {
          {
            if (options2.hydrate) {
              warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== void 0) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== void 0) {
            onRecoverableError = options2.onRecoverableError;
          }
          if (options2.transitionCallbacks !== void 0) {
            options2.transitionCallbacks;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === void 0) {
            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== void 0) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== void 0) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== void 0) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i2 = 0; i2 < mutableSources.length; i2++) {
            var mutableSource = mutableSources[i2];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node2) {
        return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node2) {
        return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
          }
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(
            initialChildren,
            callback,
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            false,
            // isStrictMode
            false,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root2;
        } else {
          var rootSibling;
          while (rootSibling = container.lastChild) {
            container.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            false,
            // isStrictMode
            false,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render2(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
        Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
        Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return createRoot2(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn3) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
        }
        return flushSync(fn3);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM2 && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      reactDom_development.createPortal = createPortal$1;
      reactDom_development.createRoot = createRoot$1;
      reactDom_development.findDOMNode = findDOMNode;
      reactDom_development.flushSync = flushSync$1;
      reactDom_development.hydrate = hydrate;
      reactDom_development.hydrateRoot = hydrateRoot$1;
      reactDom_development.render = render2;
      reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
      reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
      reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      reactDom_development.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
  return reactDom_development;
}
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  if (process.env.NODE_ENV !== "production") {
    throw new Error("^_^");
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
if (process.env.NODE_ENV === "production") {
  checkDCE();
  reactDom.exports = requireReactDom_production_min();
} else {
  reactDom.exports = requireReactDom_development();
}
var reactDomExports = reactDom.exports;
const ae = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
var createRoot;
var m$2 = reactDomExports;
if (process.env.NODE_ENV === "production") {
  createRoot = m$2.createRoot;
  m$2.hydrateRoot;
} else {
  var i$2 = m$2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  createRoot = function(c3, o2) {
    i$2.usingClientEntryPoint = true;
    try {
      return m$2.createRoot(c3, o2);
    } finally {
      i$2.usingClientEntryPoint = false;
    }
  };
}
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
    if (document.styleSheets[i2].ownerNode === tag) {
      return document.styleSheets[i2];
    }
  }
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === void 0 ? process.env.NODE_ENV === "production" : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (process.env.NODE_ENV !== "production") {
      var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
      if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      }
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
    }
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e3) {
        if (process.env.NODE_ENV !== "production" && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
          console.error('There was a problem inserting the following rule: "' + rule + '"', e3);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
    if (process.env.NODE_ENV !== "production") {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from = String.fromCharCode;
var assign$2 = Object.assign;
function hash$2(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match$2(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace$1(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index2) {
  return value.charCodeAt(index2) | 0;
}
function substr(value, begin, end2) {
  return value.slice(begin, end2);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine$1(array, callback) {
  return array.map(callback).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length2) {
  return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy$1(root, props) {
  return assign$2(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end2) {
  return substr(characters, begin, end2);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace$1(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index2) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index2) {
  while (!token(peek()))
    next();
  return slice(index2, position);
}
function compile(value) {
  return dealloc(parse$3("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse$3(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset2 = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference2 = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace$1(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace$1(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset2:
            if (ampersand == -1)
              characters2 = replace$1(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace$1(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference2 = ruleset(characters2, root, parent, index2, offset2, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset2 === 0)
                parse$3(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse$3(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse$3(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                }
        }
        index2 = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index2, offset2, rules, points, type, props, children, length2) {
  var post = offset2 - 1;
  var rule = offset2 === 0 ? rules : [""];
  var size2 = sizeof(rule);
  for (var i2 = 0, j2 = 0, k3 = 0; i2 < index2; ++i2)
    for (var x3 = 0, y4 = substr(value, post + 1, post = abs(j2 = points[i2])), z2 = value; x3 < size2; ++x3)
      if (z2 = trim(j2 > 0 ? rule[x3] + " " + y4 : replace$1(y4, /&\f/g, rule[x3])))
        props[k3++] = z2;
  return node(value, root, parent, offset2 === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i2 = 0; i2 < length2; i2++)
    output += callback(children[i2], i2, children, callback) || "";
  return output;
}
function stringify(element, index2, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index2, children, callback) {
    var output = "";
    for (var i2 = 0; i2 < length2; i2++)
      output += collection[i2](element, index2, children, callback) || "";
    return output;
  };
}
function rulesheet(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
}
var weakMemoize = function weakMemoize2(func) {
  var cache = /* @__PURE__ */ new WeakMap();
  return function(arg) {
    if (cache.has(arg)) {
      return cache.get(arg);
    }
    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};
function memoize(fn3) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn3(arg);
    return cache[arg];
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index2] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index2 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index2] = 1;
        }
        parsed[index2] += identifierWithPointTracking(position - 1, points, index2);
        break;
      case 2:
        parsed[index2] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index2] = peek() === 58 ? "&\f" : "";
          points[index2] = parsed[index2].length;
          break;
        }
      default:
        parsed[index2] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value, parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i2 = 0, k3 = 0; i2 < rules.length; i2++) {
    for (var j2 = 0; j2 < parentRules.length; j2++, k3++) {
      element.props[k3] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i2];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment2(element) {
  return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
  return function(element, index2, children) {
    if (element.type !== "rule" || cache.compat)
      return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
    if (unsafePseudoClasses) {
      var isNested = !!element.parent;
      var commentContainer = isNested ? element.parent.children : (
        // global rule at the root level
        children
      );
      for (var i2 = commentContainer.length - 1; i2 >= 0; i2--) {
        var node2 = commentContainer[i2];
        if (node2.line < element.line) {
          break;
        }
        if (node2.column < element.column) {
          if (isIgnoringComment(node2)) {
            return;
          }
          break;
        }
      }
      unsafePseudoClasses.forEach(function(unsafePseudoClass) {
        console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
      });
    }
  };
};
var isImportRule = function isImportRule2(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
  for (var i2 = index2 - 1; i2 >= 0; i2--) {
    if (!isImportRule(children[i2])) {
      return true;
    }
  }
  return false;
};
var nullifyElement = function nullifyElement2(element) {
  element.type = "";
  element.value = "";
  element["return"] = "";
  element.children = "";
  element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm2(element, index2, children) {
  if (!isImportRule(element)) {
    return;
  }
  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index2, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};
function prefix(value, length2) {
  switch (hash$2(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace$1(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace$1(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace$1(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace$1(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace$1(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace$1(value, "-grow", "") + WEBKIT + value + MS + replace$1(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace$1(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace$1(replace$1(replace$1(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace$1(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace$1(replace$1(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace$1(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace$1(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace$1(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace$1(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace$1(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace$1(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace$1(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace$1(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index2, children, callback) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy$1(element, {
            value: replace$1(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length)
            return combine$1(element.props, function(value) {
              switch (match$2(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy$1(element, {
                    props: [replace$1(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                case "::placeholder":
                  return serialize([copy$1(element, {
                    props: [replace$1(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy$1(element, {
                    props: [replace$1(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy$1(element, {
                    props: [replace$1(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options) {
  var key = options.key;
  if (process.env.NODE_ENV !== "production" && !key) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  }
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  if (process.env.NODE_ENV !== "production") {
    if (/[^a-z-]/.test(key)) {
      throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
    }
  }
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i2 = 1; i2 < attrib.length; i2++) {
          inserted[attrib[i2]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  if (process.env.NODE_ENV !== "production") {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache.compat;
      }
    }), incorrectImportAlarm);
  }
  {
    var currentSheet;
    var finalizingPlugins = [stringify, process.env.NODE_ENV !== "production" ? function(element) {
      if (!element.root) {
        if (element["return"]) {
          currentSheet.insert(element["return"]);
        } else if (element.value && element.type !== COMMENT) {
          currentSheet.insert(element.value + "{}");
        }
      }
    } : rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles) {
      return serialize(compile(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      if (process.env.NODE_ENV !== "production" && serialized.map !== void 0) {
        currentSheet = {
          insert: function insert2(rule) {
            sheet.insert(rule + serialized.map);
          }
        };
      }
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min;
function requireReactIs_production_min() {
  if (hasRequiredReactIs_production_min)
    return reactIs_production_min;
  hasRequiredReactIs_production_min = 1;
  var b3 = "function" === typeof Symbol && Symbol.for, c3 = b3 ? Symbol.for("react.element") : 60103, d4 = b3 ? Symbol.for("react.portal") : 60106, e3 = b3 ? Symbol.for("react.fragment") : 60107, f2 = b3 ? Symbol.for("react.strict_mode") : 60108, g2 = b3 ? Symbol.for("react.profiler") : 60114, h4 = b3 ? Symbol.for("react.provider") : 60109, k3 = b3 ? Symbol.for("react.context") : 60110, l2 = b3 ? Symbol.for("react.async_mode") : 60111, m4 = b3 ? Symbol.for("react.concurrent_mode") : 60111, n2 = b3 ? Symbol.for("react.forward_ref") : 60112, p2 = b3 ? Symbol.for("react.suspense") : 60113, q2 = b3 ? Symbol.for("react.suspense_list") : 60120, r2 = b3 ? Symbol.for("react.memo") : 60115, t3 = b3 ? Symbol.for("react.lazy") : 60116, v2 = b3 ? Symbol.for("react.block") : 60121, w3 = b3 ? Symbol.for("react.fundamental") : 60117, x3 = b3 ? Symbol.for("react.responder") : 60118, y4 = b3 ? Symbol.for("react.scope") : 60119;
  function z2(a4) {
    if ("object" === typeof a4 && null !== a4) {
      var u3 = a4.$$typeof;
      switch (u3) {
        case c3:
          switch (a4 = a4.type, a4) {
            case l2:
            case m4:
            case e3:
            case g2:
            case f2:
            case p2:
              return a4;
            default:
              switch (a4 = a4 && a4.$$typeof, a4) {
                case k3:
                case n2:
                case t3:
                case r2:
                case h4:
                  return a4;
                default:
                  return u3;
              }
          }
        case d4:
          return u3;
      }
    }
  }
  function A2(a4) {
    return z2(a4) === m4;
  }
  reactIs_production_min.AsyncMode = l2;
  reactIs_production_min.ConcurrentMode = m4;
  reactIs_production_min.ContextConsumer = k3;
  reactIs_production_min.ContextProvider = h4;
  reactIs_production_min.Element = c3;
  reactIs_production_min.ForwardRef = n2;
  reactIs_production_min.Fragment = e3;
  reactIs_production_min.Lazy = t3;
  reactIs_production_min.Memo = r2;
  reactIs_production_min.Portal = d4;
  reactIs_production_min.Profiler = g2;
  reactIs_production_min.StrictMode = f2;
  reactIs_production_min.Suspense = p2;
  reactIs_production_min.isAsyncMode = function(a4) {
    return A2(a4) || z2(a4) === l2;
  };
  reactIs_production_min.isConcurrentMode = A2;
  reactIs_production_min.isContextConsumer = function(a4) {
    return z2(a4) === k3;
  };
  reactIs_production_min.isContextProvider = function(a4) {
    return z2(a4) === h4;
  };
  reactIs_production_min.isElement = function(a4) {
    return "object" === typeof a4 && null !== a4 && a4.$$typeof === c3;
  };
  reactIs_production_min.isForwardRef = function(a4) {
    return z2(a4) === n2;
  };
  reactIs_production_min.isFragment = function(a4) {
    return z2(a4) === e3;
  };
  reactIs_production_min.isLazy = function(a4) {
    return z2(a4) === t3;
  };
  reactIs_production_min.isMemo = function(a4) {
    return z2(a4) === r2;
  };
  reactIs_production_min.isPortal = function(a4) {
    return z2(a4) === d4;
  };
  reactIs_production_min.isProfiler = function(a4) {
    return z2(a4) === g2;
  };
  reactIs_production_min.isStrictMode = function(a4) {
    return z2(a4) === f2;
  };
  reactIs_production_min.isSuspense = function(a4) {
    return z2(a4) === p2;
  };
  reactIs_production_min.isValidElementType = function(a4) {
    return "string" === typeof a4 || "function" === typeof a4 || a4 === e3 || a4 === m4 || a4 === g2 || a4 === f2 || a4 === p2 || a4 === q2 || "object" === typeof a4 && null !== a4 && (a4.$$typeof === t3 || a4.$$typeof === r2 || a4.$$typeof === h4 || a4.$$typeof === k3 || a4.$$typeof === n2 || a4.$$typeof === w3 || a4.$$typeof === x3 || a4.$$typeof === y4 || a4.$$typeof === v2);
  };
  reactIs_production_min.typeOf = z2;
  return reactIs_production_min;
}
var reactIs_development = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development;
function requireReactIs_development() {
  if (hasRequiredReactIs_development)
    return reactIs_development;
  hasRequiredReactIs_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment2 = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement2(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment2(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development.AsyncMode = AsyncMode;
      reactIs_development.ConcurrentMode = ConcurrentMode;
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element2;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment2;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement2;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment2;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }
  return reactIs_development;
}
if (process.env.NODE_ENV === "production") {
  reactIs$1.exports = requireReactIs_production_min();
} else {
  reactIs$1.exports = requireReactIs_development();
}
var reactIsExports = reactIs$1.exports;
var reactIs = reactIsExports;
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var isBrowser$4 = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser$4 === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h4 = 0;
  var k3, i2 = 0, len = str.length;
  for (; len >= 4; ++i2, len -= 4) {
    k3 = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
    k3 = /* Math.imul(k, m): */
    (k3 & 65535) * 1540483477 + ((k3 >>> 16) * 59797 << 16);
    k3 ^= /* k >>> r: */
    k3 >>> 24;
    h4 = /* Math.imul(k, m): */
    (k3 & 65535) * 1540483477 + ((k3 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h4 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
    case 2:
      h4 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
    case 1:
      h4 ^= str.charCodeAt(i2) & 255;
      h4 = /* Math.imul(h, m): */
      (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
  }
  h4 ^= h4 >>> 13;
  h4 = /* Math.imul(h, m): */
  (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
  return ((h4 ^ h4 >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
if (process.env.NODE_ENV !== "production") {
  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  var contentValues = ["normal", "none", "initial", "inherit", "unset"];
  var oldProcessStyleValue = processStyleValue;
  var msPattern = /^-ms-/;
  var hyphenPattern = /-(.)/g;
  var hyphenatedCache = {};
  processStyleValue = function processStyleValue3(key, value) {
    if (key === "content") {
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }
    return processed;
  };
}
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    if (process.env.NODE_ENV !== "production" && interpolation.toString() === "NO_COMPONENT_SELECTOR") {
      throw new Error(noComponentSelectorMessage);
    }
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles = interpolation.styles + ";";
        if (process.env.NODE_ENV !== "production" && interpolation.map !== void 0) {
          styles += interpolation.map;
        }
        return styles;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else if (process.env.NODE_ENV !== "production") {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      if (process.env.NODE_ENV !== "production") {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
        }
      }
      break;
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i2 = 0; i2 < obj.length; i2++) {
      string += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && process.env.NODE_ENV !== "production") {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (process.env.NODE_ENV !== "production" && _key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
if (process.env.NODE_ENV !== "production") {
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
}
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (process.env.NODE_ENV !== "production" && strings[0] === void 0) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
    }
    styles += strings[0];
  }
  for (var i2 = 1; i2 < args.length; i2++) {
    styles += handleInterpolation(mergedProps, registered, args[i2]);
    if (stringMode) {
      if (process.env.NODE_ENV !== "production" && strings[i2] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
      }
      styles += strings[i2];
    }
  }
  var sourceMap;
  if (process.env.NODE_ENV !== "production") {
    styles = styles.replace(sourceMapPattern, function(match3) {
      sourceMap = match3;
      return "";
    });
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match2[1];
  }
  var name = murmur2(styles) + identifierName;
  if (process.env.NODE_ENV !== "production") {
    return {
      name,
      styles,
      map: sourceMap,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }
  return {
    name,
    styles,
    next: cursor
  };
};
var syncFallback = function syncFallback2(create2) {
  return create2();
};
var useInsertionEffect = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;
var hasOwnProperty$1 = {}.hasOwnProperty;
var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
if (process.env.NODE_ENV !== "production") {
  EmotionCacheContext.displayName = "EmotionCacheContext";
}
var CacheProvider = EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ reactExports.createContext({});
if (process.env.NODE_ENV !== "production") {
  ThemeContext.displayName = "EmotionThemeContext";
}
var getLastPart = function getLastPart2(functionName) {
  var parts = functionName.split(".");
  return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
  var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
  if (match2)
    return getLastPart(match2[1]);
  match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
  if (match2)
    return getLastPart(match2[1]);
  return void 0;
};
var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
var sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
  return identifier2.replace(/\$/g, "-");
};
var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
  if (!stackTrace)
    return void 0;
  var lines = stackTrace.split("\n");
  for (var i2 = 0; i2 < lines.length; i2++) {
    var functionName = getFunctionNameFromStackTraceLine(lines[i2]);
    if (!functionName)
      continue;
    if (internalReactFunctionNames.has(functionName))
      break;
    if (/^[A-Z]/.test(functionName))
      return sanitizeIdentifier(functionName);
  }
  return void 0;
};
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var createEmotionProps = function createEmotionProps2(type, props) {
  if (process.env.NODE_ENV !== "production" && typeof props.css === "string" && // check if there is a css declaration
  props.css.indexOf(":") !== -1) {
    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
  }
  var newProps = {};
  for (var key in props) {
    if (hasOwnProperty$1.call(props, key)) {
      newProps[key] = props[key];
    }
  }
  newProps[typePropName] = type;
  if (process.env.NODE_ENV !== "production" && !!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
    var label = getLabelFromStackTrace(new Error().stack);
    if (label)
      newProps[labelPropName] = label;
  }
  return newProps;
};
var Insertion$2 = function Insertion(_ref2) {
  var cache = _ref2.cache, serialized = _ref2.serialized, isStringTag = _ref2.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, reactExports.useContext(ThemeContext));
  if (process.env.NODE_ENV !== "production" && serialized.name.indexOf("-") === -1) {
    var labelFromStack = props[labelPropName];
    if (labelFromStack) {
      serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
    }
  }
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var key in props) {
    if (hasOwnProperty$1.call(props, key) && key !== "css" && key !== typePropName && (process.env.NODE_ENV === "production" || key !== labelPropName)) {
      newProps[key] = props[key];
    }
  }
  newProps.ref = ref;
  newProps.className = className;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$2, {
    cache,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), /* @__PURE__ */ reactExports.createElement(WrappedComponent, newProps));
});
if (process.env.NODE_ENV !== "production") {
  Emotion.displayName = "EmotionCssPropInternal";
}
var Emotion$1 = Emotion;
var pkg = {
  name: "@emotion/react",
  version: "11.11.3",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        "default": "./dist/emotion-react.esm.js"
      },
      "import": "./dist/emotion-react.cjs.mjs",
      "default": "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
      "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
      "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
      "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": {
      types: {
        "import": "./macro.d.mts",
        "default": "./macro.d.ts"
      },
      "default": "./macro.js"
    }
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.*"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.11.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/serialize": "^1.1.3",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
    "@emotion/utils": "^1.2.1",
    "@emotion/weak-memoize": "^0.3.1",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.11.2",
    "@emotion/css-prettifier": "1.1.3",
    "@emotion/server": "11.11.0",
    "@emotion/styled": "11.11.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
          types: {
            "import": "./macro.d.mts",
            "default": "./macro.d.ts"
          },
          "default": "./macro.js"
        }
      }
    }
  }
};
var warnedAboutCssPropForGlobal = false;
var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
  if (process.env.NODE_ENV !== "production" && !warnedAboutCssPropForGlobal && // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
  (props.className || props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }
  var styles = props.styles;
  var serialized = serializeStyles([styles], void 0, reactExports.useContext(ThemeContext));
  var sheetRef = reactExports.useRef();
  useInsertionEffectWithLayoutFallback(function() {
    var key = cache.key + "-global";
    var sheet = new cache.sheet.constructor({
      key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }
    if (node2 !== null) {
      rehydrating = true;
      node2.setAttribute("data-emotion", key);
      sheet.hydrate([node2]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function() {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffectWithLayoutFallback(function() {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== void 0) {
      insertStyles(cache, serialized.next, true);
    }
    if (sheet.tags.length) {
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }
    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});
if (process.env.NODE_ENV !== "production") {
  Global.displayName = "EmotionGlobal";
}
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
var keyframes = function keyframes2() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};
var classnames$1 = function classnames(args) {
  var len = args.length;
  var i2 = 0;
  var cls = "";
  for (; i2 < len; i2++) {
    var arg = args[i2];
    if (arg == null)
      continue;
    var toAdd = void 0;
    switch (typeof arg) {
      case "boolean":
        break;
      case "object": {
        if (Array.isArray(arg)) {
          toAdd = classnames(arg);
        } else {
          if (process.env.NODE_ENV !== "production" && arg.styles !== void 0 && arg.name !== void 0) {
            console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
          }
          toAdd = "";
          for (var k3 in arg) {
            if (arg[k3] && k3) {
              toAdd && (toAdd += " ");
              toAdd += k3;
            }
          }
        }
        break;
      }
      default: {
        toAdd = arg;
      }
    }
    if (toAdd) {
      cls && (cls += " ");
      cls += toAdd;
    }
  }
  return cls;
};
function merge(registered, css2, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css2(registeredStyles);
}
var Insertion$1 = function Insertion2(_ref2) {
  var cache = _ref2.cache, serializedArr = _ref2.serializedArr;
  useInsertionEffectAlwaysWithSyncFallback(function() {
    for (var i2 = 0; i2 < serializedArr.length; i2++) {
      insertStyles(cache, serializedArr[i2], false);
    }
  });
  return null;
};
var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
  var hasRendered = false;
  var serializedArr = [];
  var css2 = function css3() {
    if (hasRendered && process.env.NODE_ENV !== "production") {
      throw new Error("css can only be used during render");
    }
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var serialized = serializeStyles(args, cache.registered);
    serializedArr.push(serialized);
    registerStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };
  var cx = function cx2() {
    if (hasRendered && process.env.NODE_ENV !== "production") {
      throw new Error("cx can only be used during render");
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return merge(cache.registered, css2, classnames$1(args));
  };
  var content = {
    css: css2,
    cx,
    theme: reactExports.useContext(ThemeContext)
  };
  var ele = props.children(content);
  hasRendered = true;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$1, {
    cache,
    serializedArr
  }), ele);
});
if (process.env.NODE_ENV !== "production") {
  ClassNames.displayName = "EmotionClassNames";
}
if (process.env.NODE_ENV !== "production") {
  var isBrowser$3 = true;
  var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
  if (isBrowser$3 && !isTestEnv) {
    var globalContext = (
      // $FlowIgnore
      typeof globalThis !== "undefined" ? globalThis : isBrowser$3 ? window : global
    );
    var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) {
      console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    }
    globalContext[globalKey] = true;
  }
}
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
  return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
  var shouldForwardProp;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp !== "function" && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }
  return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var Insertion3 = function Insertion4(_ref2) {
  var cache = _ref2.cache, serialized = _ref2.serialized, isStringTag = _ref2.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var createStyled = function createStyled2(tag, options) {
  if (process.env.NODE_ENV !== "production") {
    if (tag === void 0) {
      throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
    }
  }
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options !== void 0) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles.push.apply(styles, args);
    } else {
      if (process.env.NODE_ENV !== "production" && args[0][0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles.push(args[0][0]);
      var len = args.length;
      var i2 = 1;
      for (; i2 < len; i2++) {
        if (process.env.NODE_ENV !== "production" && args[0][i2] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles.push(args[i2], args[0][i2]);
      }
    }
    var Styled = withEmotionCache(function(props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key in props) {
          mergedProps[key] = props[key];
        }
        mergedProps.theme = reactExports.useContext(ThemeContext);
      }
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === "as")
          continue;
        if (
          // $FlowFixMe
          finalShouldForwardProp(_key)
        ) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      newProps.ref = ref;
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion3, {
        cache,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, "toString", {
      value: function value() {
        if (targetClassName === void 0 && process.env.NODE_ENV !== "production") {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      return createStyled2(nextTag, _extends({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles);
    };
    return Styled;
  };
};
function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return reactExports.useMemo(
    () => (node2) => {
      refs.forEach((ref) => ref(node2));
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs
  );
}
const canUseDOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
  elementString === "[object global]";
}
function isNode$1(node2) {
  return "nodeType" in node2;
}
function getWindow$2(target) {
  var _target$ownerDocument, _target$ownerDocument2;
  if (!target) {
    return window;
  }
  if (isWindow(target)) {
    return target;
  }
  if (!isNode$1(target)) {
    return window;
  }
  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}
function isDocument(node2) {
  const {
    Document: Document2
  } = getWindow$2(node2);
  return node2 instanceof Document2;
}
function isHTMLElement$2(node2) {
  if (isWindow(node2)) {
    return false;
  }
  return node2 instanceof getWindow$2(node2).HTMLElement;
}
function isSVGElement(node2) {
  return node2 instanceof getWindow$2(node2).SVGElement;
}
function getOwnerDocument$1(target) {
  if (!target) {
    return document;
  }
  if (isWindow(target)) {
    return target.document;
  }
  if (!isNode$1(target)) {
    return document;
  }
  if (isDocument(target)) {
    return target;
  }
  if (isHTMLElement$2(target) || isSVGElement(target)) {
    return target.ownerDocument;
  }
  return document;
}
const useIsomorphicLayoutEffect$2 = canUseDOM ? reactExports.useLayoutEffect : reactExports.useEffect;
function useEvent(handler) {
  const handlerRef = reactExports.useRef(handler);
  useIsomorphicLayoutEffect$2(() => {
    handlerRef.current = handler;
  });
  return reactExports.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return handlerRef.current == null ? void 0 : handlerRef.current(...args);
  }, []);
}
function useInterval() {
  const intervalRef = reactExports.useRef(null);
  const set2 = reactExports.useCallback((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = reactExports.useCallback(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set2, clear];
}
function useLatestValue(value, dependencies) {
  if (dependencies === void 0) {
    dependencies = [value];
  }
  const valueRef = reactExports.useRef(value);
  useIsomorphicLayoutEffect$2(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}
function useLazyMemo(callback, dependencies) {
  const valueRef = reactExports.useRef();
  return reactExports.useMemo(
    () => {
      const newValue = callback(valueRef.current);
      valueRef.current = newValue;
      return newValue;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...dependencies]
  );
}
function useNodeRef(onChange) {
  const onChangeHandler = useEvent(onChange);
  const node2 = reactExports.useRef(null);
  const setNodeRef = reactExports.useCallback(
    (element) => {
      if (element !== node2.current) {
        onChangeHandler == null ? void 0 : onChangeHandler(element, node2.current);
      }
      node2.current = element;
    },
    //eslint-disable-next-line
    []
  );
  return [node2, setNodeRef];
}
function usePrevious(value) {
  const ref = reactExports.useRef();
  reactExports.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
let ids = {};
function useUniqueId(prefix2, value) {
  return reactExports.useMemo(() => {
    if (value) {
      return value;
    }
    const id = ids[prefix2] == null ? 0 : ids[prefix2] + 1;
    ids[prefix2] = id;
    return prefix2 + "-" + id;
  }, [prefix2, value]);
}
function createAdjustmentFn(modifier) {
  return function(object) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);
      for (const [key, valueAdjustment] of entries) {
        const value = accumulator[key];
        if (value != null) {
          accumulator[key] = value + modifier * valueAdjustment;
        }
      }
      return accumulator;
    }, {
      ...object
    });
  };
}
const add = /* @__PURE__ */ createAdjustmentFn(1);
const subtract = /* @__PURE__ */ createAdjustmentFn(-1);
function hasViewportRelativeCoordinates(event) {
  return "clientX" in event && "clientY" in event;
}
function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }
  const {
    KeyboardEvent: KeyboardEvent2
  } = getWindow$2(event.target);
  return KeyboardEvent2 && event instanceof KeyboardEvent2;
}
function isTouchEvent(event) {
  if (!event) {
    return false;
  }
  const {
    TouchEvent
  } = getWindow$2(event.target);
  return TouchEvent && event instanceof TouchEvent;
}
function getEventCoordinates(event) {
  if (isTouchEvent(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x3,
        clientY: y4
      } = event.touches[0];
      return {
        x: x3,
        y: y4
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x3,
        clientY: y4
      } = event.changedTouches[0];
      return {
        x: x3,
        y: y4
      };
    }
  }
  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  return null;
}
const CSS$1 = /* @__PURE__ */ Object.freeze({
  Translate: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        x: x3,
        y: y4
      } = transform;
      return "translate3d(" + (x3 ? Math.round(x3) : 0) + "px, " + (y4 ? Math.round(y4) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        scaleX: scaleX2,
        scaleY: scaleY2
      } = transform;
      return "scaleX(" + scaleX2 + ") scaleY(" + scaleY2 + ")";
    }
  },
  Transform: {
    toString(transform) {
      if (!transform) {
        return;
      }
      return [CSS$1.Translate.toString(transform), CSS$1.Scale.toString(transform)].join(" ");
    }
  },
  Transition: {
    toString(_ref2) {
      let {
        property,
        duration,
        easing
      } = _ref2;
      return property + " " + duration + "ms " + easing;
    }
  }
});
const SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }
  return element.querySelector(SELECTOR);
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min)
    return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f2 = reactExports, k3 = Symbol.for("react.element"), l2 = Symbol.for("react.fragment"), m4 = Object.prototype.hasOwnProperty, n2 = f2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p2 = { key: true, ref: true, __self: true, __source: true };
  function q2(c3, a4, g2) {
    var b3, d4 = {}, e3 = null, h4 = null;
    void 0 !== g2 && (e3 = "" + g2);
    void 0 !== a4.key && (e3 = "" + a4.key);
    void 0 !== a4.ref && (h4 = a4.ref);
    for (b3 in a4)
      m4.call(a4, b3) && !p2.hasOwnProperty(b3) && (d4[b3] = a4[b3]);
    if (c3 && c3.defaultProps)
      for (b3 in a4 = c3.defaultProps, a4)
        void 0 === d4[b3] && (d4[b3] = a4[b3]);
    return { $$typeof: k3, type: c3, key: e3, ref: h4, props: d4, _owner: n2.current };
  }
  reactJsxRuntime_production_min.Fragment = l2;
  reactJsxRuntime_production_min.jsx = q2;
  reactJsxRuntime_production_min.jsxs = q2;
  return reactJsxRuntime_production_min;
}
var reactJsxRuntime_development = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_development;
function requireReactJsxRuntime_development() {
  if (hasRequiredReactJsxRuntime_development)
    return reactJsxRuntime_development;
  hasRequiredReactJsxRuntime_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var React2 = reactExports;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format2) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
      }
      function printWarning(level, format2, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format2 += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format2);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x3) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x3) {
              var match2 = x3.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn3, construct) {
        if (!fn3 || reentry) {
          return "";
        }
        {
          var frame2 = componentFrameCache.get(fn3);
          if (frame2 !== void 0) {
            return frame2;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x3) {
                control = x3;
              }
              Reflect.construct(fn3, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x3) {
                control = x3;
              }
              fn3.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x3) {
              control = x3;
            }
            fn3();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s4 = sampleLines.length - 1;
            var c3 = controlLines.length - 1;
            while (s4 >= 1 && c3 >= 0 && sampleLines[s4] !== controlLines[c3]) {
              c3--;
            }
            for (; s4 >= 1 && c3 >= 0; s4--, c3--) {
              if (sampleLines[s4] !== controlLines[c3]) {
                if (s4 !== 1 || c3 !== 1) {
                  do {
                    s4--;
                    c3--;
                    if (c3 < 0 || sampleLines[s4] !== controlLines[c3]) {
                      var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                      if (fn3.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn3.displayName);
                      }
                      {
                        if (typeof fn3 === "function") {
                          componentFrameCache.set(fn3, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s4 >= 1 && c3 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn3 ? fn3.displayName || fn3.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn3 === "function") {
            componentFrameCache.set(fn3, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn3, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn3, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
              } catch (x3) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e3) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty2.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty2.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config, maybeKey, source, self) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== void 0) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
          }
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray(node2)) {
            for (var i2 = 0; i2 < node2.length; i2++) {
              var child = node2[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys2 = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys2.length; i2++) {
            var key = keys2[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type, props, key, source, self);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    validateChildKeys(children[i2], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, true);
        }
      }
      function jsxWithValidationDynamic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, false);
        }
      }
      var jsx2 = jsxWithValidationDynamic;
      var jsxs2 = jsxWithValidationStatic;
      reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxRuntime_development.jsx = jsx2;
      reactJsxRuntime_development.jsxs = jsxs2;
    })();
  }
  return reactJsxRuntime_development;
}
if (process.env.NODE_ENV === "production") {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}
var jsxRuntimeExports = jsxRuntime.exports;
const jsx$1 = jsxRuntimeExports.jsx;
const jsxs$1 = jsxRuntimeExports.jsxs;
const Fragment$2 = jsxRuntimeExports.Fragment;
var Fragment$1 = Fragment$2;
function jsx(type, props, key) {
  if (!hasOwnProperty$1.call(props, "css")) {
    return jsx$1(type, props, key);
  }
  return jsx$1(Emotion$1, createEmotionProps(type, props), key);
}
function jsxs(type, props, key) {
  if (!hasOwnProperty$1.call(props, "css")) {
    return jsxs$1(type, props, key);
  }
  return jsxs$1(Emotion$1, createEmotionProps(type, props), key);
}
const hiddenStyles = {
  display: "none"
};
function HiddenText(_ref2) {
  let {
    id,
    value
  } = _ref2;
  return /* @__PURE__ */ jsx("div", {
    id,
    style: hiddenStyles,
    children: value
  });
}
function LiveRegion(_ref2) {
  let {
    id,
    announcement,
    ariaLiveType = "assertive"
  } = _ref2;
  const visuallyHidden = {
    position: "fixed",
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(100%)",
    whiteSpace: "nowrap"
  };
  return /* @__PURE__ */ jsx("div", {
    id,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true,
    children: announcement
  });
}
function useAnnouncement() {
  const [announcement, setAnnouncement] = reactExports.useState("");
  const announce = reactExports.useCallback((value) => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}
const DndMonitorContext = /* @__PURE__ */ reactExports.createContext(null);
function useDndMonitor(listener) {
  const registerListener = reactExports.useContext(DndMonitorContext);
  reactExports.useEffect(() => {
    if (!registerListener) {
      throw new Error("useDndMonitor must be used within a children of <DndContext>");
    }
    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}
function useDndMonitorProvider() {
  const [listeners] = reactExports.useState(() => /* @__PURE__ */ new Set());
  const registerListener = reactExports.useCallback((listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = reactExports.useCallback((_ref2) => {
    let {
      type,
      event
    } = _ref2;
    listeners.forEach((listener) => {
      var _listener$type;
      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}
const defaultScreenReaderInstructions = {
  draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
};
const defaultAnnouncements = {
  onDragStart(_ref2) {
    let {
      active
    } = _ref2;
    return "Picked up draggable item " + active.id + ".";
  },
  onDragOver(_ref2) {
    let {
      active,
      over
    } = _ref2;
    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }
    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },
  onDragEnd(_ref3) {
    let {
      active,
      over
    } = _ref3;
    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }
    return "Draggable item " + active.id + " was dropped.";
  },
  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }
};
function Accessibility(_ref2) {
  let {
    announcements = defaultAnnouncements,
    container,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref2;
  const {
    announce,
    announcement
  } = useAnnouncement();
  const liveRegionId = useUniqueId("DndLiveRegion");
  const [mounted, setMounted] = reactExports.useState(false);
  reactExports.useEffect(() => {
    setMounted(true);
  }, []);
  useDndMonitor(reactExports.useMemo(() => ({
    onDragStart(_ref22) {
      let {
        active
      } = _ref22;
      announce(announcements.onDragStart({
        active
      }));
    },
    onDragMove(_ref3) {
      let {
        active,
        over
      } = _ref3;
      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },
    onDragOver(_ref4) {
      let {
        active,
        over
      } = _ref4;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },
    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },
    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }
  }), [announce, announcements]));
  if (!mounted) {
    return null;
  }
  const markup = /* @__PURE__ */ jsxs(Fragment$1, {
    children: [/* @__PURE__ */ jsx(HiddenText, {
      id: hiddenTextDescribedById,
      value: screenReaderInstructions.draggable
    }), /* @__PURE__ */ jsx(LiveRegion, {
      id: liveRegionId,
      announcement
    })]
  });
  return container ? reactDomExports.createPortal(markup, container) : markup;
}
var Action;
(function(Action2) {
  Action2["DragStart"] = "dragStart";
  Action2["DragMove"] = "dragMove";
  Action2["DragEnd"] = "dragEnd";
  Action2["DragCancel"] = "dragCancel";
  Action2["DragOver"] = "dragOver";
  Action2["RegisterDroppable"] = "registerDroppable";
  Action2["SetDroppableDisabled"] = "setDroppableDisabled";
  Action2["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));
function noop$1() {
}
function useSensor(sensor, options) {
  return reactExports.useMemo(
    () => ({
      sensor,
      options: options != null ? options : {}
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [sensor, options]
  );
}
function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }
  return reactExports.useMemo(
    () => [...sensors].filter((sensor) => sensor != null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...sensors]
  );
}
const defaultCoordinates = /* @__PURE__ */ Object.freeze({
  x: 0,
  y: 0
});
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}
function sortCollisionsAsc(_ref2, _ref22) {
  let {
    data: {
      value: a4
    }
  } = _ref2;
  let {
    data: {
      value: b3
    }
  } = _ref22;
  return a4 - b3;
}
function sortCollisionsDesc(_ref3, _ref4) {
  let {
    data: {
      value: a4
    }
  } = _ref3;
  let {
    data: {
      value: b3
    }
  } = _ref4;
  return b3 - a4;
}
function cornersOfRectangle(_ref5) {
  let {
    left: left2,
    top: top2,
    height,
    width
  } = _ref5;
  return [{
    x: left2,
    y: top2
  }, {
    x: left2 + width,
    y: top2
  }, {
    x: left2,
    y: top2 + height
  }, {
    x: left2 + width,
    y: top2 + height
  }];
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }
  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}
function centerOfRectangle(rect, left2, top2) {
  if (left2 === void 0) {
    left2 = rect.left;
  }
  if (top2 === void 0) {
    top2 = rect.top;
  }
  return {
    x: left2 + rect.width * 0.5,
    y: top2 + rect.height * 0.5
  };
}
const closestCenter = (_ref2) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref2;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
const closestCorners = (_ref2) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref2;
  const corners = cornersOfRectangle(collisionRect);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const rectCorners = cornersOfRectangle(rect);
      const distances = corners.reduce((accumulator, corner, index2) => {
        return accumulator + distanceBetween(rectCorners[index2], corner);
      }, 0);
      const effectiveDistance = Number((distances / 4).toFixed(4));
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: effectiveDistance
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function getIntersectionRatio(entry, target) {
  const top2 = Math.max(target.top, entry.top);
  const left2 = Math.max(target.left, entry.left);
  const right2 = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom2 = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right2 - left2;
  const height = bottom2 - top2;
  if (left2 < right2 && top2 < bottom2) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
}
const rectIntersection = (_ref2) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref2;
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);
      if (intersectionRatio > 0) {
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }
  return collisions.sort(sortCollisionsDesc);
};
function adjustScale(transform, rect1, rect2) {
  return {
    ...transform,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}
function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}
function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((acc, adjustment) => ({
      ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), {
      ...rect
    });
  };
}
const getAdjustedRect = /* @__PURE__ */ createRectAdjustmentFn(1);
function parseTransform(transform) {
  if (transform.startsWith("matrix3d(")) {
    const transformArray = transform.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform.startsWith("matrix(")) {
    const transformArray = transform.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }
  return null;
}
function inverseTransform(rect, transform, transformOrigin) {
  const parsedTransform = parseTransform(transform);
  if (!parsedTransform) {
    return rect;
  }
  const {
    scaleX: scaleX2,
    scaleY: scaleY2,
    x: translateX2,
    y: translateY2
  } = parsedTransform;
  const x3 = rect.left - translateX2 - (1 - scaleX2) * parseFloat(transformOrigin);
  const y4 = rect.top - translateY2 - (1 - scaleY2) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(" ") + 1));
  const w3 = scaleX2 ? rect.width / scaleX2 : rect.width;
  const h4 = scaleY2 ? rect.height / scaleY2 : rect.height;
  return {
    width: w3,
    height: h4,
    top: y4,
    right: x3 + w3,
    bottom: y4 + h4,
    left: x3
  };
}
const defaultOptions$1 = {
  ignoreTransform: false
};
function getClientRect(element, options) {
  if (options === void 0) {
    options = defaultOptions$1;
  }
  let rect = element.getBoundingClientRect();
  if (options.ignoreTransform) {
    const {
      transform,
      transformOrigin
    } = getWindow$2(element).getComputedStyle(element);
    if (transform) {
      rect = inverseTransform(rect, transform, transformOrigin);
    }
  }
  const {
    top: top2,
    left: left2,
    width,
    height,
    bottom: bottom2,
    right: right2
  } = rect;
  return {
    top: top2,
    left: left2,
    width,
    height,
    bottom: bottom2,
    right: right2
  };
}
function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}
function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}
function isFixed(node2, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow$2(node2).getComputedStyle(node2);
  }
  return computedStyle.position === "fixed";
}
function isScrollable(element, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow$2(element).getComputedStyle(element);
  }
  const overflowRegex = /(auto|scroll|overlay)/;
  const properties2 = ["overflow", "overflowX", "overflowY"];
  return properties2.some((property) => {
    const value = computedStyle[property];
    return typeof value === "string" ? overflowRegex.test(value) : false;
  });
}
function getScrollableAncestors(element, limit) {
  const scrollParents = [];
  function findScrollableAncestors(node2) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }
    if (!node2) {
      return scrollParents;
    }
    if (isDocument(node2) && node2.scrollingElement != null && !scrollParents.includes(node2.scrollingElement)) {
      scrollParents.push(node2.scrollingElement);
      return scrollParents;
    }
    if (!isHTMLElement$2(node2) || isSVGElement(node2)) {
      return scrollParents;
    }
    if (scrollParents.includes(node2)) {
      return scrollParents;
    }
    const computedStyle = getWindow$2(element).getComputedStyle(node2);
    if (node2 !== element) {
      if (isScrollable(node2, computedStyle)) {
        scrollParents.push(node2);
      }
    }
    if (isFixed(node2, computedStyle)) {
      return scrollParents;
    }
    return findScrollableAncestors(node2.parentNode);
  }
  if (!element) {
    return scrollParents;
  }
  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node2) {
  const [firstScrollableAncestor] = getScrollableAncestors(node2, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}
function getScrollableElement(element) {
  if (!canUseDOM || !element) {
    return null;
  }
  if (isWindow(element)) {
    return element;
  }
  if (!isNode$1(element)) {
    return null;
  }
  if (isDocument(element) || element === getOwnerDocument$1(element).scrollingElement) {
    return window;
  }
  if (isHTMLElement$2(element)) {
    return element;
  }
  return null;
}
function getScrollXCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollX;
  }
  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollY;
  }
  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}
var Direction;
(function(Direction2) {
  Direction2[Direction2["Forward"] = 1] = "Forward";
  Direction2[Direction2["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));
function isDocumentScrollingElement(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
const defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref2, acceleration, thresholdPercentage) {
  let {
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2
  } = _ref2;
  if (acceleration === void 0) {
    acceleration = 10;
  }
  if (thresholdPercentage === void 0) {
    thresholdPercentage = defaultThreshold;
  }
  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };
  if (!isTop && top2 <= scrollContainerRect.top + threshold.height) {
    direction.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top2) / threshold.height);
  } else if (!isBottom && bottom2 >= scrollContainerRect.bottom - threshold.height) {
    direction.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom2) / threshold.height);
  }
  if (!isRight && right2 >= scrollContainerRect.right - threshold.width) {
    direction.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right2) / threshold.width);
  } else if (!isLeft && left2 <= scrollContainerRect.left + threshold.width) {
    direction.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left2) / threshold.width);
  }
  return {
    direction,
    speed
  };
}
function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight: innerHeight2
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight2,
      width: innerWidth,
      height: innerHeight2
    };
  }
  const {
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2
  } = element.getBoundingClientRect();
  return {
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node2) => {
    return add(acc, getScrollCoordinates(node2));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node2) => {
    return acc + getScrollXCoordinate(node2);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node2) => {
    return acc + getScrollYCoordinate(node2);
  }, 0);
}
function scrollIntoViewIfNeeded(element, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  if (!element) {
    return;
  }
  const {
    top: top2,
    left: left2,
    bottom: bottom2,
    right: right2
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);
  if (!firstScrollableAncestor) {
    return;
  }
  if (bottom2 <= 0 || right2 <= 0 || top2 >= window.innerHeight || left2 >= window.innerWidth) {
    element.scrollIntoView({
      block: "center",
      inline: "center"
    });
  }
}
const properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
class Rect {
  constructor(rect, element) {
    this.rect = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.right = void 0;
    this.left = void 0;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = {
      ...rect
    };
    this.width = rect.width;
    this.height = rect.height;
    for (const [axis, keys2, getScrollOffset] of properties) {
      for (const key of keys2) {
        Object.defineProperty(this, key, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }
    Object.defineProperty(this, "rect", {
      enumerable: false
    });
  }
}
class Listeners {
  constructor(target) {
    this.target = void 0;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _this$target;
        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
      });
    };
    this.target = target;
  }
  add(eventName, handler, options) {
    var _this$target2;
    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
}
function getEventListenerTarget(target) {
  const {
    EventTarget
  } = getWindow$2(target);
  return target instanceof EventTarget ? target : getOwnerDocument$1(target);
}
function hasExceededDistance(delta, measurement) {
  const dx = Math.abs(delta.x);
  const dy = Math.abs(delta.y);
  if (typeof measurement === "number") {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }
  if ("x" in measurement && "y" in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }
  if ("x" in measurement) {
    return dx > measurement.x;
  }
  if ("y" in measurement) {
    return dy > measurement.y;
  }
  return false;
}
var EventName;
(function(EventName2) {
  EventName2["Click"] = "click";
  EventName2["DragStart"] = "dragstart";
  EventName2["Keydown"] = "keydown";
  EventName2["ContextMenu"] = "contextmenu";
  EventName2["Resize"] = "resize";
  EventName2["SelectionChange"] = "selectionchange";
  EventName2["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));
function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation$1(event) {
  event.stopPropagation();
}
var KeyboardCode;
(function(KeyboardCode2) {
  KeyboardCode2["Space"] = "Space";
  KeyboardCode2["Down"] = "ArrowDown";
  KeyboardCode2["Right"] = "ArrowRight";
  KeyboardCode2["Left"] = "ArrowLeft";
  KeyboardCode2["Up"] = "ArrowUp";
  KeyboardCode2["Esc"] = "Escape";
  KeyboardCode2["Enter"] = "Enter";
})(KeyboardCode || (KeyboardCode = {}));
const defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};
const defaultKeyboardCoordinateGetter = (event, _ref2) => {
  let {
    currentCoordinates
  } = _ref2;
  switch (event.code) {
    case KeyboardCode.Right:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x + 25
      };
    case KeyboardCode.Left:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x - 25
      };
    case KeyboardCode.Down:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y + 25
      };
    case KeyboardCode.Up:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }
  return void 0;
};
class KeyboardSensor {
  constructor(props) {
    this.props = void 0;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = void 0;
    this.listeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    const {
      event: {
        target
      }
    } = props;
    this.props = props;
    this.listeners = new Listeners(getOwnerDocument$1(target));
    this.windowListeners = new Listeners(getWindow$2(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node2 = activeNode.node.current;
    if (node2) {
      scrollIntoViewIfNeeded(node2);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const {
        active,
        context,
        options
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = "smooth"
      } = options;
      const {
        code
      } = event;
      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }
      const {
        collisionRect
      } = context.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context.current;
        for (const scrollContainer of scrollableAncestors) {
          const direction = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }
            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }
            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }
            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }
            break;
          }
        }
        this.handleMove(event, add(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }
  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
}
KeyboardSensor.activators = [{
  eventName: "onKeyDown",
  handler: (event, _ref2, _ref22) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref2;
    let {
      active
    } = _ref22;
    const {
      code
    } = event.nativeEvent;
    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;
      if (activator && event.target !== activator) {
        return false;
      }
      event.preventDefault();
      onActivation == null ? void 0 : onActivation({
        event: event.nativeEvent
      });
      return true;
    }
    return false;
  }
}];
function isDistanceConstraint(constraint) {
  return Boolean(constraint && "distance" in constraint);
}
function isDelayConstraint(constraint) {
  return Boolean(constraint && "delay" in constraint);
}
class AbstractPointerSensor {
  constructor(props, events2, listenerTarget) {
    var _getEventCoordinates;
    if (listenerTarget === void 0) {
      listenerTarget = getEventListenerTarget(props.event.target);
    }
    this.props = void 0;
    this.events = void 0;
    this.autoScrollEnabled = true;
    this.document = void 0;
    this.activated = false;
    this.initialCoordinates = void 0;
    this.timeoutId = null;
    this.listeners = void 0;
    this.documentListeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    this.events = events2;
    const {
      event
    } = props;
    const {
      target
    } = event;
    this.props = props;
    this.events = events2;
    this.document = getOwnerDocument$1(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners(getWindow$2(target));
    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }
  attach() {
    const {
      events: events2,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events2.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events2.end.name, this.handleEnd);
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);
    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }
      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        return;
      }
      if (isDistanceConstraint(activationConstraint)) {
        return;
      }
    }
    this.handleStart();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
    setTimeout(this.documentListeners.removeAll, 50);
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;
    if (initialCoordinates) {
      this.activated = true;
      this.documentListeners.add(EventName.Click, stopPropagation$1, {
        capture: true
      });
      this.removeTextSelection();
      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }
  handleMove(event) {
    var _getEventCoordinates2;
    const {
      activated,
      initialCoordinates,
      props
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props;
    if (!initialCoordinates) {
      return;
    }
    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta = subtract(initialCoordinates, coordinates);
    if (!activated && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
        if (hasExceededDistance(delta, activationConstraint.distance)) {
          return this.handleStart();
        }
      }
      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    onMove(coordinates);
  }
  handleEnd() {
    const {
      onEnd
    } = this.props;
    this.detach();
    onEnd();
  }
  handleCancel() {
    const {
      onCancel
    } = this.props;
    this.detach();
    onCancel();
  }
  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }
  removeTextSelection() {
    var _this$document$getSel;
    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
  }
}
const events = {
  move: {
    name: "pointermove"
  },
  end: {
    name: "pointerup"
  }
};
class PointerSensor extends AbstractPointerSensor {
  constructor(props) {
    const {
      event
    } = props;
    const listenerTarget = getOwnerDocument$1(event.target);
    super(props, events, listenerTarget);
  }
}
PointerSensor.activators = [{
  eventName: "onPointerDown",
  handler: (_ref2, _ref22) => {
    let {
      nativeEvent: event
    } = _ref2;
    let {
      onActivation
    } = _ref22;
    if (!event.isPrimary || event.button !== 0) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
const events$1 = {
  move: {
    name: "mousemove"
  },
  end: {
    name: "mouseup"
  }
};
var MouseButton;
(function(MouseButton2) {
  MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));
class MouseSensor extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$1, getOwnerDocument$1(props.event.target));
  }
}
MouseSensor.activators = [{
  eventName: "onMouseDown",
  handler: (_ref2, _ref22) => {
    let {
      nativeEvent: event
    } = _ref2;
    let {
      onActivation
    } = _ref22;
    if (event.button === MouseButton.RightClick) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
const events$2 = {
  move: {
    name: "touchmove"
  },
  end: {
    name: "touchend"
  }
};
class TouchSensor extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$2);
  }
  static setup() {
    window.addEventListener(events$2.move.name, noop2, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop2);
    };
    function noop2() {
    }
  }
}
TouchSensor.activators = [{
  eventName: "onTouchStart",
  handler: (_ref2, _ref22) => {
    let {
      nativeEvent: event
    } = _ref2;
    let {
      onActivation
    } = _ref22;
    const {
      touches
    } = event;
    if (touches.length > 1) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var AutoScrollActivator;
(function(AutoScrollActivator2) {
  AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
  AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));
var TraversalOrder;
(function(TraversalOrder2) {
  TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));
function useAutoScroller(_ref2) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order: order2 = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta,
    threshold
  } = _ref2;
  const scrollIntent = useScrollIntent({
    delta,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
  const scrollSpeed = reactExports.useRef({
    x: 0,
    y: 0
  });
  const scrollDirection = reactExports.useRef({
    x: 0,
    y: 0
  });
  const rect = reactExports.useMemo(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;
      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = reactExports.useRef(null);
  const autoScroll = reactExports.useCallback(() => {
    const scrollContainer = scrollContainerRef.current;
    if (!scrollContainer) {
      return;
    }
    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = reactExports.useMemo(() => order2 === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order2, scrollableAncestors]);
  reactExports.useEffect(
    () => {
      if (!enabled || !scrollableAncestors.length || !rect) {
        clearAutoScrollInterval();
        return;
      }
      for (const scrollContainer of sortedScrollableAncestors) {
        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
          continue;
        }
        const index2 = scrollableAncestors.indexOf(scrollContainer);
        const scrollContainerRect = scrollableAncestorRects[index2];
        if (!scrollContainerRect) {
          continue;
        }
        const {
          direction,
          speed
        } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
        for (const axis of ["x", "y"]) {
          if (!scrollIntent[axis][direction[axis]]) {
            speed[axis] = 0;
            direction[axis] = 0;
          }
        }
        if (speed.x > 0 || speed.y > 0) {
          clearAutoScrollInterval();
          scrollContainerRef.current = scrollContainer;
          setAutoScrollInterval(autoScroll, interval);
          scrollSpeed.current = speed;
          scrollDirection.current = direction;
          return;
        }
      }
      scrollSpeed.current = {
        x: 0,
        y: 0
      };
      scrollDirection.current = {
        x: 0,
        y: 0
      };
      clearAutoScrollInterval();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      acceleration,
      autoScroll,
      canScroll,
      clearAutoScrollInterval,
      enabled,
      interval,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(rect),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(scrollIntent),
      setAutoScrollInterval,
      scrollableAncestors,
      sortedScrollableAncestors,
      scrollableAncestorRects,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(threshold)
    ]
  );
}
const defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};
function useScrollIntent(_ref2) {
  let {
    delta,
    disabled
  } = _ref2;
  const previousDelta = usePrevious(delta);
  return useLazyMemo((previousIntent) => {
    if (disabled || !previousDelta || !previousIntent) {
      return defaultScrollIntent;
    }
    const direction = {
      x: Math.sign(delta.x - previousDelta.x),
      y: Math.sign(delta.y - previousDelta.y)
    };
    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
      }
    };
  }, [disabled, delta, previousDelta]);
}
function useCachedNode(draggableNodes, id) {
  const draggableNode = id !== null ? draggableNodes.get(id) : void 0;
  const node2 = draggableNode ? draggableNode.node.current : null;
  return useLazyMemo((cachedNode) => {
    var _ref2;
    if (id === null) {
      return null;
    }
    return (_ref2 = node2 != null ? node2 : cachedNode) != null ? _ref2 : null;
  }, [node2, id]);
}
function useCombineActivators(sensors, getSyntheticHandler) {
  return reactExports.useMemo(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map((activator) => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}
var MeasuringStrategy;
(function(MeasuringStrategy2) {
  MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
  MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));
var MeasuringFrequency;
(function(MeasuringFrequency2) {
  MeasuringFrequency2["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));
const defaultValue = /* @__PURE__ */ new Map();
function useDroppableMeasuring(containers, _ref2) {
  let {
    dragging,
    dependencies,
    config
  } = _ref2;
  const [queue, setQueue] = reactExports.useState(null);
  const {
    frequency,
    measure,
    strategy
  } = config;
  const containersRef = reactExports.useRef(containers);
  const disabled = isDisabled();
  const disabledRef = useLatestValue(disabled);
  const measureDroppableContainers = reactExports.useCallback(function(ids2) {
    if (ids2 === void 0) {
      ids2 = [];
    }
    if (disabledRef.current) {
      return;
    }
    setQueue((value) => {
      if (value === null) {
        return ids2;
      }
      return value.concat(ids2.filter((id) => !value.includes(id)));
    });
  }, [disabledRef]);
  const timeoutId = reactExports.useRef(null);
  const droppableRects = useLazyMemo((previousValue) => {
    if (disabled && !dragging) {
      return defaultValue;
    }
    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
      const map2 = /* @__PURE__ */ new Map();
      for (let container of containers) {
        if (!container) {
          continue;
        }
        if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
          map2.set(container.id, container.rect.current);
          continue;
        }
        const node2 = container.node.current;
        const rect = node2 ? new Rect(measure(node2), node2) : null;
        container.rect.current = rect;
        if (rect) {
          map2.set(container.id, rect);
        }
      }
      return map2;
    }
    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  reactExports.useEffect(() => {
    containersRef.current = containers;
  }, [containers]);
  reactExports.useEffect(
    () => {
      if (disabled) {
        return;
      }
      measureDroppableContainers();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [dragging, disabled]
  );
  reactExports.useEffect(
    () => {
      if (queue && queue.length > 0) {
        setQueue(null);
      }
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [JSON.stringify(queue)]
  );
  reactExports.useEffect(
    () => {
      if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
        return;
      }
      timeoutId.current = setTimeout(() => {
        measureDroppableContainers();
        timeoutId.current = null;
      }, frequency);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [frequency, disabled, measureDroppableContainers, ...dependencies]
  );
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };
  function isDisabled() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;
      case MeasuringStrategy.BeforeDragging:
        return dragging;
      default:
        return !dragging;
    }
  }
}
function useInitialValue(value, computeFn) {
  return useLazyMemo((previousValue) => {
    if (!value) {
      return null;
    }
    if (previousValue) {
      return previousValue;
    }
    return typeof computeFn === "function" ? computeFn(value) : value;
  }, [computeFn, value]);
}
function useInitialRect(node2, measure) {
  return useInitialValue(node2, measure);
}
function useMutationObserver(_ref2) {
  let {
    callback,
    disabled
  } = _ref2;
  const handleMutations = useEvent(callback);
  const mutationObserver = reactExports.useMemo(() => {
    if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
      return void 0;
    }
    const {
      MutationObserver: MutationObserver2
    } = window;
    return new MutationObserver2(handleMutations);
  }, [handleMutations, disabled]);
  reactExports.useEffect(() => {
    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}
function useResizeObserver(_ref2) {
  let {
    callback,
    disabled
  } = _ref2;
  const handleResize = useEvent(callback);
  const resizeObserver = reactExports.useMemo(
    () => {
      if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
        return void 0;
      }
      const {
        ResizeObserver: ResizeObserver2
      } = window;
      return new ResizeObserver2(handleResize);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [disabled]
  );
  reactExports.useEffect(() => {
    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}
function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}
function useRect(element, measure, fallbackRect) {
  if (measure === void 0) {
    measure = defaultMeasure;
  }
  const [rect, measureRect] = reactExports.useReducer(reducer2, null);
  const mutationObserver = useMutationObserver({
    callback(records) {
      if (!element) {
        return;
      }
      for (const record of records) {
        const {
          type,
          target
        } = record;
        if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }
  });
  const resizeObserver = useResizeObserver({
    callback: measureRect
  });
  useIsomorphicLayoutEffect$2(() => {
    measureRect();
    if (element) {
      resizeObserver == null ? void 0 : resizeObserver.observe(element);
      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
  function reducer2(currentRect) {
    if (!element) {
      return null;
    }
    if (element.isConnected === false) {
      var _ref2;
      return (_ref2 = currentRect != null ? currentRect : fallbackRect) != null ? _ref2 : null;
    }
    const newRect = measure(element);
    if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
      return currentRect;
    }
    return newRect;
  }
}
function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}
const defaultValue$1 = [];
function useScrollableAncestors(node2) {
  const previousNode = reactExports.useRef(node2);
  const ancestors = useLazyMemo((previousValue) => {
    if (!node2) {
      return defaultValue$1;
    }
    if (previousValue && previousValue !== defaultValue$1 && node2 && previousNode.current && node2.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }
    return getScrollableAncestors(node2);
  }, [node2]);
  reactExports.useEffect(() => {
    previousNode.current = node2;
  }, [node2]);
  return ancestors;
}
function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = reactExports.useState(null);
  const prevElements = reactExports.useRef(elements);
  const handleScroll2 = reactExports.useCallback((event) => {
    const scrollingElement = getScrollableElement(event.target);
    if (!scrollingElement) {
      return;
    }
    setScrollCoordinates((scrollCoordinates2) => {
      if (!scrollCoordinates2) {
        return null;
      }
      scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates2);
    });
  }, []);
  reactExports.useEffect(() => {
    const previousElements = prevElements.current;
    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map((element) => {
        const scrollableElement = getScrollableElement(element);
        if (scrollableElement) {
          scrollableElement.addEventListener("scroll", handleScroll2, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }
        return null;
      }).filter((entry) => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }
    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };
    function cleanup(elements2) {
      elements2.forEach((element) => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll2);
      });
    }
  }, [handleScroll2, elements]);
  return reactExports.useMemo(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }
    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}
function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  const initialScrollOffsets = reactExports.useRef(null);
  reactExports.useEffect(
    () => {
      initialScrollOffsets.current = null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    dependencies
  );
  reactExports.useEffect(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }
    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}
function useSensorSetup(sensors) {
  reactExports.useEffect(
    () => {
      if (!canUseDOM) {
        return;
      }
      const teardownFns = sensors.map((_ref2) => {
        let {
          sensor
        } = _ref2;
        return sensor.setup == null ? void 0 : sensor.setup();
      });
      return () => {
        for (const teardown of teardownFns) {
          teardown == null ? void 0 : teardown();
        }
      };
    },
    // TO-DO: Sensors length could theoretically change which would not be a valid dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
    sensors.map((_ref2) => {
      let {
        sensor
      } = _ref2;
      return sensor;
    })
  );
}
function useSyntheticListeners(listeners, id) {
  return reactExports.useMemo(() => {
    return listeners.reduce((acc, _ref2) => {
      let {
        eventName,
        handler
      } = _ref2;
      acc[eventName] = (event) => {
        handler(event, id);
      };
      return acc;
    }, {});
  }, [listeners, id]);
}
function useWindowRect(element) {
  return reactExports.useMemo(() => element ? getWindowClientRect(element) : null, [element]);
}
const defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  const [firstElement] = elements;
  const windowRect2 = useWindowRect(firstElement ? getWindow$2(firstElement) : null);
  const [rects, measureRects] = reactExports.useReducer(reducer2, defaultValue$2);
  const resizeObserver = useResizeObserver({
    callback: measureRects
  });
  if (elements.length > 0 && rects === defaultValue$2) {
    measureRects();
  }
  useIsomorphicLayoutEffect$2(() => {
    if (elements.length) {
      elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      measureRects();
    }
  }, [elements]);
  return rects;
  function reducer2() {
    if (!elements.length) {
      return defaultValue$2;
    }
    return elements.map((element) => isDocumentScrollingElement(element) ? windowRect2 : new Rect(measure(element), element));
  }
}
function getMeasurableNode(node2) {
  if (!node2) {
    return null;
  }
  if (node2.children.length > 1) {
    return node2;
  }
  const firstChild = node2.children[0];
  return isHTMLElement$2(firstChild) ? firstChild : node2;
}
function useDragOverlayMeasuring(_ref2) {
  let {
    measure
  } = _ref2;
  const [rect, setRect] = reactExports.useState(null);
  const handleResize = reactExports.useCallback((entries) => {
    for (const {
      target
    } of entries) {
      if (isHTMLElement$2(target)) {
        setRect((rect2) => {
          const newRect = measure(target);
          return rect2 ? {
            ...rect2,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver({
    callback: handleResize
  });
  const handleNodeChange = reactExports.useCallback((element) => {
    const node2 = getMeasurableNode(element);
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    if (node2) {
      resizeObserver == null ? void 0 : resizeObserver.observe(node2);
    }
    setRect(node2 ? measure(node2) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef3] = useNodeRef(handleNodeChange);
  return reactExports.useMemo(() => ({
    nodeRef,
    rect,
    setRef: setRef3
  }), [rect, nodeRef, setRef3]);
}
const defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
const defaultData = {
  current: {}
};
const defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};
class DroppableContainersMap extends Map {
  get(id) {
    var _super$get;
    return id != null ? (_super$get = super.get(id)) != null ? _super$get : void 0 : void 0;
  }
  toArray() {
    return Array.from(this.values());
  }
  getEnabled() {
    return this.toArray().filter((_ref2) => {
      let {
        disabled
      } = _ref2;
      return !disabled;
    });
  }
  getNodeFor(id) {
    var _this$get$node$curren, _this$get;
    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
  }
}
const defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /* @__PURE__ */ new Map(),
  droppableRects: /* @__PURE__ */ new Map(),
  droppableContainers: /* @__PURE__ */ new DroppableContainersMap(),
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop$1
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop$1,
  windowRect: null,
  measuringScheduled: false
};
const defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ""
  },
  dispatch: noop$1,
  draggableNodes: /* @__PURE__ */ new Map(),
  over: null,
  measureDroppableContainers: noop$1
};
const InternalContext = /* @__PURE__ */ reactExports.createContext(defaultInternalContext);
const PublicContext = /* @__PURE__ */ reactExports.createContext(defaultPublicContext);
function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: /* @__PURE__ */ new Map(),
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap()
    }
  };
}
function reducer(state, action) {
  switch (action.type) {
    case Action.DragStart:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };
    case Action.DragMove:
      if (!state.draggable.active) {
        return state;
      }
      return {
        ...state,
        draggable: {
          ...state.draggable,
          translate: {
            x: action.coordinates.x - state.draggable.initialCoordinates.x,
            y: action.coordinates.y - state.draggable.initialCoordinates.y
          }
        }
      };
    case Action.DragEnd:
    case Action.DragCancel:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };
    case Action.RegisterDroppable: {
      const {
        element
      } = action;
      const {
        id
      } = element;
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, element);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.SetDroppableDisabled: {
      const {
        id,
        key,
        disabled
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, {
        ...element,
        disabled
      });
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.UnregisterDroppable: {
      const {
        id,
        key
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.delete(id);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    default: {
      return state;
    }
  }
}
function RestoreFocus(_ref2) {
  let {
    disabled
  } = _ref2;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = reactExports.useContext(InternalContext);
  const previousActivatorEvent = usePrevious(activatorEvent);
  const previousActiveId = usePrevious(active == null ? void 0 : active.id);
  reactExports.useEffect(() => {
    if (disabled) {
      return;
    }
    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!isKeyboardEvent(previousActivatorEvent)) {
        return;
      }
      if (document.activeElement === previousActivatorEvent.target) {
        return;
      }
      const draggableNode = draggableNodes.get(previousActiveId);
      if (!draggableNode) {
        return;
      }
      const {
        activatorNode,
        node: node2
      } = draggableNode;
      if (!activatorNode.current && !node2.current) {
        return;
      }
      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node2.current]) {
          if (!element) {
            continue;
          }
          const focusableNode = findFirstFocusableNode(element);
          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}
function applyModifiers(modifiers2, _ref2) {
  let {
    transform,
    ...args
  } = _ref2;
  return modifiers2 != null && modifiers2.length ? modifiers2.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform) : transform;
}
function useMeasuringConfiguration(config) {
  return reactExports.useMemo(
    () => ({
      draggable: {
        ...defaultMeasuringConfiguration.draggable,
        ...config == null ? void 0 : config.draggable
      },
      droppable: {
        ...defaultMeasuringConfiguration.droppable,
        ...config == null ? void 0 : config.droppable
      },
      dragOverlay: {
        ...defaultMeasuringConfiguration.dragOverlay,
        ...config == null ? void 0 : config.dragOverlay
      }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]
  );
}
function useLayoutShiftScrollCompensation(_ref2) {
  let {
    activeNode,
    measure,
    initialRect,
    config = true
  } = _ref2;
  const initialized = reactExports.useRef(false);
  const {
    x: x3,
    y: y4
  } = typeof config === "boolean" ? {
    x: config,
    y: config
  } : config;
  useIsomorphicLayoutEffect$2(() => {
    const disabled = !x3 && !y4;
    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }
    if (initialized.current || !initialRect) {
      return;
    }
    const node2 = activeNode == null ? void 0 : activeNode.node.current;
    if (!node2 || node2.isConnected === false) {
      return;
    }
    const rect = measure(node2);
    const rectDelta = getRectDelta(rect, initialRect);
    if (!x3) {
      rectDelta.x = 0;
    }
    if (!y4) {
      rectDelta.y = 0;
    }
    initialized.current = true;
    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node2);
      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x3, y4, initialRect, measure]);
}
const ActiveDraggableContext = /* @__PURE__ */ reactExports.createContext({
  ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;
(function(Status2) {
  Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
  Status2[Status2["Initializing"] = 1] = "Initializing";
  Status2[Status2["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));
const DndContext = /* @__PURE__ */ reactExports.memo(function DndContext2(_ref2) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
  let {
    id,
    accessibility,
    autoScroll = true,
    children,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers: modifiers2,
    ...props
  } = _ref2;
  const store = reactExports.useReducer(reducer, void 0, getInitialState);
  const [state, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = reactExports.useState(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state;
  const node2 = activeId ? draggableNodes.get(activeId) : null;
  const activeRects = reactExports.useRef({
    initial: null,
    translated: null
  });
  const active = reactExports.useMemo(() => {
    var _node$data;
    return activeId != null ? {
      id: activeId,
      // It's possible for the active node to unmount while dragging
      data: (_node$data = node2 == null ? void 0 : node2.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node2]);
  const activeRef = reactExports.useRef(null);
  const [activeSensor, setActiveSensor] = reactExports.useState(null);
  const [activatorEvent, setActivatorEvent] = reactExports.useState(null);
  const latestProps = useLatestValue(props, Object.values(props));
  const draggableDescribedById = useUniqueId("DndDescribedBy", id);
  const enabledDroppableContainers = reactExports.useMemo(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = reactExports.useMemo(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
  const sensorContext = reactExports.useRef({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  });
  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
  const windowRect2 = useWindowRect(draggingNode ? getWindow$2(draggingNode) : null);
  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors);
  const modifiedTranslate = applyModifiers(modifiers2, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect: windowRect2
  });
  const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors);
  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, "id");
  const [over, setOver] = reactExports.useState(null);
  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add(modifiedTranslate, activeNodeScrollDelta);
  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
  const instantiateSensor = reactExports.useCallback(
    (event, _ref22) => {
      let {
        sensor: Sensor,
        options
      } = _ref22;
      if (activeRef.current == null) {
        return;
      }
      const activeNode2 = draggableNodes.get(activeRef.current);
      if (!activeNode2) {
        return;
      }
      const activatorEvent2 = event.nativeEvent;
      const sensorInstance = new Sensor({
        active: activeRef.current,
        activeNode: activeNode2,
        event: activatorEvent2,
        options,
        // Sensors need to be instantiated with refs for arguments that change over time
        // otherwise they are frozen in time with the stale arguments
        context: sensorContext,
        onStart(initialCoordinates) {
          const id2 = activeRef.current;
          if (id2 == null) {
            return;
          }
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragStart
          } = latestProps.current;
          const event2 = {
            active: {
              id: id2,
              data: draggableNode.data,
              rect: activeRects
            }
          };
          reactDomExports.unstable_batchedUpdates(() => {
            onDragStart == null ? void 0 : onDragStart(event2);
            setStatus(Status.Initializing);
            dispatch({
              type: Action.DragStart,
              initialCoordinates,
              active: id2
            });
            dispatchMonitorEvent({
              type: "onDragStart",
              event: event2
            });
          });
        },
        onMove(coordinates) {
          dispatch({
            type: Action.DragMove,
            coordinates
          });
        },
        onEnd: createHandler(Action.DragEnd),
        onCancel: createHandler(Action.DragCancel)
      });
      reactDomExports.unstable_batchedUpdates(() => {
        setActiveSensor(sensorInstance);
        setActivatorEvent(event.nativeEvent);
      });
      function createHandler(type) {
        return async function handler() {
          const {
            active: active2,
            collisions: collisions2,
            over: over2,
            scrollAdjustedTranslate: scrollAdjustedTranslate2
          } = sensorContext.current;
          let event2 = null;
          if (active2 && scrollAdjustedTranslate2) {
            const {
              cancelDrop
            } = latestProps.current;
            event2 = {
              activatorEvent: activatorEvent2,
              active: active2,
              collisions: collisions2,
              delta: scrollAdjustedTranslate2,
              over: over2
            };
            if (type === Action.DragEnd && typeof cancelDrop === "function") {
              const shouldCancel = await Promise.resolve(cancelDrop(event2));
              if (shouldCancel) {
                type = Action.DragCancel;
              }
            }
          }
          activeRef.current = null;
          reactDomExports.unstable_batchedUpdates(() => {
            dispatch({
              type
            });
            setStatus(Status.Uninitialized);
            setOver(null);
            setActiveSensor(null);
            setActivatorEvent(null);
            const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
            if (event2) {
              const handler2 = latestProps.current[eventName];
              handler2 == null ? void 0 : handler2(event2);
              dispatchMonitorEvent({
                type: eventName,
                event: event2
              });
            }
          });
        };
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes]
  );
  const bindActivatorToSensorInstantiator = reactExports.useCallback((handler, sensor) => {
    return (event, active2) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active2);
      if (
        // Another sensor is already instantiating
        activeRef.current !== null || // No active draggable
        !activeDraggableNode || // Event has already been captured
        nativeEvent.dndKit || nativeEvent.defaultPrevented
      ) {
        return;
      }
      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);
      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active2;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  useIsomorphicLayoutEffect$2(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  reactExports.useEffect(
    () => {
      const {
        onDragMove
      } = latestProps.current;
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        over: over2
      } = sensorContext.current;
      if (!active2 || !activatorEvent2) {
        return;
      }
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate.x,
          y: scrollAdjustedTranslate.y
        },
        over: over2
      };
      reactDomExports.unstable_batchedUpdates(() => {
        onDragMove == null ? void 0 : onDragMove(event);
        dispatchMonitorEvent({
          type: "onDragMove",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
  );
  reactExports.useEffect(
    () => {
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        droppableContainers: droppableContainers2,
        scrollAdjustedTranslate: scrollAdjustedTranslate2
      } = sensorContext.current;
      if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
        return;
      }
      const {
        onDragOver
      } = latestProps.current;
      const overContainer = droppableContainers2.get(overId);
      const over2 = overContainer && overContainer.rect.current ? {
        id: overContainer.id,
        rect: overContainer.rect.current,
        data: overContainer.data,
        disabled: overContainer.disabled
      } : null;
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate2.x,
          y: scrollAdjustedTranslate2.y
        },
        over: over2
      };
      reactDomExports.unstable_batchedUpdates(() => {
        setOver(over2);
        onDragOver == null ? void 0 : onDragOver(event);
        dispatchMonitorEvent({
          type: "onDragOver",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [overId]
  );
  useIsomorphicLayoutEffect$2(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({
    ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = reactExports.useMemo(() => {
    const context = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect: windowRect2
    };
    return context;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect2]);
  const internalContext = reactExports.useMemo(() => {
    const context = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return /* @__PURE__ */ jsxs(DndMonitorContext.Provider, {
    value: registerMonitorListener,
    children: [/* @__PURE__ */ jsxs(InternalContext.Provider, {
      value: internalContext,
      children: [/* @__PURE__ */ jsx(PublicContext.Provider, {
        value: publicContext,
        children: /* @__PURE__ */ jsx(ActiveDraggableContext.Provider, {
          value: transform,
          children
        })
      }), /* @__PURE__ */ jsx(RestoreFocus, {
        disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
      })]
    }), /* @__PURE__ */ jsx(Accessibility, {
      ...accessibility,
      hiddenTextDescribedById: draggableDescribedById
    })]
  });
  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
    if (typeof autoScroll === "object") {
      return {
        ...autoScroll,
        enabled
      };
    }
    return {
      enabled
    };
  }
});
const NullContext = /* @__PURE__ */ reactExports.createContext(null);
const defaultRole = "button";
const ID_PREFIX$1 = "Droppable";
function useDraggable(_ref2) {
  let {
    id,
    data,
    disabled = false,
    attributes
  } = _ref2;
  const key = useUniqueId(ID_PREFIX$1);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = reactExports.useContext(InternalContext);
  const {
    role = defaultRole,
    roleDescription = "draggable",
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? void 0 : active.id) === id;
  const transform = reactExports.useContext(isDragging ? ActiveDraggableContext : NullContext);
  const [node2, setNodeRef] = useNodeRef();
  const [activatorNode, setActivatorNodeRef] = useNodeRef();
  const listeners = useSyntheticListeners(activators, id);
  const dataRef = useLatestValue(data);
  useIsomorphicLayoutEffect$2(
    () => {
      draggableNodes.set(id, {
        id,
        key,
        node: node2,
        activatorNode,
        data: dataRef
      });
      return () => {
        const node3 = draggableNodes.get(id);
        if (node3 && node3.key === key) {
          draggableNodes.delete(id);
        }
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes, id]
  );
  const memoizedAttributes = reactExports.useMemo(() => ({
    role,
    tabIndex,
    "aria-disabled": disabled,
    "aria-pressed": isDragging && role === defaultRole ? true : void 0,
    "aria-roledescription": roleDescription,
    "aria-describedby": ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? void 0 : listeners,
    node: node2,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform
  };
}
function useDndContext() {
  return reactExports.useContext(PublicContext);
}
const ID_PREFIX$1$1 = "Droppable";
const defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref2) {
  let {
    data,
    disabled = false,
    id,
    resizeObserverConfig
  } = _ref2;
  const key = useUniqueId(ID_PREFIX$1$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = reactExports.useContext(InternalContext);
  const previous = reactExports.useRef({
    disabled
  });
  const resizeObserverConnected = reactExports.useRef(false);
  const rect = reactExports.useRef(null);
  const callbackId = reactExports.useRef(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = {
    ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
  const handleResize = reactExports.useCallback(
    () => {
      if (!resizeObserverConnected.current) {
        resizeObserverConnected.current = true;
        return;
      }
      if (callbackId.current != null) {
        clearTimeout(callbackId.current);
      }
      callbackId.current = setTimeout(() => {
        measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
        callbackId.current = null;
      }, resizeObserverTimeout);
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [resizeObserverTimeout]
  );
  const resizeObserver = useResizeObserver({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = reactExports.useCallback((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }
    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }
    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
  const dataRef = useLatestValue(data);
  reactExports.useEffect(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }
    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  useIsomorphicLayoutEffect$2(
    () => {
      dispatch({
        type: Action.RegisterDroppable,
        element: {
          id,
          key,
          disabled,
          node: nodeRef,
          rect,
          data: dataRef
        }
      });
      return () => dispatch({
        type: Action.UnregisterDroppable,
        key,
        id
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [id]
  );
  reactExports.useEffect(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id,
        key,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id, key, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? void 0 : over.id) === id,
    node: nodeRef,
    over,
    setNodeRef
  };
}
function restrictToBoundingRect(transform, rect, boundingRect) {
  const value = {
    ...transform
  };
  if (rect.top + transform.y <= boundingRect.top) {
    value.y = boundingRect.top - rect.top;
  } else if (rect.bottom + transform.y >= boundingRect.top + boundingRect.height) {
    value.y = boundingRect.top + boundingRect.height - rect.bottom;
  }
  if (rect.left + transform.x <= boundingRect.left) {
    value.x = boundingRect.left - rect.left;
  } else if (rect.right + transform.x >= boundingRect.left + boundingRect.width) {
    value.x = boundingRect.left + boundingRect.width - rect.right;
  }
  return value;
}
const restrictToParentElement = (_ref2) => {
  let {
    containerNodeRect,
    draggingNodeRect,
    transform
  } = _ref2;
  if (!draggingNodeRect || !containerNodeRect) {
    return transform;
  }
  return restrictToBoundingRect(transform, draggingNodeRect, containerNodeRect);
};
const restrictToVerticalAxis = (_ref2) => {
  let {
    transform
  } = _ref2;
  return {
    ...transform,
    x: 0
  };
};
function arrayMove(array, from3, to) {
  const newArray = array.slice();
  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from3, 1)[0]);
  return newArray;
}
function getSortedRects(items, rects) {
  return items.reduce((accumulator, id, index2) => {
    const rect = rects.get(id);
    if (rect) {
      accumulator[index2] = rect;
    }
    return accumulator;
  }, Array(items.length));
}
function isValidIndex(index2) {
  return index2 !== null && index2 >= 0;
}
const rectSortingStrategy = ({
  rects,
  activeIndex,
  overIndex,
  index: index2
}) => {
  const newRects = arrayMove(rects, overIndex, activeIndex);
  const oldRect = rects[index2];
  const newRect = newRects[index2];
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
const defaultScale$1 = {
  scaleX: 1,
  scaleY: 1
};
const verticalListSortingStrategy = ({
  activeIndex,
  activeNodeRect: fallbackActiveRect,
  index: index2,
  rects,
  overIndex
}) => {
  var _rects$activeIndex;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  if (index2 === activeIndex) {
    const overIndexRect = rects[overIndex];
    if (!overIndexRect) {
      return null;
    }
    return {
      x: 0,
      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,
      ...defaultScale$1
    };
  }
  const itemGap = getItemGap$1(rects, index2, activeIndex);
  if (index2 > activeIndex && index2 <= overIndex) {
    return {
      x: 0,
      y: -activeNodeRect.height - itemGap,
      ...defaultScale$1
    };
  }
  if (index2 < activeIndex && index2 >= overIndex) {
    return {
      x: 0,
      y: activeNodeRect.height + itemGap,
      ...defaultScale$1
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale$1
  };
};
function getItemGap$1(clientRects, index2, activeIndex) {
  const currentRect = clientRects[index2];
  const previousRect = clientRects[index2 - 1];
  const nextRect = clientRects[index2 + 1];
  if (!currentRect) {
    return 0;
  }
  if (activeIndex < index2) {
    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
  }
  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
}
const ID_PREFIX = "Sortable";
const Context = /* @__PURE__ */ e$1.createContext({
  activeIndex: -1,
  containerId: ID_PREFIX,
  disableTransforms: false,
  items: [],
  overIndex: -1,
  useDragOverlay: false,
  sortedRects: [],
  strategy: rectSortingStrategy
});
function SortableContext({
  children,
  id,
  items: userDefinedItems,
  strategy = rectSortingStrategy
}) {
  const {
    active,
    dragOverlay,
    droppableRects,
    over,
    measureDroppableContainers,
    measuringScheduled
  } = useDndContext();
  const containerId = useUniqueId(ID_PREFIX, id);
  const useDragOverlay = Boolean(dragOverlay.rect !== null);
  const items = reactExports.useMemo(() => userDefinedItems.map((item) => typeof item === "string" ? item : item.id), [userDefinedItems]);
  const isDragging = active != null;
  const activeIndex = active ? items.indexOf(active.id) : -1;
  const overIndex = over ? items.indexOf(over.id) : -1;
  const previousItemsRef = reactExports.useRef(items);
  const itemsHaveChanged = !isEqual$2(items, previousItemsRef.current);
  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
  useIsomorphicLayoutEffect$2(() => {
    if (itemsHaveChanged && isDragging && !measuringScheduled) {
      measureDroppableContainers(items);
    }
  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers, measuringScheduled]);
  reactExports.useEffect(() => {
    previousItemsRef.current = items;
  }, [items]);
  const contextValue = reactExports.useMemo(() => ({
    activeIndex,
    containerId,
    disableTransforms,
    items,
    overIndex,
    useDragOverlay,
    sortedRects: getSortedRects(items, droppableRects),
    strategy
  }), [activeIndex, containerId, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]);
  return /* @__PURE__ */ jsx(Context.Provider, {
    value: contextValue,
    children
  });
}
function isEqual$2(arr1, arr2) {
  return arr1.join() === arr2.join();
}
const defaultNewIndexGetter = ({
  id,
  items,
  activeIndex,
  overIndex
}) => arrayMove(items, activeIndex, overIndex).indexOf(id);
const defaultAnimateLayoutChanges = ({
  containerId,
  isSorting,
  wasDragging,
  index: index2,
  items,
  newIndex,
  previousItems,
  previousContainerId,
  transition
}) => {
  if (!transition || !wasDragging) {
    return false;
  }
  if (previousItems !== items && index2 === newIndex) {
    return false;
  }
  if (isSorting) {
    return true;
  }
  return newIndex !== index2 && containerId === previousContainerId;
};
const defaultTransition = {
  duration: 200,
  easing: "ease"
};
const transitionProperty = "transform";
const disabledTransition = /* @__PURE__ */ CSS$1.Transition.toString({
  property: transitionProperty,
  duration: 0,
  easing: "linear"
});
const defaultAttributes = {
  roleDescription: "sortable"
};
function useDerivedTransform({
  disabled,
  index: index2,
  node: node2,
  rect
}) {
  const [derivedTransform, setDerivedtransform] = reactExports.useState(null);
  const previousIndex = reactExports.useRef(index2);
  useIsomorphicLayoutEffect$2(() => {
    if (!disabled && index2 !== previousIndex.current && node2.current) {
      const initial = rect.current;
      if (initial) {
        const current = getClientRect(node2.current, {
          ignoreTransform: true
        });
        const delta = {
          x: initial.left - current.left,
          y: initial.top - current.top,
          scaleX: initial.width / current.width,
          scaleY: initial.height / current.height
        };
        if (delta.x || delta.y) {
          setDerivedtransform(delta);
        }
      }
    }
    if (index2 !== previousIndex.current) {
      previousIndex.current = index2;
    }
  }, [disabled, index2, node2, rect]);
  reactExports.useEffect(() => {
    if (derivedTransform) {
      requestAnimationFrame(() => {
        setDerivedtransform(null);
      });
    }
  }, [derivedTransform]);
  return derivedTransform;
}
function useSortable({
  animateLayoutChanges = defaultAnimateLayoutChanges,
  attributes: userDefinedAttributes,
  disabled,
  data: customData,
  getNewIndex = defaultNewIndexGetter,
  id,
  strategy: localStrategy,
  resizeObserverConfig,
  transition = defaultTransition
}) {
  const {
    items,
    containerId,
    activeIndex,
    disableTransforms,
    sortedRects,
    overIndex,
    useDragOverlay,
    strategy: globalStrategy
  } = reactExports.useContext(Context);
  const index2 = items.indexOf(id);
  const data = reactExports.useMemo(() => ({
    sortable: {
      containerId,
      index: index2,
      items
    },
    ...customData
  }), [containerId, customData, index2, items]);
  const itemsAfterCurrentSortable = reactExports.useMemo(() => items.slice(items.indexOf(id)), [items, id]);
  const {
    rect,
    node: node2,
    isOver,
    setNodeRef: setDroppableNodeRef
  } = useDroppable({
    id,
    data,
    resizeObserverConfig: {
      updateMeasurementsFor: itemsAfterCurrentSortable,
      ...resizeObserverConfig
    }
  });
  const {
    active,
    activatorEvent,
    activeNodeRect,
    attributes,
    setNodeRef: setDraggableNodeRef,
    listeners,
    isDragging,
    over,
    transform
  } = useDraggable({
    id,
    data,
    attributes: {
      ...defaultAttributes,
      ...userDefinedAttributes
    },
    disabled
  });
  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
  const isSorting = Boolean(active);
  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
  const shouldDisplaceDragSource = !useDragOverlay && isDragging;
  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
  const strategy = localStrategy != null ? localStrategy : globalStrategy;
  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
    rects: sortedRects,
    activeNodeRect,
    activeIndex,
    overIndex,
    index: index2
  }) : null;
  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
    id,
    items,
    activeIndex,
    overIndex
  }) : index2;
  const activeId = active == null ? void 0 : active.id;
  const previous = reactExports.useRef({
    activeId,
    items,
    newIndex,
    containerId
  });
  const itemsHaveChanged = items !== previous.current.items;
  const shouldAnimateLayoutChanges = animateLayoutChanges({
    active,
    containerId,
    isDragging,
    isSorting,
    id,
    index: index2,
    items,
    newIndex: previous.current.newIndex,
    previousItems: previous.current.items,
    previousContainerId: previous.current.containerId,
    transition,
    wasDragging: previous.current.activeId != null
  });
  const derivedTransform = useDerivedTransform({
    disabled: !shouldAnimateLayoutChanges,
    index: index2,
    node: node2,
    rect
  });
  reactExports.useEffect(() => {
    if (isSorting && previous.current.newIndex !== newIndex) {
      previous.current.newIndex = newIndex;
    }
    if (containerId !== previous.current.containerId) {
      previous.current.containerId = containerId;
    }
    if (items !== previous.current.items) {
      previous.current.items = items;
    }
    if (activeId !== previous.current.activeId) {
      previous.current.activeId = activeId;
    }
  }, [activeId, isSorting, newIndex, containerId, items]);
  return {
    active,
    activeIndex,
    attributes,
    rect,
    index: index2,
    newIndex,
    items,
    isOver,
    isSorting,
    isDragging,
    listeners,
    node: node2,
    overIndex,
    over,
    setNodeRef,
    setDroppableNodeRef,
    setDraggableNodeRef,
    transform: derivedTransform != null ? derivedTransform : finalTransform,
    transition: getTransition()
  };
  function getTransition() {
    if (
      // Temporarily disable transitions for a single frame to set up derived transforms
      derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
      itemsHaveChanged && previous.current.newIndex === index2
    ) {
      return disabledTransition;
    }
    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
      return void 0;
    }
    if (isSorting || shouldAnimateLayoutChanges) {
      return CSS$1.Transition.toString({
        ...transition,
        property: transitionProperty
      });
    }
    return void 0;
  }
}
const directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];
const sortableKeyboardCoordinates = (event, {
  context: {
    active,
    droppableContainers,
    collisionRect,
    scrollableAncestors
  }
}) => {
  if (directions.includes(event.code)) {
    event.preventDefault();
    if (!active || !collisionRect) {
      return;
    }
    const filteredContainers = [];
    droppableContainers.getEnabled().forEach((entry) => {
      if (!entry || (entry == null ? void 0 : entry.disabled)) {
        return;
      }
      const rect = entry == null ? void 0 : entry.rect.current;
      if (!rect) {
        return;
      }
      switch (event.code) {
        case KeyboardCode.Down:
          if (collisionRect.top + collisionRect.height <= rect.top) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Up:
          if (collisionRect.top >= rect.top + rect.height) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Left:
          if (collisionRect.left >= rect.left + rect.width) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Right:
          if (collisionRect.left + collisionRect.width <= rect.left) {
            filteredContainers.push(entry);
          }
          break;
      }
    });
    const collisions = closestCorners({
      active,
      collisionRect,
      droppableContainers: filteredContainers,
      pointerCoordinates: null
    });
    const closestId = getFirstCollision(collisions, "id");
    if (closestId != null) {
      const newDroppable = droppableContainers.get(closestId);
      const newNode = newDroppable == null ? void 0 : newDroppable.node.current;
      const newRect = newDroppable == null ? void 0 : newDroppable.rect.current;
      if (newNode && newRect) {
        const newScrollAncestors = getScrollableAncestors(newNode);
        const hasDifferentScrollAncestors = newScrollAncestors.some((element, index2) => scrollableAncestors[index2] !== element);
        const offset2 = hasDifferentScrollAncestors ? {
          x: 0,
          y: 0
        } : {
          x: collisionRect.width - newRect.width,
          y: collisionRect.height - newRect.height
        };
        const newCoordinates = {
          x: newRect.left - offset2.x,
          y: newRect.top - offset2.y
        };
        return newCoordinates;
      }
    }
  }
  return void 0;
};
function _EMOTION_STRINGIFIED_CSS_ERROR__$H() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function Button$8({
  children,
  icon: IconElement,
  size: size2 = "default",
  secondary = false,
  outline = false,
  ...props
}) {
  return /* @__PURE__ */ jsxs(BaseButton$1, {
    css: [secondary && Secondary, size2 === "small" && Small, outline && Outline, process.env.NODE_ENV === "production" ? "" : ";label:Button;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQk0iLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9CdXR0b24udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbnR5cGUgQnV0dG9uUHJvcHMgPSBPbWl0PEpTWC5JbnRyaW5zaWNFbGVtZW50c1snYnV0dG9uJ10sICdpY29uJz4gJiB7XG4gIHNlY29uZGFyeT86IGJvb2xlYW5cbiAgb3V0bGluZT86IGJvb2xlYW5cbiAgaWNvbj86ICguLi5hcmdzOiBhbnkpID0+IEpTWC5FbGVtZW50XG4gIHNpemU/OiAnc21hbGwnIHwgJ2RlZmF1bHQnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCdXR0b24oe1xuICBjaGlsZHJlbixcbiAgaWNvbjogSWNvbkVsZW1lbnQsXG4gIHNpemUgPSAnZGVmYXVsdCcsXG4gIHNlY29uZGFyeSA9IGZhbHNlLFxuICBvdXRsaW5lID0gZmFsc2UsXG4gIC4uLnByb3BzXG59OiBCdXR0b25Qcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxCYXNlQnV0dG9uXG4gICAgICBjc3M9e1tcbiAgICAgICAgc2Vjb25kYXJ5ICYmIFNlY29uZGFyeSxcbiAgICAgICAgc2l6ZSA9PT0gJ3NtYWxsJyAmJiBTbWFsbCxcbiAgICAgICAgb3V0bGluZSAmJiBPdXRsaW5lLFxuICAgICAgXX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7SWNvbkVsZW1lbnQgJiYgPEljb25FbGVtZW50IHNpemU9ezIwfSAvPn1cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0Jhc2VCdXR0b24+XG4gIClcbn1cblxuY29uc3QgQmFzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b24oe1xuICBvdXRsaW5lOiAnbm9uZScsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGdhcDogJzAuNWVtJyxcbiAgZm9udFdlaWdodDogNzAwLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBjb2xvcjogJyNmZmYnLFxuICBhbGlnblNlbGY6ICdmbGV4LWVuZCcsXG4gIGZvbnRTaXplOiAnMC45cmVtJyxcbiAgaGVpZ2h0OiA0OCxcbiAgcGFkZGluZzogJzAgMWVtJyxcbiAgbGluZUhlaWdodDogJzEuMjVyZW0nLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgYm9yZGVyUmFkaXVzOiA0LFxuICB0cmFuc2l0aW9uOiAnYmFja2dyb3VuZC1jb2xvciAwLjNzJyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7IGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnktaG92ZXIpJyB9LFxufSlcblxuY29uc3QgU2Vjb25kYXJ5ID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IHsgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeS1saWdodCknIH0sXG59XG5cbmNvbnN0IFNtYWxsID0ge1xuICBoZWlnaHQ6IDQwLFxufVxuXG5jb25zdCBPdXRsaW5lID0ge1xuICBib3JkZXI6ICdzb2xpZCAxcHggdmFyKC0tdmUtcHJpbWFyeSknLFxuICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICBjb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7IGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJywgY29sb3I6ICcjRkZGJyB9LFxufVxuIl19 */"],
    ...props,
    children: [IconElement && /* @__PURE__ */ jsx(IconElement, {
      size: 20
    }), children]
  });
}
const BaseButton$1 = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "e8xqjil0"
} : {
  target: "e8xqjil0",
  label: "BaseButton"
})(process.env.NODE_ENV === "production" ? {
  name: "hpo54p",
  styles: "outline:none;display:flex;align-items:center;gap:0.5em;font-weight:700;background-color:var(--ve-primary);border:none;color:#fff;align-self:flex-end;font-size:0.9rem;height:48px;padding:0 1em;line-height:1.25rem;cursor:pointer;border-radius:4px;transition:background-color 0.3s;&:hover, &:focus{background-color:var(--ve-primary-hover);}"
} : {
  name: "hpo54p",
  styles: "outline:none;display:flex;align-items:center;gap:0.5em;font-weight:700;background-color:var(--ve-primary);border:none;color:#fff;align-self:flex-end;font-size:0.9rem;height:48px;padding:0 1em;line-height:1.25rem;cursor:pointer;border-radius:4px;transition:background-color 0.3s;&:hover, &:focus{background-color:var(--ve-primary-hover);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQ21CIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG50eXBlIEJ1dHRvblByb3BzID0gT21pdDxKU1guSW50cmluc2ljRWxlbWVudHNbJ2J1dHRvbiddLCAnaWNvbic+ICYge1xuICBzZWNvbmRhcnk/OiBib29sZWFuXG4gIG91dGxpbmU/OiBib29sZWFuXG4gIGljb24/OiAoLi4uYXJnczogYW55KSA9PiBKU1guRWxlbWVudFxuICBzaXplPzogJ3NtYWxsJyB8ICdkZWZhdWx0J1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uKHtcbiAgY2hpbGRyZW4sXG4gIGljb246IEljb25FbGVtZW50LFxuICBzaXplID0gJ2RlZmF1bHQnLFxuICBzZWNvbmRhcnkgPSBmYWxzZSxcbiAgb3V0bGluZSA9IGZhbHNlLFxuICAuLi5wcm9wc1xufTogQnV0dG9uUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QmFzZUJ1dHRvblxuICAgICAgY3NzPXtbXG4gICAgICAgIHNlY29uZGFyeSAmJiBTZWNvbmRhcnksXG4gICAgICAgIHNpemUgPT09ICdzbWFsbCcgJiYgU21hbGwsXG4gICAgICAgIG91dGxpbmUgJiYgT3V0bGluZSxcbiAgICAgIF19XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAge0ljb25FbGVtZW50ICYmIDxJY29uRWxlbWVudCBzaXplPXsyMH0gLz59XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9CYXNlQnV0dG9uPlxuICApXG59XG5cbmNvbnN0IEJhc2VCdXR0b24gPSBzdHlsZWQuYnV0dG9uKHtcbiAgb3V0bGluZTogJ25vbmUnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBnYXA6ICcwLjVlbScsXG4gIGZvbnRXZWlnaHQ6IDcwMCxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICBib3JkZXI6ICdub25lJyxcbiAgY29sb3I6ICcjZmZmJyxcbiAgYWxpZ25TZWxmOiAnZmxleC1lbmQnLFxuICBmb250U2l6ZTogJzAuOXJlbScsXG4gIGhlaWdodDogNDgsXG4gIHBhZGRpbmc6ICcwIDFlbScsXG4gIGxpbmVIZWlnaHQ6ICcxLjI1cmVtJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlclJhZGl1czogNCxcbiAgdHJhbnNpdGlvbjogJ2JhY2tncm91bmQtY29sb3IgMC4zcycsXG4gICcmOmhvdmVyLCAmOmZvY3VzJzogeyBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5LWhvdmVyKScgfSxcbn0pXG5cbmNvbnN0IFNlY29uZGFyeSA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBjb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7IGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnktbGlnaHQpJyB9LFxufVxuXG5jb25zdCBTbWFsbCA9IHtcbiAgaGVpZ2h0OiA0MCxcbn1cblxuY29uc3QgT3V0bGluZSA9IHtcbiAgYm9yZGVyOiAnc29saWQgMXB4IHZhcigtLXZlLXByaW1hcnkpJyxcbiAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgY29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICcmOmhvdmVyLCAmOmZvY3VzJzogeyBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsIGNvbG9yOiAnI0ZGRicgfSxcbn1cbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$H
});
const Secondary = {
  backgroundColor: "transparent",
  color: "var(--ve-primary)",
  "&:hover, &:focus": {
    backgroundColor: "var(--ve-primary-light)"
  }
};
const Small = {
  height: 40
};
const Outline = {
  border: "solid 1px var(--ve-primary)",
  background: "transparent",
  color: "var(--ve-primary)",
  "&:hover, &:focus": {
    backgroundColor: "var(--ve-primary)",
    color: "#FFF"
  }
};
function _EMOTION_STRINGIFIED_CSS_ERROR__$G() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Input$2 = /* @__PURE__ */ createStyled("input", process.env.NODE_ENV === "production" ? {
  target: "e39zq5j0"
} : {
  target: "e39zq5j0",
  label: "Input"
})(process.env.NODE_ENV === "production" ? {
  name: "164ykbl",
  styles: "color:var(--ve-color);background:transparent;padding:.5rem .75em;line-height:1.25rem;border-radius:.2rem;display:block;width:100%;border:1px solid var(--ve-field-border);box-shadow:var(--ve-field-shadow);&:focus{border-color:var(--ve-primary);outline:0;box-shadow:0 0 0 0.25rem rgb(23 113 230 / 25%);}"
} : {
  name: "164ykbl",
  styles: "color:var(--ve-color);background:transparent;padding:.5rem .75em;line-height:1.25rem;border-radius:.2rem;display:block;width:100%;border:1px solid var(--ve-field-border);box-shadow:var(--ve-field-shadow);&:focus{border-color:var(--ve-primary);outline:0;box-shadow:0 0 0 0.25rem rgb(23 113 230 / 25%);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVxQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL0lucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG5leHBvcnQgY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXQoe1xuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gIHBhZGRpbmc6ICcuNXJlbSAuNzVlbScsXG4gIGxpbmVIZWlnaHQ6ICcxLjI1cmVtJyxcbiAgYm9yZGVyUmFkaXVzOiAnLjJyZW0nLFxuICBkaXNwbGF5OiAnYmxvY2snLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAnJjpmb2N1cyc6IHtcbiAgICBib3JkZXJDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICBvdXRsaW5lOiAnMCcsXG4gICAgYm94U2hhZG93OiAnMCAwIDAgMC4yNXJlbSByZ2IoMjMgMTEzIDIzMCAvIDI1JSknLFxuICB9LFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$G
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$F() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const UnstyledButton = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "eroxger0"
} : {
  target: "eroxger0",
  label: "UnstyledButton"
})(process.env.NODE_ENV === "production" ? {
  name: "ctsem8",
  styles: "background-color:transparent;border:none;padding:0;margin:0;color:inherit"
} : {
  name: "ctsem8",
  styles: "background-color:transparent;border:none;padding:0;margin:0;color:inherit",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvVW5zdHlsZWRCdXR0b24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUs4QiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL1Vuc3R5bGVkQnV0dG9uLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG4vKipcbiAqIEJ1dHRvbiB3aXRob3V0IHRoZSBicm93c2VyIGRlZmF1bHQgc3R5bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBVbnN0eWxlZEJ1dHRvbiA9IHN0eWxlZC5idXR0b24oe1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBwYWRkaW5nOiAwLFxuICBtYXJnaW46IDAsXG4gIGNvbG9yOiAnaW5oZXJpdCcsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$F
});
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName$1(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
function getWindow$1(node2) {
  if (node2 == null) {
    return window;
  }
  if (node2.toString() !== "[object Window]") {
    var ownerDocument = node2.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node2;
}
function isElement$2(node2) {
  var OwnElement = getWindow$1(node2).Element;
  return node2 instanceof OwnElement || node2 instanceof Element;
}
function isHTMLElement$1(node2) {
  var OwnElement = getWindow$1(node2).HTMLElement;
  return node2 instanceof OwnElement || node2 instanceof HTMLElement;
}
function isShadowRoot$1(node2) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow$1(node2).ShadowRoot;
  return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
}
function applyStyles(_ref2) {
  var state = _ref2.state;
  Object.keys(state.elements).forEach(function(name) {
    var style2 = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement$1(element) || !getNodeName$1(element)) {
      return;
    }
    Object.assign(element.style, style2);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style2 = styleProperties.reduce(function(style3, property) {
        style3[property] = "";
        return style3;
      }, {});
      if (!isHTMLElement$1(element) || !getNodeName$1(element)) {
        return;
      }
      Object.assign(element.style, style2);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
const applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$2,
  requires: ["computeStyles"]
};
function getBasePlacement$1(placement) {
  return placement.split("-")[0];
}
var max$2 = Math.max;
var min$2 = Math.min;
var round$1 = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect$1(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect2 = element.getBoundingClientRect();
  var scaleX2 = 1;
  var scaleY2 = 1;
  if (includeScale && isHTMLElement$1(element)) {
    scaleX2 = element.offsetWidth > 0 ? round$1(clientRect2.width) / element.offsetWidth || 1 : 1;
    scaleY2 = element.offsetHeight > 0 ? round$1(clientRect2.height) / element.offsetHeight || 1 : 1;
  }
  var _ref2 = isElement$2(element) ? getWindow$1(element) : window, visualViewport = _ref2.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x3 = (clientRect2.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX2;
  var y4 = (clientRect2.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY2;
  var width = clientRect2.width / scaleX2;
  var height = clientRect2.height / scaleY2;
  return {
    width,
    height,
    top: y4,
    right: x3 + width,
    bottom: y4 + height,
    left: x3,
    x: x3,
    y: y4
  };
}
function getLayoutRect(element) {
  var clientRect2 = getBoundingClientRect$1(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect2.width - width) <= 1) {
    width = clientRect2.width;
  }
  if (Math.abs(clientRect2.height - height) <= 1) {
    height = clientRect2.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot$1(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}
function getComputedStyle$2(element) {
  return getWindow$1(element).getComputedStyle(element);
}
function isTableElement$1(element) {
  return ["table", "td", "th"].indexOf(getNodeName$1(element)) >= 0;
}
function getDocumentElement$1(element) {
  return ((isElement$2(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}
function getParentNode$1(element) {
  if (getNodeName$1(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot$1(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement$1(element)
  );
}
function getTrueOffsetParent$1(element) {
  if (!isHTMLElement$1(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle$2(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock$1(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement$1(element)) {
    var elementCss = getComputedStyle$2(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode$1(element);
  if (isShadowRoot$1(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement$1(currentNode) && ["html", "body"].indexOf(getNodeName$1(currentNode)) < 0) {
    var css2 = getComputedStyle$2(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent$1(element) {
  var window2 = getWindow$1(element);
  var offsetParent = getTrueOffsetParent$1(element);
  while (offsetParent && isTableElement$1(offsetParent) && getComputedStyle$2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent$1(offsetParent);
  }
  if (offsetParent && (getNodeName$1(offsetParent) === "html" || getNodeName$1(offsetParent) === "body" && getComputedStyle$2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock$1(element) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min2, value, max2) {
  return max$2(min2, min$2(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v2 = within(min2, value, max2);
  return v2 > max2 ? max2 : v2;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow$3(_ref2) {
  var _state$modifiersData$;
  var state = _ref2.state, name = _ref2.name, options = _ref2.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement$1(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent$1(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
const arrow$4 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow$3,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref2, win) {
  var x3 = _ref2.x, y4 = _ref2.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round$1(x3 * dpr) / dpr || 0,
    y: round$1(y4 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed2 = _ref2.isFixed;
  var _offsets$x = offsets.x, x3 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y4 = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x3,
    y: y4
  }) : {
    x: x3,
    y: y4
  };
  x3 = _ref3.x;
  y4 = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent$1(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow$1(popper2)) {
      offsetParent = getDocumentElement$1(popper2);
      if (getComputedStyle$2(offsetParent).position !== "static" && position2 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed2 && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y4 -= offsetY - popperRect.height;
      y4 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed2 && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x3 -= offsetX - popperRect.width;
      x3 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position2
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x3,
    y: y4
  }, getWindow$1(popper2)) : {
    x: x3,
    y: y4
  };
  x3 = _ref4.x;
  y4 = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x3 + "px, " + y4 + "px)" : "translate3d(" + x3 + "px, " + y4 + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y4 + "px" : "", _Object$assign2[sideX] = hasX ? x3 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement$1(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
const computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref2) {
  var state = _ref2.state, instance = _ref2.instance, options = _ref2.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow$1(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
const eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement$1(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node2) {
  var win = getWindow$1(node2);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX$1(element) {
  return getBoundingClientRect$1(getDocumentElement$1(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect$1(element, strategy) {
  var win = getWindow$1(element);
  var html = getDocumentElement$1(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x3 = 0;
  var y4 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y4 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3 + getWindowScrollBarX$1(element),
    y: y4
  };
}
function getDocumentRect$1(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement$1(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max$2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max$2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x3 = -winScroll.scrollLeft + getWindowScrollBarX$1(element);
  var y4 = -winScroll.scrollTop;
  if (getComputedStyle$2(body || html).direction === "rtl") {
    x3 += max$2(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle$2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node2) {
  if (["html", "body", "#document"].indexOf(getNodeName$1(node2)) >= 0) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement$1(node2) && isScrollParent(node2)) {
    return node2;
  }
  return getScrollParent(getParentNode$1(node2));
}
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow$1(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode$1(target)))
  );
}
function rectToClientRect$1(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect$1(element, strategy) {
  var rect = getBoundingClientRect$1(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect$1(getViewportRect$1(element, strategy)) : isElement$2(clippingParent) ? getInnerBoundingClientRect$1(clippingParent, strategy) : rectToClientRect$1(getDocumentRect$1(getDocumentElement$1(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode$1(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$2(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent$1(element) : element;
  if (!isElement$2(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement$2(clippingParent) && contains(clippingParent, clipperElement) && getNodeName$1(clippingParent) !== "body";
  });
}
function getClippingRect$1(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max$2(rect.top, accRect.top);
    accRect.right = min$2(rect.right, accRect.right);
    accRect.bottom = min$2(rect.bottom, accRect.bottom);
    accRect.left = max$2(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref2) {
  var reference2 = _ref2.reference, element = _ref2.element, placement = _ref2.placement;
  var basePlacement = placement ? getBasePlacement$1(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow$1(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect$1(isElement$2(element) ? element : element.contextElement || getDocumentElement$1(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect$1(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect$1(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply2 = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply2;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow$1(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement$1(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a4, b3) {
    return overflows[a4] - overflows[b3];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement$1(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement$1(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip$2(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement$1(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement$1(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement$1(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i2 = 0; i2 < placements2.length; i2++) {
    var placement = placements2[i2];
    var _basePlacement = getBasePlacement$1(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow$1(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement$1(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement$1(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
const flip$3 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip$2,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets$1(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped$1(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide$2(_ref2) {
  var state = _ref2.state, name = _ref2.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow$1(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow$1(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets$1(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets$1(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped$1(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped$1(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
const hide$3 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide$2
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement$1(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref2 = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref2[0], distance = _ref2[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset$1(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x3 = _data$state$placement.x, y4 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x3;
    state.modifiersData.popperOffsets.y += y4;
  }
  state.modifiersData[name] = data;
}
const offset$2 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset$1
};
function popperOffsets(_ref2) {
  var state = _ref2.state, name = _ref2.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
const popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow$1(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement$1(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent$1(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min$2(min2, tetherMin) : min2, offset2, tether ? max$2(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
const preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll$1(node2) {
  if (node2 === getWindow$1(node2) || !isHTMLElement$1(node2)) {
    return getWindowScroll(node2);
  } else {
    return getHTMLElementScroll(node2);
  }
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX2 = round$1(rect.width) / element.offsetWidth || 1;
  var scaleY2 = round$1(rect.height) / element.offsetHeight || 1;
  return scaleX2 !== 1 || scaleY2 !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed2) {
  if (isFixed2 === void 0) {
    isFixed2 = false;
  }
  var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
  var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement$1(offsetParent);
  var rect = getBoundingClientRect$1(elementOrVirtualElement, offsetParentIsScaled, isFixed2);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed2) {
    if (getNodeName$1(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll$1(offsetParent);
    }
    if (isHTMLElement$1(offsetParent)) {
      offsets = getBoundingClientRect$1(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX$1(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers2) {
  var map2 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers2.forEach(function(modifier) {
    map2.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map2.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers2.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers2) {
  var orderedModifiers = order(modifiers2);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce$2(fn3) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn3());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers2) {
  var merged = modifiers2.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions2;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions2, state.options, options2);
        state.scrollParents = {
          reference: isElement$2(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m4) {
          return m4.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent$1(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
          if (state.reset === true) {
            state.reset = false;
            index2 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index2], fn3 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn3 === "function") {
            state = fn3({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce$2(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref2) {
        var name = _ref2.name, _ref$options = _ref2.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect3 = _ref2.effect;
        if (typeof effect3 === "function") {
          var cleanupFn = effect3({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn3) {
        return fn3();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$2, flip$3, preventOverflow$1, arrow$4, hide$3];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});
var BOX_CLASS = "tippy-box";
var CONTENT_CLASS = "tippy-content";
var BACKDROP_CLASS = "tippy-backdrop";
var ARROW_CLASS = "tippy-arrow";
var SVG_ARROW_CLASS = "tippy-svg-arrow";
var TOUCH_OPTIONS = {
  passive: true,
  capture: true
};
var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO2() {
  return document.body;
};
function hasOwnProperty(obj, key) {
  return {}.hasOwnProperty.call(obj, key);
}
function getValueAtIndexOrReturn(value, index2, defaultValue2) {
  if (Array.isArray(value)) {
    var v2 = value[index2];
    return v2 == null ? Array.isArray(defaultValue2) ? defaultValue2[index2] : defaultValue2 : v2;
  }
  return value;
}
function isType(value, type) {
  var str = {}.toString.call(value);
  return str.indexOf("[object") === 0 && str.indexOf(type + "]") > -1;
}
function invokeWithArgsOrReturn(value, args) {
  return typeof value === "function" ? value.apply(void 0, args) : value;
}
function debounce$1(fn3, ms) {
  if (ms === 0) {
    return fn3;
  }
  var timeout;
  return function(arg) {
    clearTimeout(timeout);
    timeout = setTimeout(function() {
      fn3(arg);
    }, ms);
  };
}
function removeProperties(obj, keys2) {
  var clone = Object.assign({}, obj);
  keys2.forEach(function(key) {
    delete clone[key];
  });
  return clone;
}
function splitBySpaces(value) {
  return value.split(/\s+/).filter(Boolean);
}
function normalizeToArray(value) {
  return [].concat(value);
}
function pushIfUnique(arr, value) {
  if (arr.indexOf(value) === -1) {
    arr.push(value);
  }
}
function unique(arr) {
  return arr.filter(function(item, index2) {
    return arr.indexOf(item) === index2;
  });
}
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
function arrayFrom(value) {
  return [].slice.call(value);
}
function removeUndefinedProps(obj) {
  return Object.keys(obj).reduce(function(acc, key) {
    if (obj[key] !== void 0) {
      acc[key] = obj[key];
    }
    return acc;
  }, {});
}
function div() {
  return document.createElement("div");
}
function isElement$1(value) {
  return ["Element", "Fragment"].some(function(type) {
    return isType(value, type);
  });
}
function isNodeList(value) {
  return isType(value, "NodeList");
}
function isMouseEvent(value) {
  return isType(value, "MouseEvent");
}
function isReferenceElement(value) {
  return !!(value && value._tippy && value._tippy.reference === value);
}
function getArrayOfElements(value) {
  if (isElement$1(value)) {
    return [value];
  }
  if (isNodeList(value)) {
    return arrayFrom(value);
  }
  if (Array.isArray(value)) {
    return value;
  }
  return arrayFrom(document.querySelectorAll(value));
}
function setTransitionDuration(els, value) {
  els.forEach(function(el) {
    if (el) {
      el.style.transitionDuration = value + "ms";
    }
  });
}
function setVisibilityState(els, state) {
  els.forEach(function(el) {
    if (el) {
      el.setAttribute("data-state", state);
    }
  });
}
function getOwnerDocument(elementOrElements) {
  var _element$ownerDocumen;
  var _normalizeToArray = normalizeToArray(elementOrElements), element = _normalizeToArray[0];
  return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
}
function isCursorOutsideInteractiveBorder(popperTreeData, event) {
  var clientX = event.clientX, clientY = event.clientY;
  return popperTreeData.every(function(_ref2) {
    var popperRect = _ref2.popperRect, popperState = _ref2.popperState, props = _ref2.props;
    var interactiveBorder = props.interactiveBorder;
    var basePlacement = getBasePlacement(popperState.placement);
    var offsetData = popperState.modifiersData.offset;
    if (!offsetData) {
      return true;
    }
    var topDistance = basePlacement === "bottom" ? offsetData.top.y : 0;
    var bottomDistance = basePlacement === "top" ? offsetData.bottom.y : 0;
    var leftDistance = basePlacement === "right" ? offsetData.left.x : 0;
    var rightDistance = basePlacement === "left" ? offsetData.right.x : 0;
    var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
    var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
    var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
    var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
  });
}
function updateTransitionEndListener(box, action, listener) {
  var method = action + "EventListener";
  ["transitionend", "webkitTransitionEnd"].forEach(function(event) {
    box[method](event, listener);
  });
}
function actualContains(parent, child) {
  var target = child;
  while (target) {
    var _target$getRootNode;
    if (parent.contains(target)) {
      return true;
    }
    target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
  }
  return false;
}
var currentInput = {
  isTouch: false
};
var lastMouseMoveTime = 0;
function onDocumentTouchStart() {
  if (currentInput.isTouch) {
    return;
  }
  currentInput.isTouch = true;
  if (window.performance) {
    document.addEventListener("mousemove", onDocumentMouseMove);
  }
}
function onDocumentMouseMove() {
  var now = performance.now();
  if (now - lastMouseMoveTime < 20) {
    currentInput.isTouch = false;
    document.removeEventListener("mousemove", onDocumentMouseMove);
  }
  lastMouseMoveTime = now;
}
function onWindowBlur() {
  var activeElement = document.activeElement;
  if (isReferenceElement(activeElement)) {
    var instance = activeElement._tippy;
    if (activeElement.blur && !instance.state.isVisible) {
      activeElement.blur();
    }
  }
}
function bindGlobalEventListeners() {
  document.addEventListener("touchstart", onDocumentTouchStart, TOUCH_OPTIONS);
  window.addEventListener("blur", onWindowBlur);
}
var isBrowser$2 = typeof window !== "undefined" && typeof document !== "undefined";
var isIE11 = isBrowser$2 ? (
  // @ts-ignore
  !!window.msCrypto
) : false;
function createMemoryLeakWarning(method) {
  var txt = method === "destroy" ? "n already-" : " ";
  return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
}
function clean(value) {
  var spacesAndTabs = /[ \t]{2,}/g;
  var lineStartWithSpaces = /^[ \t]*/gm;
  return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
}
function getDevMessage(message) {
  return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  ");
}
function getFormattedMessage(message) {
  return [
    getDevMessage(message),
    // title
    "color: #00C584; font-size: 1.3em; font-weight: bold;",
    // message
    "line-height: 1.5",
    // footer
    "color: #a6a095;"
  ];
}
var visitedMessages;
if (process.env.NODE_ENV !== "production") {
  resetVisitedMessages();
}
function resetVisitedMessages() {
  visitedMessages = /* @__PURE__ */ new Set();
}
function warnWhen(condition, message) {
  if (condition && !visitedMessages.has(message)) {
    var _console;
    visitedMessages.add(message);
    (_console = console).warn.apply(_console, getFormattedMessage(message));
  }
}
function errorWhen(condition, message) {
  if (condition && !visitedMessages.has(message)) {
    var _console2;
    visitedMessages.add(message);
    (_console2 = console).error.apply(_console2, getFormattedMessage(message));
  }
}
function validateTargets(targets) {
  var didPassFalsyValue = !targets;
  var didPassPlainObject = Object.prototype.toString.call(targets) === "[object Object]" && !targets.addEventListener;
  errorWhen(didPassFalsyValue, ["tippy() was passed", "`" + String(targets) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" "));
  errorWhen(didPassPlainObject, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
}
var pluginProps = {
  animateFill: false,
  followCursor: false,
  inlinePositioning: false,
  sticky: false
};
var renderProps = {
  allowHTML: false,
  animation: "fade",
  arrow: true,
  content: "",
  inertia: false,
  maxWidth: 350,
  role: "tooltip",
  theme: "",
  zIndex: 9999
};
var defaultProps = Object.assign({
  appendTo: TIPPY_DEFAULT_APPEND_TO,
  aria: {
    content: "auto",
    expanded: "auto"
  },
  delay: 0,
  duration: [300, 250],
  getReferenceClientRect: null,
  hideOnClick: true,
  ignoreAttributes: false,
  interactive: false,
  interactiveBorder: 2,
  interactiveDebounce: 0,
  moveTransition: "",
  offset: [0, 10],
  onAfterUpdate: function onAfterUpdate() {
  },
  onBeforeUpdate: function onBeforeUpdate() {
  },
  onCreate: function onCreate() {
  },
  onDestroy: function onDestroy() {
  },
  onHidden: function onHidden() {
  },
  onHide: function onHide() {
  },
  onMount: function onMount() {
  },
  onShow: function onShow() {
  },
  onShown: function onShown() {
  },
  onTrigger: function onTrigger() {
  },
  onUntrigger: function onUntrigger() {
  },
  onClickOutside: function onClickOutside() {
  },
  placement: "top",
  plugins: [],
  popperOptions: {},
  render: null,
  showOnCreate: false,
  touch: true,
  trigger: "mouseenter focus",
  triggerTarget: null
}, pluginProps, renderProps);
var defaultKeys = Object.keys(defaultProps);
var setDefaultProps = function setDefaultProps2(partialProps) {
  if (process.env.NODE_ENV !== "production") {
    validateProps(partialProps, []);
  }
  var keys2 = Object.keys(partialProps);
  keys2.forEach(function(key) {
    defaultProps[key] = partialProps[key];
  });
};
function getExtendedPassedProps(passedProps) {
  var plugins = passedProps.plugins || [];
  var pluginProps2 = plugins.reduce(function(acc, plugin) {
    var name = plugin.name, defaultValue2 = plugin.defaultValue;
    if (name) {
      var _name;
      acc[name] = passedProps[name] !== void 0 ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue2;
    }
    return acc;
  }, {});
  return Object.assign({}, passedProps, pluginProps2);
}
function getDataAttributeProps(reference2, plugins) {
  var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
    plugins
  }))) : defaultKeys;
  var props = propKeys.reduce(function(acc, key) {
    var valueAsString = (reference2.getAttribute("data-tippy-" + key) || "").trim();
    if (!valueAsString) {
      return acc;
    }
    if (key === "content") {
      acc[key] = valueAsString;
    } else {
      try {
        acc[key] = JSON.parse(valueAsString);
      } catch (e3) {
        acc[key] = valueAsString;
      }
    }
    return acc;
  }, {});
  return props;
}
function evaluateProps(reference2, props) {
  var out = Object.assign({}, props, {
    content: invokeWithArgsOrReturn(props.content, [reference2])
  }, props.ignoreAttributes ? {} : getDataAttributeProps(reference2, props.plugins));
  out.aria = Object.assign({}, defaultProps.aria, out.aria);
  out.aria = {
    expanded: out.aria.expanded === "auto" ? props.interactive : out.aria.expanded,
    content: out.aria.content === "auto" ? props.interactive ? null : "describedby" : out.aria.content
  };
  return out;
}
function validateProps(partialProps, plugins) {
  if (partialProps === void 0) {
    partialProps = {};
  }
  if (plugins === void 0) {
    plugins = [];
  }
  var keys2 = Object.keys(partialProps);
  keys2.forEach(function(prop) {
    var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
    var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop);
    if (didPassUnknownProp) {
      didPassUnknownProp = plugins.filter(function(plugin) {
        return plugin.name === prop;
      }).length === 0;
    }
    warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", "\n\n", "All props: https://atomiks.github.io/tippyjs/v6/all-props/\n", "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
  });
}
var innerHTML = function innerHTML2() {
  return "innerHTML";
};
function dangerouslySetInnerHTML(element, html) {
  element[innerHTML()] = html;
}
function createArrowElement(value) {
  var arrow2 = div();
  if (value === true) {
    arrow2.className = ARROW_CLASS;
  } else {
    arrow2.className = SVG_ARROW_CLASS;
    if (isElement$1(value)) {
      arrow2.appendChild(value);
    } else {
      dangerouslySetInnerHTML(arrow2, value);
    }
  }
  return arrow2;
}
function setContent$1(content, props) {
  if (isElement$1(props.content)) {
    dangerouslySetInnerHTML(content, "");
    content.appendChild(props.content);
  } else if (typeof props.content !== "function") {
    if (props.allowHTML) {
      dangerouslySetInnerHTML(content, props.content);
    } else {
      content.textContent = props.content;
    }
  }
}
function getChildren(popper2) {
  var box = popper2.firstElementChild;
  var boxChildren = arrayFrom(box.children);
  return {
    box,
    content: boxChildren.find(function(node2) {
      return node2.classList.contains(CONTENT_CLASS);
    }),
    arrow: boxChildren.find(function(node2) {
      return node2.classList.contains(ARROW_CLASS) || node2.classList.contains(SVG_ARROW_CLASS);
    }),
    backdrop: boxChildren.find(function(node2) {
      return node2.classList.contains(BACKDROP_CLASS);
    })
  };
}
function render(instance) {
  var popper2 = div();
  var box = div();
  box.className = BOX_CLASS;
  box.setAttribute("data-state", "hidden");
  box.setAttribute("tabindex", "-1");
  var content = div();
  content.className = CONTENT_CLASS;
  content.setAttribute("data-state", "hidden");
  setContent$1(content, instance.props);
  popper2.appendChild(box);
  box.appendChild(content);
  onUpdate(instance.props, instance.props);
  function onUpdate(prevProps, nextProps) {
    var _getChildren = getChildren(popper2), box2 = _getChildren.box, content2 = _getChildren.content, arrow2 = _getChildren.arrow;
    if (nextProps.theme) {
      box2.setAttribute("data-theme", nextProps.theme);
    } else {
      box2.removeAttribute("data-theme");
    }
    if (typeof nextProps.animation === "string") {
      box2.setAttribute("data-animation", nextProps.animation);
    } else {
      box2.removeAttribute("data-animation");
    }
    if (nextProps.inertia) {
      box2.setAttribute("data-inertia", "");
    } else {
      box2.removeAttribute("data-inertia");
    }
    box2.style.maxWidth = typeof nextProps.maxWidth === "number" ? nextProps.maxWidth + "px" : nextProps.maxWidth;
    if (nextProps.role) {
      box2.setAttribute("role", nextProps.role);
    } else {
      box2.removeAttribute("role");
    }
    if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
      setContent$1(content2, instance.props);
    }
    if (nextProps.arrow) {
      if (!arrow2) {
        box2.appendChild(createArrowElement(nextProps.arrow));
      } else if (prevProps.arrow !== nextProps.arrow) {
        box2.removeChild(arrow2);
        box2.appendChild(createArrowElement(nextProps.arrow));
      }
    } else if (arrow2) {
      box2.removeChild(arrow2);
    }
  }
  return {
    popper: popper2,
    onUpdate
  };
}
render.$$tippy = true;
var idCounter$1 = 1;
var mouseMoveListeners = [];
var mountedInstances = [];
function createTippy(reference2, passedProps) {
  var props = evaluateProps(reference2, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps))));
  var showTimeout;
  var hideTimeout;
  var scheduleHideAnimationFrame;
  var isVisibleFromClick = false;
  var didHideDueToDocumentMouseDown = false;
  var didTouchMove = false;
  var ignoreOnFirstUpdate = false;
  var lastTriggerEvent;
  var currentTransitionEndListener;
  var onFirstUpdate;
  var listeners = [];
  var debouncedOnMouseMove = debounce$1(onMouseMove, props.interactiveDebounce);
  var currentTarget;
  var id = idCounter$1++;
  var popperInstance = null;
  var plugins = unique(props.plugins);
  var state = {
    // Is the instance currently enabled?
    isEnabled: true,
    // Is the tippy currently showing and not transitioning out?
    isVisible: false,
    // Has the instance been destroyed?
    isDestroyed: false,
    // Is the tippy currently mounted to the DOM?
    isMounted: false,
    // Has the tippy finished transitioning in?
    isShown: false
  };
  var instance = {
    // properties
    id,
    reference: reference2,
    popper: div(),
    popperInstance,
    props,
    state,
    plugins,
    // methods
    clearDelayTimeouts,
    setProps,
    setContent: setContent2,
    show,
    hide: hide2,
    hideWithInteractivity,
    enable,
    disable,
    unmount,
    destroy
  };
  if (!props.render) {
    if (process.env.NODE_ENV !== "production") {
      errorWhen(true, "render() function has not been supplied.");
    }
    return instance;
  }
  var _props$render = props.render(instance), popper2 = _props$render.popper, onUpdate = _props$render.onUpdate;
  popper2.setAttribute("data-tippy-root", "");
  popper2.id = "tippy-" + instance.id;
  instance.popper = popper2;
  reference2._tippy = instance;
  popper2._tippy = instance;
  var pluginsHooks = plugins.map(function(plugin) {
    return plugin.fn(instance);
  });
  var hasAriaExpanded = reference2.hasAttribute("aria-expanded");
  addListeners();
  handleAriaExpandedAttribute();
  handleStyles();
  invokeHook("onCreate", [instance]);
  if (props.showOnCreate) {
    scheduleShow();
  }
  popper2.addEventListener("mouseenter", function() {
    if (instance.props.interactive && instance.state.isVisible) {
      instance.clearDelayTimeouts();
    }
  });
  popper2.addEventListener("mouseleave", function() {
    if (instance.props.interactive && instance.props.trigger.indexOf("mouseenter") >= 0) {
      getDocument().addEventListener("mousemove", debouncedOnMouseMove);
    }
  });
  return instance;
  function getNormalizedTouchSettings() {
    var touch = instance.props.touch;
    return Array.isArray(touch) ? touch : [touch, 0];
  }
  function getIsCustomTouchBehavior() {
    return getNormalizedTouchSettings()[0] === "hold";
  }
  function getIsDefaultRenderFn() {
    var _instance$props$rende;
    return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
  }
  function getCurrentTarget() {
    return currentTarget || reference2;
  }
  function getDocument() {
    var parent = getCurrentTarget().parentNode;
    return parent ? getOwnerDocument(parent) : document;
  }
  function getDefaultTemplateChildren() {
    return getChildren(popper2);
  }
  function getDelay(isShow) {
    if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === "focus") {
      return 0;
    }
    return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
  }
  function handleStyles(fromHide) {
    if (fromHide === void 0) {
      fromHide = false;
    }
    popper2.style.pointerEvents = instance.props.interactive && !fromHide ? "" : "none";
    popper2.style.zIndex = "" + instance.props.zIndex;
  }
  function invokeHook(hook, args, shouldInvokePropsHook) {
    if (shouldInvokePropsHook === void 0) {
      shouldInvokePropsHook = true;
    }
    pluginsHooks.forEach(function(pluginHooks) {
      if (pluginHooks[hook]) {
        pluginHooks[hook].apply(pluginHooks, args);
      }
    });
    if (shouldInvokePropsHook) {
      var _instance$props;
      (_instance$props = instance.props)[hook].apply(_instance$props, args);
    }
  }
  function handleAriaContentAttribute() {
    var aria = instance.props.aria;
    if (!aria.content) {
      return;
    }
    var attr = "aria-" + aria.content;
    var id2 = popper2.id;
    var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
    nodes.forEach(function(node2) {
      var currentValue = node2.getAttribute(attr);
      if (instance.state.isVisible) {
        node2.setAttribute(attr, currentValue ? currentValue + " " + id2 : id2);
      } else {
        var nextValue = currentValue && currentValue.replace(id2, "").trim();
        if (nextValue) {
          node2.setAttribute(attr, nextValue);
        } else {
          node2.removeAttribute(attr);
        }
      }
    });
  }
  function handleAriaExpandedAttribute() {
    if (hasAriaExpanded || !instance.props.aria.expanded) {
      return;
    }
    var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
    nodes.forEach(function(node2) {
      if (instance.props.interactive) {
        node2.setAttribute("aria-expanded", instance.state.isVisible && node2 === getCurrentTarget() ? "true" : "false");
      } else {
        node2.removeAttribute("aria-expanded");
      }
    });
  }
  function cleanupInteractiveMouseListeners() {
    getDocument().removeEventListener("mousemove", debouncedOnMouseMove);
    mouseMoveListeners = mouseMoveListeners.filter(function(listener) {
      return listener !== debouncedOnMouseMove;
    });
  }
  function onDocumentPress(event) {
    if (currentInput.isTouch) {
      if (didTouchMove || event.type === "mousedown") {
        return;
      }
    }
    var actualTarget = event.composedPath && event.composedPath()[0] || event.target;
    if (instance.props.interactive && actualContains(popper2, actualTarget)) {
      return;
    }
    if (normalizeToArray(instance.props.triggerTarget || reference2).some(function(el) {
      return actualContains(el, actualTarget);
    })) {
      if (currentInput.isTouch) {
        return;
      }
      if (instance.state.isVisible && instance.props.trigger.indexOf("click") >= 0) {
        return;
      }
    } else {
      invokeHook("onClickOutside", [instance, event]);
    }
    if (instance.props.hideOnClick === true) {
      instance.clearDelayTimeouts();
      instance.hide();
      didHideDueToDocumentMouseDown = true;
      setTimeout(function() {
        didHideDueToDocumentMouseDown = false;
      });
      if (!instance.state.isMounted) {
        removeDocumentPress();
      }
    }
  }
  function onTouchMove() {
    didTouchMove = true;
  }
  function onTouchStart() {
    didTouchMove = false;
  }
  function addDocumentPress() {
    var doc2 = getDocument();
    doc2.addEventListener("mousedown", onDocumentPress, true);
    doc2.addEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
    doc2.addEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
    doc2.addEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
  }
  function removeDocumentPress() {
    var doc2 = getDocument();
    doc2.removeEventListener("mousedown", onDocumentPress, true);
    doc2.removeEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
    doc2.removeEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
    doc2.removeEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
  }
  function onTransitionedOut(duration, callback) {
    onTransitionEnd(duration, function() {
      if (!instance.state.isVisible && popper2.parentNode && popper2.parentNode.contains(popper2)) {
        callback();
      }
    });
  }
  function onTransitionedIn(duration, callback) {
    onTransitionEnd(duration, callback);
  }
  function onTransitionEnd(duration, callback) {
    var box = getDefaultTemplateChildren().box;
    function listener(event) {
      if (event.target === box) {
        updateTransitionEndListener(box, "remove", listener);
        callback();
      }
    }
    if (duration === 0) {
      return callback();
    }
    updateTransitionEndListener(box, "remove", currentTransitionEndListener);
    updateTransitionEndListener(box, "add", listener);
    currentTransitionEndListener = listener;
  }
  function on2(eventType, handler, options) {
    if (options === void 0) {
      options = false;
    }
    var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
    nodes.forEach(function(node2) {
      node2.addEventListener(eventType, handler, options);
      listeners.push({
        node: node2,
        eventType,
        handler,
        options
      });
    });
  }
  function addListeners() {
    if (getIsCustomTouchBehavior()) {
      on2("touchstart", onTrigger2, {
        passive: true
      });
      on2("touchend", onMouseLeave, {
        passive: true
      });
    }
    splitBySpaces(instance.props.trigger).forEach(function(eventType) {
      if (eventType === "manual") {
        return;
      }
      on2(eventType, onTrigger2);
      switch (eventType) {
        case "mouseenter":
          on2("mouseleave", onMouseLeave);
          break;
        case "focus":
          on2(isIE11 ? "focusout" : "blur", onBlurOrFocusOut);
          break;
        case "focusin":
          on2("focusout", onBlurOrFocusOut);
          break;
      }
    });
  }
  function removeListeners() {
    listeners.forEach(function(_ref2) {
      var node2 = _ref2.node, eventType = _ref2.eventType, handler = _ref2.handler, options = _ref2.options;
      node2.removeEventListener(eventType, handler, options);
    });
    listeners = [];
  }
  function onTrigger2(event) {
    var _lastTriggerEvent;
    var shouldScheduleClickHide = false;
    if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
      return;
    }
    var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === "focus";
    lastTriggerEvent = event;
    currentTarget = event.currentTarget;
    handleAriaExpandedAttribute();
    if (!instance.state.isVisible && isMouseEvent(event)) {
      mouseMoveListeners.forEach(function(listener) {
        return listener(event);
      });
    }
    if (event.type === "click" && (instance.props.trigger.indexOf("mouseenter") < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
      shouldScheduleClickHide = true;
    } else {
      scheduleShow(event);
    }
    if (event.type === "click") {
      isVisibleFromClick = !shouldScheduleClickHide;
    }
    if (shouldScheduleClickHide && !wasFocused) {
      scheduleHide(event);
    }
  }
  function onMouseMove(event) {
    var target = event.target;
    var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper2.contains(target);
    if (event.type === "mousemove" && isCursorOverReferenceOrPopper) {
      return;
    }
    var popperTreeData = getNestedPopperTree().concat(popper2).map(function(popper3) {
      var _instance$popperInsta;
      var instance2 = popper3._tippy;
      var state2 = (_instance$popperInsta = instance2.popperInstance) == null ? void 0 : _instance$popperInsta.state;
      if (state2) {
        return {
          popperRect: popper3.getBoundingClientRect(),
          popperState: state2,
          props
        };
      }
      return null;
    }).filter(Boolean);
    if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
      cleanupInteractiveMouseListeners();
      scheduleHide(event);
    }
  }
  function onMouseLeave(event) {
    var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf("click") >= 0 && isVisibleFromClick;
    if (shouldBail) {
      return;
    }
    if (instance.props.interactive) {
      instance.hideWithInteractivity(event);
      return;
    }
    scheduleHide(event);
  }
  function onBlurOrFocusOut(event) {
    if (instance.props.trigger.indexOf("focusin") < 0 && event.target !== getCurrentTarget()) {
      return;
    }
    if (instance.props.interactive && event.relatedTarget && popper2.contains(event.relatedTarget)) {
      return;
    }
    scheduleHide(event);
  }
  function isEventListenerStopped(event) {
    return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf("touch") >= 0 : false;
  }
  function createPopperInstance() {
    destroyPopperInstance();
    var _instance$props2 = instance.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset2 = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;
    var arrow2 = getIsDefaultRenderFn() ? getChildren(popper2).arrow : null;
    var computedReference = getReferenceClientRect ? {
      getBoundingClientRect: getReferenceClientRect,
      contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
    } : reference2;
    var tippyModifier = {
      name: "$$tippy",
      enabled: true,
      phase: "beforeWrite",
      requires: ["computeStyles"],
      fn: function fn3(_ref2) {
        var state2 = _ref2.state;
        if (getIsDefaultRenderFn()) {
          var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;
          ["placement", "reference-hidden", "escaped"].forEach(function(attr) {
            if (attr === "placement") {
              box.setAttribute("data-placement", state2.placement);
            } else {
              if (state2.attributes.popper["data-popper-" + attr]) {
                box.setAttribute("data-" + attr, "");
              } else {
                box.removeAttribute("data-" + attr);
              }
            }
          });
          state2.attributes.popper = {};
        }
      }
    };
    var modifiers2 = [{
      name: "offset",
      options: {
        offset: offset2
      }
    }, {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    }, {
      name: "flip",
      options: {
        padding: 5
      }
    }, {
      name: "computeStyles",
      options: {
        adaptive: !moveTransition
      }
    }, tippyModifier];
    if (getIsDefaultRenderFn() && arrow2) {
      modifiers2.push({
        name: "arrow",
        options: {
          element: arrow2,
          padding: 3
        }
      });
    }
    modifiers2.push.apply(modifiers2, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
    instance.popperInstance = createPopper(computedReference, popper2, Object.assign({}, popperOptions, {
      placement,
      onFirstUpdate,
      modifiers: modifiers2
    }));
  }
  function destroyPopperInstance() {
    if (instance.popperInstance) {
      instance.popperInstance.destroy();
      instance.popperInstance = null;
    }
  }
  function mount() {
    var appendTo = instance.props.appendTo;
    var parentNode2;
    var node2 = getCurrentTarget();
    if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === "parent") {
      parentNode2 = node2.parentNode;
    } else {
      parentNode2 = invokeWithArgsOrReturn(appendTo, [node2]);
    }
    if (!parentNode2.contains(popper2)) {
      parentNode2.appendChild(popper2);
    }
    instance.state.isMounted = true;
    createPopperInstance();
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node2.nextElementSibling !== popper2, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", "\n\n", "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", "\n\n", "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", "\n\n", "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
    }
  }
  function getNestedPopperTree() {
    return arrayFrom(popper2.querySelectorAll("[data-tippy-root]"));
  }
  function scheduleShow(event) {
    instance.clearDelayTimeouts();
    if (event) {
      invokeHook("onTrigger", [instance, event]);
    }
    addDocumentPress();
    var delay = getDelay(true);
    var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];
    if (currentInput.isTouch && touchValue === "hold" && touchDelay) {
      delay = touchDelay;
    }
    if (delay) {
      showTimeout = setTimeout(function() {
        instance.show();
      }, delay);
    } else {
      instance.show();
    }
  }
  function scheduleHide(event) {
    instance.clearDelayTimeouts();
    invokeHook("onUntrigger", [instance, event]);
    if (!instance.state.isVisible) {
      removeDocumentPress();
      return;
    }
    if (instance.props.trigger.indexOf("mouseenter") >= 0 && instance.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(event.type) >= 0 && isVisibleFromClick) {
      return;
    }
    var delay = getDelay(false);
    if (delay) {
      hideTimeout = setTimeout(function() {
        if (instance.state.isVisible) {
          instance.hide();
        }
      }, delay);
    } else {
      scheduleHideAnimationFrame = requestAnimationFrame(function() {
        instance.hide();
      });
    }
  }
  function enable() {
    instance.state.isEnabled = true;
  }
  function disable() {
    instance.hide();
    instance.state.isEnabled = false;
  }
  function clearDelayTimeouts() {
    clearTimeout(showTimeout);
    clearTimeout(hideTimeout);
    cancelAnimationFrame(scheduleHideAnimationFrame);
  }
  function setProps(partialProps) {
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("setProps"));
    }
    if (instance.state.isDestroyed) {
      return;
    }
    invokeHook("onBeforeUpdate", [instance, partialProps]);
    removeListeners();
    var prevProps = instance.props;
    var nextProps = evaluateProps(reference2, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
      ignoreAttributes: true
    }));
    instance.props = nextProps;
    addListeners();
    if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
      cleanupInteractiveMouseListeners();
      debouncedOnMouseMove = debounce$1(onMouseMove, nextProps.interactiveDebounce);
    }
    if (prevProps.triggerTarget && !nextProps.triggerTarget) {
      normalizeToArray(prevProps.triggerTarget).forEach(function(node2) {
        node2.removeAttribute("aria-expanded");
      });
    } else if (nextProps.triggerTarget) {
      reference2.removeAttribute("aria-expanded");
    }
    handleAriaExpandedAttribute();
    handleStyles();
    if (onUpdate) {
      onUpdate(prevProps, nextProps);
    }
    if (instance.popperInstance) {
      createPopperInstance();
      getNestedPopperTree().forEach(function(nestedPopper) {
        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
      });
    }
    invokeHook("onAfterUpdate", [instance, partialProps]);
  }
  function setContent2(content) {
    instance.setProps({
      content
    });
  }
  function show() {
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("show"));
    }
    var isAlreadyVisible = instance.state.isVisible;
    var isDestroyed = instance.state.isDestroyed;
    var isDisabled = !instance.state.isEnabled;
    var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
    var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);
    if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
      return;
    }
    if (getCurrentTarget().hasAttribute("disabled")) {
      return;
    }
    invokeHook("onShow", [instance], false);
    if (instance.props.onShow(instance) === false) {
      return;
    }
    instance.state.isVisible = true;
    if (getIsDefaultRenderFn()) {
      popper2.style.visibility = "visible";
    }
    handleStyles();
    addDocumentPress();
    if (!instance.state.isMounted) {
      popper2.style.transition = "none";
    }
    if (getIsDefaultRenderFn()) {
      var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content = _getDefaultTemplateCh2.content;
      setTransitionDuration([box, content], 0);
    }
    onFirstUpdate = function onFirstUpdate2() {
      var _instance$popperInsta2;
      if (!instance.state.isVisible || ignoreOnFirstUpdate) {
        return;
      }
      ignoreOnFirstUpdate = true;
      void popper2.offsetHeight;
      popper2.style.transition = instance.props.moveTransition;
      if (getIsDefaultRenderFn() && instance.props.animation) {
        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;
        setTransitionDuration([_box, _content], duration);
        setVisibilityState([_box, _content], "visible");
      }
      handleAriaContentAttribute();
      handleAriaExpandedAttribute();
      pushIfUnique(mountedInstances, instance);
      (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
      invokeHook("onMount", [instance]);
      if (instance.props.animation && getIsDefaultRenderFn()) {
        onTransitionedIn(duration, function() {
          instance.state.isShown = true;
          invokeHook("onShown", [instance]);
        });
      }
    };
    mount();
  }
  function hide2() {
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hide"));
    }
    var isAlreadyHidden = !instance.state.isVisible;
    var isDestroyed = instance.state.isDestroyed;
    var isDisabled = !instance.state.isEnabled;
    var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);
    if (isAlreadyHidden || isDestroyed || isDisabled) {
      return;
    }
    invokeHook("onHide", [instance], false);
    if (instance.props.onHide(instance) === false) {
      return;
    }
    instance.state.isVisible = false;
    instance.state.isShown = false;
    ignoreOnFirstUpdate = false;
    isVisibleFromClick = false;
    if (getIsDefaultRenderFn()) {
      popper2.style.visibility = "hidden";
    }
    cleanupInteractiveMouseListeners();
    removeDocumentPress();
    handleStyles(true);
    if (getIsDefaultRenderFn()) {
      var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content = _getDefaultTemplateCh4.content;
      if (instance.props.animation) {
        setTransitionDuration([box, content], duration);
        setVisibilityState([box, content], "hidden");
      }
    }
    handleAriaContentAttribute();
    handleAriaExpandedAttribute();
    if (instance.props.animation) {
      if (getIsDefaultRenderFn()) {
        onTransitionedOut(duration, instance.unmount);
      }
    } else {
      instance.unmount();
    }
  }
  function hideWithInteractivity(event) {
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hideWithInteractivity"));
    }
    getDocument().addEventListener("mousemove", debouncedOnMouseMove);
    pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
    debouncedOnMouseMove(event);
  }
  function unmount() {
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("unmount"));
    }
    if (instance.state.isVisible) {
      instance.hide();
    }
    if (!instance.state.isMounted) {
      return;
    }
    destroyPopperInstance();
    getNestedPopperTree().forEach(function(nestedPopper) {
      nestedPopper._tippy.unmount();
    });
    if (popper2.parentNode) {
      popper2.parentNode.removeChild(popper2);
    }
    mountedInstances = mountedInstances.filter(function(i2) {
      return i2 !== instance;
    });
    instance.state.isMounted = false;
    invokeHook("onHidden", [instance]);
  }
  function destroy() {
    if (process.env.NODE_ENV !== "production") {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("destroy"));
    }
    if (instance.state.isDestroyed) {
      return;
    }
    instance.clearDelayTimeouts();
    instance.unmount();
    removeListeners();
    delete reference2._tippy;
    instance.state.isDestroyed = true;
    invokeHook("onDestroy", [instance]);
  }
}
function tippy(targets, optionalProps) {
  if (optionalProps === void 0) {
    optionalProps = {};
  }
  var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
  if (process.env.NODE_ENV !== "production") {
    validateTargets(targets);
    validateProps(optionalProps, plugins);
  }
  bindGlobalEventListeners();
  var passedProps = Object.assign({}, optionalProps, {
    plugins
  });
  var elements = getArrayOfElements(targets);
  if (process.env.NODE_ENV !== "production") {
    var isSingleContentElement = isElement$1(passedProps.content);
    var isMoreThanOneReferenceElement = elements.length > 1;
    warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", "\n\n", "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", "\n\n", "1) content: element.innerHTML\n", "2) content: () => element.cloneNode(true)"].join(" "));
  }
  var instances = elements.reduce(function(acc, reference2) {
    var instance = reference2 && createTippy(reference2, passedProps);
    if (instance) {
      acc.push(instance);
    }
    return acc;
  }, []);
  return isElement$1(targets) ? instances[0] : instances;
}
tippy.defaultProps = defaultProps;
tippy.setDefaultProps = setDefaultProps;
tippy.currentInput = currentInput;
Object.assign({}, applyStyles$1, {
  effect: function effect2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
  }
});
tippy.setDefaultProps({
  render
});
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var isBrowser$1 = typeof window !== "undefined" && typeof document !== "undefined";
function preserveRef(ref, node2) {
  if (ref) {
    if (typeof ref === "function") {
      ref(node2);
    }
    if ({}.hasOwnProperty.call(ref, "current")) {
      ref.current = node2;
    }
  }
}
function ssrSafeCreateDiv() {
  return isBrowser$1 && document.createElement("div");
}
function toDataAttributes(attrs) {
  var dataAttrs = {
    "data-placement": attrs.placement
  };
  if (attrs.referenceHidden) {
    dataAttrs["data-reference-hidden"] = "";
  }
  if (attrs.escaped) {
    dataAttrs["data-escaped"] = "";
  }
  return dataAttrs;
}
function deepEqual$1(x3, y4) {
  if (x3 === y4) {
    return true;
  } else if (typeof x3 === "object" && x3 != null && typeof y4 === "object" && y4 != null) {
    if (Object.keys(x3).length !== Object.keys(y4).length) {
      return false;
    }
    for (var prop in x3) {
      if (y4.hasOwnProperty(prop)) {
        if (!deepEqual$1(x3[prop], y4[prop])) {
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
}
function uniqueByShape(arr) {
  var output = [];
  arr.forEach(function(item) {
    if (!output.find(function(outputItem) {
      return deepEqual$1(item, outputItem);
    })) {
      output.push(item);
    }
  });
  return output;
}
function deepPreserveProps(instanceProps, componentProps) {
  var _instanceProps$popper, _componentProps$poppe;
  return Object.assign({}, componentProps, {
    popperOptions: Object.assign({}, instanceProps.popperOptions, componentProps.popperOptions, {
      modifiers: uniqueByShape([].concat(((_instanceProps$popper = instanceProps.popperOptions) == null ? void 0 : _instanceProps$popper.modifiers) || [], ((_componentProps$poppe = componentProps.popperOptions) == null ? void 0 : _componentProps$poppe.modifiers) || []))
    })
  });
}
var useIsomorphicLayoutEffect$1 = isBrowser$1 ? reactExports.useLayoutEffect : reactExports.useEffect;
function useMutableBox(initialValue) {
  var ref = reactExports.useRef();
  if (!ref.current) {
    ref.current = typeof initialValue === "function" ? initialValue() : initialValue;
  }
  return ref.current;
}
function updateClassName(box, action, classNames) {
  classNames.split(/\s+/).forEach(function(name) {
    if (name) {
      box.classList[action](name);
    }
  });
}
var classNamePlugin = {
  name: "className",
  defaultValue: "",
  fn: function fn2(instance) {
    var box = instance.popper.firstElementChild;
    var isDefaultRenderFn = function isDefaultRenderFn2() {
      var _instance$props$rende;
      return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
    };
    function add2() {
      if (instance.props.className && !isDefaultRenderFn()) {
        if (process.env.NODE_ENV !== "production") {
          console.warn(["@tippyjs/react: Cannot use `className` prop in conjunction with", "`render` prop. Place the className on the element you are", "rendering."].join(" "));
        }
        return;
      }
      updateClassName(box, "add", instance.props.className);
    }
    function remove() {
      if (isDefaultRenderFn()) {
        updateClassName(box, "remove", instance.props.className);
      }
    }
    return {
      onCreate: add2,
      onBeforeUpdate: remove,
      onAfterUpdate: add2
    };
  }
};
function TippyGenerator(tippy2) {
  function Tippy2(_ref2) {
    var children = _ref2.children, content = _ref2.content, visible = _ref2.visible, singleton = _ref2.singleton, render2 = _ref2.render, reference2 = _ref2.reference, _ref$disabled = _ref2.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$ignoreAttributes = _ref2.ignoreAttributes, ignoreAttributes = _ref$ignoreAttributes === void 0 ? true : _ref$ignoreAttributes;
    _ref2.__source;
    _ref2.__self;
    var restOfNativeProps = _objectWithoutPropertiesLoose$1(_ref2, ["children", "content", "visible", "singleton", "render", "reference", "disabled", "ignoreAttributes", "__source", "__self"]);
    var isControlledMode = visible !== void 0;
    var isSingletonMode = singleton !== void 0;
    var _useState = reactExports.useState(false), mounted = _useState[0], setMounted = _useState[1];
    var _useState2 = reactExports.useState({}), attrs = _useState2[0], setAttrs = _useState2[1];
    var _useState3 = reactExports.useState(), singletonContent = _useState3[0], setSingletonContent = _useState3[1];
    var mutableBox = useMutableBox(function() {
      return {
        container: ssrSafeCreateDiv(),
        renders: 1
      };
    });
    var props = Object.assign({
      ignoreAttributes
    }, restOfNativeProps, {
      content: mutableBox.container
    });
    if (isControlledMode) {
      if (process.env.NODE_ENV !== "production") {
        ["trigger", "hideOnClick", "showOnCreate"].forEach(function(nativeStateProp) {
          if (props[nativeStateProp] !== void 0) {
            console.warn(["@tippyjs/react: Cannot specify `" + nativeStateProp + "` prop in", "controlled mode (`visible` prop)"].join(" "));
          }
        });
      }
      props.trigger = "manual";
      props.hideOnClick = false;
    }
    if (isSingletonMode) {
      disabled = true;
    }
    var computedProps = props;
    var plugins = props.plugins || [];
    if (render2) {
      computedProps = Object.assign({}, props, {
        plugins: isSingletonMode && singleton.data != null ? [].concat(plugins, [{
          fn: function fn3() {
            return {
              onTrigger: function onTrigger2(instance, event) {
                var node2 = singleton.data.children.find(function(_ref22) {
                  var instance2 = _ref22.instance;
                  return instance2.reference === event.currentTarget;
                });
                instance.state.$$activeSingletonInstance = node2.instance;
                setSingletonContent(node2.content);
              }
            };
          }
        }]) : plugins,
        render: function render3() {
          return {
            popper: mutableBox.container
          };
        }
      });
    }
    var deps = [reference2].concat(children ? [children.type] : []);
    useIsomorphicLayoutEffect$1(function() {
      var element = reference2;
      if (reference2 && reference2.hasOwnProperty("current")) {
        element = reference2.current;
      }
      var instance = tippy2(element || mutableBox.ref || ssrSafeCreateDiv(), Object.assign({}, computedProps, {
        plugins: [classNamePlugin].concat(props.plugins || [])
      }));
      mutableBox.instance = instance;
      if (disabled) {
        instance.disable();
      }
      if (visible) {
        instance.show();
      }
      if (isSingletonMode) {
        singleton.hook({
          instance,
          content,
          props: computedProps,
          setSingletonContent
        });
      }
      setMounted(true);
      return function() {
        instance.destroy();
        singleton == null ? void 0 : singleton.cleanup(instance);
      };
    }, deps);
    useIsomorphicLayoutEffect$1(function() {
      var _instance$popperInsta;
      if (mutableBox.renders === 1) {
        mutableBox.renders++;
        return;
      }
      var instance = mutableBox.instance;
      instance.setProps(deepPreserveProps(instance.props, computedProps));
      (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.forceUpdate();
      if (disabled) {
        instance.disable();
      } else {
        instance.enable();
      }
      if (isControlledMode) {
        if (visible) {
          instance.show();
        } else {
          instance.hide();
        }
      }
      if (isSingletonMode) {
        singleton.hook({
          instance,
          content,
          props: computedProps,
          setSingletonContent
        });
      }
    });
    useIsomorphicLayoutEffect$1(function() {
      var _instance$props$poppe;
      if (!render2) {
        return;
      }
      var instance = mutableBox.instance;
      instance.setProps({
        popperOptions: Object.assign({}, instance.props.popperOptions, {
          modifiers: [].concat((((_instance$props$poppe = instance.props.popperOptions) == null ? void 0 : _instance$props$poppe.modifiers) || []).filter(function(_ref3) {
            var name = _ref3.name;
            return name !== "$$tippyReact";
          }), [{
            name: "$$tippyReact",
            enabled: true,
            phase: "beforeWrite",
            requires: ["computeStyles"],
            fn: function fn3(_ref4) {
              var _state$modifiersData;
              var state = _ref4.state;
              var hideData = (_state$modifiersData = state.modifiersData) == null ? void 0 : _state$modifiersData.hide;
              if (attrs.placement !== state.placement || attrs.referenceHidden !== (hideData == null ? void 0 : hideData.isReferenceHidden) || attrs.escaped !== (hideData == null ? void 0 : hideData.hasPopperEscaped)) {
                setAttrs({
                  placement: state.placement,
                  referenceHidden: hideData == null ? void 0 : hideData.isReferenceHidden,
                  escaped: hideData == null ? void 0 : hideData.hasPopperEscaped
                });
              }
              state.attributes.popper = {};
            }
          }])
        })
      });
    }, [attrs.placement, attrs.referenceHidden, attrs.escaped].concat(deps));
    return /* @__PURE__ */ jsxs(Fragment$1, {
      children: [children ? /* @__PURE__ */ reactExports.cloneElement(children, {
        ref: function ref(node2) {
          mutableBox.ref = node2;
          preserveRef(children.ref, node2);
        }
      }) : null, mounted && /* @__PURE__ */ reactDomExports.createPortal(render2 ? render2(toDataAttributes(attrs), singletonContent, mutableBox.instance) : content, mutableBox.container)]
    });
  }
  return Tippy2;
}
var forwardRef = function(Tippy2, defaultProps2) {
  return /* @__PURE__ */ reactExports.forwardRef(function TippyWrapper(_ref2, _ref22) {
    var children = _ref2.children, props = _objectWithoutPropertiesLoose$1(_ref2, ["children"]);
    return (
      // If I spread them separately here, Babel adds the _extends ponyfill for
      // some reason
      /* @__PURE__ */ jsx(Tippy2, {
        ...Object.assign({}, defaultProps2, props),
        children: children ? /* @__PURE__ */ reactExports.cloneElement(children, {
          ref: function ref(node2) {
            preserveRef(_ref22, node2);
            preserveRef(children.ref, node2);
          }
        }) : null
      })
    );
  });
};
var index$1 = /* @__PURE__ */ forwardRef(/* @__PURE__ */ TippyGenerator(tippy));
const Tippy = index$1;
function _EMOTION_STRINGIFIED_CSS_ERROR__$E() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function Tooltip$1({
  content,
  children,
  visible,
  trigger
}) {
  const tippyProps = {};
  if (trigger === "click") {
    tippyProps.trigger = trigger;
    tippyProps.hideOnClick = true;
    tippyProps.interactive = true;
  }
  return /* @__PURE__ */ jsx(StyledTippy, {
    content,
    visible,
    ...tippyProps,
    children
  });
}
const StyledTippy = /* @__PURE__ */ createStyled(Tippy, process.env.NODE_ENV === "production" ? {
  target: "esdl9o10"
} : {
  target: "esdl9o10",
  label: "StyledTippy"
})(process.env.NODE_ENV === "production" ? {
  name: "t3ueh3",
  styles: 'background-color:#202227;color:#FFF;padding:.2em .5em;position:relative;border-radius:4px;font-size:.75em;line-height:1.4;box-shadow:rgba(0, 0, 0, 0.1) 0 10px 15px -3px, rgba(0, 0, 0, 0.05) 0 4px 6px -2px;outline:0;transition-property:transform, visibility, opacity;&[data-animation=fade][data-state=hidden]{transform:translateY(-5px);opacity:0;}&[data-placement^=top] > .tippy-arrow{bottom:0;}& .tippy-arrow{width:16px;height:16px;color:#202227;}&[data-placement^=top] > .tippy-arrow::before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top;}& .tippy-arrow::before{content:"";position:absolute;border-color:transparent;border-style:solid;}&[data-placement^=bottom] > .tippy-arrow::before{top:-19px;left:0;border-width:8px 8px 0;border-top-color:initial;transform:rotate(180deg);transform-origin:center top;}'
} : {
  name: "t3ueh3",
  styles: 'background-color:#202227;color:#FFF;padding:.2em .5em;position:relative;border-radius:4px;font-size:.75em;line-height:1.4;box-shadow:rgba(0, 0, 0, 0.1) 0 10px 15px -3px, rgba(0, 0, 0, 0.05) 0 4px 6px -2px;outline:0;transition-property:transform, visibility, opacity;&[data-animation=fade][data-state=hidden]{transform:translateY(-5px);opacity:0;}&[data-placement^=top] > .tippy-arrow{bottom:0;}& .tippy-arrow{width:16px;height:16px;color:#202227;}&[data-placement^=top] > .tippy-arrow::before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top;}& .tippy-arrow::before{content:"";position:absolute;border-color:transparent;border-style:solid;}&[data-placement^=bottom] > .tippy-arrow::before{top:-19px;left:0;border-width:8px 8px 0;border-top-color:initial;transform:rotate(180deg);transform-origin:center top;}',
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvVG9vbHRpcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJvQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL1Rvb2x0aXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgVGlwcHksIHsgVGlwcHlQcm9wcyB9IGZyb20gJ0B0aXBweWpzL3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbnR5cGUgVG9vbHRpcFByb3BzID0ge1xuICBjb250ZW50OiBSZWFjdE5vZGVcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZVxuICB2aXNpYmxlPzogYm9vbGVhblxuICB0cmlnZ2VyPzogJ2NsaWNrJyB8ICdmb2N1cydcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRvb2x0aXAoeyBjb250ZW50LCBjaGlsZHJlbiwgdmlzaWJsZSwgdHJpZ2dlciB9OiBUb29sdGlwUHJvcHMpIHtcbiAgY29uc3QgdGlwcHlQcm9wczogVGlwcHlQcm9wcyA9IHt9XG4gIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgdGlwcHlQcm9wcy50cmlnZ2VyID0gdHJpZ2dlclxuICAgIHRpcHB5UHJvcHMuaGlkZU9uQ2xpY2sgPSB0cnVlXG4gICAgdGlwcHlQcm9wcy5pbnRlcmFjdGl2ZSA9IHRydWVcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZFRpcHB5IGNvbnRlbnQ9e2NvbnRlbnR9IHZpc2libGU9e3Zpc2libGV9IHsuLi50aXBweVByb3BzfT5cbiAgICAgIHtjaGlsZHJlbiBhcyBSZWFjdEVsZW1lbnR9XG4gICAgPC9TdHlsZWRUaXBweT5cbiAgKVxufVxuXG5jb25zdCBTdHlsZWRUaXBweSA9IHN0eWxlZChUaXBweSkoe1xuICBiYWNrZ3JvdW5kQ29sb3I6ICcjMjAyMjI3JyxcbiAgY29sb3I6ICcjRkZGJyxcbiAgcGFkZGluZzogJy4yZW0gLjVlbScsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICBmb250U2l6ZTogJy43NWVtJyxcbiAgbGluZUhlaWdodDogMS40LFxuICBib3hTaGFkb3c6XG4gICAgJ3JnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LCByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4JyxcbiAgb3V0bGluZTogJzAnLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6ICd0cmFuc2Zvcm0sIHZpc2liaWxpdHksIG9wYWNpdHknLFxuICAnJltkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl0nOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNXB4KScsXG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbiAgJyZbZGF0YS1wbGFjZW1lbnRePXRvcF0gPiAudGlwcHktYXJyb3cnOiB7IGJvdHRvbTogJzAnIH0sXG4gICcmIC50aXBweS1hcnJvdyc6IHtcbiAgICB3aWR0aDogJzE2cHgnLFxuICAgIGhlaWdodDogJzE2cHgnLFxuICAgIGNvbG9yOiAnIzIwMjIyNycsXG4gIH0sXG4gICcmW2RhdGEtcGxhY2VtZW50Xj10b3BdID4gLnRpcHB5LWFycm93OjpiZWZvcmUnOiB7XG4gICAgYm90dG9tOiAnLTdweCcsXG4gICAgbGVmdDogJzAnLFxuICAgIGJvcmRlcldpZHRoOiAnOHB4IDhweCAwJyxcbiAgICBib3JkZXJUb3BDb2xvcjogJ2luaXRpYWwnLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciB0b3AnLFxuICB9LFxuICAnJiAudGlwcHktYXJyb3c6OmJlZm9yZSc6IHtcbiAgICBjb250ZW50OiAnXCJcIicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIH0sXG4gICcmW2RhdGEtcGxhY2VtZW50Xj1ib3R0b21dID4gLnRpcHB5LWFycm93OjpiZWZvcmUnOiB7XG4gICAgdG9wOiAnLTE5cHgnLFxuICAgIGxlZnQ6ICcwJyxcbiAgICBib3JkZXJXaWR0aDogJzhweCA4cHggMCcsXG4gICAgYm9yZGVyVG9wQ29sb3I6ICdpbml0aWFsJyxcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKScsXG4gICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyIHRvcCcsXG4gIH0sXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$E
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$D() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function ButtonIcon({
  danger,
  success,
  rotate,
  title,
  ...props
}) {
  const style2 = rotate ? {
    transform: `rotate(${rotate}deg)`
  } : void 0;
  const button = /* @__PURE__ */ jsx(BaseButton, {
    ...props,
    "aria-label": title,
    css: [danger && Danger, success && Success, process.env.NODE_ENV === "production" ? "" : ";label:button;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uSWNvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJNIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uSWNvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi9Ub29sdGlwJ1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxudHlwZSBCdXR0b25Qcm9wcyA9IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snYnV0dG9uJ10gJiB7XG4gIGRhbmdlcj86IGJvb2xlYW5cbiAgc3VjY2Vzcz86IGJvb2xlYW5cbiAgcm90YXRlPzogbnVtYmVyXG4gIHRpdGxlPzogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCdXR0b25JY29uKHtcbiAgZGFuZ2VyLFxuICBzdWNjZXNzLFxuICByb3RhdGUsXG4gIHRpdGxlLFxuICAuLi5wcm9wc1xufTogQnV0dG9uUHJvcHMpIHtcbiAgY29uc3Qgc3R5bGUgPSByb3RhdGUgPyB7IHRyYW5zZm9ybTogYHJvdGF0ZSgke3JvdGF0ZX1kZWcpYCB9IDogdW5kZWZpbmVkXG4gIGNvbnN0IGJ1dHRvbiA9IChcbiAgICA8QmFzZUJ1dHRvblxuICAgICAgey4uLnByb3BzfVxuICAgICAgYXJpYS1sYWJlbD17dGl0bGV9XG4gICAgICBjc3M9e1tkYW5nZXIgJiYgRGFuZ2VyLCBzdWNjZXNzICYmIFN1Y2Nlc3NdfVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgIC8+XG4gIClcbiAgaWYgKHRpdGxlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sdGlwIGNvbnRlbnQ9e3RpdGxlfSB0cmlnZ2VyPVwiZm9jdXNcIj5cbiAgICAgICAge2J1dHRvbn1cbiAgICAgIDwvVG9vbHRpcD5cbiAgICApXG4gIH1cblxuICByZXR1cm4gYnV0dG9uXG59XG5cbmNvbnN0IEJhc2VCdXR0b24gPSBzdHlsZWQuYnV0dG9uKHtcbiAgZmxleDogJ25vbmUnLFxuICB3aWR0aDogNDAsXG4gIGhlaWdodDogNDAsXG4gIGJvcmRlclJhZGl1czogNDAsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICB0cmFuc2l0aW9uOiAnYmFja2dyb3VuZC1jb2xvciAwLjNzLCB0cmFuc2Zvcm0gMC4zcycsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBvdXRsaW5lOiAnbm9uZScsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG4gIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gICcmOmhvdmVyLCAmOmZvY3VzJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWhvdmVyKScsXG4gICAgY29sb3I6ICd2YXIoLS12ZS1jb2xvciknLFxuICB9LFxufSlcblxuY29uc3QgRGFuZ2VyID0ge1xuICBjb2xvcjogJ3ZhcigtLXZlLWRhbmdlciknLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICBjb2xvcjogJ3ZhcigtLXZlLWRhbmdlciknLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWRhbmdlci1saWdodCknLFxuICB9LFxufVxuXG5jb25zdCBTdWNjZXNzID0ge1xuICBjb2xvcjogJyMwNTk2NjknLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICBjb2xvcjogJyMwNTk2NjknLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMTEwLCAyMzEsIDE4MywgLjIpJyxcbiAgfSxcbn1cblxuY29uc3QgRmxpcHBlZCA9IGNzcyh7XG4gIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJyxcbn0pXG4iXX0= */"],
    style: style2
  });
  if (title) {
    return /* @__PURE__ */ jsx(Tooltip$1, {
      content: title,
      trigger: "focus",
      children: button
    });
  }
  return button;
}
const BaseButton = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "etdjlfa0"
} : {
  target: "etdjlfa0",
  label: "BaseButton"
})(process.env.NODE_ENV === "production" ? {
  name: "1dnnu7",
  styles: "flex:none;width:40px;height:40px;border-radius:40px;display:flex;align-items:center;justify-content:center;background-color:transparent;transition:background-color 0.3s, transform 0.3s;border:none;outline:none;cursor:pointer;color:var(--ve-color-light);background:var(--ve-background);&:hover, &:focus{background-color:var(--ve-hover);color:var(--ve-color);}"
} : {
  name: "1dnnu7",
  styles: "flex:none;width:40px;height:40px;border-radius:40px;display:flex;align-items:center;justify-content:center;background-color:transparent;transition:background-color 0.3s, transform 0.3s;border:none;outline:none;cursor:pointer;color:var(--ve-color-light);background:var(--ve-background);&:hover, &:focus{background-color:var(--ve-hover);color:var(--ve-color);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uSWNvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0NtQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbkljb24udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4vVG9vbHRpcCdcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbnR5cGUgQnV0dG9uUHJvcHMgPSBKU1guSW50cmluc2ljRWxlbWVudHNbJ2J1dHRvbiddICYge1xuICBkYW5nZXI/OiBib29sZWFuXG4gIHN1Y2Nlc3M/OiBib29sZWFuXG4gIHJvdGF0ZT86IG51bWJlclxuICB0aXRsZT86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uSWNvbih7XG4gIGRhbmdlcixcbiAgc3VjY2VzcyxcbiAgcm90YXRlLFxuICB0aXRsZSxcbiAgLi4ucHJvcHNcbn06IEJ1dHRvblByb3BzKSB7XG4gIGNvbnN0IHN0eWxlID0gcm90YXRlID8geyB0cmFuc2Zvcm06IGByb3RhdGUoJHtyb3RhdGV9ZGVnKWAgfSA6IHVuZGVmaW5lZFxuICBjb25zdCBidXR0b24gPSAoXG4gICAgPEJhc2VCdXR0b25cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIGFyaWEtbGFiZWw9e3RpdGxlfVxuICAgICAgY3NzPXtbZGFuZ2VyICYmIERhbmdlciwgc3VjY2VzcyAmJiBTdWNjZXNzXX1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAvPlxuICApXG4gIGlmICh0aXRsZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcCBjb250ZW50PXt0aXRsZX0gdHJpZ2dlcj1cImZvY3VzXCI+XG4gICAgICAgIHtidXR0b259XG4gICAgICA8L1Rvb2x0aXA+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGJ1dHRvblxufVxuXG5jb25zdCBCYXNlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGZsZXg6ICdub25lJyxcbiAgd2lkdGg6IDQwLFxuICBoZWlnaHQ6IDQwLFxuICBib3JkZXJSYWRpdXM6IDQwLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgdHJhbnNpdGlvbjogJ2JhY2tncm91bmQtY29sb3IgMC4zcywgdHJhbnNmb3JtIDAuM3MnLFxuICBib3JkZXI6ICdub25lJyxcbiAgb3V0bGluZTogJ25vbmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgY29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxuICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtYmFja2dyb3VuZCknLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1ob3ZlciknLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IERhbmdlciA9IHtcbiAgY29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7XG4gICAgY29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1kYW5nZXItbGlnaHQpJyxcbiAgfSxcbn1cblxuY29uc3QgU3VjY2VzcyA9IHtcbiAgY29sb3I6ICcjMDU5NjY5JyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7XG4gICAgY29sb3I6ICcjMDU5NjY5JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDExMCwgMjMxLCAxODMsIC4yKScsXG4gIH0sXG59XG5cbmNvbnN0IEZsaXBwZWQgPSBjc3Moe1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$D
});
const Danger = {
  color: "var(--ve-danger)",
  "&:hover, &:focus": {
    color: "var(--ve-danger)",
    backgroundColor: "var(--ve-danger-light)"
  }
};
const Success = {
  color: "#059669",
  "&:hover, &:focus": {
    color: "#059669",
    backgroundColor: "rgba(110, 231, 183, .2)"
  }
};
process.env.NODE_ENV === "production" ? {
  name: "21xn5r",
  styles: "transform:rotate(180deg)"
} : {
  name: "ao9f5q-Flipped",
  styles: "transform:rotate(180deg);label:Flipped;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uSWNvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkVnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbkljb24udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4vVG9vbHRpcCdcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbnR5cGUgQnV0dG9uUHJvcHMgPSBKU1guSW50cmluc2ljRWxlbWVudHNbJ2J1dHRvbiddICYge1xuICBkYW5nZXI/OiBib29sZWFuXG4gIHN1Y2Nlc3M/OiBib29sZWFuXG4gIHJvdGF0ZT86IG51bWJlclxuICB0aXRsZT86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uSWNvbih7XG4gIGRhbmdlcixcbiAgc3VjY2VzcyxcbiAgcm90YXRlLFxuICB0aXRsZSxcbiAgLi4ucHJvcHNcbn06IEJ1dHRvblByb3BzKSB7XG4gIGNvbnN0IHN0eWxlID0gcm90YXRlID8geyB0cmFuc2Zvcm06IGByb3RhdGUoJHtyb3RhdGV9ZGVnKWAgfSA6IHVuZGVmaW5lZFxuICBjb25zdCBidXR0b24gPSAoXG4gICAgPEJhc2VCdXR0b25cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIGFyaWEtbGFiZWw9e3RpdGxlfVxuICAgICAgY3NzPXtbZGFuZ2VyICYmIERhbmdlciwgc3VjY2VzcyAmJiBTdWNjZXNzXX1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAvPlxuICApXG4gIGlmICh0aXRsZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcCBjb250ZW50PXt0aXRsZX0gdHJpZ2dlcj1cImZvY3VzXCI+XG4gICAgICAgIHtidXR0b259XG4gICAgICA8L1Rvb2x0aXA+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGJ1dHRvblxufVxuXG5jb25zdCBCYXNlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGZsZXg6ICdub25lJyxcbiAgd2lkdGg6IDQwLFxuICBoZWlnaHQ6IDQwLFxuICBib3JkZXJSYWRpdXM6IDQwLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgdHJhbnNpdGlvbjogJ2JhY2tncm91bmQtY29sb3IgMC4zcywgdHJhbnNmb3JtIDAuM3MnLFxuICBib3JkZXI6ICdub25lJyxcbiAgb3V0bGluZTogJ25vbmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgY29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxuICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtYmFja2dyb3VuZCknLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1ob3ZlciknLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IERhbmdlciA9IHtcbiAgY29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7XG4gICAgY29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1kYW5nZXItbGlnaHQpJyxcbiAgfSxcbn1cblxuY29uc3QgU3VjY2VzcyA9IHtcbiAgY29sb3I6ICcjMDU5NjY5JyxcbiAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7XG4gICAgY29sb3I6ICcjMDU5NjY5JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDExMCwgMjMxLCAxODMsIC4yKScsXG4gIH0sXG59XG5cbmNvbnN0IEZsaXBwZWQgPSBjc3Moe1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$D
};
function _EMOTION_STRINGIFIED_CSS_ERROR__$C() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const DragHandle = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "edi5k270"
} : {
  target: "edi5k270",
  label: "DragHandle"
})(process.env.NODE_ENV === "production" ? {
  name: "2ozjl7",
  styles: "width:10px;position:absolute;top:.5rem;left:3px;bottom:.5rem;cursor:move;background:radial-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.1) 30%, rgba(0,0,0,0) 31%, rgba(0,0,0,0.0)) left top / 5px 5px repeat"
} : {
  name: "2ozjl7",
  styles: "width:10px;position:absolute;top:.5rem;left:3px;bottom:.5rem;cursor:move;background:radial-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.1) 30%, rgba(0,0,0,0) 31%, rgba(0,0,0,0.0)) left top / 5px 5px repeat",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRHJhZ0hhbmRsZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRTBCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRHJhZ0hhbmRsZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxuZXhwb3J0IGNvbnN0IERyYWdIYW5kbGUgPSBzdHlsZWQuZGl2KHtcbiAgd2lkdGg6IDEwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAnLjVyZW0nLFxuICBsZWZ0OiAzLFxuICBib3R0b206ICcuNXJlbScsXG4gIGN1cnNvcjogJ21vdmUnLFxuICBiYWNrZ3JvdW5kOlxuICAgICdyYWRpYWwtZ3JhZGllbnQocmdiYSgwLDAsMCwwLjEpLCByZ2JhKDAsMCwwLDAuMSkgMzAlLCByZ2JhKDAsMCwwLDApIDMxJSwgcmdiYSgwLDAsMCwwLjApKSBsZWZ0IHRvcCAvIDVweCA1cHggcmVwZWF0Jyxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$C
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$B() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Label$1 = /* @__PURE__ */ createStyled("label", process.env.NODE_ENV === "production" ? {
  target: "e1ost2es0"
} : {
  target: "e1ost2es0",
  label: "Label"
})(process.env.NODE_ENV === "production" ? {
  name: "2tu0gr",
  styles: "display:block;margin-bottom:.5em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis"
} : {
  name: "2tu0gr",
  styles: "display:block;margin-bottom:.5em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvTGFiZWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVxQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL0xhYmVsLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG5leHBvcnQgY29uc3QgTGFiZWwgPSBzdHlsZWQubGFiZWwoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICBtYXJnaW5Cb3R0b206ICcuNWVtJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$B
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$A() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function Field$1({
  children,
  label,
  help,
  type = "text",
  options,
  tooltip,
  icon,
  ...props
}) {
  if (!children) {
    if (options) {
      children = /* @__PURE__ */ jsx(Select$1, {
        ...props,
        children: options.map((option, key) => {
          return /* @__PURE__ */ jsx("option", {
            value: option.value,
            children: option.label
          }, key);
        })
      });
    } else if (["text", "number"].includes(type)) {
      children = /* @__PURE__ */ jsx(Input$2, {
        type,
        ...props
      });
    } else if (type === "textarea") {
      children = /* @__PURE__ */ jsx(Input$2, {
        as: "textarea",
        ...props
      });
    } else {
      throw new Error("Cannot render this type of field : " + type);
    }
  }
  if (tooltip) {
    children = /* @__PURE__ */ jsx(Tooltip$1, {
      content: tooltip,
      children
    });
  }
  return /* @__PURE__ */ jsxs("div", {
    children: [label && /* @__PURE__ */ jsx(Label$1, {
      htmlFor: props.id,
      children: label
    }), /* @__PURE__ */ jsxs(Wrapper$g, {
      children: [children, icon && /* @__PURE__ */ jsx(Icon, {
        children: icon
      })]
    }), help && /* @__PURE__ */ jsx(HelpMessage, {
      children: help
    })]
  });
}
const Select$1 = Input$2.withComponent("select", process.env.NODE_ENV === "production" ? {
  target: "e87x103"
} : {
  target: "e87x103",
  label: "Select"
});
const HelpMessage = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e87x102"
} : {
  target: "e87x102",
  label: "HelpMessage"
})(process.env.NODE_ENV === "production" ? {
  name: "1vp9oxk",
  styles: "font-style:italic;margin-top:.5em;font-size:.8em"
} : {
  name: "1vp9oxk",
  styles: "font-style:italic;margin-top:.5em;font-size:.8em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmllbGQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVFb0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9GaWVsZC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuL0xhYmVsJ1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4vVG9vbHRpcCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcblxudHlwZSBPcHRpb24gPSB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG50eXBlIEZpZWxkUHJvcHMgPSB7XG4gIGxhYmVsPzogUmVhY3ROb2RlXG4gIGhlbHA/OiBSZWFjdE5vZGVcbiAgb3B0aW9ucz86IE9wdGlvbltdXG4gIHRvb2x0aXA/OiBSZWFjdE5vZGVcbiAgaWNvbj86IFJlYWN0Tm9kZVxufSAmIEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmXG4gIEpTWC5JbnRyaW5zaWNFbGVtZW50c1sndGV4dGFyZWEnXSAmXG4gIEpTWC5JbnRyaW5zaWNFbGVtZW50c1snc2VsZWN0J11cblxuZXhwb3J0IGZ1bmN0aW9uIEZpZWxkKHtcbiAgY2hpbGRyZW4sXG4gIGxhYmVsLFxuICBoZWxwLFxuICB0eXBlID0gJ3RleHQnLFxuICBvcHRpb25zLFxuICB0b29sdGlwLFxuICBpY29uLFxuICAuLi5wcm9wc1xufTogRmllbGRQcm9wcykge1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGNoaWxkcmVuID0gKFxuICAgICAgICA8U2VsZWN0IHsuLi5wcm9wc30+XG4gICAgICAgICAge29wdGlvbnMubWFwKChvcHRpb246IE9wdGlvbiwga2V5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXtvcHRpb24udmFsdWV9IGtleT17a2V5fT5cbiAgICAgICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICApXG4gICAgfSBlbHNlIGlmIChbJ3RleHQnLCAnbnVtYmVyJ10uaW5jbHVkZXModHlwZSkpIHtcbiAgICAgIGNoaWxkcmVuID0gPElucHV0IHR5cGU9e3R5cGV9IHsuLi5wcm9wc30gLz5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIGNoaWxkcmVuID0gPElucHV0IGFzPVwidGV4dGFyZWFcIiB7Li4ucHJvcHN9IC8+XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlbmRlciB0aGlzIHR5cGUgb2YgZmllbGQgOiAnICsgdHlwZSlcbiAgICB9XG4gIH1cblxuICBpZiAodG9vbHRpcCkge1xuICAgIGNoaWxkcmVuID0gPFRvb2x0aXAgY29udGVudD17dG9vbHRpcH0+e2NoaWxkcmVufTwvVG9vbHRpcD5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHtsYWJlbCAmJiA8TGFiZWwgaHRtbEZvcj17cHJvcHMuaWR9PntsYWJlbH08L0xhYmVsPn1cbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIHtpY29uICYmIDxJY29uPntpY29ufTwvSWNvbj59XG4gICAgICA8L1dyYXBwZXI+XG4gICAgICB7aGVscCAmJiA8SGVscE1lc3NhZ2U+e2hlbHB9PC9IZWxwTWVzc2FnZT59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgU2VsZWN0ID0gSW5wdXQud2l0aENvbXBvbmVudCgnc2VsZWN0JylcblxuY29uc3QgSGVscE1lc3NhZ2UgPSBzdHlsZWQuZGl2KHtcbiAgZm9udFN0eWxlOiAnaXRhbGljJyxcbiAgbWFyZ2luVG9wOiAnLjVlbScsXG4gIGZvbnRTaXplOiAnLjhlbScsXG59KVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxufSlcblxuY29uc3QgSWNvbiA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGJvdHRvbTogMCxcbiAgY29sb3I6ICd2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogMCxcbiAgd2lkdGg6IDQwLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$A
});
const Wrapper$g = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e87x101"
} : {
  target: "e87x101",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "bjn8wh",
  styles: "position:relative"
} : {
  name: "bjn8wh",
  styles: "position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmllbGQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZFZ0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9GaWVsZC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuL0xhYmVsJ1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4vVG9vbHRpcCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcblxudHlwZSBPcHRpb24gPSB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG50eXBlIEZpZWxkUHJvcHMgPSB7XG4gIGxhYmVsPzogUmVhY3ROb2RlXG4gIGhlbHA/OiBSZWFjdE5vZGVcbiAgb3B0aW9ucz86IE9wdGlvbltdXG4gIHRvb2x0aXA/OiBSZWFjdE5vZGVcbiAgaWNvbj86IFJlYWN0Tm9kZVxufSAmIEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmXG4gIEpTWC5JbnRyaW5zaWNFbGVtZW50c1sndGV4dGFyZWEnXSAmXG4gIEpTWC5JbnRyaW5zaWNFbGVtZW50c1snc2VsZWN0J11cblxuZXhwb3J0IGZ1bmN0aW9uIEZpZWxkKHtcbiAgY2hpbGRyZW4sXG4gIGxhYmVsLFxuICBoZWxwLFxuICB0eXBlID0gJ3RleHQnLFxuICBvcHRpb25zLFxuICB0b29sdGlwLFxuICBpY29uLFxuICAuLi5wcm9wc1xufTogRmllbGRQcm9wcykge1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGNoaWxkcmVuID0gKFxuICAgICAgICA8U2VsZWN0IHsuLi5wcm9wc30+XG4gICAgICAgICAge29wdGlvbnMubWFwKChvcHRpb246IE9wdGlvbiwga2V5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXtvcHRpb24udmFsdWV9IGtleT17a2V5fT5cbiAgICAgICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICApXG4gICAgfSBlbHNlIGlmIChbJ3RleHQnLCAnbnVtYmVyJ10uaW5jbHVkZXModHlwZSkpIHtcbiAgICAgIGNoaWxkcmVuID0gPElucHV0IHR5cGU9e3R5cGV9IHsuLi5wcm9wc30gLz5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIGNoaWxkcmVuID0gPElucHV0IGFzPVwidGV4dGFyZWFcIiB7Li4ucHJvcHN9IC8+XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlbmRlciB0aGlzIHR5cGUgb2YgZmllbGQgOiAnICsgdHlwZSlcbiAgICB9XG4gIH1cblxuICBpZiAodG9vbHRpcCkge1xuICAgIGNoaWxkcmVuID0gPFRvb2x0aXAgY29udGVudD17dG9vbHRpcH0+e2NoaWxkcmVufTwvVG9vbHRpcD5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHtsYWJlbCAmJiA8TGFiZWwgaHRtbEZvcj17cHJvcHMuaWR9PntsYWJlbH08L0xhYmVsPn1cbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIHtpY29uICYmIDxJY29uPntpY29ufTwvSWNvbj59XG4gICAgICA8L1dyYXBwZXI+XG4gICAgICB7aGVscCAmJiA8SGVscE1lc3NhZ2U+e2hlbHB9PC9IZWxwTWVzc2FnZT59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgU2VsZWN0ID0gSW5wdXQud2l0aENvbXBvbmVudCgnc2VsZWN0JylcblxuY29uc3QgSGVscE1lc3NhZ2UgPSBzdHlsZWQuZGl2KHtcbiAgZm9udFN0eWxlOiAnaXRhbGljJyxcbiAgbWFyZ2luVG9wOiAnLjVlbScsXG4gIGZvbnRTaXplOiAnLjhlbScsXG59KVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxufSlcblxuY29uc3QgSWNvbiA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGJvdHRvbTogMCxcbiAgY29sb3I6ICd2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogMCxcbiAgd2lkdGg6IDQwLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$A
});
const Icon = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e87x100"
} : {
  target: "e87x100",
  label: "Icon"
})(process.env.NODE_ENV === "production" ? {
  name: "w3nkm3",
  styles: "display:flex;align-items:center;justify-content:center;bottom:0;color:var(--ve-field-border);cursor:pointer;height:100%;position:absolute;right:0;top:0;width:40px"
} : {
  name: "w3nkm3",
  styles: "display:flex;align-items:center;justify-content:center;bottom:0;color:var(--ve-field-border);cursor:pointer;height:100%;position:absolute;right:0;top:0;width:40px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmllbGQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlGYSIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL0ZpZWxkLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJy4vTGFiZWwnXG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi9Ub29sdGlwJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuXG50eXBlIE9wdGlvbiA9IHtcbiAgdmFsdWU6IHN0cmluZ1xuICBsYWJlbDogc3RyaW5nXG59XG5cbnR5cGUgRmllbGRQcm9wcyA9IHtcbiAgbGFiZWw/OiBSZWFjdE5vZGVcbiAgaGVscD86IFJlYWN0Tm9kZVxuICBvcHRpb25zPzogT3B0aW9uW11cbiAgdG9vbHRpcD86IFJlYWN0Tm9kZVxuICBpY29uPzogUmVhY3ROb2RlXG59ICYgSlNYLkludHJpbnNpY0VsZW1lbnRzWydpbnB1dCddICZcbiAgSlNYLkludHJpbnNpY0VsZW1lbnRzWyd0ZXh0YXJlYSddICZcbiAgSlNYLkludHJpbnNpY0VsZW1lbnRzWydzZWxlY3QnXVxuXG5leHBvcnQgZnVuY3Rpb24gRmllbGQoe1xuICBjaGlsZHJlbixcbiAgbGFiZWwsXG4gIGhlbHAsXG4gIHR5cGUgPSAndGV4dCcsXG4gIG9wdGlvbnMsXG4gIHRvb2x0aXAsXG4gIGljb24sXG4gIC4uLnByb3BzXG59OiBGaWVsZFByb3BzKSB7XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgY2hpbGRyZW4gPSAoXG4gICAgICAgIDxTZWxlY3Qgey4uLnByb3BzfT5cbiAgICAgICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbjogT3B0aW9uLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9e29wdGlvbi52YWx1ZX0ga2V5PXtrZXl9PlxuICAgICAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pfVxuICAgICAgICA8L1NlbGVjdD5cbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKFsndGV4dCcsICdudW1iZXInXS5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgY2hpbGRyZW4gPSA8SW5wdXQgdHlwZT17dHlwZX0gey4uLnByb3BzfSAvPlxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgY2hpbGRyZW4gPSA8SW5wdXQgYXM9XCJ0ZXh0YXJlYVwiIHsuLi5wcm9wc30gLz5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVuZGVyIHRoaXMgdHlwZSBvZiBmaWVsZCA6ICcgKyB0eXBlKVxuICAgIH1cbiAgfVxuXG4gIGlmICh0b29sdGlwKSB7XG4gICAgY2hpbGRyZW4gPSA8VG9vbHRpcCBjb250ZW50PXt0b29sdGlwfT57Y2hpbGRyZW59PC9Ub29sdGlwPlxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAge2xhYmVsICYmIDxMYWJlbCBodG1sRm9yPXtwcm9wcy5pZH0+e2xhYmVsfTwvTGFiZWw+fVxuICAgICAgPFdyYXBwZXI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAge2ljb24gJiYgPEljb24+e2ljb259PC9JY29uPn1cbiAgICAgIDwvV3JhcHBlcj5cbiAgICAgIHtoZWxwICYmIDxIZWxwTWVzc2FnZT57aGVscH08L0hlbHBNZXNzYWdlPn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBTZWxlY3QgPSBJbnB1dC53aXRoQ29tcG9uZW50KCdzZWxlY3QnKVxuXG5jb25zdCBIZWxwTWVzc2FnZSA9IHN0eWxlZC5kaXYoe1xuICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICBtYXJnaW5Ub3A6ICcuNWVtJyxcbiAgZm9udFNpemU6ICcuOGVtJyxcbn0pXG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG59KVxuXG5jb25zdCBJY29uID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgYm90dG9tOiAwLFxuICBjb2xvcjogJ3ZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICByaWdodDogMCxcbiAgdG9wOiAwLFxuICB3aWR0aDogNDAsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$A
});
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}
function $6ed0406888f73fc4$var$setRef(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node2) => refs.forEach(
    (ref) => $6ed0406888f73fc4$var$setRef(ref, node2)
  );
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
  return reactExports.useCallback($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
}
function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ reactExports.createContext(defaultContext);
    const index2 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
      const value = reactExports.useMemo(
        () => context,
        Object.values(context)
      );
      return /* @__PURE__ */ reactExports.createElement(Context2.Provider, {
        value
      }, children);
    }
    function useContext(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
      const context = reactExports.useContext(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider.displayName = rootComponentName + "Provider";
    return [
      Provider,
      useContext
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ reactExports.createContext(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return reactExports.useMemo(
        () => ({
          [`__scope${scopeName}`]: {
            ...scope,
            [scopeName]: contexts
          }
        }),
        [
          scope,
          contexts
        ]
      );
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae1109,
    $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map(
      (createScope) => ({
        useScope: createScope(),
        scopeName: createScope.scopeName
      })
    );
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return reactExports.useMemo(
        () => ({
          [`__scope${baseScope.scopeName}`]: nextScopes1
        }),
        [
          nextScopes1
        ]
      );
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}
const $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? reactExports.useLayoutEffect : () => {
};
const $1746a345f3d73bb7$var$useReactId = React["useId".toString()] || (() => void 0);
let $1746a345f3d73bb7$var$count = 0;
function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
  const [id, setId] = reactExports.useState($1746a345f3d73bb7$var$useReactId());
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (!deterministicId)
      setId(
        (reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++)
      );
  }, [
    deterministicId
  ]);
  return deterministicId || (id ? `radix-${id}` : "");
}
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
  const callbackRef = reactExports.useRef(callback);
  reactExports.useEffect(() => {
    callbackRef.current = callback;
  });
  return reactExports.useMemo(
    () => (...args) => {
      var _callbackRef$current;
      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
    },
    []
  );
}
function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value1 = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  const setValue = reactExports.useCallback((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value !== prop)
        handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp, onChange }) {
  const uncontrolledState = reactExports.useState(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = reactExports.useRef(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  reactExports.useEffect(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}
const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = reactExports.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (reactExports.Children.count(newElement) > 1)
          return reactExports.Children.only(null);
        return /* @__PURE__ */ reactExports.isValidElement(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ reactExports.createElement($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ reactExports.isValidElement(newElement) ? /* @__PURE__ */ reactExports.cloneElement(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ reactExports.createElement($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
const $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ reactExports.isValidElement(children))
    return /* @__PURE__ */ reactExports.cloneElement(children, {
      ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
      ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref) : children.ref
    });
  return reactExports.Children.count(children) > 1 ? reactExports.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable(child) {
  return /* @__PURE__ */ reactExports.isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue)
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      else if (slotPropValue)
        overrideProps[propName] = slotPropValue;
    } else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}
const $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node2) => {
  const Node4 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node2;
    reactExports.useEffect(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ reactExports.createElement(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node4.displayName = `Primitive.${node2}`;
  return {
    ...primitive,
    [node2]: Node4
  };
}, {});
function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
  if (target)
    reactDomExports.flushSync(
      () => target.dispatchEvent(event)
    );
}
function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
  reactExports.useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        onEscapeKeyDown(event);
    };
    ownerDocument.addEventListener("keydown", handleKeyDown);
    return () => ownerDocument.removeEventListener("keydown", handleKeyDown);
  }, [
    onEscapeKeyDown,
    ownerDocument
  ]);
}
const $5cb92bef7577960e$var$CONTEXT_UPDATE = "dismissableLayer.update";
const $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
const $5cb92bef7577960e$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
let $5cb92bef7577960e$var$originalBodyPointerEvents;
const $5cb92bef7577960e$var$DismissableLayerContext = /* @__PURE__ */ reactExports.createContext({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
const $5cb92bef7577960e$export$177fb62ff3ec1f22 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  var _node$ownerDocument;
  const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;
  const context = reactExports.useContext($5cb92bef7577960e$var$DismissableLayerContext);
  const [node1, setNode2] = reactExports.useState(null);
  const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
  const [, force] = reactExports.useState({});
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setNode2(node2)
  );
  const layers = Array.from(context.layers);
  const [highestLayerWithOutsidePointerEventsDisabled] = [
    ...context.layersWithOutsidePointerEventsDisabled
  ].slice(-1);
  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
  const index2 = node1 ? layers.indexOf(node1) : -1;
  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
  const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
  const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event) => {
    const target = event.target;
    const isPointerDownOnBranch = [
      ...context.branches
    ].some(
      (branch) => branch.contains(target)
    );
    if (!isPointerEventsEnabled || isPointerDownOnBranch)
      return;
    onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  }, ownerDocument);
  const focusOutside = $5cb92bef7577960e$var$useFocusOutside((event) => {
    const target = event.target;
    const isFocusInBranch = [
      ...context.branches
    ].some(
      (branch) => branch.contains(target)
    );
    if (isFocusInBranch)
      return;
    onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  }, ownerDocument);
  $addc16e1bbe58fd0$export$3a72a57244d6e765((event) => {
    const isHighestLayer = index2 === context.layers.size - 1;
    if (!isHighestLayer)
      return;
    onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
    if (!event.defaultPrevented && onDismiss) {
      event.preventDefault();
      onDismiss();
    }
  }, ownerDocument);
  reactExports.useEffect(() => {
    if (!node1)
      return;
    if (disableOutsidePointerEvents) {
      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
        $5cb92bef7577960e$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
        ownerDocument.body.style.pointerEvents = "none";
      }
      context.layersWithOutsidePointerEventsDisabled.add(node1);
    }
    context.layers.add(node1);
    $5cb92bef7577960e$var$dispatchUpdate();
    return () => {
      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
        ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;
    };
  }, [
    node1,
    ownerDocument,
    disableOutsidePointerEvents,
    context
  ]);
  reactExports.useEffect(() => {
    return () => {
      if (!node1)
        return;
      context.layers.delete(node1);
      context.layersWithOutsidePointerEventsDisabled.delete(node1);
      $5cb92bef7577960e$var$dispatchUpdate();
    };
  }, [
    node1,
    context
  ]);
  reactExports.useEffect(() => {
    const handleUpdate = () => force({});
    document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
    return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
  }, []);
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, layerProps, {
    ref: composedRefs,
    style: {
      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
      ...props.style
    },
    onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusCapture, focusOutside.onFocusCapture),
    onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlurCapture, focusOutside.onBlurCapture),
    onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
  }));
});
function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside);
  const isPointerInsideReactTreeRef = reactExports.useRef(false);
  const handleClickRef = reactExports.useRef(() => {
  });
  reactExports.useEffect(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent = function() {
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
            discrete: true
          });
        };
        const eventDetail = {
          originalEvent: event
        };
        if (event.pointerType === "touch") {
          ownerDocument.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
          ownerDocument.addEventListener("click", handleClickRef.current, {
            once: true
          });
        } else
          handleAndDispatchPointerDownOutsideEvent();
      } else
        ownerDocument.removeEventListener("click", handleClickRef.current);
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      ownerDocument.removeEventListener("pointerdown", handlePointerDown);
      ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [
    ownerDocument,
    handlePointerDownOutside
  ]);
  return {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
  };
}
function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside);
  const isFocusInsideReactTreeRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    const handleFocus = (event) => {
      if (event.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = {
          originalEvent: event
        };
        $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
          discrete: false
        });
      }
    };
    ownerDocument.addEventListener("focusin", handleFocus);
    return () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [
    ownerDocument,
    handleFocusOutside
  ]);
  return {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = false
  };
}
function $5cb92bef7577960e$var$dispatchUpdate() {
  const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event = new CustomEvent(name, {
    bubbles: false,
    cancelable: true,
    detail
  });
  if (handler)
    target.addEventListener(name, handler, {
      once: true
    });
  if (discrete)
    $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event);
  else
    target.dispatchEvent(event);
}
const $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
const $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
const $d3863c46a17e8a28$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
const $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
  const [container1, setContainer] = reactExports.useState(null);
  const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
  const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
  const lastFocusedElementRef = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setContainer(node2)
  );
  const focusScope = reactExports.useRef({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  reactExports.useEffect(() => {
    if (trapped) {
      let handleFocusIn = function(event) {
        if (focusScope.paused || !container1)
          return;
        const target = event.target;
        if (container1.contains(target))
          lastFocusedElementRef.current = target;
        else
          $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
            select: true
          });
      }, handleFocusOut = function(event) {
        if (focusScope.paused || !container1)
          return;
        const relatedTarget = event.relatedTarget;
        if (relatedTarget === null)
          return;
        if (!container1.contains(relatedTarget))
          $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
            select: true
          });
      }, handleMutations = function(mutations) {
        const focusedElement = document.activeElement;
        if (focusedElement !== document.body)
          return;
        for (const mutation of mutations)
          if (mutation.removedNodes.length > 0)
            $d3863c46a17e8a28$var$focus(container1);
      };
      document.addEventListener("focusin", handleFocusIn);
      document.addEventListener("focusout", handleFocusOut);
      const mutationObserver = new MutationObserver(handleMutations);
      if (container1)
        mutationObserver.observe(container1, {
          childList: true,
          subtree: true
        });
      return () => {
        document.removeEventListener("focusin", handleFocusIn);
        document.removeEventListener("focusout", handleFocusOut);
        mutationObserver.disconnect();
      };
    }
  }, [
    trapped,
    container1,
    focusScope.paused
  ]);
  reactExports.useEffect(() => {
    if (container1) {
      $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
        container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        container1.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
            select: true
          });
          if (document.activeElement === previouslyFocusedElement)
            $d3863c46a17e8a28$var$focus(container1);
        }
      }
      return () => {
        container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          container1.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented)
            $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
              select: true
            });
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [
    container1,
    onMountAutoFocus,
    onUnmountAutoFocus,
    focusScope
  ]);
  const handleKeyDown = reactExports.useCallback((event) => {
    if (!loop && !trapped)
      return;
    if (focusScope.paused)
      return;
    const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
    const focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      const container = event.currentTarget;
      const [first2, last] = $d3863c46a17e8a28$var$getTabbableEdges(container);
      const hasTabbableElementsInside = first2 && last;
      if (!hasTabbableElementsInside) {
        if (focusedElement === container)
          event.preventDefault();
      } else {
        if (!event.shiftKey && focusedElement === last) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus(first2, {
              select: true
            });
        } else if (event.shiftKey && focusedElement === first2) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus(last, {
              select: true
            });
        }
      }
    }
  }, [
    loop,
    trapped,
    focusScope.paused
  ]);
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: -1
  }, scopeProps, {
    ref: composedRefs,
    onKeyDown: handleKeyDown
  }));
});
function $d3863c46a17e8a28$var$focusFirst(candidates, { select = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    $d3863c46a17e8a28$var$focus(candidate, {
      select
    });
    if (document.activeElement !== previouslyFocusedElement)
      return;
  }
}
function $d3863c46a17e8a28$var$getTabbableEdges(container) {
  const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container);
  const first2 = $d3863c46a17e8a28$var$findVisible(candidates, container);
  const last = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container);
  return [
    first2,
    last
  ];
}
function $d3863c46a17e8a28$var$getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node2) => {
      const isHiddenInput = node2.tagName === "INPUT" && node2.type === "hidden";
      if (node2.disabled || node2.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node2.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
function $d3863c46a17e8a28$var$findVisible(elements, container) {
  for (const element of elements) {
    if (!$d3863c46a17e8a28$var$isHidden(element, {
      upTo: container
    }))
      return element;
  }
}
function $d3863c46a17e8a28$var$isHidden(node2, { upTo }) {
  if (getComputedStyle(node2).visibility === "hidden")
    return true;
  while (node2) {
    if (upTo !== void 0 && node2 === upTo)
      return false;
    if (getComputedStyle(node2).display === "none")
      return true;
    node2 = node2.parentElement;
  }
  return false;
}
function $d3863c46a17e8a28$var$isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function $d3863c46a17e8a28$var$focus(element, { select = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: true
    });
    if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select)
      element.select();
  }
}
const $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
function $d3863c46a17e8a28$var$createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      if (focusScope !== activeFocusScope)
        activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
      stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _stack$;
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
      (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
    }
  };
}
function $d3863c46a17e8a28$var$arrayRemove(array, item) {
  const updatedArray = [
    ...array
  ];
  const index2 = updatedArray.indexOf(item);
  if (index2 !== -1)
    updatedArray.splice(index2, 1);
  return updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks(items) {
  return items.filter(
    (item) => item.tagName !== "A"
  );
}
function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
  return reactExports.useReducer((state, event) => {
    const nextState = machine[state][event];
    return nextState !== null && nextState !== void 0 ? nextState : state;
  }, initialState);
}
const $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
  const { present, children } = props;
  const presence = $921a889cee6df7e8$var$usePresence(present);
  const child = typeof children === "function" ? children({
    present: presence.isPresent
  }) : reactExports.Children.only(children);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent ? /* @__PURE__ */ reactExports.cloneElement(child, {
    ref
  }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
function $921a889cee6df7e8$var$usePresence(present) {
  const [node1, setNode2] = reactExports.useState();
  const stylesRef = reactExports.useRef({});
  const prevPresentRef = reactExports.useRef(present);
  const prevAnimationNameRef = reactExports.useRef("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  reactExports.useEffect(() => {
    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [
    state
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
      if (present)
        send("MOUNT");
      else if (currentAnimationName === "none" || (styles === null || styles === void 0 ? void 0 : styles.display) === "none")
        send("UNMOUNT");
      else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating)
          send("ANIMATION_OUT");
        else
          send("UNMOUNT");
      }
      prevPresentRef.current = present;
    }
  }, [
    present,
    send
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (node1) {
      const handleAnimationEnd = (event) => {
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(event.animationName);
        if (event.target === node1 && isCurrentAnimation)
          reactDomExports.flushSync(
            () => send("ANIMATION_END")
          );
      };
      const handleAnimationStart = (event) => {
        if (event.target === node1)
          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
      };
      node1.addEventListener("animationstart", handleAnimationStart);
      node1.addEventListener("animationcancel", handleAnimationEnd);
      node1.addEventListener("animationend", handleAnimationEnd);
      return () => {
        node1.removeEventListener("animationstart", handleAnimationStart);
        node1.removeEventListener("animationcancel", handleAnimationEnd);
        node1.removeEventListener("animationend", handleAnimationEnd);
      };
    } else
      send("ANIMATION_END");
  }, [
    node1,
    send
  ]);
  return {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(state),
    ref: reactExports.useCallback((node2) => {
      if (node2)
        stylesRef.current = getComputedStyle(node2);
      setNode2(node2);
    }, [])
  };
}
function $921a889cee6df7e8$var$getAnimationName(styles) {
  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || "none";
}
let $3db38b7d1fb3fe6a$var$count = 0;
function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
  reactExports.useEffect(() => {
    var _edgeGuards$, _edgeGuards$2;
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard());
    document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard());
    $3db38b7d1fb3fe6a$var$count++;
    return () => {
      if ($3db38b7d1fb3fe6a$var$count === 1)
        document.querySelectorAll("[data-radix-focus-guard]").forEach(
          (node2) => node2.remove()
        );
      $3db38b7d1fb3fe6a$var$count--;
    };
  }, []);
}
function $3db38b7d1fb3fe6a$var$createFocusGuard() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
  return element;
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t3) {
    for (var s4, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s4 = arguments[i2];
      for (var p2 in s4)
        if (Object.prototype.hasOwnProperty.call(s4, p2))
          t3[p2] = s4[p2];
    }
    return t3;
  };
  return __assign.apply(this, arguments);
};
function __rest(s4, e3) {
  var t3 = {};
  for (var p2 in s4)
    if (Object.prototype.hasOwnProperty.call(s4, p2) && e3.indexOf(p2) < 0)
      t3[p2] = s4[p2];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s4); i2 < p2.length; i2++) {
      if (e3.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p2[i2]))
        t3[p2[i2]] = s4[p2[i2]];
    }
  return t3;
}
function __spreadArray(to, from3, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from3.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from3)) {
        if (!ar)
          ar = Array.prototype.slice.call(from3, 0, i2);
        ar[i2] = from3[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from3));
}
typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
  var e3 = new Error(message);
  return e3.name = "SuppressedError", e3.error = error, e3.suppressed = suppressed, e3;
};
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}
function useCallbackRef(initialValue, callback) {
  var ref = reactExports.useState(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue2) {
  var callbackRef = useCallbackRef(defaultValue2 || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  reactExports.useLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}
function ItoI(a4) {
  return a4;
}
function innerCreateMedium(defaults2, middleware2) {
  if (middleware2 === void 0) {
    middleware2 = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults2;
    },
    useMedium: function(data) {
      var item = middleware2(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x3) {
          return x3 !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x3) {
          return cb(x3);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x3) {
          pendingQueue.push(x3);
          cycle();
        },
        filter: function(filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}
var SideCar$1 = function(_a) {
  var sideCar = _a.sideCar, rest = __rest(_a, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return reactExports.createElement(Target, __assign({}, rest));
};
SideCar$1.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar$1;
}
var effectCar = createSidecarMedium();
var nothing = function() {
  return;
};
var RemoveScroll = reactExports.forwardRef(function(props, parentRef) {
  var ref = reactExports.useRef(null);
  var _a = reactExports.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a[0], setCallbacks = _a[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    enabled && reactExports.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }),
    forwardProps ? reactExports.cloneElement(reactExports.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : reactExports.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
  );
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style2) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style2);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles, isDynamic) {
    reactExports.useEffect(function() {
      sheet.add(styles);
      return function() {
        sheet.remove();
      };
    }, [styles && isDynamic]);
  };
};
var styleSingleton = function() {
  var useStyle = styleHookSingleton();
  var Sheet = function(_a) {
    var styles = _a.styles, dynamic = _a.dynamic;
    useStyle(styles, dynamic);
    return null;
  };
  return Sheet;
};
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse$2 = function(x3) {
  return parseInt(x3 || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left2 = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top2 = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right2 = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse$2(left2), parse$2(top2), parse$2(right2)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};
var Style = styleSingleton();
var getStyles = function(_a, allowRelative, gapMode, important) {
  var left2 = _a.left, top2 = _a.top, right2 = _a.right, gap = _a.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left2, "px;\n    padding-top: ").concat(top2, "px;\n    padding-right: ").concat(right2, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var RemoveScrollBar = function(props) {
  var noRelative = props.noRelative, noImportant = props.noImportant, _a = props.gapMode, gapMode = _a === void 0 ? "margin" : _a;
  var gap = reactExports.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return reactExports.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    var options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var nonPassive = passiveSupported ? { passive: false } : false;
var alwaysContainsScroll = function(node2) {
  return node2.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node2, overflow) {
  var styles = window.getComputedStyle(node2);
  return (
    // not-not-scrollable
    styles[overflow] !== "hidden" && // contains scroll inside self
    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node2) && styles[overflow] === "visible")
  );
};
var elementCouldBeVScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowY");
};
var elementCouldBeHScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowX");
};
var locationCouldBeScrolled = function(axis, node2) {
  var current = node2;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable2 = elementCouldBeScrolled(axis, current);
    if (isScrollable2) {
      var _a = getScrollVariables(axis, current), s4 = _a[1], d4 = _a[2];
      if (s4 > d4) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables = function(_a) {
  var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a) {
  var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node2) {
  return axis === "v" ? elementCouldBeVScrolled(node2) : elementCouldBeHScrolled(node2);
};
var getScrollVariables = function(axis, node2) {
  return axis === "v" ? getVScrollVariables(node2) : getHScrollVariables(node2);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a = getScrollVariables(axis, target), position2 = _a[0], scroll_1 = _a[1], capacity = _a[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position2;
    if (position2 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position2;
      }
    }
    target = target.parentNode;
  } while (
    // portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target)
  );
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x3, y4) {
  return x3[0] === y4[0] && x3[1] === y4[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = reactExports.useRef([]);
  var touchStartRef = reactExports.useRef([0, 0]);
  var activeAxis = reactExports.useRef();
  var id = reactExports.useState(idCounter++)[0];
  var Style2 = reactExports.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = reactExports.useRef(props);
  reactExports.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  reactExports.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = reactExports.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = reactExports.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e3) {
      return e3.name === event.type && e3.target === event.target && deltaCompare(e3.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node2) {
        return node2.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = reactExports.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e3) {
        return e3 !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = reactExports.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = reactExports.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = reactExports.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  reactExports.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    inert ? reactExports.createElement(Style2, { styles: generateStyle(id) }) : null,
    removeScrollBar ? reactExports.createElement(RemoveScrollBar, { gapMode: "margin" }) : null
  );
}
const SideCar = exportSidecar(effectCar, RemoveScrollSideCar);
var ReactRemoveScroll = reactExports.forwardRef(function(props, ref) {
  return reactExports.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: SideCar }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
const $am6gm$RemoveScroll = ReactRemoveScroll;
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node2) {
  return node2 && (node2.host || unwrapHost(node2.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x3) {
    return Boolean(x3);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode2, markerName, controlAttribute) {
  var targets = correctTargets(parentNode2, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node2) {
      if (elementsToKeep.has(node2)) {
        deep(node2);
      } else {
        var attr = node2.getAttribute(controlAttribute);
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node2) || 0) + 1;
        var markerValue = (markerCounter.get(node2) || 0) + 1;
        counterMap.set(node2, counterValue);
        markerCounter.set(node2, markerValue);
        hiddenNodes.push(node2);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node2, true);
        }
        if (markerValue === 1) {
          node2.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node2.setAttribute(controlAttribute, "true");
        }
      }
    });
  };
  deep(parentNode2);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node2) {
      var counterValue = counterMap.get(node2) - 1;
      var markerValue = markerCounter.get(node2) - 1;
      counterMap.set(node2, counterValue);
      markerCounter.set(node2, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node2)) {
          node2.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node2);
      }
      if (!markerValue) {
        node2.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode2, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode2 || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};
const $5d3850c4d0b4e6c7$var$DIALOG_NAME = "Dialog";
const [$5d3850c4d0b4e6c7$var$createDialogContext, $5d3850c4d0b4e6c7$export$cc702773b8ea3e41] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($5d3850c4d0b4e6c7$var$DIALOG_NAME);
const [$5d3850c4d0b4e6c7$var$DialogProvider, $5d3850c4d0b4e6c7$var$useDialogContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$DIALOG_NAME);
const $5d3850c4d0b4e6c7$export$3ddf2d174ce01153 = (props) => {
  const { __scopeDialog, children, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
  const triggerRef = reactExports.useRef(null);
  const contentRef = reactExports.useRef(null);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ reactExports.createElement($5d3850c4d0b4e6c7$var$DialogProvider, {
    scope: __scopeDialog,
    triggerRef,
    contentRef,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    titleId: $1746a345f3d73bb7$export$f680877a34711e37(),
    descriptionId: $1746a345f3d73bb7$export$f680877a34711e37(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: reactExports.useCallback(
      () => setOpen(
        (prevOpen) => !prevOpen
      ),
      [
        setOpen
      ]
    ),
    modal
  }, children);
};
const $5d3850c4d0b4e6c7$var$PORTAL_NAME = "DialogPortal";
const [$5d3850c4d0b4e6c7$var$PortalProvider, $5d3850c4d0b4e6c7$var$usePortalContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, {
  forceMount: void 0
});
const $5d3850c4d0b4e6c7$var$OVERLAY_NAME = "DialogOverlay";
const $5d3850c4d0b4e6c7$export$bd1d06c79be19e17 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...overlayProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
  return context.modal ? /* @__PURE__ */ reactExports.createElement($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ reactExports.createElement($5d3850c4d0b4e6c7$var$DialogOverlayImpl, _extends({}, overlayProps, {
    ref: forwardedRef
  }))) : null;
});
const $5d3850c4d0b4e6c7$var$DialogOverlayImpl = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...overlayProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, __scopeDialog);
  return (
    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
    // ie. when `Overlay` and `Content` are siblings
    /* @__PURE__ */ reactExports.createElement($am6gm$RemoveScroll, {
      as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
      allowPinchZoom: true,
      shards: [
        context.contentRef
      ]
    }, /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
    }, overlayProps, {
      ref: forwardedRef,
      style: {
        pointerEvents: "auto",
        ...overlayProps.style
      }
    })))
  );
});
const $5d3850c4d0b4e6c7$var$CONTENT_NAME = "DialogContent";
const $5d3850c4d0b4e6c7$export$b6d9565de1e068cf = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  return /* @__PURE__ */ reactExports.createElement($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, context.modal ? /* @__PURE__ */ reactExports.createElement($5d3850c4d0b4e6c7$var$DialogContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ reactExports.createElement($5d3850c4d0b4e6c7$var$DialogContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })));
});
const $5d3850c4d0b4e6c7$var$DialogContentModal = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const contentRef = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.contentRef, contentRef);
  reactExports.useEffect(() => {
    const content = contentRef.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ reactExports.createElement($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      event.preventDefault();
      (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
    }),
    onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      if (isRightClick)
        event.preventDefault();
    }),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onFocusOutside,
      (event) => event.preventDefault()
    )
  }));
});
const $5d3850c4d0b4e6c7$var$DialogContentNonModal = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const hasInteractedOutsideRef = reactExports.useRef(false);
  const hasPointerDownOutsideRef = reactExports.useRef(false);
  return /* @__PURE__ */ reactExports.createElement($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented) {
        var _context$triggerRef$c2;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts, _context$triggerRef$c3;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown")
          hasPointerDownOutsideRef.current = true;
      }
      const target = event.target;
      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
      if (targetIsTrigger)
        event.preventDefault();
      if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
        event.preventDefault();
    }
  }));
});
const $5d3850c4d0b4e6c7$var$DialogContentImpl = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, __scopeDialog);
  const contentRef = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: true,
    loop: true,
    trapped: trapFocus,
    onMountAutoFocus: onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ reactExports.createElement($5cb92bef7577960e$export$177fb62ff3ec1f22, _extends({
    role: "dialog",
    id: context.contentId,
    "aria-describedby": context.descriptionId,
    "aria-labelledby": context.titleId,
    "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
  }, contentProps, {
    ref: composedRefs,
    onDismiss: () => context.onOpenChange(false)
  }))), false);
});
const $5d3850c4d0b4e6c7$var$TITLE_NAME = "DialogTitle";
const $5d3850c4d0b4e6c7$export$16f7638e4a34b909 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...titleProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TITLE_NAME, __scopeDialog);
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.h2, _extends({
    id: context.titleId
  }, titleProps, {
    ref: forwardedRef
  }));
});
function $5d3850c4d0b4e6c7$var$getState(open) {
  return open ? "open" : "closed";
}
const $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9 = $5d3850c4d0b4e6c7$export$3ddf2d174ce01153;
const $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff = $5d3850c4d0b4e6c7$export$bd1d06c79be19e17;
const $5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2 = $5d3850c4d0b4e6c7$export$b6d9565de1e068cf;
const $5d3850c4d0b4e6c7$export$f99233281efd08a0 = $5d3850c4d0b4e6c7$export$16f7638e4a34b909;
function prevent(callback) {
  if (!callback) {
    return;
  }
  return (e3) => {
    e3.preventDefault();
    callback(e3);
  };
}
function preventPropagation(callback) {
  if (!callback) {
    return;
  }
  return (e3) => {
    e3.preventDefault();
    e3.stopPropagation();
    callback(e3);
  };
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$z() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function Modal({
  children,
  title,
  visible,
  onVisibilityChange
}) {
  return /* @__PURE__ */ jsxs($5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9, {
    open: visible,
    onOpenChange: onVisibilityChange,
    children: [/* @__PURE__ */ jsx(ModalOverlay, {}), /* @__PURE__ */ jsxs(ModalContent, {
      children: [/* @__PURE__ */ jsx(ModalTitle, {
        children: title
      }), /* @__PURE__ */ jsx("div", {
        children
      }), /* @__PURE__ */ jsx(ModalClose, {
        onClick: prevent(() => onVisibilityChange(false)),
        children: /* @__PURE__ */ jsx(IconCross, {
          size: 16
        })
      })]
    })]
  });
}
const FadeIn = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
const ContentIn = keyframes({
  from: {
    opacity: 0,
    transform: "translateY(-48%) scale(.96)"
  },
  to: {
    opacity: 1,
    transform: "translateY(-50%) scale(1)"
  }
});
const ModalOverlay = /* @__PURE__ */ createStyled($5d3850c4d0b4e6c7$export$c6fdb837b070b4ff, process.env.NODE_ENV === "production" ? {
  target: "e19h2n423"
} : {
  target: "e19h2n423",
  label: "ModalOverlay"
})({
  position: "fixed",
  inset: 0,
  zIndex: 50,
  overflow: "auto",
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  animation: `${FadeIn} 300ms cubic-bezier(0.16, 1, 0.3, 1)`
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdEcUIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9Nb2RhbC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ29udGVudCwgT3ZlcmxheSwgUm9vdCwgVGl0bGUgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtZGlhbG9nJ1xuXG5pbXBvcnQgeyBJY29uQ3Jvc3MgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IEJ1dHRvbkljb24gfSBmcm9tICcuL0J1dHRvbkljb24nXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuXG50eXBlIE1vZGFsUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbiAgdmlzaWJsZTogYm9vbGVhblxuICBvblZpc2liaWxpdHlDaGFuZ2U6ICh2aXNpYmlsaXR5OiBib29sZWFuKSA9PiB2b2lkXG4gIHRpdGxlOiBSZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vZGFsKHtcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICB2aXNpYmxlLFxuICBvblZpc2liaWxpdHlDaGFuZ2UsXG59OiBNb2RhbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFJvb3Qgb3Blbj17dmlzaWJsZX0gb25PcGVuQ2hhbmdlPXtvblZpc2liaWxpdHlDaGFuZ2V9PlxuICAgICAgPE1vZGFsT3ZlcmxheSAvPlxuICAgICAgPE1vZGFsQ29udGVudD5cbiAgICAgICAgPE1vZGFsVGl0bGU+e3RpdGxlfTwvTW9kYWxUaXRsZT5cbiAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgIDxNb2RhbENsb3NlIG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25WaXNpYmlsaXR5Q2hhbmdlKGZhbHNlKSl9PlxuICAgICAgICAgIDxJY29uQ3Jvc3Mgc2l6ZT17MTZ9IC8+XG4gICAgICAgIDwvTW9kYWxDbG9zZT5cbiAgICAgIDwvTW9kYWxDb250ZW50PlxuICAgIDwvUm9vdD5cbiAgKVxufVxuXG5jb25zdCBGYWRlSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufSlcblxuY29uc3QgQ29udGVudEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNDglKSBzY2FsZSguOTYpJyxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMSknLFxuICB9LFxufSlcblxuY29uc3QgTW9kYWxPdmVybGF5ID0gc3R5bGVkKE92ZXJsYXkpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIGluc2V0OiAwLFxuICB6SW5kZXg6IDUwLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICBhbmltYXRpb246IGAke0ZhZGVJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxDb250ZW50ID0gc3R5bGVkKENvbnRlbnQpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHRvcDogJzUwJScsXG4gIGxlZnQ6ICcwJyxcbiAgcmlnaHQ6ICcwJyxcbiAgekluZGV4OiA1MSxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICB3aWR0aDogJ2NhbGMoMTAwJSAtIDJyZW0pJyxcbiAgbWF4V2lkdGg6ICcxMjkwcHgnLFxuICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIHBhZGRpbmc6ICcxLjVyZW0gMnJlbScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknLFxuICBhbmltYXRpb246IGAke0NvbnRlbnRJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxUaXRsZSA9IHN0eWxlZChUaXRsZSkoe1xuICBmb250U2l6ZTogJzEuNXJlbScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxufSlcblxuY29uc3QgTW9kYWxDbG9zZSA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcxLjJyZW0nLFxuICByaWdodDogJzEuNXJlbScsXG59KVxuIl19 */");
const ModalContent = /* @__PURE__ */ createStyled($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2, process.env.NODE_ENV === "production" ? {
  target: "e19h2n422"
} : {
  target: "e19h2n422",
  label: "ModalContent"
})({
  position: "fixed",
  top: "50%",
  left: "0",
  right: "0",
  zIndex: 51,
  marginLeft: "auto",
  marginRight: "auto",
  width: "calc(100% - 2rem)",
  maxWidth: "1290px",
  borderRadius: "8px",
  backgroundColor: "var(--ve-background)",
  padding: "1.5rem 2rem",
  transform: "translateY(-50%)",
  animation: `${ContentIn} 300ms cubic-bezier(0.16, 1, 0.3, 1)`
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlFcUIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9Nb2RhbC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ29udGVudCwgT3ZlcmxheSwgUm9vdCwgVGl0bGUgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtZGlhbG9nJ1xuXG5pbXBvcnQgeyBJY29uQ3Jvc3MgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IEJ1dHRvbkljb24gfSBmcm9tICcuL0J1dHRvbkljb24nXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuXG50eXBlIE1vZGFsUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbiAgdmlzaWJsZTogYm9vbGVhblxuICBvblZpc2liaWxpdHlDaGFuZ2U6ICh2aXNpYmlsaXR5OiBib29sZWFuKSA9PiB2b2lkXG4gIHRpdGxlOiBSZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vZGFsKHtcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICB2aXNpYmxlLFxuICBvblZpc2liaWxpdHlDaGFuZ2UsXG59OiBNb2RhbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFJvb3Qgb3Blbj17dmlzaWJsZX0gb25PcGVuQ2hhbmdlPXtvblZpc2liaWxpdHlDaGFuZ2V9PlxuICAgICAgPE1vZGFsT3ZlcmxheSAvPlxuICAgICAgPE1vZGFsQ29udGVudD5cbiAgICAgICAgPE1vZGFsVGl0bGU+e3RpdGxlfTwvTW9kYWxUaXRsZT5cbiAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgIDxNb2RhbENsb3NlIG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25WaXNpYmlsaXR5Q2hhbmdlKGZhbHNlKSl9PlxuICAgICAgICAgIDxJY29uQ3Jvc3Mgc2l6ZT17MTZ9IC8+XG4gICAgICAgIDwvTW9kYWxDbG9zZT5cbiAgICAgIDwvTW9kYWxDb250ZW50PlxuICAgIDwvUm9vdD5cbiAgKVxufVxuXG5jb25zdCBGYWRlSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufSlcblxuY29uc3QgQ29udGVudEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNDglKSBzY2FsZSguOTYpJyxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMSknLFxuICB9LFxufSlcblxuY29uc3QgTW9kYWxPdmVybGF5ID0gc3R5bGVkKE92ZXJsYXkpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIGluc2V0OiAwLFxuICB6SW5kZXg6IDUwLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICBhbmltYXRpb246IGAke0ZhZGVJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxDb250ZW50ID0gc3R5bGVkKENvbnRlbnQpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHRvcDogJzUwJScsXG4gIGxlZnQ6ICcwJyxcbiAgcmlnaHQ6ICcwJyxcbiAgekluZGV4OiA1MSxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICB3aWR0aDogJ2NhbGMoMTAwJSAtIDJyZW0pJyxcbiAgbWF4V2lkdGg6ICcxMjkwcHgnLFxuICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIHBhZGRpbmc6ICcxLjVyZW0gMnJlbScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknLFxuICBhbmltYXRpb246IGAke0NvbnRlbnRJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxUaXRsZSA9IHN0eWxlZChUaXRsZSkoe1xuICBmb250U2l6ZTogJzEuNXJlbScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxufSlcblxuY29uc3QgTW9kYWxDbG9zZSA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcxLjJyZW0nLFxuICByaWdodDogJzEuNXJlbScsXG59KVxuIl19 */");
const ModalTitle = /* @__PURE__ */ createStyled($5d3850c4d0b4e6c7$export$f99233281efd08a0, process.env.NODE_ENV === "production" ? {
  target: "e19h2n421"
} : {
  target: "e19h2n421",
  label: "ModalTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "qrr264",
  styles: "font-size:1.5rem;font-weight:500;margin:0;padding:0"
} : {
  name: "qrr264",
  styles: "font-size:1.5rem;font-weight:500;margin:0;padding:0",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGbUIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9Nb2RhbC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ29udGVudCwgT3ZlcmxheSwgUm9vdCwgVGl0bGUgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtZGlhbG9nJ1xuXG5pbXBvcnQgeyBJY29uQ3Jvc3MgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IEJ1dHRvbkljb24gfSBmcm9tICcuL0J1dHRvbkljb24nXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuXG50eXBlIE1vZGFsUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbiAgdmlzaWJsZTogYm9vbGVhblxuICBvblZpc2liaWxpdHlDaGFuZ2U6ICh2aXNpYmlsaXR5OiBib29sZWFuKSA9PiB2b2lkXG4gIHRpdGxlOiBSZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vZGFsKHtcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICB2aXNpYmxlLFxuICBvblZpc2liaWxpdHlDaGFuZ2UsXG59OiBNb2RhbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFJvb3Qgb3Blbj17dmlzaWJsZX0gb25PcGVuQ2hhbmdlPXtvblZpc2liaWxpdHlDaGFuZ2V9PlxuICAgICAgPE1vZGFsT3ZlcmxheSAvPlxuICAgICAgPE1vZGFsQ29udGVudD5cbiAgICAgICAgPE1vZGFsVGl0bGU+e3RpdGxlfTwvTW9kYWxUaXRsZT5cbiAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgIDxNb2RhbENsb3NlIG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25WaXNpYmlsaXR5Q2hhbmdlKGZhbHNlKSl9PlxuICAgICAgICAgIDxJY29uQ3Jvc3Mgc2l6ZT17MTZ9IC8+XG4gICAgICAgIDwvTW9kYWxDbG9zZT5cbiAgICAgIDwvTW9kYWxDb250ZW50PlxuICAgIDwvUm9vdD5cbiAgKVxufVxuXG5jb25zdCBGYWRlSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufSlcblxuY29uc3QgQ29udGVudEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNDglKSBzY2FsZSguOTYpJyxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMSknLFxuICB9LFxufSlcblxuY29uc3QgTW9kYWxPdmVybGF5ID0gc3R5bGVkKE92ZXJsYXkpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIGluc2V0OiAwLFxuICB6SW5kZXg6IDUwLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICBhbmltYXRpb246IGAke0ZhZGVJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxDb250ZW50ID0gc3R5bGVkKENvbnRlbnQpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHRvcDogJzUwJScsXG4gIGxlZnQ6ICcwJyxcbiAgcmlnaHQ6ICcwJyxcbiAgekluZGV4OiA1MSxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICB3aWR0aDogJ2NhbGMoMTAwJSAtIDJyZW0pJyxcbiAgbWF4V2lkdGg6ICcxMjkwcHgnLFxuICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIHBhZGRpbmc6ICcxLjVyZW0gMnJlbScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknLFxuICBhbmltYXRpb246IGAke0NvbnRlbnRJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxUaXRsZSA9IHN0eWxlZChUaXRsZSkoe1xuICBmb250U2l6ZTogJzEuNXJlbScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxufSlcblxuY29uc3QgTW9kYWxDbG9zZSA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcxLjJyZW0nLFxuICByaWdodDogJzEuNXJlbScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$z
});
const ModalClose = /* @__PURE__ */ createStyled(ButtonIcon, process.env.NODE_ENV === "production" ? {
  target: "e19h2n420"
} : {
  target: "e19h2n420",
  label: "ModalClose"
})(process.env.NODE_ENV === "production" ? {
  name: "yqq9j2",
  styles: "position:absolute;top:1.2rem;right:1.5rem"
} : {
  name: "yqq9j2",
  styles: "position:absolute;top:1.2rem;right:1.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlGbUIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9Nb2RhbC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ29udGVudCwgT3ZlcmxheSwgUm9vdCwgVGl0bGUgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtZGlhbG9nJ1xuXG5pbXBvcnQgeyBJY29uQ3Jvc3MgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IEJ1dHRvbkljb24gfSBmcm9tICcuL0J1dHRvbkljb24nXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuXG50eXBlIE1vZGFsUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbiAgdmlzaWJsZTogYm9vbGVhblxuICBvblZpc2liaWxpdHlDaGFuZ2U6ICh2aXNpYmlsaXR5OiBib29sZWFuKSA9PiB2b2lkXG4gIHRpdGxlOiBSZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vZGFsKHtcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICB2aXNpYmxlLFxuICBvblZpc2liaWxpdHlDaGFuZ2UsXG59OiBNb2RhbFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFJvb3Qgb3Blbj17dmlzaWJsZX0gb25PcGVuQ2hhbmdlPXtvblZpc2liaWxpdHlDaGFuZ2V9PlxuICAgICAgPE1vZGFsT3ZlcmxheSAvPlxuICAgICAgPE1vZGFsQ29udGVudD5cbiAgICAgICAgPE1vZGFsVGl0bGU+e3RpdGxlfTwvTW9kYWxUaXRsZT5cbiAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgIDxNb2RhbENsb3NlIG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25WaXNpYmlsaXR5Q2hhbmdlKGZhbHNlKSl9PlxuICAgICAgICAgIDxJY29uQ3Jvc3Mgc2l6ZT17MTZ9IC8+XG4gICAgICAgIDwvTW9kYWxDbG9zZT5cbiAgICAgIDwvTW9kYWxDb250ZW50PlxuICAgIDwvUm9vdD5cbiAgKVxufVxuXG5jb25zdCBGYWRlSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufSlcblxuY29uc3QgQ29udGVudEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNDglKSBzY2FsZSguOTYpJyxcbiAgfSxcbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMSknLFxuICB9LFxufSlcblxuY29uc3QgTW9kYWxPdmVybGF5ID0gc3R5bGVkKE92ZXJsYXkpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIGluc2V0OiAwLFxuICB6SW5kZXg6IDUwLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICBhbmltYXRpb246IGAke0ZhZGVJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxDb250ZW50ID0gc3R5bGVkKENvbnRlbnQpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHRvcDogJzUwJScsXG4gIGxlZnQ6ICcwJyxcbiAgcmlnaHQ6ICcwJyxcbiAgekluZGV4OiA1MSxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICB3aWR0aDogJ2NhbGMoMTAwJSAtIDJyZW0pJyxcbiAgbWF4V2lkdGg6ICcxMjkwcHgnLFxuICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIHBhZGRpbmc6ICcxLjVyZW0gMnJlbScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknLFxuICBhbmltYXRpb246IGAke0NvbnRlbnRJbn0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSlgLFxufSlcblxuY29uc3QgTW9kYWxUaXRsZSA9IHN0eWxlZChUaXRsZSkoe1xuICBmb250U2l6ZTogJzEuNXJlbScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxufSlcblxuY29uc3QgTW9kYWxDbG9zZSA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcxLjJyZW0nLFxuICByaWdodDogJzEuNXJlbScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$z
});
function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
  const PROVIDER_NAME = name + "CollectionProvider";
  const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
    collectionRef: {
      current: null
    },
    itemMap: /* @__PURE__ */ new Map()
  });
  const CollectionProvider = (props) => {
    const { scope, children } = props;
    const ref = e$1.useRef(null);
    const itemMap = e$1.useRef(/* @__PURE__ */ new Map()).current;
    return /* @__PURE__ */ e$1.createElement(CollectionProviderImpl, {
      scope,
      itemMap,
      collectionRef: ref
    }, children);
  };
  const COLLECTION_SLOT_NAME = name + "CollectionSlot";
  const CollectionSlot = /* @__PURE__ */ e$1.forwardRef((props, forwardedRef) => {
    const { scope, children } = props;
    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
    return /* @__PURE__ */ e$1.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
      ref: composedRefs
    }, children);
  });
  const ITEM_SLOT_NAME = name + "CollectionItemSlot";
  const ITEM_DATA_ATTR = "data-radix-collection-item";
  const CollectionItemSlot = /* @__PURE__ */ e$1.forwardRef((props, forwardedRef) => {
    const { scope, children, ...itemData } = props;
    const ref = e$1.useRef(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const context = useCollectionContext(ITEM_SLOT_NAME, scope);
    e$1.useEffect(() => {
      context.itemMap.set(ref, {
        ref,
        ...itemData
      });
      return () => void context.itemMap.delete(ref);
    });
    return /* @__PURE__ */ e$1.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
      [ITEM_DATA_ATTR]: "",
      ref: composedRefs
    }, children);
  });
  function useCollection(scope) {
    const context = useCollectionContext(name + "CollectionConsumer", scope);
    const getItems = e$1.useCallback(() => {
      const collectionNode = context.collectionRef.current;
      if (!collectionNode)
        return [];
      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      const items = Array.from(context.itemMap.values());
      const orderedItems = items.sort(
        (a4, b3) => orderedNodes.indexOf(a4.ref.current) - orderedNodes.indexOf(b3.ref.current)
      );
      return orderedItems;
    }, [
      context.collectionRef,
      context.itemMap
    ]);
    return getItems;
  }
  return [
    {
      Provider: CollectionProvider,
      Slot: CollectionSlot,
      ItemSlot: CollectionItemSlot
    },
    useCollection,
    createCollectionScope
  ];
}
const $f631663db3294ace$var$DirectionContext = /* @__PURE__ */ reactExports.createContext(void 0);
function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
  const globalDir = reactExports.useContext($f631663db3294ace$var$DirectionContext);
  return localDir || globalDir || "ltr";
}
const $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
const $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
const $d7bdfb9eb0fdf311$var$GROUP_NAME = "RovingFocusGroup";
const [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME);
const [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
  $d7bdfb9eb0fdf311$var$createCollectionScope
]);
const [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
const $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$var$Collection.Provider, {
    scope: props.__scopeRovingFocusGroup
  }, /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$var$Collection.Slot, {
    scope: props.__scopeRovingFocusGroup
  }, /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
    ref: forwardedRef
  }))));
});
const $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, ...groupProps } = props;
  const ref = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId,
    onChange: onCurrentTabStopIdChange
  });
  const [isTabbingBackOut, setIsTabbingBackOut] = reactExports.useState(false);
  const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
  const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
  const isClickFocusRef = reactExports.useRef(false);
  const [focusableItemsCount, setFocusableItemsCount] = reactExports.useState(0);
  reactExports.useEffect(() => {
    const node2 = ref.current;
    if (node2) {
      node2.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
      return () => node2.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
    }
  }, [
    handleEntryFocus
  ]);
  return /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
    scope: __scopeRovingFocusGroup,
    orientation,
    dir: direction,
    loop,
    currentTabStopId,
    onItemFocus: reactExports.useCallback(
      (tabStopId) => setCurrentTabStopId(tabStopId),
      [
        setCurrentTabStopId
      ]
    ),
    onItemShiftTab: reactExports.useCallback(
      () => setIsTabbingBackOut(true),
      []
    ),
    onFocusableItemAdd: reactExports.useCallback(
      () => setFocusableItemsCount(
        (prevCount) => prevCount + 1
      ),
      []
    ),
    onFocusableItemRemove: reactExports.useCallback(
      () => setFocusableItemsCount(
        (prevCount) => prevCount - 1
      ),
      []
    )
  }, /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
    "data-orientation": orientation
  }, groupProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...props.style
    },
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, () => {
      isClickFocusRef.current = true;
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, (event) => {
      const isKeyboardFocus = !isClickFocusRef.current;
      if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
        const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
        event.currentTarget.dispatchEvent(entryFocusEvent);
        if (!entryFocusEvent.defaultPrevented) {
          const items = getItems().filter(
            (item) => item.focusable
          );
          const activeItem = items.find(
            (item) => item.active
          );
          const currentItem = items.find(
            (item) => item.id === currentTabStopId
          );
          const candidateItems = [
            activeItem,
            currentItem,
            ...items
          ].filter(Boolean);
          const candidateNodes = candidateItems.map(
            (item) => item.ref.current
          );
          $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
        }
      }
      isClickFocusRef.current = false;
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onBlur,
      () => setIsTabbingBackOut(false)
    )
  })));
});
const $d7bdfb9eb0fdf311$var$ITEM_NAME = "RovingFocusGroupItem";
const $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeRovingFocusGroup, focusable = true, active = false, tabStopId, ...itemProps } = props;
  const autoId = $1746a345f3d73bb7$export$f680877a34711e37();
  const id = tabStopId || autoId;
  const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
  const isCurrentTabStop = context.currentTabStopId === id;
  const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
  const { onFocusableItemAdd, onFocusableItemRemove } = context;
  reactExports.useEffect(() => {
    if (focusable) {
      onFocusableItemAdd();
      return () => onFocusableItemRemove();
    }
  }, [
    focusable,
    onFocusableItemAdd,
    onFocusableItemRemove
  ]);
  return /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
    scope: __scopeRovingFocusGroup,
    id,
    focusable,
    active
  }, /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    tabIndex: isCurrentTabStop ? 0 : -1,
    "data-orientation": context.orientation
  }, itemProps, {
    ref: forwardedRef,
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
      if (!focusable)
        event.preventDefault();
      else
        context.onItemFocus(id);
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onFocus,
      () => context.onItemFocus(id)
    ),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (event.key === "Tab" && event.shiftKey) {
        context.onItemShiftTab();
        return;
      }
      if (event.target !== event.currentTarget)
        return;
      const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
      if (focusIntent !== void 0) {
        event.preventDefault();
        const items = getItems().filter(
          (item) => item.focusable
        );
        let candidateNodes = items.map(
          (item) => item.ref.current
        );
        if (focusIntent === "last")
          candidateNodes.reverse();
        else if (focusIntent === "prev" || focusIntent === "next") {
          if (focusIntent === "prev")
            candidateNodes.reverse();
          const currentIndex = candidateNodes.indexOf(event.currentTarget);
          candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
        }
        setTimeout(
          () => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes)
        );
      }
    })
  })));
});
const $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
  if (dir !== "rtl")
    return key;
  return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
  const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
  if (orientation === "vertical" && [
    "ArrowLeft",
    "ArrowRight"
  ].includes(key))
    return void 0;
  if (orientation === "horizontal" && [
    "ArrowUp",
    "ArrowDown"
  ].includes(key))
    return void 0;
  return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
}
function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {
  return array.map(
    (_2, index2) => array[(startIndex + index2) % array.length]
  );
}
const $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
const $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;
const $69cb30bb0017df05$var$TABS_NAME = "Tabs";
const [$69cb30bb0017df05$var$createTabsContext, $69cb30bb0017df05$export$355f5bd209d7b13a] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($69cb30bb0017df05$var$TABS_NAME, [
  $d7bdfb9eb0fdf311$export$c7109489551a4f4
]);
const $69cb30bb0017df05$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
const [$69cb30bb0017df05$var$TabsProvider, $69cb30bb0017df05$var$useTabsContext] = $69cb30bb0017df05$var$createTabsContext($69cb30bb0017df05$var$TABS_NAME);
const $69cb30bb0017df05$export$b2539bed5023c21c = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeTabs, value: valueProp, onValueChange, defaultValue: defaultValue2, orientation = "horizontal", dir, activationMode = "automatic", ...tabsProps } = props;
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: valueProp,
    onChange: onValueChange,
    defaultProp: defaultValue2
  });
  return /* @__PURE__ */ reactExports.createElement($69cb30bb0017df05$var$TabsProvider, {
    scope: __scopeTabs,
    baseId: $1746a345f3d73bb7$export$f680877a34711e37(),
    value,
    onValueChange: setValue,
    orientation,
    dir: direction,
    activationMode
  }, /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    dir: direction,
    "data-orientation": orientation
  }, tabsProps, {
    ref: forwardedRef
  })));
});
const $69cb30bb0017df05$var$TAB_LIST_NAME = "TabsList";
const $69cb30bb0017df05$export$9712d22edc0d78c1 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeTabs, loop = true, ...listProps } = props;
  const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TAB_LIST_NAME, __scopeTabs);
  const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);
  return /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
    asChild: true
  }, rovingFocusGroupScope, {
    orientation: context.orientation,
    dir: context.dir,
    loop
  }), /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    role: "tablist",
    "aria-orientation": context.orientation
  }, listProps, {
    ref: forwardedRef
  })));
});
const $69cb30bb0017df05$var$TRIGGER_NAME = "TabsTrigger";
const $69cb30bb0017df05$export$8114b9fdfdf9f3ba = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
  const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TRIGGER_NAME, __scopeTabs);
  const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);
  const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);
  const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);
  const isSelected = value === context.value;
  return /* @__PURE__ */ reactExports.createElement($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
    asChild: true
  }, rovingFocusGroupScope, {
    focusable: !disabled,
    active: isSelected
  }), /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button",
    role: "tab",
    "aria-selected": isSelected,
    "aria-controls": contentId,
    "data-state": isSelected ? "active" : "inactive",
    "data-disabled": disabled ? "" : void 0,
    disabled,
    id: triggerId
  }, triggerProps, {
    ref: forwardedRef,
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
      if (!disabled && event.button === 0 && event.ctrlKey === false)
        context.onValueChange(value);
      else
        event.preventDefault();
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if ([
        " ",
        "Enter"
      ].includes(event.key))
        context.onValueChange(value);
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => {
      const isAutomaticActivation = context.activationMode !== "manual";
      if (!isSelected && !disabled && isAutomaticActivation)
        context.onValueChange(value);
    })
  })));
});
const $69cb30bb0017df05$var$CONTENT_NAME = "TabsContent";
const $69cb30bb0017df05$export$bd905d70e8fd2ebb = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
  const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$CONTENT_NAME, __scopeTabs);
  const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);
  const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);
  const isSelected = value === context.value;
  const isMountAnimationPreventedRef = reactExports.useRef(isSelected);
  reactExports.useEffect(() => {
    const rAF = requestAnimationFrame(
      () => isMountAnimationPreventedRef.current = false
    );
    return () => cancelAnimationFrame(rAF);
  }, []);
  return /* @__PURE__ */ reactExports.createElement(
    $921a889cee6df7e8$export$99c2b779aa4e8b8b,
    {
      present: forceMount || isSelected
    },
    ({ present }) => /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-state": isSelected ? "active" : "inactive",
      "data-orientation": context.orientation,
      role: "tabpanel",
      "aria-labelledby": triggerId,
      hidden: !present,
      id: contentId,
      tabIndex: 0
    }, contentProps, {
      ref: forwardedRef,
      style: {
        ...props.style,
        animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
      }
    }), present && children)
  );
});
function $69cb30bb0017df05$var$makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function $69cb30bb0017df05$var$makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$y() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const TabsList = /* @__PURE__ */ createStyled($69cb30bb0017df05$export$9712d22edc0d78c1, process.env.NODE_ENV === "production" ? {
  target: "e1ghzgdg1"
} : {
  target: "e1ghzgdg1",
  label: "TabsList"
})(process.env.NODE_ENV === "production" ? {
  name: "2whhw8",
  styles: "display:flex;gap:.5rem;margin-bottom:1em"
} : {
  name: "2whhw8",
  styles: "display:flex;gap:.5rem;margin-bottom:1em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvVGFicy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JpQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL1RhYnMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQge1xuICBUYWJzIGFzIFJhZGl4VGFicyxcbiAgVGFic0NvbnRlbnQsXG4gIFRhYnNMaXN0IGFzIFJhZGl4VGFic0xpc3QsXG4gIFRhYnNUcmlnZ2VyLFxufSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtdGFicydcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBTdHlsZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aS9TdHlsZXMnXG5cbnR5cGUgVGFic1Byb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlXG59XG50eXBlIFRhYlByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlXG4gIHRpdGxlOiBzdHJpbmdcbn1cblxuY29uc3QgVGFic0xpc3QgPSBzdHlsZWQoUmFkaXhUYWJzTGlzdCkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGdhcDogJy41cmVtJyxcbiAgbWFyZ2luQm90dG9tOiAnMWVtJyxcbn0pXG5cbmNvbnN0IFRhYkJ1dHRvbiA9IHN0eWxlZChUYWJzVHJpZ2dlcikoe1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1ob3ZlciknLFxuICBib3JkZXJSYWRpdXM6IDU2LFxuICBwYWRkaW5nOiAnLjZyZW0gMXJlbScsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBmb250V2VpZ2h0OiA1MDAsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB0cmFuc2l0aW9uOiAnY29sb3IgLjNzLCBiYWNrZ3JvdW5kLWNvbG9yIC4zcycsXG59KVxuXG5jb25zdCBUYWJCdXR0b25TZWxlY3RlZCA9IHtcbiAgY29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnktbGlnaHQpJyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRhYnMoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogVGFic1Byb3BzKSB7XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KFxuICAgIGNoaWxkcmVuXG4gICkgYXMgUmVhY3RFbGVtZW50PFRhYlByb3BzPltdXG4gIGNvbnN0IFtjdXJyZW50VGFiLCBzZXRDdXJyZW50VGFiXSA9IHVzZVN0YXRlKGNoaWxkcmVuQXJyYXlbMF0/LnByb3BzLnRpdGxlKVxuICByZXR1cm4gKFxuICAgIDxSYWRpeFRhYnMgdmFsdWU9e2N1cnJlbnRUYWJ9IG9uVmFsdWVDaGFuZ2U9e3NldEN1cnJlbnRUYWJ9PlxuICAgICAgPFRhYnNMaXN0IHsuLi5wcm9wc30+XG4gICAgICAgIHtjaGlsZHJlbkFycmF5Lm1hcCgoY2hpbGQpID0+IChcbiAgICAgICAgICA8VGFiQnV0dG9uXG4gICAgICAgICAgICBjc3M9e1tjdXJyZW50VGFiID09PSBjaGlsZC5wcm9wcy50aXRsZSAmJiBUYWJCdXR0b25TZWxlY3RlZF19XG4gICAgICAgICAgICB2YWx1ZT17Y2hpbGQucHJvcHMudGl0bGV9XG4gICAgICAgICAgICBrZXk9e2NoaWxkLnByb3BzLnRpdGxlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjaGlsZC5wcm9wcy50aXRsZX1cbiAgICAgICAgICA8L1RhYkJ1dHRvbj5cbiAgICAgICAgKSl9XG4gICAgICA8L1RhYnNMaXN0PlxuICAgICAge2NoaWxkcmVuQXJyYXkubWFwKChjaGlsZCkgPT4gKFxuICAgICAgICA8VGFic0NvbnRlbnQga2V5PXtjaGlsZC5wcm9wcy50aXRsZX0gdmFsdWU9e2NoaWxkLnByb3BzLnRpdGxlfT5cbiAgICAgICAgICB7Y2hpbGR9XG4gICAgICAgIDwvVGFic0NvbnRlbnQ+XG4gICAgICApKX1cbiAgICA8L1JhZGl4VGFicz5cbiAgKVxufVxuXG5mdW5jdGlvbiBUYWIocHJvcHM6IFRhYlByb3BzKSB7XG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30gLz5cbn1cblxuVGFicy5UYWIgPSBUYWJcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$y
});
const TabButton = /* @__PURE__ */ createStyled($69cb30bb0017df05$export$8114b9fdfdf9f3ba, process.env.NODE_ENV === "production" ? {
  target: "e1ghzgdg0"
} : {
  target: "e1ghzgdg0",
  label: "TabButton"
})(process.env.NODE_ENV === "production" ? {
  name: "m8boro",
  styles: "background-color:var(--ve-hover);border-radius:56px;padding:.6rem 1rem;border:none;font-weight:500;cursor:pointer;transition:color .3s, background-color .3s"
} : {
  name: "m8boro",
  styles: "background-color:var(--ve-hover);border-radius:56px;padding:.6rem 1rem;border:none;font-weight:500;cursor:pointer;transition:color .3s, background-color .3s",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvVGFicy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJrQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL1RhYnMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQge1xuICBUYWJzIGFzIFJhZGl4VGFicyxcbiAgVGFic0NvbnRlbnQsXG4gIFRhYnNMaXN0IGFzIFJhZGl4VGFic0xpc3QsXG4gIFRhYnNUcmlnZ2VyLFxufSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtdGFicydcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBTdHlsZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aS9TdHlsZXMnXG5cbnR5cGUgVGFic1Byb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlXG59XG50eXBlIFRhYlByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlXG4gIHRpdGxlOiBzdHJpbmdcbn1cblxuY29uc3QgVGFic0xpc3QgPSBzdHlsZWQoUmFkaXhUYWJzTGlzdCkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGdhcDogJy41cmVtJyxcbiAgbWFyZ2luQm90dG9tOiAnMWVtJyxcbn0pXG5cbmNvbnN0IFRhYkJ1dHRvbiA9IHN0eWxlZChUYWJzVHJpZ2dlcikoe1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1ob3ZlciknLFxuICBib3JkZXJSYWRpdXM6IDU2LFxuICBwYWRkaW5nOiAnLjZyZW0gMXJlbScsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBmb250V2VpZ2h0OiA1MDAsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB0cmFuc2l0aW9uOiAnY29sb3IgLjNzLCBiYWNrZ3JvdW5kLWNvbG9yIC4zcycsXG59KVxuXG5jb25zdCBUYWJCdXR0b25TZWxlY3RlZCA9IHtcbiAgY29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnktbGlnaHQpJyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRhYnMoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogVGFic1Byb3BzKSB7XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KFxuICAgIGNoaWxkcmVuXG4gICkgYXMgUmVhY3RFbGVtZW50PFRhYlByb3BzPltdXG4gIGNvbnN0IFtjdXJyZW50VGFiLCBzZXRDdXJyZW50VGFiXSA9IHVzZVN0YXRlKGNoaWxkcmVuQXJyYXlbMF0/LnByb3BzLnRpdGxlKVxuICByZXR1cm4gKFxuICAgIDxSYWRpeFRhYnMgdmFsdWU9e2N1cnJlbnRUYWJ9IG9uVmFsdWVDaGFuZ2U9e3NldEN1cnJlbnRUYWJ9PlxuICAgICAgPFRhYnNMaXN0IHsuLi5wcm9wc30+XG4gICAgICAgIHtjaGlsZHJlbkFycmF5Lm1hcCgoY2hpbGQpID0+IChcbiAgICAgICAgICA8VGFiQnV0dG9uXG4gICAgICAgICAgICBjc3M9e1tjdXJyZW50VGFiID09PSBjaGlsZC5wcm9wcy50aXRsZSAmJiBUYWJCdXR0b25TZWxlY3RlZF19XG4gICAgICAgICAgICB2YWx1ZT17Y2hpbGQucHJvcHMudGl0bGV9XG4gICAgICAgICAgICBrZXk9e2NoaWxkLnByb3BzLnRpdGxlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjaGlsZC5wcm9wcy50aXRsZX1cbiAgICAgICAgICA8L1RhYkJ1dHRvbj5cbiAgICAgICAgKSl9XG4gICAgICA8L1RhYnNMaXN0PlxuICAgICAge2NoaWxkcmVuQXJyYXkubWFwKChjaGlsZCkgPT4gKFxuICAgICAgICA8VGFic0NvbnRlbnQga2V5PXtjaGlsZC5wcm9wcy50aXRsZX0gdmFsdWU9e2NoaWxkLnByb3BzLnRpdGxlfT5cbiAgICAgICAgICB7Y2hpbGR9XG4gICAgICAgIDwvVGFic0NvbnRlbnQ+XG4gICAgICApKX1cbiAgICA8L1JhZGl4VGFicz5cbiAgKVxufVxuXG5mdW5jdGlvbiBUYWIocHJvcHM6IFRhYlByb3BzKSB7XG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30gLz5cbn1cblxuVGFicy5UYWIgPSBUYWJcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$y
});
const TabButtonSelected = {
  color: "var(--ve-primary)",
  backgroundColor: "var(--ve-primary-light)"
};
function Tabs$1({
  children,
  ...props
}) {
  var _a;
  const childrenArray = e$1.Children.toArray(children);
  const [currentTab, setCurrentTab] = reactExports.useState((_a = childrenArray[0]) == null ? void 0 : _a.props.title);
  return /* @__PURE__ */ jsxs($69cb30bb0017df05$export$b2539bed5023c21c, {
    value: currentTab,
    onValueChange: setCurrentTab,
    children: [/* @__PURE__ */ jsx(TabsList, {
      ...props,
      children: childrenArray.map((child) => /* @__PURE__ */ jsx(TabButton, {
        css: [currentTab === child.props.title && TabButtonSelected, process.env.NODE_ENV === "production" ? "" : ";label:Tabs;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvVGFicy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbURZIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvVGFicy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0RWxlbWVudCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7XG4gIFRhYnMgYXMgUmFkaXhUYWJzLFxuICBUYWJzQ29udGVudCxcbiAgVGFic0xpc3QgYXMgUmFkaXhUYWJzTGlzdCxcbiAgVGFic1RyaWdnZXIsXG59IGZyb20gJ0ByYWRpeC11aS9yZWFjdC10YWJzJ1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IFN0eWxlcyB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpL1N0eWxlcydcblxudHlwZSBUYWJzUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbn1cbnR5cGUgVGFiUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbiAgdGl0bGU6IHN0cmluZ1xufVxuXG5jb25zdCBUYWJzTGlzdCA9IHN0eWxlZChSYWRpeFRhYnNMaXN0KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZ2FwOiAnLjVyZW0nLFxuICBtYXJnaW5Cb3R0b206ICcxZW0nLFxufSlcblxuY29uc3QgVGFiQnV0dG9uID0gc3R5bGVkKFRhYnNUcmlnZ2VyKSh7XG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWhvdmVyKScsXG4gIGJvcmRlclJhZGl1czogNTYsXG4gIHBhZGRpbmc6ICcuNnJlbSAxcmVtJyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHRyYW5zaXRpb246ICdjb2xvciAuM3MsIGJhY2tncm91bmQtY29sb3IgLjNzJyxcbn0pXG5cbmNvbnN0IFRhYkJ1dHRvblNlbGVjdGVkID0ge1xuICBjb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeS1saWdodCknLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gVGFicyh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9OiBUYWJzUHJvcHMpIHtcbiAgY29uc3QgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoXG4gICAgY2hpbGRyZW5cbiAgKSBhcyBSZWFjdEVsZW1lbnQ8VGFiUHJvcHM+W11cbiAgY29uc3QgW2N1cnJlbnRUYWIsIHNldEN1cnJlbnRUYWJdID0gdXNlU3RhdGUoY2hpbGRyZW5BcnJheVswXT8ucHJvcHMudGl0bGUpXG4gIHJldHVybiAoXG4gICAgPFJhZGl4VGFicyB2YWx1ZT17Y3VycmVudFRhYn0gb25WYWx1ZUNoYW5nZT17c2V0Q3VycmVudFRhYn0+XG4gICAgICA8VGFic0xpc3Qgey4uLnByb3BzfT5cbiAgICAgICAge2NoaWxkcmVuQXJyYXkubWFwKChjaGlsZCkgPT4gKFxuICAgICAgICAgIDxUYWJCdXR0b25cbiAgICAgICAgICAgIGNzcz17W2N1cnJlbnRUYWIgPT09IGNoaWxkLnByb3BzLnRpdGxlICYmIFRhYkJ1dHRvblNlbGVjdGVkXX1cbiAgICAgICAgICAgIHZhbHVlPXtjaGlsZC5wcm9wcy50aXRsZX1cbiAgICAgICAgICAgIGtleT17Y2hpbGQucHJvcHMudGl0bGV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkLnByb3BzLnRpdGxlfVxuICAgICAgICAgIDwvVGFiQnV0dG9uPlxuICAgICAgICApKX1cbiAgICAgIDwvVGFic0xpc3Q+XG4gICAgICB7Y2hpbGRyZW5BcnJheS5tYXAoKGNoaWxkKSA9PiAoXG4gICAgICAgIDxUYWJzQ29udGVudCBrZXk9e2NoaWxkLnByb3BzLnRpdGxlfSB2YWx1ZT17Y2hpbGQucHJvcHMudGl0bGV9PlxuICAgICAgICAgIHtjaGlsZH1cbiAgICAgICAgPC9UYWJzQ29udGVudD5cbiAgICAgICkpfVxuICAgIDwvUmFkaXhUYWJzPlxuICApXG59XG5cbmZ1bmN0aW9uIFRhYihwcm9wczogVGFiUHJvcHMpIHtcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfSAvPlxufVxuXG5UYWJzLlRhYiA9IFRhYlxuIl19 */"],
        value: child.props.title,
        children: child.props.title
      }, child.props.title))
    }), childrenArray.map((child) => /* @__PURE__ */ jsx($69cb30bb0017df05$export$bd905d70e8fd2ebb, {
      value: child.props.title,
      children: child
    }, child.props.title))]
  });
}
function Tab(props) {
  return /* @__PURE__ */ jsx("div", {
    ...props
  });
}
Tabs$1.Tab = Tab;
const Flex = reactExports.forwardRef(({
  between,
  column: column2,
  center,
  ...props
}, ref) => {
  return /* @__PURE__ */ jsx(Wrapper$f, {
    ...props,
    ref,
    css: [between && Between, column2 && Column, center && Center, process.env.NODE_ENV === "production" ? "" : ";label:Flex;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmxleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JRIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmxleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50VHlwZSwgZm9yd2FyZFJlZiwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuXG50eXBlIEZsZXhQcm9wcyA9IHtcbiAgYmV0d2Vlbj86IGJvb2xlYW5cbiAgY2VudGVyPzogYm9vbGVhblxuICBjb2x1bW4/OiBib29sZWFuXG4gIGdhcD86IG51bWJlclxuICBhcz86IEVsZW1lbnRUeXBlPGFueT5cbn0gJiBKU1guSW50cmluc2ljRWxlbWVudHNbJ2RpdiddXG5cbmV4cG9ydCBjb25zdCBGbGV4ID0gZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgRmxleFByb3BzPihcbiAgKHsgYmV0d2VlbiwgY29sdW1uLCBjZW50ZXIsIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8V3JhcHBlclxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBjc3M9e1tiZXR3ZWVuICYmIEJldHdlZW4sIGNvbHVtbiAmJiBDb2x1bW4sIGNlbnRlciAmJiBDZW50ZXJdfVxuICAgICAgLz5cbiAgICApXG4gIH1cbilcblxuRmxleC5kaXNwbGF5TmFtZSA9ICdGbGV4J1xuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdjxGbGV4UHJvcHM+KFxuICB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIH0sXG4gICh7IGdhcCA9IDEgfSkgPT4gKHtcbiAgICBnYXA6IGdhcCArICdlbScsXG4gICAgZ3JpZEdhcDogZ2FwICsgJ2VtJyxcbiAgfSlcbilcblxuY29uc3QgQmV0d2VlbiA9IHtcbiAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbn1cblxuY29uc3QgQ2VudGVyID0ge1xuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG59XG5cbmNvbnN0IENvbHVtbiA9IHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBhbGlnbkNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG4gIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0Jyxcbn1cbiJdfQ== */"]
  });
});
Flex.displayName = "Flex";
const Wrapper$f = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1s4ya3v0"
} : {
  target: "e1s4ya3v0",
  label: "Wrapper"
})("display:flex;align-items:center;justify-content:flex-start;", ({
  gap = 1
}) => ({
  gap: gap + "em",
  gridGap: gap + "em"
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmxleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL0ZsZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFR5cGUsIGZvcndhcmRSZWYsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcblxudHlwZSBGbGV4UHJvcHMgPSB7XG4gIGJldHdlZW4/OiBib29sZWFuXG4gIGNlbnRlcj86IGJvb2xlYW5cbiAgY29sdW1uPzogYm9vbGVhblxuICBnYXA/OiBudW1iZXJcbiAgYXM/OiBFbGVtZW50VHlwZTxhbnk+XG59ICYgSlNYLkludHJpbnNpY0VsZW1lbnRzWydkaXYnXVxuXG5leHBvcnQgY29uc3QgRmxleCA9IGZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIEZsZXhQcm9wcz4oXG4gICh7IGJldHdlZW4sIGNvbHVtbiwgY2VudGVyLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXJcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgY3NzPXtbYmV0d2VlbiAmJiBCZXR3ZWVuLCBjb2x1bW4gJiYgQ29sdW1uLCBjZW50ZXIgJiYgQ2VudGVyXX1cbiAgICAgIC8+XG4gICAgKVxuICB9XG4pXG5cbkZsZXguZGlzcGxheU5hbWUgPSAnRmxleCdcblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXY8RmxleFByb3BzPihcbiAge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICB9LFxuICAoeyBnYXAgPSAxIH0pID0+ICh7XG4gICAgZ2FwOiBnYXAgKyAnZW0nLFxuICAgIGdyaWRHYXA6IGdhcCArICdlbScsXG4gIH0pXG4pXG5cbmNvbnN0IEJldHdlZW4gPSB7XG4gIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG59XG5cbmNvbnN0IENlbnRlciA9IHtcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxufVxuXG5jb25zdCBDb2x1bW4gPSB7XG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgYWxpZ25Db250ZW50OiAnZmxleC1zdGFydCcsXG4gIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICcxZnInLFxuICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG59XG4iXX0= */");
const Between = {
  justifyContent: "space-between"
};
const Center = {
  justifyContent: "center"
};
const Column = {
  display: "grid",
  alignContent: "flex-start",
  gridTemplateColumns: "1fr",
  alignItems: "flex-start"
};
const defaultTimestep = 1 / 60 * 1e3;
const getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
const onNextFrame = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);
function createRenderStep(runNextFrame2) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing2 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing2;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing2)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index2 = toRunNextFrame.indexOf(callback);
      if (index2 !== -1)
        toRunNextFrame.splice(index2, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData) => {
      if (isProcessing2) {
        flushNextFrame = true;
        return;
      }
      isProcessing2 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i2 = 0; i2 < numToRun; i2++) {
          const callback = toRun[i2];
          callback(frameData);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame2();
          }
        }
      }
      isProcessing2 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData);
      }
    }
  };
  return step;
}
const maxElapsed = 40;
let useDefaultElapsed = true;
let runNextFrame = false;
let isProcessing = false;
const frame = {
  delta: 0,
  timestamp: 0
};
const stepsOrder = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
const steps = stepsOrder.reduce((acc, key) => {
  acc[key] = createRenderStep(() => runNextFrame = true);
  return acc;
}, {});
const sync = stepsOrder.reduce((acc, key) => {
  const step = steps[key];
  acc[key] = (process2, keepAlive = false, immediate = false) => {
    if (!runNextFrame)
      startLoop();
    return step.schedule(process2, keepAlive, immediate);
  };
  return acc;
}, {});
stepsOrder.reduce((acc, key) => {
  acc[key] = steps[key].cancel;
  return acc;
}, {});
stepsOrder.reduce((acc, key) => {
  acc[key] = () => steps[key].process(frame);
  return acc;
}, {});
const processStep = (stepId) => steps[stepId].process(frame);
const processFrame = (timestamp) => {
  runNextFrame = false;
  frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
  frame.timestamp = timestamp;
  isProcessing = true;
  stepsOrder.forEach(processStep);
  isProcessing = false;
  if (runNextFrame) {
    useDefaultElapsed = false;
    onNextFrame(processFrame);
  }
};
const startLoop = () => {
  runNextFrame = true;
  useDefaultElapsed = true;
  if (!isProcessing)
    onNextFrame(processFrame);
};
function useUnmountEffect(callback) {
  return reactExports.useEffect(() => () => callback(), []);
}
function useForceUpdate() {
  const isUnmountingRef = reactExports.useRef(false);
  const [forcedRenderCount, setForcedRenderCount] = reactExports.useState(0);
  useUnmountEffect(() => isUnmountingRef.current = true);
  const forceRender = reactExports.useCallback(() => {
    !isUnmountingRef.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  const deferredForceRender = reactExports.useCallback(() => sync.postRender(forceRender), [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}
function useConstant(init2) {
  const ref = reactExports.useRef(null);
  if (ref.current === null) {
    ref.current = init2();
  }
  return ref.current;
}
const Base = {
  animationDuration: ".7s",
  animationTimingFunction: "cubic-bezier(0.19, 1, 0.22, 1)",
  animateFill: "both"
};
const PresenceChild = ({
  children,
  isPresent,
  onExitComplete,
  in: inKeyframes,
  out: outKeyframes
}) => {
  const presenceChildren = useConstant(newChildrenMap);
  const animationName = isPresent ? inKeyframes : outKeyframes;
  reactExports.useMemo(() => {
    presenceChildren.forEach((_2, key) => presenceChildren.set(key, false));
  }, [isPresent]);
  return /* @__PURE__ */ jsx(ClassNames, {
    children: ({
      css: css2,
      cx: cx2
    }) => reactExports.cloneElement(children, {
      className: cx2(children.props.className, css2({
        ...Base,
        animationName: animationName.toString()
      })),
      onAnimationEnd: isPresent ? null : onExitComplete
    })
  });
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}
const LayoutGroupContext = reactExports.createContext({});
function getChildKey(child) {
  return child.key || "";
}
function updateChildLookup(children, allChildren) {
  const seenChildren = process.env.NODE_ENV !== "production" ? /* @__PURE__ */ new Set() : null;
  children.forEach((child) => {
    const key = getChildKey(child);
    if (process.env.NODE_ENV !== "production" && seenChildren) {
      if (seenChildren.has(key)) {
        console.warn(`Children of AnimatePresence require unique keys. "${key}" is a duplicate.`);
      }
      seenChildren.add(key);
    }
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  reactExports.Children.forEach(children, (child) => {
    if (reactExports.isValidElement(child))
      filtered.push(child);
  });
  return filtered;
}
const AnimatePresence = ({
  children,
  in: inKeyframes,
  out: outKeyframes,
  exitBeforeEnter
}) => {
  let [forceRender] = useForceUpdate();
  const forceRenderLayoutGroup = reactExports.useContext(LayoutGroupContext).forceRender;
  if (forceRenderLayoutGroup)
    forceRender = forceRenderLayoutGroup;
  const isInitialRender = reactExports.useRef(true);
  const isMounted = reactExports.useRef(true);
  reactExports.useEffect(() => () => {
    isMounted.current = false;
  }, []);
  const filteredChildren = onlyElements(children);
  const presentChildren = reactExports.useRef(filteredChildren);
  const allChildren = reactExports.useRef(/* @__PURE__ */ new Map()).current;
  const exiting = reactExports.useRef(/* @__PURE__ */ new Set()).current;
  updateChildLookup(filteredChildren, allChildren);
  if (isInitialRender.current) {
    isInitialRender.current = false;
    return /* @__PURE__ */ jsx(Fragment$1, {
      children: filteredChildren.map((child) => /* @__PURE__ */ jsx(PresenceChild, {
        isPresent: true,
        in: inKeyframes,
        out: outKeyframes,
        children: child
      }, getChildKey(child)))
    });
  }
  let childrenToRender = [...filteredChildren];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i2 = 0; i2 < numPresent; i2++) {
    const key = presentKeys[i2] || "";
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    } else {
      exiting.delete(key);
    }
  }
  if (exitBeforeEnter && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach((key) => {
    if (targetKeys.indexOf(key) !== -1)
      return;
    const child = allChildren.get(key);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key);
    const onExit = () => {
      allChildren.delete(key);
      exiting.delete(key);
      const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);
      presentChildren.current.splice(removeIndex, 1);
      if (!exiting.size) {
        presentChildren.current = filteredChildren;
        if (!isMounted.current) {
          return;
        }
        forceRender();
      }
    };
    childrenToRender.splice(insertionIndex, 0, /* @__PURE__ */ jsx(PresenceChild, {
      isPresent: false,
      onExitComplete: onExit,
      in: inKeyframes,
      out: outKeyframes,
      children: child
    }, getChildKey(child)));
  });
  childrenToRender = childrenToRender.map((child) => {
    const key = child.key;
    return exiting.has(key) ? child : /* @__PURE__ */ jsx(PresenceChild, {
      isPresent: true,
      in: inKeyframes,
      out: outKeyframes,
      children: child
    }, getChildKey(child));
  });
  presentChildren.current = childrenToRender;
  if (process.env.NODE_ENV !== "production" && exitBeforeEnter && childrenToRender.length > 1) {
    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.`);
  }
  return /* @__PURE__ */ jsx(Fragment$1, {
    children: exiting.size ? childrenToRender : childrenToRender.map((child) => reactExports.cloneElement(child))
  });
};
function _EMOTION_STRINGIFIED_CSS_ERROR__$x() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function Flash({
  children,
  action,
  onClick,
  duration,
  onHide: onHide2
}) {
  return /* @__PURE__ */ jsx(AnimatePresence, {
    in: FlashIn,
    out: FlashOut,
    children: children && /* @__PURE__ */ jsxs(Wrapper$e, {
      between: true,
      children: [/* @__PURE__ */ jsx("div", {
        children
      }), action && /* @__PURE__ */ jsx(FlashButton, {
        size: "small",
        onClick: prevent(onClick),
        children: action
      }), duration && /* @__PURE__ */ jsx(Progress, {
        onAnimationEnd: preventPropagation(onHide2),
        style: {
          animationDuration: `${duration}s`
        }
      })]
    })
  });
}
const Wrapper$e = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "e13ezskb2"
} : {
  target: "e13ezskb2",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "pp3hn",
  styles: "position:fixed;bottom:1rem;right:2rem;color:var(--ve-background);background:var(--ve-dark);z-index:1001;padding:1em;border-radius:4px;width:460px;font-weight:500"
} : {
  name: "pp3hn",
  styles: "position:fixed;bottom:1rem;right:2rem;color:var(--ve-background);background:var(--ve-dark);z-index:1001;padding:1em;border-radius:4px;width:460px;font-weight:500",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmxhc2gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtEZ0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9GbGFzaC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEV2ZW50SGFuZGxlcixcbiAgTW91c2VFdmVudEhhbmRsZXIsXG4gIFByb3BzV2l0aENoaWxkcmVuLFxuICBSZWFjdE5vZGUsXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRmxleCB9IGZyb20gJy4vRmxleCdcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4vQnV0dG9uJ1xuaW1wb3J0IHsgQW5pbWF0ZVByZXNlbmNlIH0gZnJvbSAnLi9BbmltYXRpb24vQW5pbWF0ZWRQcmVzZW5jZSdcbmltcG9ydCB7IHByZXZlbnQsIHByZXZlbnRQcm9wYWdhdGlvbiB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcblxudHlwZSBGbGFzaFByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBhY3Rpb24/OiBSZWFjdE5vZGVcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxCdXR0b25FbGVtZW50PlxuICBvbkhpZGU/OiBFdmVudEhhbmRsZXI8YW55PlxuICBvbkV4aXQ/OiBGdW5jdGlvblxuICBkdXJhdGlvbj86IG51bWJlclxufT5cblxuZXhwb3J0IGZ1bmN0aW9uIEZsYXNoKHtcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgb25DbGljayxcbiAgZHVyYXRpb24sXG4gIG9uSGlkZSxcbn06IEZsYXNoUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZVByZXNlbmNlIGluPXtGbGFzaElufSBvdXQ9e0ZsYXNoT3V0fT5cbiAgICAgIHtjaGlsZHJlbiAmJiAoXG4gICAgICAgIDxXcmFwcGVyIGJldHdlZW4+XG4gICAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgICAge2FjdGlvbiAmJiAoXG4gICAgICAgICAgICA8Rmxhc2hCdXR0b24gc2l6ZT1cInNtYWxsXCIgb25DbGljaz17cHJldmVudChvbkNsaWNrKX0+XG4gICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICA8L0ZsYXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2R1cmF0aW9uICYmIChcbiAgICAgICAgICAgIDxQcm9ncmVzc1xuICAgICAgICAgICAgICBvbkFuaW1hdGlvbkVuZD17cHJldmVudFByb3BhZ2F0aW9uKG9uSGlkZSl9XG4gICAgICAgICAgICAgIHN0eWxlPXt7IGFuaW1hdGlvbkR1cmF0aW9uOiBgJHtkdXJhdGlvbn1zYCB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICApfVxuICAgIDwvQW5pbWF0ZVByZXNlbmNlPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoRmxleCkoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgYm90dG9tOiAnMXJlbScsXG4gIHJpZ2h0OiAnMnJlbScsXG4gIGNvbG9yOiAndmFyKC0tdmUtYmFja2dyb3VuZCknLFxuICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtZGFyayknLFxuICB6SW5kZXg6IDEwMDEsXG4gIHBhZGRpbmc6ICcxZW0nLFxuICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICB3aWR0aDogJzQ2MHB4JyxcbiAgZm9udFdlaWdodDogNTAwLFxufSlcblxuY29uc3QgRmxhc2hCdXR0b24gPSBzdHlsZWQoQnV0dG9uKSh7XG4gIGJvcmRlcjogJ3NvbGlkIDFweCB2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50Jyxcbn0pXG5cbmNvbnN0IFByb2dyZXNzS2V5ZnJhbWUgPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknLFxuICB9LFxufSlcblxuY29uc3QgUHJvZ3Jlc3MgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogJzAnLFxuICBsZWZ0OiAnMCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzRweCcsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzAgMCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgYW5pbWF0aW9uOiBgJHtQcm9ncmVzc0tleWZyYW1lfSAxcyBib3RoIGxpbmVhcmAsXG59KVxuXG5jb25zdCBGbGFzaEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoM2VtKTsnLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG4gIHRvOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScsXG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn0pXG5cbmNvbnN0IEZsYXNoT3V0ID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknLFxuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG4gIHRvOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtM2VtKTsnLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$x
});
const FlashButton = /* @__PURE__ */ createStyled(Button$8, process.env.NODE_ENV === "production" ? {
  target: "e13ezskb1"
} : {
  target: "e13ezskb1",
  label: "FlashButton"
})(process.env.NODE_ENV === "production" ? {
  name: "w8vgob",
  styles: "border:solid 1px var(--ve-background);background-color:transparent"
} : {
  name: "w8vgob",
  styles: "border:solid 1px var(--ve-background);background-color:transparent",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmxhc2gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEb0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9GbGFzaC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEV2ZW50SGFuZGxlcixcbiAgTW91c2VFdmVudEhhbmRsZXIsXG4gIFByb3BzV2l0aENoaWxkcmVuLFxuICBSZWFjdE5vZGUsXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRmxleCB9IGZyb20gJy4vRmxleCdcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4vQnV0dG9uJ1xuaW1wb3J0IHsgQW5pbWF0ZVByZXNlbmNlIH0gZnJvbSAnLi9BbmltYXRpb24vQW5pbWF0ZWRQcmVzZW5jZSdcbmltcG9ydCB7IHByZXZlbnQsIHByZXZlbnRQcm9wYWdhdGlvbiB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcblxudHlwZSBGbGFzaFByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBhY3Rpb24/OiBSZWFjdE5vZGVcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxCdXR0b25FbGVtZW50PlxuICBvbkhpZGU/OiBFdmVudEhhbmRsZXI8YW55PlxuICBvbkV4aXQ/OiBGdW5jdGlvblxuICBkdXJhdGlvbj86IG51bWJlclxufT5cblxuZXhwb3J0IGZ1bmN0aW9uIEZsYXNoKHtcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgb25DbGljayxcbiAgZHVyYXRpb24sXG4gIG9uSGlkZSxcbn06IEZsYXNoUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZVByZXNlbmNlIGluPXtGbGFzaElufSBvdXQ9e0ZsYXNoT3V0fT5cbiAgICAgIHtjaGlsZHJlbiAmJiAoXG4gICAgICAgIDxXcmFwcGVyIGJldHdlZW4+XG4gICAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgICAge2FjdGlvbiAmJiAoXG4gICAgICAgICAgICA8Rmxhc2hCdXR0b24gc2l6ZT1cInNtYWxsXCIgb25DbGljaz17cHJldmVudChvbkNsaWNrKX0+XG4gICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICA8L0ZsYXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2R1cmF0aW9uICYmIChcbiAgICAgICAgICAgIDxQcm9ncmVzc1xuICAgICAgICAgICAgICBvbkFuaW1hdGlvbkVuZD17cHJldmVudFByb3BhZ2F0aW9uKG9uSGlkZSl9XG4gICAgICAgICAgICAgIHN0eWxlPXt7IGFuaW1hdGlvbkR1cmF0aW9uOiBgJHtkdXJhdGlvbn1zYCB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICApfVxuICAgIDwvQW5pbWF0ZVByZXNlbmNlPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoRmxleCkoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgYm90dG9tOiAnMXJlbScsXG4gIHJpZ2h0OiAnMnJlbScsXG4gIGNvbG9yOiAndmFyKC0tdmUtYmFja2dyb3VuZCknLFxuICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtZGFyayknLFxuICB6SW5kZXg6IDEwMDEsXG4gIHBhZGRpbmc6ICcxZW0nLFxuICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICB3aWR0aDogJzQ2MHB4JyxcbiAgZm9udFdlaWdodDogNTAwLFxufSlcblxuY29uc3QgRmxhc2hCdXR0b24gPSBzdHlsZWQoQnV0dG9uKSh7XG4gIGJvcmRlcjogJ3NvbGlkIDFweCB2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50Jyxcbn0pXG5cbmNvbnN0IFByb2dyZXNzS2V5ZnJhbWUgPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknLFxuICB9LFxufSlcblxuY29uc3QgUHJvZ3Jlc3MgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogJzAnLFxuICBsZWZ0OiAnMCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzRweCcsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzAgMCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgYW5pbWF0aW9uOiBgJHtQcm9ncmVzc0tleWZyYW1lfSAxcyBib3RoIGxpbmVhcmAsXG59KVxuXG5jb25zdCBGbGFzaEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoM2VtKTsnLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG4gIHRvOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScsXG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn0pXG5cbmNvbnN0IEZsYXNoT3V0ID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknLFxuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG4gIHRvOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtM2VtKTsnLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$x
});
const ProgressKeyframe = keyframes({
  from: {
    transform: "scaleX(0)"
  },
  to: {
    transform: "scaleX(1)"
  }
});
const Progress = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e13ezskb0"
} : {
  target: "e13ezskb0",
  label: "Progress"
})({
  display: "block",
  position: "absolute",
  bottom: "0",
  left: "0",
  width: "100%",
  height: "4px",
  transformOrigin: "0 0",
  backgroundColor: "var(--ve-primary)",
  animation: `${ProgressKeyframe} 1s both linear`
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvRmxhc2gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZFaUIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy91aS9GbGFzaC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEV2ZW50SGFuZGxlcixcbiAgTW91c2VFdmVudEhhbmRsZXIsXG4gIFByb3BzV2l0aENoaWxkcmVuLFxuICBSZWFjdE5vZGUsXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRmxleCB9IGZyb20gJy4vRmxleCdcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4vQnV0dG9uJ1xuaW1wb3J0IHsgQW5pbWF0ZVByZXNlbmNlIH0gZnJvbSAnLi9BbmltYXRpb24vQW5pbWF0ZWRQcmVzZW5jZSdcbmltcG9ydCB7IHByZXZlbnQsIHByZXZlbnRQcm9wYWdhdGlvbiB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcblxudHlwZSBGbGFzaFByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBhY3Rpb24/OiBSZWFjdE5vZGVcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxCdXR0b25FbGVtZW50PlxuICBvbkhpZGU/OiBFdmVudEhhbmRsZXI8YW55PlxuICBvbkV4aXQ/OiBGdW5jdGlvblxuICBkdXJhdGlvbj86IG51bWJlclxufT5cblxuZXhwb3J0IGZ1bmN0aW9uIEZsYXNoKHtcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgb25DbGljayxcbiAgZHVyYXRpb24sXG4gIG9uSGlkZSxcbn06IEZsYXNoUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZVByZXNlbmNlIGluPXtGbGFzaElufSBvdXQ9e0ZsYXNoT3V0fT5cbiAgICAgIHtjaGlsZHJlbiAmJiAoXG4gICAgICAgIDxXcmFwcGVyIGJldHdlZW4+XG4gICAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgICAge2FjdGlvbiAmJiAoXG4gICAgICAgICAgICA8Rmxhc2hCdXR0b24gc2l6ZT1cInNtYWxsXCIgb25DbGljaz17cHJldmVudChvbkNsaWNrKX0+XG4gICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICA8L0ZsYXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2R1cmF0aW9uICYmIChcbiAgICAgICAgICAgIDxQcm9ncmVzc1xuICAgICAgICAgICAgICBvbkFuaW1hdGlvbkVuZD17cHJldmVudFByb3BhZ2F0aW9uKG9uSGlkZSl9XG4gICAgICAgICAgICAgIHN0eWxlPXt7IGFuaW1hdGlvbkR1cmF0aW9uOiBgJHtkdXJhdGlvbn1zYCB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICApfVxuICAgIDwvQW5pbWF0ZVByZXNlbmNlPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoRmxleCkoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgYm90dG9tOiAnMXJlbScsXG4gIHJpZ2h0OiAnMnJlbScsXG4gIGNvbG9yOiAndmFyKC0tdmUtYmFja2dyb3VuZCknLFxuICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtZGFyayknLFxuICB6SW5kZXg6IDEwMDEsXG4gIHBhZGRpbmc6ICcxZW0nLFxuICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICB3aWR0aDogJzQ2MHB4JyxcbiAgZm9udFdlaWdodDogNTAwLFxufSlcblxuY29uc3QgRmxhc2hCdXR0b24gPSBzdHlsZWQoQnV0dG9uKSh7XG4gIGJvcmRlcjogJ3NvbGlkIDFweCB2YXIoLS12ZS1iYWNrZ3JvdW5kKScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50Jyxcbn0pXG5cbmNvbnN0IFByb2dyZXNzS2V5ZnJhbWUgPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknLFxuICB9LFxufSlcblxuY29uc3QgUHJvZ3Jlc3MgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogJzAnLFxuICBsZWZ0OiAnMCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzRweCcsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzAgMCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgYW5pbWF0aW9uOiBgJHtQcm9ncmVzc0tleWZyYW1lfSAxcyBib3RoIGxpbmVhcmAsXG59KVxuXG5jb25zdCBGbGFzaEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoM2VtKTsnLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG4gIHRvOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScsXG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn0pXG5cbmNvbnN0IEZsYXNoT3V0ID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknLFxuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG4gIHRvOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtM2VtKTsnLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59KVxuIl19 */");
const FlashIn = keyframes({
  from: {
    transform: "translateX(3em);",
    opacity: 0
  },
  to: {
    transform: "translateX(0)",
    opacity: 1
  }
});
const FlashOut = keyframes({
  from: {
    transform: "translateX(0)",
    opacity: 1
  },
  to: {
    transform: "translateX(-3em);",
    opacity: 0
  }
});
const Styles = {
  Mosaic: {
    "--ve-transparentColor": "#ffffff",
    backgroundColor: "#d0d0d0",
    backgroundImage: "linear-gradient(45deg, var(--ve-transparentColor) 25%, transparent 25%), linear-gradient(-45deg, var(--ve-transparentColor) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ve-transparentColor) 75%), linear-gradient(-45deg, transparent 75%, var(--ve-transparentColor) 75%)",
    backgroundSize: "10px 10px",
    backgroundPosition: "0 0, 0 5px, 5px -5px, -5px 0px"
  },
  FocusState: {
    borderColor: "var(--ve-primary)",
    outline: 0,
    boxShadow: "0 0 0 0.25rem rgb(23 113 230 / 25%)"
  }
};
const Card = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e10u0yfa0"
} : {
  target: "e10u0yfa0",
  label: "Card"
})("padding:.8em .6em .8em 1.4em;background-color:#fff;border:1px solid rgba(0,0,0,0.06);box-shadow:0 1px 2px 0 rgba(0,0,0,0.05);transition:box-shadow .3s!important;", (props) => props.hoverable ? {
  "&:hover": {
    boxShadow: "var(--ve-shadow-dragging)",
    zIndex: 10
  }
} : {}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQ2FyZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRW9CIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvQ2FyZC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxuZXhwb3J0IGNvbnN0IENhcmQgPSBzdHlsZWQuZGl2KFxuICB7XG4gICAgcGFkZGluZzogJy44ZW0gLjZlbSAuOGVtIDEuNGVtJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICBib3JkZXI6ICcxcHggc29saWQgcmdiYSgwLDAsMCwwLjA2KScsXG4gICAgYm94U2hhZG93OiAnMCAxcHggMnB4IDAgcmdiYSgwLDAsMCwwLjA1KScsXG4gICAgdHJhbnNpdGlvbjogJ2JveC1zaGFkb3cgLjNzIWltcG9ydGFudCcsXG4gIH0sXG4gIChwcm9wczogeyBob3ZlcmFibGU/OiBib29sZWFuIH0pID0+XG4gICAgcHJvcHMuaG92ZXJhYmxlXG4gICAgICA/IHtcbiAgICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogJ3ZhcigtLXZlLXNoYWRvdy1kcmFnZ2luZyknLFxuICAgICAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICA6IHt9XG4pXG4iXX0= */");
const SpinnerKeyframes = keyframes({
  from: {
    transform: "rotate(0deg)"
  },
  to: {
    transform: "rotate(-360deg)"
  }
});
const SpinnerWrapper = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "epj1ahn0"
} : {
  target: "epj1ahn0",
  label: "SpinnerWrapper"
})({
  position: "absolute",
  top: "calc(50% - var(--size) * 0.5)",
  left: "calc(50% - var(--size) * 0.5)",
  width: "var(--size)",
  height: "var(--size)",
  animation: `${SpinnerKeyframes} 1.4s infinite linear`,
  svg: {
    display: "block",
    width: "var(--size)",
    height: "var(--size)"
  }
}, ({
  size: size2 = 30
}) => ({
  "--size": `${size2}px`
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvdWkvU3Bpbm5lci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0J1QiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL3VpL1NwaW5uZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxudHlwZSBTcGlubmVyUHJvcHMgPSB7XG4gIHNpemU/OiBudW1iZXJcbn1cblxuY29uc3QgU3Bpbm5lcktleWZyYW1lcyA9IGtleWZyYW1lcyh7XG4gIGZyb206IHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMGRlZyknLFxuICB9LFxuICB0bzoge1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtMzYwZGVnKScsXG4gIH0sXG59KVxuXG5jb25zdCBTcGlubmVyV3JhcHBlciA9IHN0eWxlZC5kaXY8U3Bpbm5lclByb3BzPihcbiAge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJ2NhbGMoNTAlIC0gdmFyKC0tc2l6ZSkgKiAwLjUpJyxcbiAgICBsZWZ0OiAnY2FsYyg1MCUgLSB2YXIoLS1zaXplKSAqIDAuNSknLFxuICAgIHdpZHRoOiAndmFyKC0tc2l6ZSknLFxuICAgIGhlaWdodDogJ3ZhcigtLXNpemUpJyxcbiAgICBhbmltYXRpb246IGAke1NwaW5uZXJLZXlmcmFtZXN9IDEuNHMgaW5maW5pdGUgbGluZWFyYCxcbiAgICBzdmc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJ3ZhcigtLXNpemUpJyxcbiAgICAgIGhlaWdodDogJ3ZhcigtLXNpemUpJyxcbiAgICB9LFxuICB9LFxuICAoeyBzaXplID0gMzAgfSkgPT4gKHtcbiAgICAnLS1zaXplJzogYCR7c2l6ZX1weGAsXG4gIH0pXG4pXG5cbmV4cG9ydCBmdW5jdGlvbiBTcGlubmVyKHByb3BzOiBTcGlubmVyUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8U3Bpbm5lcldyYXBwZXIgey4uLnByb3BzfT5cbiAgICAgIDxzdmcgdmlld0JveD1cIjAgMCA2MCA2MFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICBkPVwiTTMwIDYwQzQ2LjU2ODUgNjAgNjAgNDYuNTY4NSA2MCAzMEM2MCAxMy40MzE1IDQ2LjU2ODUgMCAzMCAwQzEzLjQzMTUgMCAwIDEzLjQzMTUgMCAzMEMwIDQ2LjU2ODUgMTMuNDMxNSA2MCAzMCA2MFpNMzAgNTBDNDEuMDQ1NyA1MCA1MCA0MS4wNDU3IDUwIDMwQzUwIDE4Ljk1NDMgNDEuMDQ1NyAxMCAzMCAxMEMxOC45NTQzIDEwIDEwIDE4Ljk1NDMgMTAgMzBDMTAgNDEuMDQ1NyAxOC45NTQzIDUwIDMwIDUwWlwiXG4gICAgICAgICAgZmlsbD1cInVybCgjcGFpbnQwX2xpbmVhcl8zMTNfMTUpXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgIGNsaXBSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgZD1cIk0xMCAzMEgwQzAgNDYuNTY4NSAxMy40MzE1IDYwIDMwIDYwVjUwQzE4Ljk1NDMgNTAgMTAgNDEuMDQ1NyAxMCAzMFpcIlxuICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAvPlxuICAgICAgICA8ZGVmcz5cbiAgICAgICAgICA8bGluZWFyR3JhZGllbnRcbiAgICAgICAgICAgIGlkPVwicGFpbnQwX2xpbmVhcl8zMTNfMTVcIlxuICAgICAgICAgICAgeDE9XCIzMFwiXG4gICAgICAgICAgICB5MT1cIjMwXCJcbiAgICAgICAgICAgIHgyPVwiMTdcIlxuICAgICAgICAgICAgeTI9XCIzMFwiXG4gICAgICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cImN1cnJlbnRDb2xvclwiIHN0b3BPcGFjaXR5PVwiMFwiIC8+XG4gICAgICAgICAgICA8c3RvcFxuICAgICAgICAgICAgICBvZmZzZXQ9XCIwLjE5ODA2MlwiXG4gICAgICAgICAgICAgIHN0b3BDb2xvcj1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgICAgICAgIHN0b3BPcGFjaXR5PVwiMC4yMTc3ODZcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzdG9wXG4gICAgICAgICAgICAgIG9mZnNldD1cIjAuNDM0NDI1XCJcbiAgICAgICAgICAgICAgc3RvcENvbG9yPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICAgICAgc3RvcE9wYWNpdHk9XCIwLjQ3NzY4N1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMVwiIHN0b3BDb2xvcj1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAgICAgPC9kZWZzPlxuICAgICAgPC9zdmc+XG4gICAgPC9TcGlubmVyV3JhcHBlcj5cbiAgKVxufVxuIl19 */");
function Spinner(props) {
  return /* @__PURE__ */ jsx(SpinnerWrapper, {
    ...props,
    children: /* @__PURE__ */ jsxs("svg", {
      viewBox: "0 0 60 60",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [/* @__PURE__ */ jsx("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M30 60C46.5685 60 60 46.5685 60 30C60 13.4315 46.5685 0 30 0C13.4315 0 0 13.4315 0 30C0 46.5685 13.4315 60 30 60ZM30 50C41.0457 50 50 41.0457 50 30C50 18.9543 41.0457 10 30 10C18.9543 10 10 18.9543 10 30C10 41.0457 18.9543 50 30 50Z",
        fill: "url(#paint0_linear_313_15)"
      }), /* @__PURE__ */ jsx("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M10 30H0C0 46.5685 13.4315 60 30 60V50C18.9543 50 10 41.0457 10 30Z",
        fill: "currentColor"
      }), /* @__PURE__ */ jsx("defs", {
        children: /* @__PURE__ */ jsxs("linearGradient", {
          id: "paint0_linear_313_15",
          x1: "30",
          y1: "30",
          x2: "17",
          y2: "30",
          gradientUnits: "userSpaceOnUse",
          children: [/* @__PURE__ */ jsx("stop", {
            stopColor: "currentColor",
            stopOpacity: "0"
          }), /* @__PURE__ */ jsx("stop", {
            offset: "0.198062",
            stopColor: "currentColor",
            stopOpacity: "0.217786"
          }), /* @__PURE__ */ jsx("stop", {
            offset: "0.434425",
            stopColor: "currentColor",
            stopOpacity: "0.477687"
          }), /* @__PURE__ */ jsx("stop", {
            offset: "1",
            stopColor: "currentColor"
          })]
        })
      })]
    })
  });
}
function IconPhone({
  size: size2 = 18
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M7 4v16h10V4H7zM6 2h12a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm6 15a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"
    })
  });
}
function IconTablet({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: size2,
    height: size2,
    fill: "none",
    children: [/* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M20 7H4v10h16V7Zm2-1v12a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h18a1 1 0 0 1 1 1Z"
    }), /* @__PURE__ */ jsx("rect", {
      width: "10",
      height: "1",
      x: "7",
      y: "15",
      fill: "currentColor",
      rx: ".5"
    })]
  });
}
function IconDesktop({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M4 16h16V5H4v11zm9 2v2h4v2H7v-2h4v-2H2.992A.998.998 0 0 1 2 16.993V4.007C2 3.451 2.455 3 2.992 3h18.016c.548 0 .992.449.992 1.007v12.986c0 .556-.455 1.007-.992 1.007H13z"
    })
  });
}
function IconCheck({
  size: size2 = 18
}) {
  return /* @__PURE__ */ jsxs("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 16 16",
    children: [/* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M13.315 2.716A7.461 7.461 0 102.763 13.268 7.461 7.461 0 0013.315 2.716zM8.039 14.454a6.468 6.468 0 01-6.46-6.46 6.468 6.468 0 016.46-6.462A6.468 6.468 0 0114.5 7.992a6.468 6.468 0 01-6.46 6.461z"
    }), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M6.915 9.556L4.62 7.262l-.708.707 3.002 3.002 5.234-5.235-.707-.707-4.527 4.527z"
    })]
  });
}
function IconAlignLeft({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: size2,
    height: size2,
    fill: "none",
    viewBox: "0 0 24 24",
    children: [/* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M10 6H5v13h5V6zM3 4v17h9V4H3z",
      clipRule: "evenodd"
    }), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M22 7v2h-7V7h7zM22 11v2h-7v-2h7zM19 15v2h-4v-2h4z"
    })]
  });
}
function IconAlignRight({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    children: [/* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M19 6h-5v13h5V6zm-7-2v17h9V4h-9z",
      clipRule: "evenodd"
    }), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M10 7v2H3V7h7zM10 11v2H3v-2h7zM7 15v2H3v-2h4z"
    })]
  });
}
function IconAlignTop({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    children: [/* @__PURE__ */ jsx("defs", {}), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M19 5H5v5h14V5zM3 3v9h18V3H3z",
      clipRule: "evenodd"
    }), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M20 14v2H3v-2h17zM14 18v2H3v-2h11z"
    })]
  });
}
function IconAlignBottom({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    children: [/* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M19 14H5v5h14v-5zM3 12v9h18v-9H3z",
      clipRule: "evenodd"
    }), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M20 4v2H3V4h17zM14 8v2H3V8h11zM7 12v2H3v-2h4z"
    })]
  });
}
function IconTextLeft({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M3 8V6h8v2zM3 13v-2h18v2zM3 18v-2h14v2z"
    })
  });
}
function IconTextCenter({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M8 8V6h8v2zM3 13v-2h18v2zM5 18v-2h14v2z"
    })
  });
}
function IconTextRight({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M11 8V6h10v2zM3 13v-2h18v2zM6 18v-2h15v2z"
    })
  });
}
function IconCirclePlus({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: [/* @__PURE__ */ jsx("path", {
      fill: "none",
      d: "M0 0h24v24H0z"
    }), /* @__PURE__ */ jsx("path", {
      d: "M11 11V7h2v4h4v2h-4v4h-2v-4H7v-2h4zm1 11C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z",
      fill: "currentColor"
    })]
  });
}
function IconDown({
  size: size2 = 24,
  style: style2
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    style: style2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z",
      fill: "currentColor"
    })
  });
}
function IconUp(props) {
  return /* @__PURE__ */ jsx(IconDown, {
    ...props,
    style: {
      transform: "scaleY(-1)",
      ...props.style
    }
  });
}
function IconTrash({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M17 6h5v2h-2v13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V8H2V6h5V3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3zm1 2H6v12h12V8zm-4.586 6l1.768 1.768-1.414 1.414L12 15.414l-1.768 1.768-1.414-1.414L10.586 14l-1.768-1.768 1.414-1.414L12 12.586l1.768-1.768 1.414 1.414L13.414 14zM9 4v2h6V4H9z",
      fill: "currentColor"
    })
  });
}
function IconCross({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ jsx("path", {
      d: "M6.99999 5.58599L11.95 0.635986L13.364 2.04999L8.41399 6.99999L13.364 11.95L11.95 13.364L6.99999 8.41399L2.04999 13.364L0.635986 11.95L5.58599 6.99999L0.635986 2.04999L2.04999 0.635986L6.99999 5.58599Z",
      fill: "currentColor"
    })
  });
}
function IconSearch({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ jsx("path", {
      d: "m11.02 10.078 2.856 2.855-.943.943-2.855-2.855A6.002 6.002 0 0 1 .333 6.334c0-3.313 2.688-6 6-6a6.002 6.002 0 0 1 4.688 9.744Zm-1.337-.495a4.665 4.665 0 0 0-3.35-7.917 4.665 4.665 0 0 0-4.666 4.667 4.665 4.665 0 0 0 7.916 3.35l.1-.1Z",
      fill: "currentColor"
    })
  });
}
function IconCode({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M24 12l-5.657 5.657-1.414-1.414L21.172 12l-4.243-4.243 1.414-1.414L24 12zM2.828 12l4.243 4.243-1.414 1.414L0 12l5.657-5.657L7.07 7.757 2.828 12zm6.96 9H7.66l6.552-18h2.128L9.788 21z"
    })
  });
}
function IconFolder({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M3 21a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h7.414l2 2H20a1 1 0 0 1 1 1v3h-2V7h-7.414l-2-2H4v11.998L5.5 11h17l-2.31 9.243a1 1 0 0 1-.97.757H3zm16.938-8H7.062l-1.5 6h12.876l1.5-6z"
    })
  });
}
function IconBack({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ jsx("path", {
      d: "M4.5 2.5L4.5 20.5L2.5 20.5L2.5 2.5L4.5 2.5ZM10.328 12.5L16.4 18.571L14.986 19.985L6.5 11.5L14.985 3.015L16.4 4.429L10.33 10.5L21.5 10.5L21.5 12.5L10.328 12.5Z",
      fill: "currentColor"
    })
  });
}
function IconSave({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ jsx("path", {
      d: "M7 19v-6h10v6h2V7.828L16.172 5H5v14h2zM4 3h13l4 4v13a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zm5 12v4h6v-4H9z",
      fill: "currentColor"
    })
  });
}
function IconCalendar({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M17 3h4a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z"
    })
  });
}
function IconPage({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M5 8v12h14V8H5zm0-2h14V4H5v2zm15 16H4a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1zM7 10h4v4H7v-4zm0 6h10v2H7v-2zm6-5h4v2h-4v-2z"
    })
  });
}
function IconBlocs({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: [/* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M4 4v5h16V4H4ZM3 2a1 1 0 0 0-1 1v7c0 .6.4 1 1 1h18c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1H3ZM4 15v5h16v-5H4Zm-1-2a1 1 0 0 0-1 1v7c0 .6.4 1 1 1h18c.6 0 1-.4 1-1v-7c0-.6-.4-1-1-1H3Z",
      clipRule: "evenodd"
    }), /* @__PURE__ */ jsx("path", {
      fill: "currentColor",
      d: "M5 5h6v1H5V5ZM5 16h6v1H5v-1Z"
    })]
  });
}
function SortableWrapper({
  items,
  children,
  onMove
}) {
  const ids2 = items.map((item) => item._id);
  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates
  }));
  function handleDragEnd(event) {
    const {
      active,
      over
    } = event;
    if (over && active.id !== over.id) {
      onMove(ids2.indexOf(active.id.toString()), ids2.indexOf(over.id.toString()));
    }
  }
  return /* @__PURE__ */ jsx(DndContext, {
    sensors,
    collisionDetection: closestCenter,
    onDragEnd: handleDragEnd,
    modifiers: [restrictToVerticalAxis, restrictToParentElement],
    children: /* @__PURE__ */ jsx(SortableContext, {
      items: ids2,
      strategy: verticalListSortingStrategy,
      children
    })
  });
}
function Sortable({
  item,
  children,
  className,
  ...props
}) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({
    id: item._id
  });
  const style2 = {
    transform: CSS$1.Translate.toString(transform),
    transition: transition || void 0
  };
  return /* @__PURE__ */ jsxs("div", {
    className,
    "data-dragging": isDragging ? true : void 0,
    ref: setNodeRef,
    style: style2,
    ...attributes,
    ...props,
    children: [/* @__PURE__ */ jsx(DragHandle, {
      ...listeners
    }), children]
  });
}
function moveItem(items, from3, to) {
  return arrayMove(items, from3, to);
}
function insertItem(items, index2, value) {
  const clone = [...items];
  clone.splice(index2, 0, value);
  return clone;
}
const createStoreImpl = (createState) => {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace2) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace2 != null ? replace2 : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const getInitialState2 = () => initialState;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => {
    if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
      console.warn(
        "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
      );
    }
    listeners.clear();
  };
  const api = { setState, getState, getInitialState: getInitialState2, subscribe, destroy };
  const initialState = state = createState(setState, getState, api);
  return api;
};
const createStore$1 = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;
var withSelector = { exports: {} };
var withSelector_production_min = {};
var shim = { exports: {} };
var useSyncExternalStoreShim_production_min = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredUseSyncExternalStoreShim_production_min;
function requireUseSyncExternalStoreShim_production_min() {
  if (hasRequiredUseSyncExternalStoreShim_production_min)
    return useSyncExternalStoreShim_production_min;
  hasRequiredUseSyncExternalStoreShim_production_min = 1;
  var e3 = reactExports;
  function h4(a4, b3) {
    return a4 === b3 && (0 !== a4 || 1 / a4 === 1 / b3) || a4 !== a4 && b3 !== b3;
  }
  var k3 = "function" === typeof Object.is ? Object.is : h4, l2 = e3.useState, m4 = e3.useEffect, n2 = e3.useLayoutEffect, p2 = e3.useDebugValue;
  function q2(a4, b3) {
    var d4 = b3(), f2 = l2({ inst: { value: d4, getSnapshot: b3 } }), c3 = f2[0].inst, g2 = f2[1];
    n2(function() {
      c3.value = d4;
      c3.getSnapshot = b3;
      r2(c3) && g2({ inst: c3 });
    }, [a4, d4, b3]);
    m4(function() {
      r2(c3) && g2({ inst: c3 });
      return a4(function() {
        r2(c3) && g2({ inst: c3 });
      });
    }, [a4]);
    p2(d4);
    return d4;
  }
  function r2(a4) {
    var b3 = a4.getSnapshot;
    a4 = a4.value;
    try {
      var d4 = b3();
      return !k3(a4, d4);
    } catch (f2) {
      return true;
    }
  }
  function t3(a4, b3) {
    return b3();
  }
  var u3 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t3 : q2;
  useSyncExternalStoreShim_production_min.useSyncExternalStore = void 0 !== e3.useSyncExternalStore ? e3.useSyncExternalStore : u3;
  return useSyncExternalStoreShim_production_min;
}
var useSyncExternalStoreShim_development = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredUseSyncExternalStoreShim_development;
function requireUseSyncExternalStoreShim_development() {
  if (hasRequiredUseSyncExternalStoreShim_development)
    return useSyncExternalStoreShim_development;
  hasRequiredUseSyncExternalStoreShim_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var React2 = reactExports;
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format2) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
      }
      function printWarning(level, format2, args) {
        {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();
          if (stack !== "") {
            format2 += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format2);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function is(x3, y4) {
        return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var useState = React2.useState, useEffect = React2.useEffect, useLayoutEffect = React2.useLayoutEffect, useDebugValue2 = React2.useDebugValue;
      var didWarnOld18Alpha = false;
      var didWarnUncachedGetSnapshot = false;
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        {
          if (!didWarnOld18Alpha) {
            if (React2.startTransition !== void 0) {
              didWarnOld18Alpha = true;
              error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
            }
          }
        }
        var value = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedValue = getSnapshot();
            if (!objectIs(value, cachedValue)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var _useState = useState({
          inst: {
            value,
            getSnapshot
          }
        }), inst = _useState[0].inst, forceUpdate = _useState[1];
        useLayoutEffect(function() {
          inst.value = value;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceUpdate({
              inst
            });
          }
        }, [subscribe, value, getSnapshot]);
        useEffect(function() {
          if (checkIfSnapshotChanged(inst)) {
            forceUpdate({
              inst
            });
          }
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          };
          return subscribe(handleStoreChange);
        }, [subscribe]);
        useDebugValue2(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
        return getSnapshot();
      }
      var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var isServerEnvironment = !canUseDOM2;
      var shim2 = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
      var useSyncExternalStore$2 = React2.useSyncExternalStore !== void 0 ? React2.useSyncExternalStore : shim2;
      useSyncExternalStoreShim_development.useSyncExternalStore = useSyncExternalStore$2;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
  return useSyncExternalStoreShim_development;
}
var hasRequiredShim;
function requireShim() {
  if (hasRequiredShim)
    return shim.exports;
  hasRequiredShim = 1;
  if (process.env.NODE_ENV === "production") {
    shim.exports = requireUseSyncExternalStoreShim_production_min();
  } else {
    shim.exports = requireUseSyncExternalStoreShim_development();
  }
  return shim.exports;
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredWithSelector_production_min;
function requireWithSelector_production_min() {
  if (hasRequiredWithSelector_production_min)
    return withSelector_production_min;
  hasRequiredWithSelector_production_min = 1;
  var h4 = reactExports, n2 = requireShim();
  function p2(a4, b3) {
    return a4 === b3 && (0 !== a4 || 1 / a4 === 1 / b3) || a4 !== a4 && b3 !== b3;
  }
  var q2 = "function" === typeof Object.is ? Object.is : p2, r2 = n2.useSyncExternalStore, t3 = h4.useRef, u3 = h4.useEffect, v2 = h4.useMemo, w3 = h4.useDebugValue;
  withSelector_production_min.useSyncExternalStoreWithSelector = function(a4, b3, e3, l2, g2) {
    var c3 = t3(null);
    if (null === c3.current) {
      var f2 = { hasValue: false, value: null };
      c3.current = f2;
    } else
      f2 = c3.current;
    c3 = v2(function() {
      function a5(a6) {
        if (!c4) {
          c4 = true;
          d5 = a6;
          a6 = l2(a6);
          if (void 0 !== g2 && f2.hasValue) {
            var b4 = f2.value;
            if (g2(b4, a6))
              return k3 = b4;
          }
          return k3 = a6;
        }
        b4 = k3;
        if (q2(d5, a6))
          return b4;
        var e4 = l2(a6);
        if (void 0 !== g2 && g2(b4, e4))
          return b4;
        d5 = a6;
        return k3 = e4;
      }
      var c4 = false, d5, k3, m4 = void 0 === e3 ? null : e3;
      return [function() {
        return a5(b3());
      }, null === m4 ? void 0 : function() {
        return a5(m4());
      }];
    }, [b3, e3, l2, g2]);
    var d4 = r2(a4, c3[0], c3[1]);
    u3(function() {
      f2.hasValue = true;
      f2.value = d4;
    }, [d4]);
    w3(d4);
    return d4;
  };
  return withSelector_production_min;
}
var withSelector_development = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredWithSelector_development;
function requireWithSelector_development() {
  if (hasRequiredWithSelector_development)
    return withSelector_development;
  hasRequiredWithSelector_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var React2 = reactExports;
      var shim2 = requireShim();
      function is(x3, y4) {
        return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var useSyncExternalStore = shim2.useSyncExternalStore;
      var useRef = React2.useRef, useEffect = React2.useEffect, useMemo = React2.useMemo, useDebugValue2 = React2.useDebugValue;
      function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual3) {
        var instRef = useRef(null);
        var inst;
        if (instRef.current === null) {
          inst = {
            hasValue: false,
            value: null
          };
          instRef.current = inst;
        } else {
          inst = instRef.current;
        }
        var _useMemo = useMemo(function() {
          var hasMemo = false;
          var memoizedSnapshot;
          var memoizedSelection;
          var memoizedSelector = function(nextSnapshot) {
            if (!hasMemo) {
              hasMemo = true;
              memoizedSnapshot = nextSnapshot;
              var _nextSelection = selector(nextSnapshot);
              if (isEqual3 !== void 0) {
                if (inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual3(currentSelection, _nextSelection)) {
                    memoizedSelection = currentSelection;
                    return currentSelection;
                  }
                }
              }
              memoizedSelection = _nextSelection;
              return _nextSelection;
            }
            var prevSnapshot = memoizedSnapshot;
            var prevSelection = memoizedSelection;
            if (objectIs(prevSnapshot, nextSnapshot)) {
              return prevSelection;
            }
            var nextSelection = selector(nextSnapshot);
            if (isEqual3 !== void 0 && isEqual3(prevSelection, nextSelection)) {
              return prevSelection;
            }
            memoizedSnapshot = nextSnapshot;
            memoizedSelection = nextSelection;
            return nextSelection;
          };
          var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
          var getSnapshotWithSelector = function() {
            return memoizedSelector(getSnapshot());
          };
          var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
            return memoizedSelector(maybeGetServerSnapshot());
          };
          return [getSnapshotWithSelector, getServerSnapshotWithSelector];
        }, [getSnapshot, getServerSnapshot, selector, isEqual3]), getSelection2 = _useMemo[0], getServerSelection = _useMemo[1];
        var value = useSyncExternalStore(subscribe, getSelection2, getServerSelection);
        useEffect(function() {
          inst.hasValue = true;
          inst.value = value;
        }, [value]);
        useDebugValue2(value);
        return value;
      }
      withSelector_development.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
  return withSelector_development;
}
if (process.env.NODE_ENV === "production") {
  withSelector.exports = requireWithSelector_production_min();
} else {
  withSelector.exports = requireWithSelector_development();
}
var withSelectorExports = withSelector.exports;
const useSyncExternalStoreExports = /* @__PURE__ */ getDefaultExportFromCjs(withSelectorExports);
const { useDebugValue } = e$1;
const { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;
let didWarnAboutEqualityFn = false;
const identity$1 = (arg) => arg;
function useStore$1(api, selector = identity$1, equalityFn) {
  if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn(
      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
    );
    didWarnAboutEqualityFn = true;
  }
  const slice3 = useSyncExternalStoreWithSelector(
    api.subscribe,
    api.getState,
    api.getServerState || api.getInitialState,
    selector,
    equalityFn
  );
  useDebugValue(slice3);
  return slice3;
}
const createImpl = (createState) => {
  if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production" && typeof createState !== "function") {
    console.warn(
      "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
    );
  }
  const api = typeof createState === "function" ? createStore$1(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore$1(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
};
const create = (createState) => createState ? createImpl(createState) : createImpl;
function keys$1(ks) {
  return Array.isArray(ks) ? ks : ks.split(".");
}
function deepGet(o2, kp, d4 = null) {
  return keys$1(kp).reduce((o22, k3) => o22 && (Array.isArray(o22) ? o22[parseInt(k3)] : o22[k3]) || d4, o2);
}
function deepSet(object, keyPath, value) {
  if (!keyPath) {
    return value;
  }
  return keys$1(keyPath).reduceRight((acc, key, i2, keys2) => {
    const original = deepGet(object, keys2.slice(0, i2));
    if (Array.isArray(original)) {
      return original.map((v2, k3) => {
        if (k3.toString() === key) {
          return acc;
        }
        return v2;
      });
    } else {
      return Object.assign({}, original, {
        [key]: acc
      });
    }
  }, value);
}
function stringifyFields(source) {
  return JSON.stringify(source, (key, value) => {
    if (key === "_id") {
      return void 0;
    }
    return value;
  }, 2);
}
function indexify(object) {
  if (Array.isArray(object)) {
    const prefix2 = Math.round(Date.now() / 1e3);
    object.forEach((v2, k3) => {
      if (typeof v2 === "object") {
        if (!("_id" in v2)) {
          v2._id = prefix2 + k3.toString();
        }
        indexify(v2);
      }
    });
  } else if (typeof object === "object" && object !== null) {
    Object.keys(object).forEach((key) => indexify(object[key]));
  }
  return object;
}
function cast(value, expectedValue) {
  if (typeof expectedValue === "boolean") {
    return !!value;
  }
  if (typeof expectedValue === "string") {
    if (typeof value === "boolean") {
      return "";
    }
    return "" + (value ?? "");
  }
  throw new Error(`Cannot cast ${typeof value} into a ${typeof expectedValue}`);
}
const combine = (initialState, create2) => (...a4) => Object.assign({}, initialState, create2(...a4));
function uniqId() {
  return `_${Math.random().toString(36).substr(2, 9)}`;
}
function textContent(str) {
  return new DOMParser().parseFromString(str, "text/html").body.textContent;
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function clamp$1(value, min2, max2) {
  return Math.min(Math.max(value, min2), max2);
}
function fillDefaults(data, fields) {
  let newData = {
    ...data
  };
  for (const field of fields) {
    if (field.group) {
      newData = fillDefaults(newData, field.fields);
      continue;
    }
    const name = field.name;
    if (data[name] === void 0 && "default" in field.options) {
      newData[name] = field.options.default;
    }
  }
  return newData;
}
function t(key) {
  return VisualEditor.i18n[key];
}
var InsertPosition = /* @__PURE__ */ ((InsertPosition2) => {
  InsertPosition2["Start"] = "start";
  InsertPosition2["End"] = "end";
  return InsertPosition2;
})(InsertPosition || {});
var Events = /* @__PURE__ */ ((Events2) => {
  Events2["Templates"] = "templates";
  Events2["Components"] = "components";
  Events2["Change"] = "change";
  return Events2;
})(Events || {});
const sidebarWidth = typeof localStorage !== "undefined" ? localStorage.getItem("veSidebarWidth") : 0;
const createStore = (data = [], definitions, hiddenCategories = [], rootElement, templates2, insertPosition, devices) => {
  return create(combine({
    data,
    definitions,
    hiddenCategories,
    rootElement,
    templates: templates2,
    insertPosition,
    device: devices[devices.length - 1],
    devices,
    previousData: data,
    rollbackMessage: null,
    // index where we will add a new block
    addBlockIndex: null,
    // Focused block (used for the preview)
    focusIndex: null,
    sidebarMode: "components",
    sidebarWidth: clamp$1(sidebarWidth ? parseInt(sidebarWidth, 10) : 33, 0, window.innerWidth - 375)
  }, (set2, getState) => {
    const methods = {
      setDevice: function(device) {
        set2({
          device
        });
      },
      setSidebarWidth: function(width) {
        localStorage.setItem("veSidebarWidth", width.toString());
        set2({
          sidebarWidth: width
        });
      },
      updateData: function(newData, path) {
        set2((state) => ({
          data: deepSet(state.data, path, newData)
        }));
        methods.dispatchEvent(Events.Change);
      },
      moveBloc: function(id, direction) {
        return set2(({
          data: data2
        }) => {
          const currentIndex = data2.findIndex((d4) => d4._id === id);
          return {
            data: moveItem(data2, currentIndex, currentIndex + direction)
          };
        });
      },
      removeBloc: function(id) {
        set2(({
          data: data2
        }) => ({
          previousData: data2,
          data: data2.filter((d4) => d4._id !== id),
          rollbackMessage: t("deleteItemConfirm")
        }));
        return methods.dispatchEvent(Events.Change);
      },
      rollback: function() {
        set2(({
          previousData
        }) => ({
          previousData: [],
          rollbackMessage: null,
          data: previousData
        }));
        methods.dispatchEvent(Events.Change);
      },
      voidRollback: function() {
        return set2({
          rollbackMessage: null,
          previousData: []
        });
      },
      insertData: function(name, index2, extraData) {
        if (!extraData) {
          extraData = fillDefaults({}, getState().definitions[name].fields);
        }
        const newData = indexify({
          ...extraData,
          _name: name,
          _id: name + uniqId()
        });
        set2((state) => {
          return {
            data: insertItem(state.data, index2, newData),
            focusIndex: newData._id
          };
        });
        methods.dispatchEvent(Events.Change);
        return newData;
      },
      dispatchEvent(e3) {
        const state = getState();
        state.rootElement.dispatchEvent(new CustomEvent(e3));
      },
      setData: function(newData) {
        set2({
          data: indexify(newData),
          focusIndex: null
        });
        methods.dispatchEvent(Events.Change);
      },
      setDataFromOutside: function(newData) {
        set2({
          data: indexify(newData)
        });
      },
      setFocusIndex: function(id) {
        set2({
          focusIndex: id
        });
      },
      setAddBlockIndex: function(index2) {
        const state = getState();
        if (index2 === void 0) {
          methods.setAddBlockIndex(state.insertPosition === InsertPosition.Start ? 0 : state.data.length);
          return;
        }
        if (typeof index2 === "string") {
          methods.setAddBlockIndex(state.data.findIndex((v2) => v2._id === index2) ?? 0);
          return;
        }
        if (index2 !== null) {
          const event = new CustomEvent(Events.Components, {
            cancelable: true,
            detail: {
              index: index2,
              add: (name, extraData) => {
                methods.insertData(name, index2, extraData);
                methods.setAddBlockIndex(null);
              }
            }
          });
          state.rootElement.dispatchEvent(event);
          if (event.defaultPrevented) {
            return;
          }
        }
        set2({
          addBlockIndex: index2
        });
      },
      toggleSidebarMode: function() {
        set2(({
          sidebarMode
        }) => ({
          sidebarMode: sidebarMode === "components" ? "templates" : "components"
        }));
      }
    };
    return methods;
  }));
};
const StoreContext = reactExports.createContext({});
function StoreProvider({
  children,
  data,
  definitions,
  hiddenCategories,
  rootElement,
  templates: templates2,
  insertPosition,
  devices,
  onStore
}) {
  const store2 = reactExports.useMemo(() => createStore(data, definitions, hiddenCategories, rootElement, templates2, insertPosition, devices), [data, definitions, hiddenCategories, rootElement, templates2, insertPosition, devices]);
  onStore(store2);
  return /* @__PURE__ */ jsx(StoreContext.Provider, {
    value: {
      store: store2
    },
    children
  });
}
function useStore(selector) {
  const store2 = reactExports.useContext(StoreContext).store;
  if (!store2) {
    throw new Error("A context need to be provided to use the store");
  }
  return useStore$1(store2, selector);
}
function usePartialStore(...keys2) {
  return Object.fromEntries(keys2.map((k3) => [k3, useStore((state) => state[k3])]));
}
function useFieldFocused(id) {
  return useStore((state) => state.focusIndex === id);
}
function useBlocSelectionVisible() {
  return useStore((state) => state.addBlockIndex) !== null;
}
function useEmit() {
  const {
    rootElement
  } = usePartialStore("rootElement");
  return (eventName, args) => {
    const event = new CustomEvent(eventName, args);
    rootElement.dispatchEvent(event);
    return event;
  };
}
function useAddBlock() {
  const {
    insertData,
    definitions,
    setAddBlockIndex
  } = usePartialStore("insertData", "definitions", "setAddBlockIndex");
  const blockIndex = useStore((state) => state.addBlockIndex) || 0;
  return reactExports.useCallback((blocName) => {
    insertData(blocName, blockIndex);
    setAddBlockIndex(null);
  }, [insertData, blockIndex, definitions, setAddBlockIndex]);
}
function useRollbackMessage() {
  const message = useStore((state) => state.rollbackMessage);
  const rollback = useStore((state) => state.rollback);
  const voidRollback = useStore((state) => state.voidRollback);
  return {
    message,
    rollback,
    voidRollback
  };
}
function useGetData() {
  const context = reactExports.useContext(StoreContext);
  return () => {
    var _a;
    return ((_a = context.store) == null ? void 0 : _a.getState().data) ?? [];
  };
}
function useDataLength() {
  return useStore((state) => state.data.length);
}
function useToggle(initial = false) {
  const [state, setState] = reactExports.useState(initial);
  return [state, () => setState((s4) => !s4), setState];
}
function useUpdateEffect(cb, deps) {
  const isFirstRender = reactExports.useRef(true);
  reactExports.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    return cb();
  }, deps);
}
function strToDom(str) {
  return document.createRange().createContextualFragment(`<div>${str.trim()}</div>`).firstChild;
}
function offsetTop(element, acc = 0) {
  if (element.offsetParent) {
    return offsetTop(element.offsetParent, acc + element.offsetTop);
  }
  return acc + element.offsetTop;
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$w() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Wrapper$d = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "e12j2xg82"
} : {
  target: "e12j2xg82",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "0",
  styles: ""
} : {
  name: "0",
  styles: "",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGluZy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckhlYWRpbmcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBGb3J3YXJkZWRSZWYsXG4gIEZvcndhcmRSZWZFeG90aWNDb21wb25lbnQsXG4gIEZ1bmN0aW9uQ29tcG9uZW50LFxuICBNb3VzZUV2ZW50SGFuZGxlcixcbiAgUHJvcHNXaXRoQ2hpbGRyZW4sXG4gIFJlZkF0dHJpYnV0ZXMsXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRmxleCwgVW5zdHlsZWRCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG50eXBlIFNpZGViYXJIZWFkaW5nUHJvcHMgPSBQcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHRpdGxlOiBzdHJpbmdcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxFbGVtZW50PlxufT5cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZChGbGV4KSh7fSlcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgY29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgZm9udFNpemU6ICcuOTVlbScsXG4gIHNjcm9sbE1hcmdpbjogJzEuOGVtJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHN0cm9uZzoge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgY29sb3I6ICd2YXIoLS12ZS1jb2xvciknLFxuICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICBmb250U2l6ZTogJzEuMWVtJyxcbiAgfSxcbn0pXG5cbmNvbnN0IEhvdmVyYWJsZUFjdGlvbnMgPSBzdHlsZWQoRmxleCkoe1xuICBvcGFjaXR5OiAwLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuM3MnLFxuICBbYCo6aG92ZXIgPiAqID4gJmBdOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn0pXG5cbmV4cG9ydCBjb25zdCBTaWRlYmFySGVhZGluZyA9IGZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIFNpZGViYXJIZWFkaW5nUHJvcHM+KFxuICAoXG4gICAgeyBjaGlsZHJlbiwgb25DbGljaywgdGl0bGUsIGRlc2NyaXB0aW9uIH0sXG4gICAgcmVmOiBGb3J3YXJkZWRSZWY8SFRNTERpdkVsZW1lbnQ+XG4gICkgPT4ge1xuICAgIGNvbnN0IGFzID0gb25DbGljayA/IFVuc3R5bGVkQnV0dG9uIDogJ2RpdidcbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXIgcmVmPXtyZWZ9IGdhcD17MH0gYmV0d2Vlbj5cbiAgICAgICAgPFRpdGxlIGFzPXthc30gb25DbGljaz17b25DbGlja30+XG4gICAgICAgICAgPHN0cm9uZz57dGl0bGV9PC9zdHJvbmc+XG4gICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICA8L1RpdGxlPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKVxuICB9XG4pIGFzIEZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8XG4gIFNpZGViYXJIZWFkaW5nUHJvcHMgJiBSZWZBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PlxuPiAmIHsgSG92ZXI6IHR5cGVvZiBTaWRlYmFySGVhZGluZ0hvdmVyYWJsZSB9XG5cblNpZGViYXJIZWFkaW5nLmRpc3BsYXlOYW1lID0gJ1NpZGViYXJIZWFkaW5nJ1xuXG5jb25zdCBTaWRlYmFySGVhZGluZ0hvdmVyYWJsZTogRnVuY3Rpb25Db21wb25lbnQ8UHJvcHNXaXRoQ2hpbGRyZW48e30+PiA9IChcbiAgcHJvcHNcbikgPT4ge1xuICByZXR1cm4gPEhvdmVyYWJsZUFjdGlvbnMgZ2FwPXswfSB7Li4ucHJvcHN9IC8+XG59XG5cblNpZGViYXJIZWFkaW5nLkhvdmVyID0gU2lkZWJhckhlYWRpbmdIb3ZlcmFibGVcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$w
});
const Title$1 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e12j2xg81"
} : {
  target: "e12j2xg81",
  label: "Title"
})(process.env.NODE_ENV === "production" ? {
  name: "1p24k77",
  styles: "width:100%;color:var(--ve-color-light);text-align:left;font-size:.95em;scroll-margin:1.8em;cursor:pointer;strong{display:block;color:var(--ve-color);font-weight:500;font-size:1.1em;}"
} : {
  name: "1p24k77",
  styles: "width:100%;color:var(--ve-color-light);text-align:left;font-size:.95em;scroll-margin:1.8em;cursor:pointer;strong{display:block;color:var(--ve-color);font-weight:500;font-size:1.1em;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGluZy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JjIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGluZy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEZvcndhcmRlZFJlZixcbiAgRm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudCxcbiAgRnVuY3Rpb25Db21wb25lbnQsXG4gIE1vdXNlRXZlbnRIYW5kbGVyLFxuICBQcm9wc1dpdGhDaGlsZHJlbixcbiAgUmVmQXR0cmlidXRlcyxcbn0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBGbGV4LCBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbnR5cGUgU2lkZWJhckhlYWRpbmdQcm9wcyA9IFByb3BzV2l0aENoaWxkcmVuPHtcbiAgdGl0bGU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IHN0cmluZ1xuICBvbkNsaWNrPzogTW91c2VFdmVudEhhbmRsZXI8SFRNTEVsZW1lbnQ+XG59PlxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkKEZsZXgpKHt9KVxuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXYoe1xuICB3aWR0aDogJzEwMCUnLFxuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBmb250U2l6ZTogJy45NWVtJyxcbiAgc2Nyb2xsTWFyZ2luOiAnMS44ZW0nLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgc3Ryb25nOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gICAgZm9udFdlaWdodDogNTAwLFxuICAgIGZvbnRTaXplOiAnMS4xZW0nLFxuICB9LFxufSlcblxuY29uc3QgSG92ZXJhYmxlQWN0aW9ucyA9IHN0eWxlZChGbGV4KSh7XG4gIG9wYWNpdHk6IDAsXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IC4zcycsXG4gIFtgKjpob3ZlciA+ICogPiAmYF06IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufSlcblxuZXhwb3J0IGNvbnN0IFNpZGViYXJIZWFkaW5nID0gZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgU2lkZWJhckhlYWRpbmdQcm9wcz4oXG4gIChcbiAgICB7IGNoaWxkcmVuLCBvbkNsaWNrLCB0aXRsZSwgZGVzY3JpcHRpb24gfSxcbiAgICByZWY6IEZvcndhcmRlZFJlZjxIVE1MRGl2RWxlbWVudD5cbiAgKSA9PiB7XG4gICAgY29uc3QgYXMgPSBvbkNsaWNrID8gVW5zdHlsZWRCdXR0b24gOiAnZGl2J1xuICAgIHJldHVybiAoXG4gICAgICA8V3JhcHBlciByZWY9e3JlZn0gZ2FwPXswfSBiZXR3ZWVuPlxuICAgICAgICA8VGl0bGUgYXM9e2FzfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICA8c3Ryb25nPnt0aXRsZX08L3N0cm9uZz5cbiAgICAgICAgICB7ZGVzY3JpcHRpb259XG4gICAgICAgIDwvVGl0bGU+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvV3JhcHBlcj5cbiAgICApXG4gIH1cbikgYXMgRm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudDxcbiAgU2lkZWJhckhlYWRpbmdQcm9wcyAmIFJlZkF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+XG4+ICYgeyBIb3ZlcjogdHlwZW9mIFNpZGViYXJIZWFkaW5nSG92ZXJhYmxlIH1cblxuU2lkZWJhckhlYWRpbmcuZGlzcGxheU5hbWUgPSAnU2lkZWJhckhlYWRpbmcnXG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nSG92ZXJhYmxlOiBGdW5jdGlvbkNvbXBvbmVudDxQcm9wc1dpdGhDaGlsZHJlbjx7fT4+ID0gKFxuICBwcm9wc1xuKSA9PiB7XG4gIHJldHVybiA8SG92ZXJhYmxlQWN0aW9ucyBnYXA9ezB9IHsuLi5wcm9wc30gLz5cbn1cblxuU2lkZWJhckhlYWRpbmcuSG92ZXIgPSBTaWRlYmFySGVhZGluZ0hvdmVyYWJsZVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$w
});
const HoverableActions = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "e12j2xg80"
} : {
  target: "e12j2xg80",
  label: "HoverableActions"
})({
  opacity: 0,
  transition: "opacity .3s",
  [`*:hover > * > &`]: {
    opacity: 1
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGluZy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUN5QiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckhlYWRpbmcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBGb3J3YXJkZWRSZWYsXG4gIEZvcndhcmRSZWZFeG90aWNDb21wb25lbnQsXG4gIEZ1bmN0aW9uQ29tcG9uZW50LFxuICBNb3VzZUV2ZW50SGFuZGxlcixcbiAgUHJvcHNXaXRoQ2hpbGRyZW4sXG4gIFJlZkF0dHJpYnV0ZXMsXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRmxleCwgVW5zdHlsZWRCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG50eXBlIFNpZGViYXJIZWFkaW5nUHJvcHMgPSBQcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHRpdGxlOiBzdHJpbmdcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxFbGVtZW50PlxufT5cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZChGbGV4KSh7fSlcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgY29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgZm9udFNpemU6ICcuOTVlbScsXG4gIHNjcm9sbE1hcmdpbjogJzEuOGVtJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHN0cm9uZzoge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgY29sb3I6ICd2YXIoLS12ZS1jb2xvciknLFxuICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICBmb250U2l6ZTogJzEuMWVtJyxcbiAgfSxcbn0pXG5cbmNvbnN0IEhvdmVyYWJsZUFjdGlvbnMgPSBzdHlsZWQoRmxleCkoe1xuICBvcGFjaXR5OiAwLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuM3MnLFxuICBbYCo6aG92ZXIgPiAqID4gJmBdOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn0pXG5cbmV4cG9ydCBjb25zdCBTaWRlYmFySGVhZGluZyA9IGZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIFNpZGViYXJIZWFkaW5nUHJvcHM+KFxuICAoXG4gICAgeyBjaGlsZHJlbiwgb25DbGljaywgdGl0bGUsIGRlc2NyaXB0aW9uIH0sXG4gICAgcmVmOiBGb3J3YXJkZWRSZWY8SFRNTERpdkVsZW1lbnQ+XG4gICkgPT4ge1xuICAgIGNvbnN0IGFzID0gb25DbGljayA/IFVuc3R5bGVkQnV0dG9uIDogJ2RpdidcbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXIgcmVmPXtyZWZ9IGdhcD17MH0gYmV0d2Vlbj5cbiAgICAgICAgPFRpdGxlIGFzPXthc30gb25DbGljaz17b25DbGlja30+XG4gICAgICAgICAgPHN0cm9uZz57dGl0bGV9PC9zdHJvbmc+XG4gICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICA8L1RpdGxlPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKVxuICB9XG4pIGFzIEZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8XG4gIFNpZGViYXJIZWFkaW5nUHJvcHMgJiBSZWZBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PlxuPiAmIHsgSG92ZXI6IHR5cGVvZiBTaWRlYmFySGVhZGluZ0hvdmVyYWJsZSB9XG5cblNpZGViYXJIZWFkaW5nLmRpc3BsYXlOYW1lID0gJ1NpZGViYXJIZWFkaW5nJ1xuXG5jb25zdCBTaWRlYmFySGVhZGluZ0hvdmVyYWJsZTogRnVuY3Rpb25Db21wb25lbnQ8UHJvcHNXaXRoQ2hpbGRyZW48e30+PiA9IChcbiAgcHJvcHNcbikgPT4ge1xuICByZXR1cm4gPEhvdmVyYWJsZUFjdGlvbnMgZ2FwPXswfSB7Li4ucHJvcHN9IC8+XG59XG5cblNpZGViYXJIZWFkaW5nLkhvdmVyID0gU2lkZWJhckhlYWRpbmdIb3ZlcmFibGVcbiJdfQ== */");
const SidebarHeading = reactExports.forwardRef(({
  children,
  onClick,
  title,
  description
}, ref) => {
  const as = onClick ? UnstyledButton : "div";
  return /* @__PURE__ */ jsxs(Wrapper$d, {
    ref,
    gap: 0,
    between: true,
    children: [/* @__PURE__ */ jsxs(Title$1, {
      as,
      onClick,
      children: [/* @__PURE__ */ jsx("strong", {
        children: title
      }), description]
    }), children]
  });
});
SidebarHeading.displayName = "SidebarHeading";
const SidebarHeadingHoverable = (props) => {
  return /* @__PURE__ */ jsx(HoverableActions, {
    gap: 0,
    ...props
  });
};
SidebarHeading.Hover = SidebarHeadingHoverable;
function _EMOTION_STRINGIFIED_CSS_ERROR__$v() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const SidebarBlocWrapper = /* @__PURE__ */ createStyled(Sortable, process.env.NODE_ENV === "production" ? {
  target: "SidebarBlocWrapper"
} : {
  target: "SidebarBlocWrapper",
  label: "SidebarBlocWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "r5r2rm",
  styles: "position:relative;padding:.8em .6em .8em 1.4em;background-color:#fff;border:1px solid rgba(0,0,0,0.06);box-shadow:0 1px 2px 0 rgba(0,0,0,0.05);transition:box-shadow .3s;cursor:inherit;&[data-dragging]{box-shadow:var(--ve-shadow-dragging);transition:box-shadow .3s!important;z-index:10;}"
} : {
  name: "r5r2rm",
  styles: "position:relative;padding:.8em .6em .8em 1.4em;background-color:#fff;border:1px solid rgba(0,0,0,0.06);box-shadow:0 1px 2px 0 rgba(0,0,0,0.05);transition:box-shadow .3s;cursor:inherit;&[data-dragging]{box-shadow:var(--ve-shadow-dragging);transition:box-shadow .3s!important;z-index:10;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyQmxvY1dyYXBwZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdrQyIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckJsb2NXcmFwcGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgU29ydGFibGUgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Tb3J0YWJsZSdcblxuZXhwb3J0IGNvbnN0IFNpZGViYXJCbG9jV3JhcHBlciA9IHN0eWxlZChTb3J0YWJsZSwge1xuICB0YXJnZXQ6ICdTaWRlYmFyQmxvY1dyYXBwZXInLFxufSkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgcGFkZGluZzogJy44ZW0gLjZlbSAuOGVtIDEuNGVtJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMDYpJyxcbiAgYm94U2hhZG93OiAnMCAxcHggMnB4IDAgcmdiYSgwLDAsMCwwLjA1KScsXG4gIHRyYW5zaXRpb246ICdib3gtc2hhZG93IC4zcycsXG4gIGN1cnNvcjogJ2luaGVyaXQnLCAvLyBBdm9pciBwcm9ibGVtcyB3aXRoIHJlc2V0IHRoYXQgc2V0IHBvaW50ZXIgb24gW3JvbGU9YnV0dG9uXVxuICAnJltkYXRhLWRyYWdnaW5nXSc6IHtcbiAgICBib3hTaGFkb3c6ICd2YXIoLS12ZS1zaGFkb3ctZHJhZ2dpbmcpJyxcbiAgICB0cmFuc2l0aW9uOiAnYm94LXNoYWRvdyAuM3MhaW1wb3J0YW50JyxcbiAgICB6SW5kZXg6IDEwLFxuICB9LFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$v
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$u() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$9 = process.env.NODE_ENV === "production" ? {
  name: "1ok6q9c",
  styles: "background-color:var(--ve-hover);box-shadow:none"
} : {
  name: "332c78-SidebarBlocMissing",
  styles: "background-color:var(--ve-hover);box-shadow:none;label:SidebarBlocMissing;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyQmxvY01pc3NpbmcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CTSIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckJsb2NNaXNzaW5nLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZGViYXJIZWFkaW5nIH0gZnJvbSAnLi9TaWRlYmFySGVhZGluZydcbmltcG9ydCB7IFNpZGViYXJCbG9jV3JhcHBlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckJsb2NXcmFwcGVyJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHsgQnV0dG9uSWNvbiwgSWNvblRyYXNoIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBFZGl0b3JDb21wb25lbnREYXRhIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgdCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvaTE4bidcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcblxudHlwZSBTaWRlYmFyQmxvY01pc3NpbmdQcm9wcyA9IHtcbiAgZGF0YTogRWRpdG9yQ29tcG9uZW50RGF0YVxufVxuXG4vKipcbiAqIENvbXBvbmVudCBkaXNwbGF5ZWQgd2hlbiBhIGNvbXBvbmVudCBkZWZpbml0aW9uIGNhbid0IGJlIHJlc29sdmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyQmxvY01pc3NpbmcoeyBkYXRhIH06IFNpZGViYXJCbG9jTWlzc2luZ1Byb3BzKSB7XG4gIGNvbnN0IHsgcmVtb3ZlQmxvYyB9ID0gdXNlUGFydGlhbFN0b3JlKCdyZW1vdmVCbG9jJylcbiAgcmV0dXJuIChcbiAgICA8U2lkZWJhckJsb2NXcmFwcGVyXG4gICAgICBpdGVtPXtkYXRhfVxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWhvdmVyKScsXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8U2lkZWJhckhlYWRpbmcgdGl0bGU9e2Ake3QoJ3Vua25vd25Db21wb25lbnQnKX0gOiAke2RhdGEuX25hbWV9YH0+XG4gICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgZGFuZ2VyXG4gICAgICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiByZW1vdmVCbG9jKGRhdGEuX2lkKSl9XG4gICAgICAgICAgdGl0bGU9e3QoJ2RlbGV0ZUNvbXBvbmVudCcpfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb25UcmFzaCBzaXplPXsyMH0gLz5cbiAgICAgICAgPC9CdXR0b25JY29uPlxuICAgICAgPC9TaWRlYmFySGVhZGluZz5cbiAgICA8L1NpZGViYXJCbG9jV3JhcHBlcj5cbiAgKVxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$u
};
function SidebarBlocMissing({
  data
}) {
  const {
    removeBloc
  } = usePartialStore("removeBloc");
  return /* @__PURE__ */ jsx(SidebarBlocWrapper, {
    item: data,
    css: _ref$9,
    children: /* @__PURE__ */ jsx(SidebarHeading, {
      title: `${t("unknownComponent")} : ${data._name}`,
      children: /* @__PURE__ */ jsx(ButtonIcon, {
        danger: true,
        onClick: prevent(() => removeBloc(data._id)),
        title: t("deleteComponent"),
        children: /* @__PURE__ */ jsx(IconTrash, {
          size: 20
        })
      })
    })
  });
}
function FieldsRenderer({
  data,
  fields,
  path,
  onUpdate
}) {
  return /* @__PURE__ */ jsx(Fragment$1, {
    children: fields.filter((field) => field.shouldRender(data)).map((field, k3) => field.group ? /* @__PURE__ */ jsx(field.render, {
      options: field.options,
      children: /* @__PURE__ */ jsx(FieldsRenderer, {
        fields: field.fields,
        data,
        path,
        onUpdate
      })
    }, k3) : /* @__PURE__ */ jsx(Field, {
      field,
      value: field.name ? data[field.name] : void 0,
      path: `${path}.${field.name}`,
      extraProps: field.extraProps ? field.extraProps(data) : void 0,
      onUpdate
    }, field.name))
  });
}
function Field({
  field,
  value,
  path,
  extraProps,
  onUpdate
}) {
  const Component2 = field.render;
  const handleChange = reactExports.useCallback((v2) => {
    onUpdate(v2, path);
  }, [path, onUpdate]);
  return /* @__PURE__ */ jsx(Component2, {
    value,
    onChange: handleChange,
    options: field.options,
    ...extraProps
  });
}
function SidebarFields({
  fields,
  data,
  path
}) {
  const {
    updateData
  } = usePartialStore("updateData");
  return /* @__PURE__ */ jsx(FieldsRenderer, {
    fields,
    data,
    onUpdate: updateData,
    path
  });
}
async function copyToClipboard(text) {
  try {
    const permissionName = "clipboard-write";
    const result = await navigator.permissions.query({
      name: permissionName
    });
    if (result.state == "granted" || result.state == "prompt") {
      await navigator.clipboard.writeText(text);
      return true;
    }
    throw result;
  } catch (e3) {
    await navigator.clipboard.writeText(text);
    return true;
  }
}
function isClientSide() {
  return !!(typeof window !== "undefined" && window.document);
}
function CopyAction({
  data,
  size: size2,
  ...props
}) {
  const [success, setSuccess] = reactExports.useState(false);
  const getData = useGetData();
  const timer = reactExports.useRef();
  const handleCopy = async () => {
    try {
      await copyToClipboard(stringifyFields(data ?? getData()));
      setSuccess(true);
      timer.current = window.setTimeout(() => {
        setSuccess(false);
      }, 4e3);
    } catch (e3) {
      alert(e3);
    }
  };
  const tooltipLabel = data ? t("copyComponent") : t("copyPage");
  reactExports.useEffect(() => {
    clearTimeout(timer.current);
  }, []);
  return /* @__PURE__ */ jsx(Tooltip$1, {
    content: success ? /* @__PURE__ */ jsxs(Fragment$1, {
      children: [t("copySuccess"), /* @__PURE__ */ jsx("br", {}), t("copyInstructions")]
    }) : tooltipLabel,
    trigger: "focus",
    children: /* @__PURE__ */ jsx("div", {
      children: /* @__PURE__ */ jsx(ButtonIcon, {
        onClick: prevent(handleCopy),
        success,
        ...props,
        children: success ? /* @__PURE__ */ jsx(IconCheck, {
          size: size2
        }) : /* @__PURE__ */ jsx(IconCode, {
          size: size2
        })
      })
    })
  });
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$t() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$8 = process.env.NODE_ENV === "production" ? {
  name: "1xvwyp0",
  styles: "margin-top:.5em"
} : {
  name: "amueou-SidebarItem",
  styles: "margin-top:.5em;label:SidebarItem;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyQmxvYy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0Y2QiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckJsb2MudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtbywgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBFZGl0b3JDb21wb25lbnREYXRhLCBFZGl0b3JDb21wb25lbnREZWZpbml0aW9uIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgdXNlRmllbGRGb2N1c2VkLCB1c2VQYXJ0aWFsU3RvcmUgfSBmcm9tICdzcmMvc3RvcmUnXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICdzcmMvaG9va3MvdXNlVG9nZ2xlJ1xuaW1wb3J0IHsgdXNlVXBkYXRlRWZmZWN0IH0gZnJvbSAnc3JjL2hvb2tzL3VzZVVwZGF0ZUVmZmVjdCdcbmltcG9ydCB7IHN0clRvRG9tIH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9kb20nXG5pbXBvcnQgeyBTaWRlYmFyQmxvY01pc3NpbmcgfSBmcm9tICcuL1NpZGViYXJCbG9jTWlzc2luZydcbmltcG9ydCB7IFNpZGViYXJIZWFkaW5nIH0gZnJvbSAnLi9TaWRlYmFySGVhZGluZydcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IEJ1dHRvbkljb24sIEZsZXgsIEljb25Eb3duLCBJY29uVHJhc2ggfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IFNpZGViYXJGaWVsZHMgfSBmcm9tICcuL1NpZGViYXJGaWVsZHMnXG5pbXBvcnQgeyBDb3B5QWN0aW9uIH0gZnJvbSAnLi9BY3Rpb25zL0NvcHlBY3Rpb24nXG5pbXBvcnQgeyBTaWRlYmFyQmxvY1dyYXBwZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJCbG9jV3JhcHBlcidcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5cbnR5cGUgU2lkZWJhckJsb2NQcm9wcyA9IHtcbiAgZGF0YTogRWRpdG9yQ29tcG9uZW50RGF0YVxuICBkZWZpbml0aW9uPzogRWRpdG9yQ29tcG9uZW50RGVmaW5pdGlvblxuICBwYXRoOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IFNpZGViYXJCbG9jID0gbWVtbyhmdW5jdGlvbiBTaWRlYmFySXRlbSh7XG4gIGRhdGEsXG4gIGRlZmluaXRpb24sXG4gIHBhdGgsXG59OiBTaWRlYmFyQmxvY1Byb3BzKSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcbiAgY29uc3QgaXNGb2N1c2VkID0gdXNlRmllbGRGb2N1c2VkKGRhdGEuX2lkKVxuICBjb25zdCBbaXNDb2xsYXBzZWQsIHRvZ2dsZUNvbGxhcHNlZCwgc2V0Q29sbGFwc2VkXSA9IHVzZVRvZ2dsZShmYWxzZSlcbiAgY29uc3QgeyByZW1vdmVCbG9jLCBzZXRGb2N1c0luZGV4IH0gPSB1c2VQYXJ0aWFsU3RvcmUoXG4gICAgJ3JlbW92ZUJsb2MnLFxuICAgICdzZXRGb2N1c0luZGV4J1xuICApXG4gIGNvbnN0IGxhYmVsID1cbiAgICBkZWZpbml0aW9uPy5sYWJlbCAmJiBkYXRhW2RlZmluaXRpb24ubGFiZWxdID8gZGF0YVtkZWZpbml0aW9uLmxhYmVsXSA6IG51bGxcblxuICAvLyBTY3JvbGwgdmVycyBsJ8OpbMOpbWVudCBsb3JzcXUnaWwgYSBsZSBmb2N1c1xuICB1c2VVcGRhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgIHNldENvbGxhcHNlZChmYWxzZSlcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PlxuICAgICAgICAgIHJlZi5jdXJyZW50IS5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJywgYmxvY2s6ICdzdGFydCcgfSksXG4gICAgICAgIDEwMFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRDb2xsYXBzZWQodHJ1ZSlcbiAgICB9XG4gIH0sIFtpc0ZvY3VzZWRdKVxuXG4gIGNvbnN0IGxhYmVsSFRNTFNhZmUgPSB1c2VNZW1vKFxuICAgICgpID0+IChsYWJlbD8uaW5jbHVkZXMoJzwnKSA/IHN0clRvRG9tKGxhYmVsKS5pbm5lclRleHQgOiBsYWJlbCksXG4gICAgW2xhYmVsXVxuICApXG5cbiAgY29uc3QgaGFuZGxlUmVtb3ZlID0gKCkgPT4ge1xuICAgIHJlbW92ZUJsb2MoZGF0YS5faWQpXG4gIH1cblxuICBjb25zdCBmb2N1c0Jsb2MgPSAoKSA9PiB7XG4gICAgaWYgKGlzQ29sbGFwc2VkKSB7XG4gICAgICBzZXRGb2N1c0luZGV4KHBhdGgpXG4gICAgfVxuICAgIHRvZ2dsZUNvbGxhcHNlZCgpXG4gIH1cbiAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgcmV0dXJuIDxTaWRlYmFyQmxvY01pc3NpbmcgZGF0YT17ZGF0YX0gLz5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFNpZGViYXJCbG9jV3JhcHBlciBpdGVtPXtkYXRhfT5cbiAgICAgIDxTaWRlYmFySGVhZGluZ1xuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgdGl0bGU9e2RlZmluaXRpb24udGl0bGV9XG4gICAgICAgIGRlc2NyaXB0aW9uPXtpc0NvbGxhcHNlZCA/IGxhYmVsSFRNTFNhZmUgOiBudWxsfVxuICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KGZvY3VzQmxvYyl9XG4gICAgICA+XG4gICAgICAgIDxTaWRlYmFySGVhZGluZy5Ib3Zlcj5cbiAgICAgICAgICA8Q29weUFjdGlvbiBkYXRhPXtkYXRhfSBzaXplPXsyMH0gLz5cbiAgICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgICAgZGFuZ2VyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVSZW1vdmV9XG4gICAgICAgICAgICB0aXRsZT17dCgnZGVsZXRlQ29tcG9uZW50Jyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsyMH0gLz5cbiAgICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICAgIDwvU2lkZWJhckhlYWRpbmcuSG92ZXI+XG4gICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgcm90YXRlPXtpc0NvbGxhcHNlZCA/IC05MCA6IDB9XG4gICAgICAgICAgb25DbGljaz17cHJldmVudCh0b2dnbGVDb2xsYXBzZWQpfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb25Eb3duIHNpemU9ezIwfSAvPlxuICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICA8L1NpZGViYXJIZWFkaW5nPlxuICAgICAgeyFpc0NvbGxhcHNlZCAmJiAoXG4gICAgICAgIDxGbGV4IGNvbHVtbiBnYXA9ezF9IGNzcz17eyBtYXJnaW5Ub3A6ICcuNWVtJyB9fT5cbiAgICAgICAgICA8U2lkZWJhckZpZWxkcyBmaWVsZHM9e2RlZmluaXRpb24uZmllbGRzfSBkYXRhPXtkYXRhfSBwYXRoPXtwYXRofSAvPlxuICAgICAgICA8L0ZsZXg+XG4gICAgICApfVxuICAgIDwvU2lkZWJhckJsb2NXcmFwcGVyPlxuICApXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$t
};
const SidebarBloc = reactExports.memo(function SidebarItem({
  data,
  definition,
  path
}) {
  const ref = reactExports.useRef(null);
  const isFocused = useFieldFocused(data._id);
  const [isCollapsed, toggleCollapsed, setCollapsed] = useToggle(false);
  const {
    removeBloc,
    setFocusIndex
  } = usePartialStore("removeBloc", "setFocusIndex");
  const label = (definition == null ? void 0 : definition.label) && data[definition.label] ? data[definition.label] : null;
  useUpdateEffect(() => {
    if (isFocused) {
      setCollapsed(false);
      window.setTimeout(() => ref.current.scrollIntoView({
        behavior: "smooth",
        block: "start"
      }), 100);
    } else {
      setCollapsed(true);
    }
  }, [isFocused]);
  const labelHTMLSafe = reactExports.useMemo(() => (label == null ? void 0 : label.includes("<")) ? strToDom(label).innerText : label, [label]);
  const handleRemove = () => {
    removeBloc(data._id);
  };
  const focusBloc = () => {
    if (isCollapsed) {
      setFocusIndex(path);
    }
    toggleCollapsed();
  };
  if (!definition) {
    return /* @__PURE__ */ jsx(SidebarBlocMissing, {
      data
    });
  }
  return /* @__PURE__ */ jsxs(SidebarBlocWrapper, {
    item: data,
    children: [/* @__PURE__ */ jsxs(SidebarHeading, {
      ref,
      title: definition.title,
      description: isCollapsed ? labelHTMLSafe : null,
      onClick: prevent(focusBloc),
      children: [/* @__PURE__ */ jsxs(SidebarHeading.Hover, {
        children: [/* @__PURE__ */ jsx(CopyAction, {
          data,
          size: 20
        }), /* @__PURE__ */ jsx(ButtonIcon, {
          danger: true,
          onClick: handleRemove,
          title: t("deleteComponent"),
          children: /* @__PURE__ */ jsx(IconTrash, {
            size: 20
          })
        })]
      }), /* @__PURE__ */ jsx(ButtonIcon, {
        rotate: isCollapsed ? -90 : 0,
        onClick: prevent(toggleCollapsed),
        children: /* @__PURE__ */ jsx(IconDown, {
          size: 20
        })
      })]
    }), !isCollapsed && /* @__PURE__ */ jsx(Flex, {
      column: true,
      gap: 1,
      css: _ref$8,
      children: /* @__PURE__ */ jsx(SidebarFields, {
        fields: definition.fields,
        data,
        path
      })
    })]
  });
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$s() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function SidebarBlocs() {
  const {
    updateData,
    definitions,
    data
  } = usePartialStore("definitions", "updateData", "data");
  const handleMove = (from3, to) => {
    updateData(moveItem(data, from3, to));
  };
  return /* @__PURE__ */ jsx(Wrapper$c, {
    children: /* @__PURE__ */ jsx(SortableWrapper, {
      items: data,
      onMove: handleMove,
      children: data.map((v2, k3) => /* @__PURE__ */ jsx(SidebarBloc, {
        data: v2,
        definition: definitions[v2._name],
        path: `${k3}`
      }, v2._id))
    })
  });
}
const Wrapper$c = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e17tec420"
} : {
  target: "e17tec420",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1w8w1pb",
  styles: "display:grid;grid-template-columns:1fr;flex-direction:column;gap:1em;padding:1em;overflow:auto;scrollbar-gutter:stable"
} : {
  name: "1w8w1pb",
  styles: "display:grid;grid-template-columns:1fr;flex-direction:column;gap:1em;padding:1em;overflow:auto;scrollbar-gutter:stable",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyQmxvY3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDZ0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJCbG9jcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JDb21wb25lbnREYXRhIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgU29ydGFibGVXcmFwcGVyIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvU29ydGFibGUnXG5pbXBvcnQgeyBtb3ZlSXRlbSB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvYXJyYXknXG5cbmltcG9ydCB7IFNpZGViYXJCbG9jIH0gZnJvbSAnLi9TaWRlYmFyQmxvYydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgdXNlUGFydGlhbFN0b3JlIH0gZnJvbSAnc3JjL3N0b3JlJ1xuXG4vKipcbiAqIEfDqW7DqHJlIGxhIGxpc3RlIGRlcyBjaGFtcHMgZGFucyBsYSBzaWRlYmFyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyQmxvY3MoKSB7XG4gIGNvbnN0IHsgdXBkYXRlRGF0YSwgZGVmaW5pdGlvbnMsIGRhdGEgfSA9IHVzZVBhcnRpYWxTdG9yZShcbiAgICAnZGVmaW5pdGlvbnMnLFxuICAgICd1cGRhdGVEYXRhJyxcbiAgICAnZGF0YScsXG4gIClcbiAgY29uc3QgaGFuZGxlTW92ZSA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IHtcbiAgICB1cGRhdGVEYXRhKG1vdmVJdGVtKGRhdGEsIGZyb20sIHRvKSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXI+XG4gICAgICA8U29ydGFibGVXcmFwcGVyIGl0ZW1zPXtkYXRhfSBvbk1vdmU9e2hhbmRsZU1vdmV9PlxuICAgICAgICB7ZGF0YS5tYXAoKHYsIGspID0+IChcbiAgICAgICAgICA8U2lkZWJhckJsb2NcbiAgICAgICAgICAgIGtleT17di5faWR9XG4gICAgICAgICAgICBkYXRhPXt2fVxuICAgICAgICAgICAgZGVmaW5pdGlvbj17ZGVmaW5pdGlvbnNbdi5fbmFtZV19XG4gICAgICAgICAgICBwYXRoPXtgJHtrfWB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L1NvcnRhYmxlV3JhcHBlcj5cbiAgICA8L1dyYXBwZXI+XG4gIClcbn1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZ3JpZCcsXG4gIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICcxZnInLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgZ2FwOiAnMWVtJyxcbiAgcGFkZGluZzogJzFlbScsXG4gIG92ZXJmbG93OiAnYXV0bycsXG4gIHNjcm9sbGJhckd1dHRlcjogJ3N0YWJsZScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$s
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$r() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function SidebarHeader({
  onClose,
  children
}) {
  const {
    setAddBlockIndex
  } = usePartialStore("setAddBlockIndex");
  return /* @__PURE__ */ jsxs(Wrapper$b, {
    between: true,
    children: [/* @__PURE__ */ jsx("div", {
      children: /* @__PURE__ */ jsx(ButtonIcon, {
        title: t("close"),
        onClick: prevent(onClose),
        children: /* @__PURE__ */ jsx(IconCross, {
          size: 12
        })
      })
    }), /* @__PURE__ */ jsxs(Flex, {
      children: [children, /* @__PURE__ */ jsx(CopyAction, {
        size: 20
      }), /* @__PURE__ */ jsx(Button$8, {
        icon: IconCirclePlus,
        onClick: prevent(() => setAddBlockIndex()),
        children: t("addComponent")
      })]
    })]
  });
}
const Wrapper$b = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "e161f1b80"
} : {
  target: "e161f1b80",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "dryaye",
  styles: "padding:0 1em;flex:none;background-color:#FFF;border-bottom:1px solid rgba(0,0,0,0.06);box-shadow:rgba(0, 0, 0, 0.05) 0 1px 2px 0;height:64px"
} : {
  name: "dryaye",
  styles: "padding:0 1em;flex:none;background-color:#FFF;border-bottom:1px solid rgba(0,0,0,0.06);box-shadow:rgba(0, 0, 0, 0.05) 0 1px 2px 0;height:64px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQ2dCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcbmltcG9ydCB7XG4gIEJ1dHRvbixcbiAgQnV0dG9uSWNvbixcbiAgRmxleCxcbiAgSWNvbkNpcmNsZVBsdXMsXG4gIEljb25Dcm9zcyxcbn0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBDb3B5QWN0aW9uIH0gZnJvbSAnLi9BY3Rpb25zL0NvcHlBY3Rpb24nXG5cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgdCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvaTE4bidcbmltcG9ydCB7IFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSAncmVhY3QnXG5cbnR5cGUgU2lkZWJhckhlYWRlclByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkXG59PlxuXG5leHBvcnQgZnVuY3Rpb24gU2lkZWJhckhlYWRlcih7IG9uQ2xvc2UsIGNoaWxkcmVuIH06IFNpZGViYXJIZWFkZXJQcm9wcykge1xuICBjb25zdCB7IHNldEFkZEJsb2NrSW5kZXggfSA9IHVzZVBhcnRpYWxTdG9yZSgnc2V0QWRkQmxvY2tJbmRleCcpXG5cbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlciBiZXR3ZWVuPlxuICAgICAgPGRpdj5cbiAgICAgICAgPEJ1dHRvbkljb24gdGl0bGU9e3QoJ2Nsb3NlJyl9IG9uQ2xpY2s9e3ByZXZlbnQob25DbG9zZSl9PlxuICAgICAgICAgIDxJY29uQ3Jvc3Mgc2l6ZT17MTJ9IC8+XG4gICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPEZsZXg+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPENvcHlBY3Rpb24gc2l6ZT17MjB9IC8+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBpY29uPXtJY29uQ2lyY2xlUGx1c31cbiAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IHNldEFkZEJsb2NrSW5kZXgoKSl9XG4gICAgICAgID5cbiAgICAgICAgICB7dCgnYWRkQ29tcG9uZW50Jyl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9GbGV4PlxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkKEZsZXgpKHtcbiAgcGFkZGluZzogJzAgMWVtJyxcbiAgZmxleDogJ25vbmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZGJyxcbiAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4wNiknLFxuICBib3hTaGFkb3c6ICdyZ2JhKDAsIDAsIDAsIDAuMDUpIDAgMXB4IDJweCAwJyxcbiAgaGVpZ2h0OiA2NCxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$r
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$q() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function SidebarFooter() {
  return /* @__PURE__ */ jsxs(Wrapper$a, {
    between: true,
    children: [/* @__PURE__ */ jsxs(Mention, {
      children: [t("poweredBy"), " ", /* @__PURE__ */ jsx("br", {}), /* @__PURE__ */ jsx("a", {
        href: "https://ciklik.com",
        target: "_blank",
        children: /* @__PURE__ */ jsx(Logo, {
          src: "https://static.ciklik.co/logo.svg",
          alt: "Logo Boxraiser"
        })
      })]
    }), /* @__PURE__ */ jsx(Button$8, {
      type: "submit",
      icon: IconSave,
      children: t("save")
    })]
  });
}
const Wrapper$a = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "e186ienn2"
} : {
  target: "e186ienn2",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1t65jij",
  styles: "margin-top:auto;background-color:#FFF;justify-content:flex-end;border-top:1px solid rgba(0,0,0,0.06);padding:.5em 1em;box-shadow:0 -1px 2px 0 rgba(0,0,0,0.05)"
} : {
  name: "1t65jij",
  styles: "margin-top:auto;background-color:#FFF;justify-content:flex-end;border-top:1px solid rgba(0,0,0,0.06);padding:.5em 1em;box-shadow:0 -1px 2px 0 rgba(0,0,0,0.05)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRm9vdGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQmdCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRm9vdGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvbiwgRmxleCwgSWNvblNhdmUgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyB0IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9pMThuJ1xuXG5leHBvcnQgZnVuY3Rpb24gU2lkZWJhckZvb3RlcigpIHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlciBiZXR3ZWVuPlxuICAgICAgPE1lbnRpb24+XG4gICAgICAgIHt0KCdwb3dlcmVkQnknKX0gPGJyIC8+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL2Npa2xpay5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICA8TG9nbyBzcmM9XCJodHRwczovL3N0YXRpYy5jaWtsaWsuY28vbG9nby5zdmdcIiBhbHQ9XCJMb2dvIEJveHJhaXNlclwiIC8+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvTWVudGlvbj5cbiAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIGljb249e0ljb25TYXZlfT5cbiAgICAgICAge3QoJ3NhdmUnKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkKEZsZXgpKHtcbiAgbWFyZ2luVG9wOiAnYXV0bycsXG4gIGJhY2tncm91bmRDb2xvcjogJyNGRkYnLFxuICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgYm9yZGVyVG9wOiAnMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4wNiknLFxuICBwYWRkaW5nOiAnLjVlbSAxZW0nLFxuICBib3hTaGFkb3c6ICcwIC0xcHggMnB4IDAgcmdiYSgwLDAsMCwwLjA1KScsXG59KVxuXG5jb25zdCBNZW50aW9uID0gc3R5bGVkKCdkaXYnKSh7XG4gIGZvbnRTaXplOiAnLjdlbScsXG4gIG1hcmdpblJpZ2h0OiAnYXV0bycsXG59KVxuXG5jb25zdCBMb2dvID0gc3R5bGVkKCdpbWcnKSh7XG4gIHdpZHRoOiAnYXV0bycsXG4gIGhlaWdodDogMjAsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$q
});
const Mention = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e186ienn1"
} : {
  target: "e186ienn1",
  label: "Mention"
})(process.env.NODE_ENV === "production" ? {
  name: "1nvz0zk",
  styles: "font-size:.7em;margin-right:auto"
} : {
  name: "1nvz0zk",
  styles: "font-size:.7em;margin-right:auto",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRm9vdGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4QmdCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRm9vdGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvbiwgRmxleCwgSWNvblNhdmUgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyB0IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9pMThuJ1xuXG5leHBvcnQgZnVuY3Rpb24gU2lkZWJhckZvb3RlcigpIHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlciBiZXR3ZWVuPlxuICAgICAgPE1lbnRpb24+XG4gICAgICAgIHt0KCdwb3dlcmVkQnknKX0gPGJyIC8+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL2Npa2xpay5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICA8TG9nbyBzcmM9XCJodHRwczovL3N0YXRpYy5jaWtsaWsuY28vbG9nby5zdmdcIiBhbHQ9XCJMb2dvIEJveHJhaXNlclwiIC8+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvTWVudGlvbj5cbiAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIGljb249e0ljb25TYXZlfT5cbiAgICAgICAge3QoJ3NhdmUnKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkKEZsZXgpKHtcbiAgbWFyZ2luVG9wOiAnYXV0bycsXG4gIGJhY2tncm91bmRDb2xvcjogJyNGRkYnLFxuICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgYm9yZGVyVG9wOiAnMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4wNiknLFxuICBwYWRkaW5nOiAnLjVlbSAxZW0nLFxuICBib3hTaGFkb3c6ICcwIC0xcHggMnB4IDAgcmdiYSgwLDAsMCwwLjA1KScsXG59KVxuXG5jb25zdCBNZW50aW9uID0gc3R5bGVkKCdkaXYnKSh7XG4gIGZvbnRTaXplOiAnLjdlbScsXG4gIG1hcmdpblJpZ2h0OiAnYXV0bycsXG59KVxuXG5jb25zdCBMb2dvID0gc3R5bGVkKCdpbWcnKSh7XG4gIHdpZHRoOiAnYXV0bycsXG4gIGhlaWdodDogMjAsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$q
});
const Logo = /* @__PURE__ */ createStyled("img", process.env.NODE_ENV === "production" ? {
  target: "e186ienn0"
} : {
  target: "e186ienn0",
  label: "Logo"
})(process.env.NODE_ENV === "production" ? {
  name: "14i868d",
  styles: "width:auto;height:20px"
} : {
  name: "14i868d",
  styles: "width:auto;height:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRm9vdGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ2EiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJGb290ZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBGbGV4LCBJY29uU2F2ZSB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5cbmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyRm9vdGVyKCkge1xuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyIGJldHdlZW4+XG4gICAgICA8TWVudGlvbj5cbiAgICAgICAge3QoJ3Bvd2VyZWRCeScpfSA8YnIgLz5cbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vY2lrbGlrLmNvbVwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgIDxMb2dvIHNyYz1cImh0dHBzOi8vc3RhdGljLmNpa2xpay5jby9sb2dvLnN2Z1wiIGFsdD1cIkxvZ28gQm94cmFpc2VyXCIgLz5cbiAgICAgICAgPC9hPlxuICAgICAgPC9NZW50aW9uPlxuICAgICAgPEJ1dHRvbiB0eXBlPVwic3VibWl0XCIgaWNvbj17SWNvblNhdmV9PlxuICAgICAgICB7dCgnc2F2ZScpfVxuICAgICAgPC9CdXR0b24+XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoRmxleCkoe1xuICBtYXJnaW5Ub3A6ICdhdXRvJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRicsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICBib3JkZXJUb3A6ICcxcHggc29saWQgcmdiYSgwLDAsMCwwLjA2KScsXG4gIHBhZGRpbmc6ICcuNWVtIDFlbScsXG4gIGJveFNoYWRvdzogJzAgLTFweCAycHggMCByZ2JhKDAsMCwwLDAuMDUpJyxcbn0pXG5cbmNvbnN0IE1lbnRpb24gPSBzdHlsZWQoJ2RpdicpKHtcbiAgZm9udFNpemU6ICcuN2VtJyxcbiAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbn0pXG5cbmNvbnN0IExvZ28gPSBzdHlsZWQoJ2ltZycpKHtcbiAgd2lkdGg6ICdhdXRvJyxcbiAgaGVpZ2h0OiAyMCxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$q
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$p() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function SidebarEmpty(data) {
  return /* @__PURE__ */ jsxs(Wrapper$9, {
    children: [/* @__PURE__ */ jsx(Description, {
      children: t("noContent")
    }), /* @__PURE__ */ jsx("div", {
      children: /* @__PURE__ */ jsx(Button$8, {
        outline: true,
        onClick: prevent(data.onAction),
        size: "small",
        children: t("useTemplate")
      })
    })]
  });
}
const Wrapper$9 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "eapi7nk1"
} : {
  target: "eapi7nk1",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "d3jdti",
  styles: "display:flex;align-items:center;flex-direction:column;justify-content:center;height:100%;text-align:center"
} : {
  name: "d3jdti",
  styles: "display:flex;align-items:center;flex-direction:column;justify-content:center;height:100%;text-align:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRW1wdHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCZ0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJFbXB0eS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBQcm9wcyA9IHtcbiAgb25BY3Rpb246IEZ1bmN0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyRW1wdHkoZGF0YTogUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlcj5cbiAgICAgIDxEZXNjcmlwdGlvbj57dCgnbm9Db250ZW50Jyl9PC9EZXNjcmlwdGlvbj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxCdXR0b24gb3V0bGluZSBvbkNsaWNrPXtwcmV2ZW50KGRhdGEub25BY3Rpb24pfSBzaXplPVwic21hbGxcIj5cbiAgICAgICAgICB7dCgndXNlVGVtcGxhdGUnKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L1dyYXBwZXI+XG4gIClcbn1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbn0pXG5cbmNvbnN0IERlc2NyaXB0aW9uID0gc3R5bGVkLnAoe1xuICBtYXJnaW5Cb3R0b206ICcxZW0nLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$p
});
const Description = /* @__PURE__ */ createStyled("p", process.env.NODE_ENV === "production" ? {
  target: "eapi7nk0"
} : {
  target: "eapi7nk0",
  label: "Description"
})(process.env.NODE_ENV === "production" ? {
  name: "1gpzra0",
  styles: "margin-bottom:1em"
} : {
  name: "1gpzra0",
  styles: "margin-bottom:1em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRW1wdHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStCb0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJFbXB0eS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBQcm9wcyA9IHtcbiAgb25BY3Rpb246IEZ1bmN0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyRW1wdHkoZGF0YTogUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlcj5cbiAgICAgIDxEZXNjcmlwdGlvbj57dCgnbm9Db250ZW50Jyl9PC9EZXNjcmlwdGlvbj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxCdXR0b24gb3V0bGluZSBvbkNsaWNrPXtwcmV2ZW50KGRhdGEub25BY3Rpb24pfSBzaXplPVwic21hbGxcIj5cbiAgICAgICAgICB7dCgndXNlVGVtcGxhdGUnKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L1dyYXBwZXI+XG4gIClcbn1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbn0pXG5cbmNvbnN0IERlc2NyaXB0aW9uID0gc3R5bGVkLnAoe1xuICBtYXJnaW5Cb3R0b206ICcxZW0nLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$p
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$o() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function SidebarTemplates({
  onTemplate
}) {
  const {
    templates: templates2,
    setData
  } = usePartialStore("setData", "templates");
  const [loadingTemplate, setLoadingTemplate] = reactExports.useState();
  const callback = reactExports.useCallback(async (t3) => {
    setLoadingTemplate(t3);
    let data;
    if (typeof t3.data === "function") {
      setLoadingTemplate(t3);
      data = await t3.data().catch(() => []);
      setLoadingTemplate(t3);
    } else {
      data = t3.data;
    }
    setData(data);
    onTemplate();
  }, [setData, onTemplate]);
  return /* @__PURE__ */ jsx(Wrapper$8, {
    children: templates2.map((t3) => /* @__PURE__ */ jsx(TemplateCard, {
      template: t3,
      onClick: callback,
      loading: loadingTemplate === t3
    }, t3.name))
  });
}
function TemplateCard({
  template,
  onClick,
  loading
}) {
  return /* @__PURE__ */ jsxs(StyledCard, {
    hoverable: true,
    onClick: prevent(() => loading ? null : onClick(template)),
    loading,
    children: [loading && /* @__PURE__ */ jsx(Spinner, {}), /* @__PURE__ */ jsx(TemplateImage, {
      src: template.image,
      alt: ""
    }), /* @__PURE__ */ jsxs(Body, {
      children: [/* @__PURE__ */ jsx(Title, {
        children: template.name
      }), /* @__PURE__ */ jsx("div", {
        children: template.description
      })]
    })]
  });
}
const Wrapper$8 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1jbnzfh4"
} : {
  target: "e1jbnzfh4",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "rouwkd",
  styles: "display:flex;flex-direction:column;justify-content:flex-start;height:100%;padding:1em;gap:1em;overflow:auto"
} : {
  name: "rouwkd",
  styles: "display:flex;flex-direction:column;justify-content:flex-start;height:100%;padding:1em;gap:1em;overflow:auto",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRWdCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50VGVtcGxhdGUgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBDYXJkLCBTcGlubmVyIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcblxuZXhwb3J0IGZ1bmN0aW9uIFNpZGViYXJUZW1wbGF0ZXMoeyBvblRlbXBsYXRlIH06IHsgb25UZW1wbGF0ZTogKCkgPT4gdm9pZCB9KSB7XG4gIGNvbnN0IHsgdGVtcGxhdGVzLCBzZXREYXRhIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3NldERhdGEnLCAndGVtcGxhdGVzJylcbiAgY29uc3QgW2xvYWRpbmdUZW1wbGF0ZSwgc2V0TG9hZGluZ1RlbXBsYXRlXSA9XG4gICAgdXNlU3RhdGU8RWRpdG9yQ29tcG9uZW50VGVtcGxhdGU+KClcbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAodDogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGUpID0+IHtcbiAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgbGV0IGRhdGE6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlWydkYXRhJ11cbiAgICAgIGlmICh0eXBlb2YgdC5kYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgICBkYXRhID0gYXdhaXQgdC5kYXRhKCkuY2F0Y2goKCkgPT4gW10pXG4gICAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHQuZGF0YVxuICAgICAgfVxuICAgICAgc2V0RGF0YShkYXRhKVxuICAgICAgb25UZW1wbGF0ZSgpXG4gICAgfSxcbiAgICBbc2V0RGF0YSwgb25UZW1wbGF0ZV1cbiAgKVxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyPlxuICAgICAge3RlbXBsYXRlcy5tYXAoKHQpID0+IChcbiAgICAgICAgPFRlbXBsYXRlQ2FyZFxuICAgICAgICAgIGtleT17dC5uYW1lfVxuICAgICAgICAgIHRlbXBsYXRlPXt0fVxuICAgICAgICAgIG9uQ2xpY2s9e2NhbGxiYWNrfVxuICAgICAgICAgIGxvYWRpbmc9e2xvYWRpbmdUZW1wbGF0ZSA9PT0gdH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5mdW5jdGlvbiBUZW1wbGF0ZUNhcmQoe1xuICB0ZW1wbGF0ZSxcbiAgb25DbGljayxcbiAgbG9hZGluZyxcbn06IHtcbiAgdGVtcGxhdGU6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlXG4gIG9uQ2xpY2s6ICh0OiBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSkgPT4gdm9pZFxuICBsb2FkaW5nOiBib29sZWFuXG59KSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZENhcmRcbiAgICAgIGhvdmVyYWJsZVxuICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiAobG9hZGluZyA/IG51bGwgOiBvbkNsaWNrKHRlbXBsYXRlKSkpfVxuICAgICAgbG9hZGluZz17bG9hZGluZ31cbiAgICA+XG4gICAgICB7bG9hZGluZyAmJiA8U3Bpbm5lciAvPn1cbiAgICAgIDxUZW1wbGF0ZUltYWdlIHNyYz17dGVtcGxhdGUuaW1hZ2V9IGFsdD1cIlwiIC8+XG4gICAgICA8Qm9keT5cbiAgICAgICAgPFRpdGxlPnt0ZW1wbGF0ZS5uYW1lfTwvVGl0bGU+XG4gICAgICAgIDxkaXY+e3RlbXBsYXRlLmRlc2NyaXB0aW9ufTwvZGl2PlxuICAgICAgPC9Cb2R5PlxuICAgIDwvU3R5bGVkQ2FyZD5cbiAgKVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nOiAnMWVtJyxcbiAgZ2FwOiAnMWVtJyxcbiAgb3ZlcmZsb3c6ICdhdXRvJyxcbn0pXG5cbmNvbnN0IFN0eWxlZENhcmQgPSBzdHlsZWQoQ2FyZCkoXG4gIHtcbiAgICBwYWRkaW5nOiAwLFxuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMTUwcHggMWZyJyxcbiAgICBncmlkR2FwOiAnMS41ZW0nLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gIH0sXG4gIChwcm9wczogeyBsb2FkaW5nOiBib29sZWFuIH0pID0+XG4gICAgcHJvcHMubG9hZGluZ1xuICAgICAgPyB7XG4gICAgICAgICAgb3BhY2l0eTogMC40LFxuICAgICAgICAgIGN1cnNvcjogJ2luaGVyaXQnLFxuICAgICAgICB9XG4gICAgICA6IHt9XG4pXG5cbmNvbnN0IFRlbXBsYXRlSW1hZ2UgPSBzdHlsZWQuaW1nKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTUwcHgnLFxuICBvYmplY3RGaXQ6ICdjb3ZlcicsXG59KVxuXG5jb25zdCBCb2R5ID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG59KVxuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXYoe1xuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgZm9udFNpemU6ICcxLjFlbScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$o
});
const StyledCard = /* @__PURE__ */ createStyled(Card, process.env.NODE_ENV === "production" ? {
  target: "e1jbnzfh3"
} : {
  target: "e1jbnzfh3",
  label: "StyledCard"
})("padding:0;display:grid;position:relative;grid-template-columns:150px 1fr;grid-gap:1.5em;align-items:center;width:100%;cursor:pointer;", (props) => props.loading ? {
  opacity: 0.4,
  cursor: "inherit"
} : {}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0RW1CIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50VGVtcGxhdGUgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBDYXJkLCBTcGlubmVyIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcblxuZXhwb3J0IGZ1bmN0aW9uIFNpZGViYXJUZW1wbGF0ZXMoeyBvblRlbXBsYXRlIH06IHsgb25UZW1wbGF0ZTogKCkgPT4gdm9pZCB9KSB7XG4gIGNvbnN0IHsgdGVtcGxhdGVzLCBzZXREYXRhIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3NldERhdGEnLCAndGVtcGxhdGVzJylcbiAgY29uc3QgW2xvYWRpbmdUZW1wbGF0ZSwgc2V0TG9hZGluZ1RlbXBsYXRlXSA9XG4gICAgdXNlU3RhdGU8RWRpdG9yQ29tcG9uZW50VGVtcGxhdGU+KClcbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAodDogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGUpID0+IHtcbiAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgbGV0IGRhdGE6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlWydkYXRhJ11cbiAgICAgIGlmICh0eXBlb2YgdC5kYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgICBkYXRhID0gYXdhaXQgdC5kYXRhKCkuY2F0Y2goKCkgPT4gW10pXG4gICAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHQuZGF0YVxuICAgICAgfVxuICAgICAgc2V0RGF0YShkYXRhKVxuICAgICAgb25UZW1wbGF0ZSgpXG4gICAgfSxcbiAgICBbc2V0RGF0YSwgb25UZW1wbGF0ZV1cbiAgKVxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyPlxuICAgICAge3RlbXBsYXRlcy5tYXAoKHQpID0+IChcbiAgICAgICAgPFRlbXBsYXRlQ2FyZFxuICAgICAgICAgIGtleT17dC5uYW1lfVxuICAgICAgICAgIHRlbXBsYXRlPXt0fVxuICAgICAgICAgIG9uQ2xpY2s9e2NhbGxiYWNrfVxuICAgICAgICAgIGxvYWRpbmc9e2xvYWRpbmdUZW1wbGF0ZSA9PT0gdH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5mdW5jdGlvbiBUZW1wbGF0ZUNhcmQoe1xuICB0ZW1wbGF0ZSxcbiAgb25DbGljayxcbiAgbG9hZGluZyxcbn06IHtcbiAgdGVtcGxhdGU6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlXG4gIG9uQ2xpY2s6ICh0OiBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSkgPT4gdm9pZFxuICBsb2FkaW5nOiBib29sZWFuXG59KSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZENhcmRcbiAgICAgIGhvdmVyYWJsZVxuICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiAobG9hZGluZyA/IG51bGwgOiBvbkNsaWNrKHRlbXBsYXRlKSkpfVxuICAgICAgbG9hZGluZz17bG9hZGluZ31cbiAgICA+XG4gICAgICB7bG9hZGluZyAmJiA8U3Bpbm5lciAvPn1cbiAgICAgIDxUZW1wbGF0ZUltYWdlIHNyYz17dGVtcGxhdGUuaW1hZ2V9IGFsdD1cIlwiIC8+XG4gICAgICA8Qm9keT5cbiAgICAgICAgPFRpdGxlPnt0ZW1wbGF0ZS5uYW1lfTwvVGl0bGU+XG4gICAgICAgIDxkaXY+e3RlbXBsYXRlLmRlc2NyaXB0aW9ufTwvZGl2PlxuICAgICAgPC9Cb2R5PlxuICAgIDwvU3R5bGVkQ2FyZD5cbiAgKVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nOiAnMWVtJyxcbiAgZ2FwOiAnMWVtJyxcbiAgb3ZlcmZsb3c6ICdhdXRvJyxcbn0pXG5cbmNvbnN0IFN0eWxlZENhcmQgPSBzdHlsZWQoQ2FyZCkoXG4gIHtcbiAgICBwYWRkaW5nOiAwLFxuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMTUwcHggMWZyJyxcbiAgICBncmlkR2FwOiAnMS41ZW0nLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gIH0sXG4gIChwcm9wczogeyBsb2FkaW5nOiBib29sZWFuIH0pID0+XG4gICAgcHJvcHMubG9hZGluZ1xuICAgICAgPyB7XG4gICAgICAgICAgb3BhY2l0eTogMC40LFxuICAgICAgICAgIGN1cnNvcjogJ2luaGVyaXQnLFxuICAgICAgICB9XG4gICAgICA6IHt9XG4pXG5cbmNvbnN0IFRlbXBsYXRlSW1hZ2UgPSBzdHlsZWQuaW1nKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTUwcHgnLFxuICBvYmplY3RGaXQ6ICdjb3ZlcicsXG59KVxuXG5jb25zdCBCb2R5ID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG59KVxuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXYoe1xuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgZm9udFNpemU6ICcxLjFlbScsXG59KVxuIl19 */");
const TemplateImage = /* @__PURE__ */ createStyled("img", process.env.NODE_ENV === "production" ? {
  target: "e1jbnzfh2"
} : {
  target: "e1jbnzfh2",
  label: "TemplateImage"
})(process.env.NODE_ENV === "production" ? {
  name: "1iynevt",
  styles: "width:100%;height:150px;object-fit:cover"
} : {
  name: "1iynevt",
  styles: "width:100%;height:150px;object-fit:cover",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnR3NCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50VGVtcGxhdGUgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBDYXJkLCBTcGlubmVyIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcblxuZXhwb3J0IGZ1bmN0aW9uIFNpZGViYXJUZW1wbGF0ZXMoeyBvblRlbXBsYXRlIH06IHsgb25UZW1wbGF0ZTogKCkgPT4gdm9pZCB9KSB7XG4gIGNvbnN0IHsgdGVtcGxhdGVzLCBzZXREYXRhIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3NldERhdGEnLCAndGVtcGxhdGVzJylcbiAgY29uc3QgW2xvYWRpbmdUZW1wbGF0ZSwgc2V0TG9hZGluZ1RlbXBsYXRlXSA9XG4gICAgdXNlU3RhdGU8RWRpdG9yQ29tcG9uZW50VGVtcGxhdGU+KClcbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAodDogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGUpID0+IHtcbiAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgbGV0IGRhdGE6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlWydkYXRhJ11cbiAgICAgIGlmICh0eXBlb2YgdC5kYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgICBkYXRhID0gYXdhaXQgdC5kYXRhKCkuY2F0Y2goKCkgPT4gW10pXG4gICAgICAgIHNldExvYWRpbmdUZW1wbGF0ZSh0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHQuZGF0YVxuICAgICAgfVxuICAgICAgc2V0RGF0YShkYXRhKVxuICAgICAgb25UZW1wbGF0ZSgpXG4gICAgfSxcbiAgICBbc2V0RGF0YSwgb25UZW1wbGF0ZV1cbiAgKVxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyPlxuICAgICAge3RlbXBsYXRlcy5tYXAoKHQpID0+IChcbiAgICAgICAgPFRlbXBsYXRlQ2FyZFxuICAgICAgICAgIGtleT17dC5uYW1lfVxuICAgICAgICAgIHRlbXBsYXRlPXt0fVxuICAgICAgICAgIG9uQ2xpY2s9e2NhbGxiYWNrfVxuICAgICAgICAgIGxvYWRpbmc9e2xvYWRpbmdUZW1wbGF0ZSA9PT0gdH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5mdW5jdGlvbiBUZW1wbGF0ZUNhcmQoe1xuICB0ZW1wbGF0ZSxcbiAgb25DbGljayxcbiAgbG9hZGluZyxcbn06IHtcbiAgdGVtcGxhdGU6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlXG4gIG9uQ2xpY2s6ICh0OiBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSkgPT4gdm9pZFxuICBsb2FkaW5nOiBib29sZWFuXG59KSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZENhcmRcbiAgICAgIGhvdmVyYWJsZVxuICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiAobG9hZGluZyA/IG51bGwgOiBvbkNsaWNrKHRlbXBsYXRlKSkpfVxuICAgICAgbG9hZGluZz17bG9hZGluZ31cbiAgICA+XG4gICAgICB7bG9hZGluZyAmJiA8U3Bpbm5lciAvPn1cbiAgICAgIDxUZW1wbGF0ZUltYWdlIHNyYz17dGVtcGxhdGUuaW1hZ2V9IGFsdD1cIlwiIC8+XG4gICAgICA8Qm9keT5cbiAgICAgICAgPFRpdGxlPnt0ZW1wbGF0ZS5uYW1lfTwvVGl0bGU+XG4gICAgICAgIDxkaXY+e3RlbXBsYXRlLmRlc2NyaXB0aW9ufTwvZGl2PlxuICAgICAgPC9Cb2R5PlxuICAgIDwvU3R5bGVkQ2FyZD5cbiAgKVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nOiAnMWVtJyxcbiAgZ2FwOiAnMWVtJyxcbiAgb3ZlcmZsb3c6ICdhdXRvJyxcbn0pXG5cbmNvbnN0IFN0eWxlZENhcmQgPSBzdHlsZWQoQ2FyZCkoXG4gIHtcbiAgICBwYWRkaW5nOiAwLFxuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMTUwcHggMWZyJyxcbiAgICBncmlkR2FwOiAnMS41ZW0nLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gIH0sXG4gIChwcm9wczogeyBsb2FkaW5nOiBib29sZWFuIH0pID0+XG4gICAgcHJvcHMubG9hZGluZ1xuICAgICAgPyB7XG4gICAgICAgICAgb3BhY2l0eTogMC40LFxuICAgICAgICAgIGN1cnNvcjogJ2luaGVyaXQnLFxuICAgICAgICB9XG4gICAgICA6IHt9XG4pXG5cbmNvbnN0IFRlbXBsYXRlSW1hZ2UgPSBzdHlsZWQuaW1nKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTUwcHgnLFxuICBvYmplY3RGaXQ6ICdjb3ZlcicsXG59KVxuXG5jb25zdCBCb2R5ID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG59KVxuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXYoe1xuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgZm9udFNpemU6ICcxLjFlbScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$o
});
const Body = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1jbnzfh1"
} : {
  target: "e1jbnzfh1",
  label: "Body"
})(process.env.NODE_ENV === "production" ? {
  name: "j8h71g",
  styles: "display:grid;grid-template-columns:1fr"
} : {
  name: "j8h71g",
  styles: "display:grid;grid-template-columns:1fr",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzR2EiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJUZW1wbGF0ZXMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IENhcmQsIFNwaW5uZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlUGFydGlhbFN0b3JlIH0gZnJvbSAnc3JjL3N0b3JlJ1xuXG5leHBvcnQgZnVuY3Rpb24gU2lkZWJhclRlbXBsYXRlcyh7IG9uVGVtcGxhdGUgfTogeyBvblRlbXBsYXRlOiAoKSA9PiB2b2lkIH0pIHtcbiAgY29uc3QgeyB0ZW1wbGF0ZXMsIHNldERhdGEgfSA9IHVzZVBhcnRpYWxTdG9yZSgnc2V0RGF0YScsICd0ZW1wbGF0ZXMnKVxuICBjb25zdCBbbG9hZGluZ1RlbXBsYXRlLCBzZXRMb2FkaW5nVGVtcGxhdGVdID1cbiAgICB1c2VTdGF0ZTxFZGl0b3JDb21wb25lbnRUZW1wbGF0ZT4oKVxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh0OiBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSkgPT4ge1xuICAgICAgc2V0TG9hZGluZ1RlbXBsYXRlKHQpXG4gICAgICBsZXQgZGF0YTogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGVbJ2RhdGEnXVxuICAgICAgaWYgKHR5cGVvZiB0LmRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2V0TG9hZGluZ1RlbXBsYXRlKHQpXG4gICAgICAgIGRhdGEgPSBhd2FpdCB0LmRhdGEoKS5jYXRjaCgoKSA9PiBbXSlcbiAgICAgICAgc2V0TG9hZGluZ1RlbXBsYXRlKHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gdC5kYXRhXG4gICAgICB9XG4gICAgICBzZXREYXRhKGRhdGEpXG4gICAgICBvblRlbXBsYXRlKClcbiAgICB9LFxuICAgIFtzZXREYXRhLCBvblRlbXBsYXRlXVxuICApXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXI+XG4gICAgICB7dGVtcGxhdGVzLm1hcCgodCkgPT4gKFxuICAgICAgICA8VGVtcGxhdGVDYXJkXG4gICAgICAgICAga2V5PXt0Lm5hbWV9XG4gICAgICAgICAgdGVtcGxhdGU9e3R9XG4gICAgICAgICAgb25DbGljaz17Y2FsbGJhY2t9XG4gICAgICAgICAgbG9hZGluZz17bG9hZGluZ1RlbXBsYXRlID09PSB0fVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbmZ1bmN0aW9uIFRlbXBsYXRlQ2FyZCh7XG4gIHRlbXBsYXRlLFxuICBvbkNsaWNrLFxuICBsb2FkaW5nLFxufToge1xuICB0ZW1wbGF0ZTogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGVcbiAgb25DbGljazogKHQ6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlKSA9PiB2b2lkXG4gIGxvYWRpbmc6IGJvb2xlYW5cbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQ2FyZFxuICAgICAgaG92ZXJhYmxlXG4gICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IChsb2FkaW5nID8gbnVsbCA6IG9uQ2xpY2sodGVtcGxhdGUpKSl9XG4gICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgID5cbiAgICAgIHtsb2FkaW5nICYmIDxTcGlubmVyIC8+fVxuICAgICAgPFRlbXBsYXRlSW1hZ2Ugc3JjPXt0ZW1wbGF0ZS5pbWFnZX0gYWx0PVwiXCIgLz5cbiAgICAgIDxCb2R5PlxuICAgICAgICA8VGl0bGU+e3RlbXBsYXRlLm5hbWV9PC9UaXRsZT5cbiAgICAgICAgPGRpdj57dGVtcGxhdGUuZGVzY3JpcHRpb259PC9kaXY+XG4gICAgICA8L0JvZHk+XG4gICAgPC9TdHlsZWRDYXJkPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBhZGRpbmc6ICcxZW0nLFxuICBnYXA6ICcxZW0nLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxufSlcblxuY29uc3QgU3R5bGVkQ2FyZCA9IHN0eWxlZChDYXJkKShcbiAge1xuICAgIHBhZGRpbmc6IDAsXG4gICAgZGlzcGxheTogJ2dyaWQnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICcxNTBweCAxZnInLFxuICAgIGdyaWRHYXA6ICcxLjVlbScsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgfSxcbiAgKHByb3BzOiB7IGxvYWRpbmc6IGJvb2xlYW4gfSkgPT5cbiAgICBwcm9wcy5sb2FkaW5nXG4gICAgICA/IHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjQsXG4gICAgICAgICAgY3Vyc29yOiAnaW5oZXJpdCcsXG4gICAgICAgIH1cbiAgICAgIDoge31cbilcblxuY29uc3QgVGVtcGxhdGVJbWFnZSA9IHN0eWxlZC5pbWcoe1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxNTBweCcsXG4gIG9iamVjdEZpdDogJ2NvdmVyJyxcbn0pXG5cbmNvbnN0IEJvZHkgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMWZyJyxcbn0pXG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdih7XG4gIGNvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgZm9udFdlaWdodDogNTAwLFxuICBmb250U2l6ZTogJzEuMWVtJyxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$o
});
const Title = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1jbnzfh0"
} : {
  target: "e1jbnzfh0",
  label: "Title"
})(process.env.NODE_ENV === "production" ? {
  name: "5kdo1",
  styles: "color:var(--ve-color);font-weight:500;font-size:1.1em"
} : {
  name: "5kdo1",
  styles: "color:var(--ve-color);font-weight:500;font-size:1.1em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyVGVtcGxhdGVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyR2MiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJUZW1wbGF0ZXMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IENhcmQsIFNwaW5uZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlUGFydGlhbFN0b3JlIH0gZnJvbSAnc3JjL3N0b3JlJ1xuXG5leHBvcnQgZnVuY3Rpb24gU2lkZWJhclRlbXBsYXRlcyh7IG9uVGVtcGxhdGUgfTogeyBvblRlbXBsYXRlOiAoKSA9PiB2b2lkIH0pIHtcbiAgY29uc3QgeyB0ZW1wbGF0ZXMsIHNldERhdGEgfSA9IHVzZVBhcnRpYWxTdG9yZSgnc2V0RGF0YScsICd0ZW1wbGF0ZXMnKVxuICBjb25zdCBbbG9hZGluZ1RlbXBsYXRlLCBzZXRMb2FkaW5nVGVtcGxhdGVdID1cbiAgICB1c2VTdGF0ZTxFZGl0b3JDb21wb25lbnRUZW1wbGF0ZT4oKVxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh0OiBFZGl0b3JDb21wb25lbnRUZW1wbGF0ZSkgPT4ge1xuICAgICAgc2V0TG9hZGluZ1RlbXBsYXRlKHQpXG4gICAgICBsZXQgZGF0YTogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGVbJ2RhdGEnXVxuICAgICAgaWYgKHR5cGVvZiB0LmRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2V0TG9hZGluZ1RlbXBsYXRlKHQpXG4gICAgICAgIGRhdGEgPSBhd2FpdCB0LmRhdGEoKS5jYXRjaCgoKSA9PiBbXSlcbiAgICAgICAgc2V0TG9hZGluZ1RlbXBsYXRlKHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gdC5kYXRhXG4gICAgICB9XG4gICAgICBzZXREYXRhKGRhdGEpXG4gICAgICBvblRlbXBsYXRlKClcbiAgICB9LFxuICAgIFtzZXREYXRhLCBvblRlbXBsYXRlXVxuICApXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXI+XG4gICAgICB7dGVtcGxhdGVzLm1hcCgodCkgPT4gKFxuICAgICAgICA8VGVtcGxhdGVDYXJkXG4gICAgICAgICAga2V5PXt0Lm5hbWV9XG4gICAgICAgICAgdGVtcGxhdGU9e3R9XG4gICAgICAgICAgb25DbGljaz17Y2FsbGJhY2t9XG4gICAgICAgICAgbG9hZGluZz17bG9hZGluZ1RlbXBsYXRlID09PSB0fVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbmZ1bmN0aW9uIFRlbXBsYXRlQ2FyZCh7XG4gIHRlbXBsYXRlLFxuICBvbkNsaWNrLFxuICBsb2FkaW5nLFxufToge1xuICB0ZW1wbGF0ZTogRWRpdG9yQ29tcG9uZW50VGVtcGxhdGVcbiAgb25DbGljazogKHQ6IEVkaXRvckNvbXBvbmVudFRlbXBsYXRlKSA9PiB2b2lkXG4gIGxvYWRpbmc6IGJvb2xlYW5cbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQ2FyZFxuICAgICAgaG92ZXJhYmxlXG4gICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IChsb2FkaW5nID8gbnVsbCA6IG9uQ2xpY2sodGVtcGxhdGUpKSl9XG4gICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgID5cbiAgICAgIHtsb2FkaW5nICYmIDxTcGlubmVyIC8+fVxuICAgICAgPFRlbXBsYXRlSW1hZ2Ugc3JjPXt0ZW1wbGF0ZS5pbWFnZX0gYWx0PVwiXCIgLz5cbiAgICAgIDxCb2R5PlxuICAgICAgICA8VGl0bGU+e3RlbXBsYXRlLm5hbWV9PC9UaXRsZT5cbiAgICAgICAgPGRpdj57dGVtcGxhdGUuZGVzY3JpcHRpb259PC9kaXY+XG4gICAgICA8L0JvZHk+XG4gICAgPC9TdHlsZWRDYXJkPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBhZGRpbmc6ICcxZW0nLFxuICBnYXA6ICcxZW0nLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxufSlcblxuY29uc3QgU3R5bGVkQ2FyZCA9IHN0eWxlZChDYXJkKShcbiAge1xuICAgIHBhZGRpbmc6IDAsXG4gICAgZGlzcGxheTogJ2dyaWQnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICcxNTBweCAxZnInLFxuICAgIGdyaWRHYXA6ICcxLjVlbScsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgfSxcbiAgKHByb3BzOiB7IGxvYWRpbmc6IGJvb2xlYW4gfSkgPT5cbiAgICBwcm9wcy5sb2FkaW5nXG4gICAgICA/IHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjQsXG4gICAgICAgICAgY3Vyc29yOiAnaW5oZXJpdCcsXG4gICAgICAgIH1cbiAgICAgIDoge31cbilcblxuY29uc3QgVGVtcGxhdGVJbWFnZSA9IHN0eWxlZC5pbWcoe1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxNTBweCcsXG4gIG9iamVjdEZpdDogJ2NvdmVyJyxcbn0pXG5cbmNvbnN0IEJvZHkgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMWZyJyxcbn0pXG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdih7XG4gIGNvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgZm9udFdlaWdodDogNTAwLFxuICBmb250U2l6ZTogJzEuMWVtJyxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$o
});
function Sidebar({
  onClose,
  ...props
}) {
  const [state, setState] = reactExports.useState(
    0
    /* BLOCS */
  );
  const {
    templates: templates2
  } = usePartialStore("templates");
  const emit = useEmit();
  const toggleMode = reactExports.useCallback(() => {
    setState((v2) => {
      if (v2 === 0) {
        const event = emit(Events.Templates, {
          cancelable: true
        });
        if (event.defaultPrevented) {
          return v2;
        }
      }
      return v2 === 0 ? 1 : 0;
    });
  }, []);
  const hasTemplates = templates2.length > 0;
  const dataLength = useDataLength();
  const showEmpty = dataLength === 0 && hasTemplates;
  const isTemplateMode = state === 1;
  return /* @__PURE__ */ jsxs(SidebarWrapper, {
    ...props,
    children: [/* @__PURE__ */ jsx(SidebarHeader, {
      onClose,
      children: hasTemplates && /* @__PURE__ */ jsx(ButtonIcon, {
        onClick: prevent(toggleMode),
        title: t(isTemplateMode ? "addComponent" : "useTemplate"),
        children: isTemplateMode ? /* @__PURE__ */ jsx(IconBlocs, {}) : /* @__PURE__ */ jsx(IconPage, {})
      })
    }), state === 0 && (showEmpty ? /* @__PURE__ */ jsx(SidebarEmpty, {
      onAction: () => setState(
        1
        /* TEMPLATES */
      )
    }) : /* @__PURE__ */ jsx(SidebarBlocs, {})), state === 1 && /* @__PURE__ */ jsx(SidebarTemplates, {
      onTemplate: () => setState(
        0
        /* BLOCS */
      )
    }), /* @__PURE__ */ jsx(SidebarFooter, {})]
  });
}
const Out$3 = keyframes({
  from: {
    transform: "translateX(0)"
  },
  to: {
    transform: "translateX(-100%)"
  }
});
const In$4 = keyframes({
  from: {
    transform: "translateX(-100%)"
  },
  to: {
    transform: "translateX(0)"
  }
});
const SidebarWrapper = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "ezsf3ga0"
} : {
  target: "ezsf3ga0",
  label: "SidebarWrapper"
})({
  position: "relative",
  display: "flex",
  flexDirection: "column",
  height: "100vh",
  backgroundColor: "#FBFBFD",
  zIndex: 2,
  boxShadow: "0 20px 25px -5px rgba(0,0,0,0.2),0 10px 10px -5px rgba(0,0,0,0.04)",
  transition: "transform .5s cubic-bezier(0.19, 1, 0.22, 1)",
  animation: `${In$4} .7s cubic-bezier(0.19, 1, 0.22, 1) both`,
  "[hidden=hidden] &": {
    animation: `${Out$3} .7s cubic-bezier(0.19, 1, 0.22, 1) both`
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRnVCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvckNvbXBvbmVudERhdGEgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBTaWRlYmFyQmxvY3MgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJCbG9jcydcbmltcG9ydCB7IFNpZGViYXJIZWFkZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJIZWFkZXInXG5cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnXG5pbXBvcnQgeyBTaWRlYmFyRm9vdGVyIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRm9vdGVyJ1xuaW1wb3J0IHsgU2lkZWJhckVtcHR5IH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFyRW1wdHknXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFNpZGViYXJUZW1wbGF0ZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJUZW1wbGF0ZXMnXG5pbXBvcnQgeyB1c2VEYXRhTGVuZ3RoLCB1c2VFbWl0LCB1c2VQYXJ0aWFsU3RvcmUgfSBmcm9tICdzcmMvc3RvcmUnXG5pbXBvcnQgeyBCdXR0b25JY29uLCBJY29uQmxvY3MsIEljb25QYWdlIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyB0IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9pMThuJ1xuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnc3JjL2NvbnN0YW50cydcblxuZW51bSBTdGF0ZXMge1xuICBCTE9DUyxcbiAgVEVNUExBVEVTLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gU2lkZWJhcih7XG4gIG9uQ2xvc2UsXG4gIC4uLnByb3BzXG59OiB7XG4gIG9uQ2xvc2U6ICgpID0+IHZvaWRcbn0pIHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShTdGF0ZXMuQkxPQ1MpXG4gIGNvbnN0IHsgdGVtcGxhdGVzIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3RlbXBsYXRlcycpXG4gIGNvbnN0IGVtaXQgPSB1c2VFbWl0KClcbiAgY29uc3QgdG9nZ2xlTW9kZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRTdGF0ZSgodikgPT4ge1xuICAgICAgaWYgKHYgPT09IFN0YXRlcy5CTE9DUykge1xuICAgICAgICBjb25zdCBldmVudCA9IGVtaXQoRXZlbnRzLlRlbXBsYXRlcywgeyBjYW5jZWxhYmxlOiB0cnVlIH0pXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHZcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHYgPT09IFN0YXRlcy5CTE9DUyA/IFN0YXRlcy5URU1QTEFURVMgOiBTdGF0ZXMuQkxPQ1NcbiAgICB9KVxuICB9LCBbXSlcbiAgY29uc3QgaGFzVGVtcGxhdGVzID0gdGVtcGxhdGVzLmxlbmd0aCA+IDBcbiAgY29uc3QgZGF0YUxlbmd0aCA9IHVzZURhdGFMZW5ndGgoKVxuICBjb25zdCBzaG93RW1wdHkgPSBkYXRhTGVuZ3RoID09PSAwICYmIGhhc1RlbXBsYXRlc1xuICBjb25zdCBpc1RlbXBsYXRlTW9kZSA9IHN0YXRlID09PSBTdGF0ZXMuVEVNUExBVEVTXG5cbiAgcmV0dXJuIChcbiAgICA8U2lkZWJhcldyYXBwZXIgey4uLnByb3BzfT5cbiAgICAgIDxTaWRlYmFySGVhZGVyIG9uQ2xvc2U9e29uQ2xvc2V9PlxuICAgICAgICB7aGFzVGVtcGxhdGVzICYmIChcbiAgICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgICAgb25DbGljaz17cHJldmVudCh0b2dnbGVNb2RlKX1cbiAgICAgICAgICAgIHRpdGxlPXt0KGlzVGVtcGxhdGVNb2RlID8gJ2FkZENvbXBvbmVudCcgOiAndXNlVGVtcGxhdGUnKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aXNUZW1wbGF0ZU1vZGUgPyA8SWNvbkJsb2NzIC8+IDogPEljb25QYWdlIC8+fVxuICAgICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvU2lkZWJhckhlYWRlcj5cbiAgICAgIHtzdGF0ZSA9PT0gU3RhdGVzLkJMT0NTICYmXG4gICAgICAgIChzaG93RW1wdHkgPyAoXG4gICAgICAgICAgPFNpZGViYXJFbXB0eSBvbkFjdGlvbj17KCkgPT4gc2V0U3RhdGUoU3RhdGVzLlRFTVBMQVRFUyl9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPFNpZGViYXJCbG9jcyAvPlxuICAgICAgICApKX1cbiAgICAgIHtzdGF0ZSA9PT0gU3RhdGVzLlRFTVBMQVRFUyAmJiAoXG4gICAgICAgIDxTaWRlYmFyVGVtcGxhdGVzIG9uVGVtcGxhdGU9eygpID0+IHNldFN0YXRlKFN0YXRlcy5CTE9DUyl9IC8+XG4gICAgICApfVxuICAgICAgPFNpZGViYXJGb290ZXIgLz5cbiAgICA8L1NpZGViYXJXcmFwcGVyPlxuICApXG59XG5cbmNvbnN0IE91dCA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScgfSxcbiAgdG86IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTAwJSknIH0sXG59KVxuXG5jb25zdCBJbiA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTAwJSknIH0sXG4gIHRvOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknIH0sXG59KVxuXG5jb25zdCBTaWRlYmFyV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgaGVpZ2h0OiAnMTAwdmgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkJGQkZEJyxcbiAgekluZGV4OiAyLFxuICBib3hTaGFkb3c6XG4gICAgJzAgMjBweCAyNXB4IC01cHggcmdiYSgwLDAsMCwwLjIpLDAgMTBweCAxMHB4IC01cHggcmdiYSgwLDAsMCwwLjA0KScsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gLjVzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKScsXG4gIGFuaW1hdGlvbjogYCR7SW59IC43cyBjdWJpYy1iZXppZXIoMC4xOSwgMSwgMC4yMiwgMSkgYm90aGAsXG4gICdbaGlkZGVuPWhpZGRlbl0gJic6IHtcbiAgICBhbmltYXRpb246IGAke091dH0gLjdzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKSBib3RoYCxcbiAgfSxcbn0pXG4iXX0= */");
function useAsyncEffect(cb, deps) {
  reactExports.useEffect(() => {
    cb();
  }, deps);
}
let memoizedCreateCacheWithContainer = weakMemoize((container) => {
  return createCache({
    container: container.querySelector("head"),
    key: "iframe"
  });
});
function FrameProvider({
  container,
  children
}) {
  return /* @__PURE__ */ jsx(CacheProvider, {
    value: memoizedCreateCacheWithContainer(container),
    children
  });
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$n() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$7 = process.env.NODE_ENV === "production" ? {
  name: "yxrv7x",
  styles: "visual-editor{display:block;}"
} : {
  name: "2uzs22-BaseStyles",
  styles: "visual-editor{display:block;};label:BaseStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmFzZVN0eWxlcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV2MiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9CYXNlU3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBjb25zdCBCYXNlU3R5bGVzOiBGdW5jdGlvbkNvbXBvbmVudDxcbiAgUHJvcHNXaXRoQ2hpbGRyZW48e1xuICAgIGNvbXBsZXRlPzogYm9vbGVhblxuICB9PlxuPiA9ICh7IGNoaWxkcmVuLCBjb21wbGV0ZSA9IHRydWUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8R2xvYmFsIHN0eWxlcz17eyAndmlzdWFsLWVkaXRvcic6IHsgZGlzcGxheTogJ2Jsb2NrJyB9IH19IC8+XG4gICAgICA8UmVzZXQgY29tcGxldGU9e2NvbXBsZXRlfT57Y2hpbGRyZW59PC9SZXNldD5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgUmVzZXQgPSBzdHlsZWQuZGl2PHsgY29tcGxldGU6IGJvb2xlYW4gfT4oXG4gIGNzc2BcbiAgICAtLXZlLWJhY2tncm91bmQ6ICNmZmY7XG4gICAgLS12ZS1wcmltYXJ5OiAjMTc3MWU2O1xuICAgIC0tdmUtZGFyazogIzIwMjIyNztcbiAgICAtLXZlLXByaW1hcnktaG92ZXI6ICMzODhhZmE7XG4gICAgLS12ZS1wcmltYXJ5LWxpZ2h0OiAjMTc3MWU2MjY7XG4gICAgLS12ZS1jb2xvcjogIzExMTgyNztcbiAgICAtLXZlLWhvdmVyOiAjZjNmNGY5O1xuICAgIC0tdmUtY29sb3ItbGlnaHQ6ICM2YjcyODA7XG4gICAgLS12ZS1maWVsZC1ib3JkZXI6IHJnYigyMDksIDIxMywgMjE5KTtcbiAgICAtLXZlLWZpZWxkLXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjA1KSAwcHggMXB4IDJweCAwcHg7XG4gICAgLS12ZS1ibG9jcy1iYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMDUpO1xuICAgIC0tdmUtZGFuZ2VyOiAjYWUyMTIxO1xuICAgIC0tdmUtZGFuZ2VyLWxpZ2h0OiByZ2JhKDI1NSwgMCwgMCwgMC4wNSk7XG4gICAgLS12ZS1zaGFkb3ctZHJhZ2dpbmc6IHJnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LFxuICAgICAgcmdiYSgwLCAwLCAwLCAwLjA1KSAwIDRweCA2cHggLTJweDtcbiAgICAtLXZlLWdhcDogMC41ZW07XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XG5cbiAgICAqLFxuICAgICo6OmJlZm9yZSxcbiAgICAqOjphZnRlciB7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIH1cbiAgYCxcbiAgKHByb3BzKSA9PlxuICAgIHByb3BzLmNvbXBsZXRlXG4gICAgICA/IGBcbiAgaW1nLFxuICBwaWN0dXJlLFxuICB2aWRlbyxcbiAgY2FudmFzLFxuICBzdmcge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgfVxuXG4gIGlucHV0LFxuICBidXR0b24sXG4gIHRleHRhcmVhLFxuICBzZWxlY3Qge1xuICAgIGZvbnQ6IGluaGVyaXQ7XG4gIH1gXG4gICAgICA6IHt9XG4pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$n
};
const BaseStyles = ({
  children,
  complete = true
}) => {
  return /* @__PURE__ */ jsxs(Fragment$1, {
    children: [/* @__PURE__ */ jsx(Global, {
      styles: _ref$7
    }), /* @__PURE__ */ jsx(Reset, {
      complete,
      children
    })]
  });
};
const Reset = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "eyge1ix0"
} : {
  target: "eyge1ix0",
  label: "Reset"
})(process.env.NODE_ENV === "production" ? {
  name: "1vq1tps",
  styles: "--ve-background:#fff;--ve-primary:#1771e6;--ve-dark:#202227;--ve-primary-hover:#388afa;--ve-primary-light:#1771e626;--ve-color:#111827;--ve-hover:#f3f4f9;--ve-color-light:#6b7280;--ve-field-border:rgb(209, 213, 219);--ve-field-shadow:rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;--ve-blocs-background:rgba(0, 0, 0, 0.05);--ve-danger:#ae2121;--ve-danger-light:rgba(255, 0, 0, 0.05);--ve-shadow-dragging:rgba(0, 0, 0, 0.1) 0 10px 15px -3px,rgba(0, 0, 0, 0.05) 0 4px 6px -2px;--ve-gap:0.5em;font-size:16px;line-height:1.4;*,*::before,*::after{box-sizing:border-box;}"
} : {
  name: "yf3idx-Reset",
  styles: "--ve-background:#fff;--ve-primary:#1771e6;--ve-dark:#202227;--ve-primary-hover:#388afa;--ve-primary-light:#1771e626;--ve-color:#111827;--ve-hover:#f3f4f9;--ve-color-light:#6b7280;--ve-field-border:rgb(209, 213, 219);--ve-field-shadow:rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;--ve-blocs-background:rgba(0, 0, 0, 0.05);--ve-danger:#ae2121;--ve-danger-light:rgba(255, 0, 0, 0.05);--ve-shadow-dragging:rgba(0, 0, 0, 0.1) 0 10px 15px -3px,rgba(0, 0, 0, 0.05) 0 4px 6px -2px;--ve-gap:0.5em;font-size:16px;line-height:1.4;*,*::before,*::after{box-sizing:border-box;};label:Reset;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmFzZVN0eWxlcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JLIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmFzZVN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGNzcywgR2xvYmFsIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnXG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgY29uc3QgQmFzZVN0eWxlczogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzV2l0aENoaWxkcmVuPHtcbiAgICBjb21wbGV0ZT86IGJvb2xlYW5cbiAgfT5cbj4gPSAoeyBjaGlsZHJlbiwgY29tcGxldGUgPSB0cnVlIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEdsb2JhbCBzdHlsZXM9e3sgJ3Zpc3VhbC1lZGl0b3InOiB7IGRpc3BsYXk6ICdibG9jaycgfSB9fSAvPlxuICAgICAgPFJlc2V0IGNvbXBsZXRlPXtjb21wbGV0ZX0+e2NoaWxkcmVufTwvUmVzZXQ+XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IFJlc2V0ID0gc3R5bGVkLmRpdjx7IGNvbXBsZXRlOiBib29sZWFuIH0+KFxuICBjc3NgXG4gICAgLS12ZS1iYWNrZ3JvdW5kOiAjZmZmO1xuICAgIC0tdmUtcHJpbWFyeTogIzE3NzFlNjtcbiAgICAtLXZlLWRhcms6ICMyMDIyMjc7XG4gICAgLS12ZS1wcmltYXJ5LWhvdmVyOiAjMzg4YWZhO1xuICAgIC0tdmUtcHJpbWFyeS1saWdodDogIzE3NzFlNjI2O1xuICAgIC0tdmUtY29sb3I6ICMxMTE4Mjc7XG4gICAgLS12ZS1ob3ZlcjogI2YzZjRmOTtcbiAgICAtLXZlLWNvbG9yLWxpZ2h0OiAjNmI3MjgwO1xuICAgIC0tdmUtZmllbGQtYm9yZGVyOiByZ2IoMjA5LCAyMTMsIDIxOSk7XG4gICAgLS12ZS1maWVsZC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wNSkgMHB4IDFweCAycHggMHB4O1xuICAgIC0tdmUtYmxvY3MtYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjA1KTtcbiAgICAtLXZlLWRhbmdlcjogI2FlMjEyMTtcbiAgICAtLXZlLWRhbmdlci1saWdodDogcmdiYSgyNTUsIDAsIDAsIDAuMDUpO1xuICAgIC0tdmUtc2hhZG93LWRyYWdnaW5nOiByZ2JhKDAsIDAsIDAsIDAuMSkgMCAxMHB4IDE1cHggLTNweCxcbiAgICAgIHJnYmEoMCwgMCwgMCwgMC4wNSkgMCA0cHggNnB4IC0ycHg7XG4gICAgLS12ZS1nYXA6IDAuNWVtO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBsaW5lLWhlaWdodDogMS40O1xuXG4gICAgKixcbiAgICAqOjpiZWZvcmUsXG4gICAgKjo6YWZ0ZXIge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICB9XG4gIGAsXG4gIChwcm9wcykgPT5cbiAgICBwcm9wcy5jb21wbGV0ZVxuICAgICAgPyBgXG4gIGltZyxcbiAgcGljdHVyZSxcbiAgdmlkZW8sXG4gIGNhbnZhcyxcbiAgc3ZnIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gIH1cblxuICBpbnB1dCxcbiAgYnV0dG9uLFxuICB0ZXh0YXJlYSxcbiAgc2VsZWN0IHtcbiAgICBmb250OiBpbmhlcml0O1xuICB9YFxuICAgICAgOiB7fVxuKVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$n
}, (props) => props.complete ? `
  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }` : {}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmFzZVN0eWxlcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJxQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0Jhc2VTdHlsZXMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBjc3MsIEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCwgUHJvcHNXaXRoQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IEJhc2VTdHlsZXM6IEZ1bmN0aW9uQ29tcG9uZW50PFxuICBQcm9wc1dpdGhDaGlsZHJlbjx7XG4gICAgY29tcGxldGU/OiBib29sZWFuXG4gIH0+XG4+ID0gKHsgY2hpbGRyZW4sIGNvbXBsZXRlID0gdHJ1ZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXt7ICd2aXN1YWwtZWRpdG9yJzogeyBkaXNwbGF5OiAnYmxvY2snIH0gfX0gLz5cbiAgICAgIDxSZXNldCBjb21wbGV0ZT17Y29tcGxldGV9PntjaGlsZHJlbn08L1Jlc2V0PlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBjb25zdCBSZXNldCA9IHN0eWxlZC5kaXY8eyBjb21wbGV0ZTogYm9vbGVhbiB9PihcbiAgY3NzYFxuICAgIC0tdmUtYmFja2dyb3VuZDogI2ZmZjtcbiAgICAtLXZlLXByaW1hcnk6ICMxNzcxZTY7XG4gICAgLS12ZS1kYXJrOiAjMjAyMjI3O1xuICAgIC0tdmUtcHJpbWFyeS1ob3ZlcjogIzM4OGFmYTtcbiAgICAtLXZlLXByaW1hcnktbGlnaHQ6ICMxNzcxZTYyNjtcbiAgICAtLXZlLWNvbG9yOiAjMTExODI3O1xuICAgIC0tdmUtaG92ZXI6ICNmM2Y0Zjk7XG4gICAgLS12ZS1jb2xvci1saWdodDogIzZiNzI4MDtcbiAgICAtLXZlLWZpZWxkLWJvcmRlcjogcmdiKDIwOSwgMjEzLCAyMTkpO1xuICAgIC0tdmUtZmllbGQtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMDUpIDBweCAxcHggMnB4IDBweDtcbiAgICAtLXZlLWJsb2NzLWJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gICAgLS12ZS1kYW5nZXI6ICNhZTIxMjE7XG4gICAgLS12ZS1kYW5nZXItbGlnaHQ6IHJnYmEoMjU1LCAwLCAwLCAwLjA1KTtcbiAgICAtLXZlLXNoYWRvdy1kcmFnZ2luZzogcmdiYSgwLCAwLCAwLCAwLjEpIDAgMTBweCAxNXB4IC0zcHgsXG4gICAgICByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4O1xuICAgIC0tdmUtZ2FwOiAwLjVlbTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDEuNDtcblxuICAgICosXG4gICAgKjo6YmVmb3JlLFxuICAgICo6OmFmdGVyIHtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgfVxuICBgLFxuICAocHJvcHMpID0+XG4gICAgcHJvcHMuY29tcGxldGVcbiAgICAgID8gYFxuICBpbWcsXG4gIHBpY3R1cmUsXG4gIHZpZGVvLFxuICBjYW52YXMsXG4gIHN2ZyB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICB9XG5cbiAgaW5wdXQsXG4gIGJ1dHRvbixcbiAgdGV4dGFyZWEsXG4gIHNlbGVjdCB7XG4gICAgZm9udDogaW5oZXJpdDtcbiAgfWBcbiAgICAgIDoge31cbilcbiJdfQ== */");
/*! @license Rematrix v0.2.2

	Copyright 2018 Fisssion LLC.

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
*/
function format$1(source) {
  if (source.constructor !== Array) {
    throw new TypeError("Expected array.");
  }
  if (source.length === 16) {
    return source;
  }
  if (source.length === 6) {
    var matrix = identity();
    matrix[0] = source[0];
    matrix[1] = source[1];
    matrix[4] = source[2];
    matrix[5] = source[3];
    matrix[12] = source[4];
    matrix[13] = source[5];
    return matrix;
  }
  throw new RangeError("Expected array with either 6 or 16 values.");
}
function identity() {
  var matrix = [];
  for (var i2 = 0; i2 < 16; i2++) {
    i2 % 5 == 0 ? matrix.push(1) : matrix.push(0);
  }
  return matrix;
}
function multiply(m4, x3) {
  var fm = format$1(m4);
  var fx = format$1(x3);
  var product = [];
  for (var i2 = 0; i2 < 4; i2++) {
    var row = [fm[i2], fm[i2 + 4], fm[i2 + 8], fm[i2 + 12]];
    for (var j2 = 0; j2 < 4; j2++) {
      var k3 = j2 * 4;
      var col = [fx[k3], fx[k3 + 1], fx[k3 + 2], fx[k3 + 3]];
      var result = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];
      product[i2 + k3] = result;
    }
  }
  return product;
}
function parse$1(source) {
  if (typeof source === "string") {
    var match2 = source.match(/matrix(3d)?\(([^)]+)\)/);
    if (match2) {
      var raw = match2[2].split(", ").map(parseFloat);
      return format$1(raw);
    }
  }
  return identity();
}
function scaleX(scalar) {
  var matrix = identity();
  matrix[0] = scalar;
  return matrix;
}
function scaleY(scalar) {
  var matrix = identity();
  matrix[5] = scalar;
  return matrix;
}
function translateX(distance) {
  var matrix = identity();
  matrix[12] = distance;
  return matrix;
}
function translateY(distance) {
  var matrix = identity();
  matrix[13] = distance;
  return matrix;
}
var e = function(t3) {
  return "number" == typeof t3;
}, i$1 = function(t3) {
  return "function" == typeof t3;
}, n = function(t3) {
  return "[object Object]" === Object.prototype.toString.call(t3);
}, r$1 = function(t3) {
  return Array.prototype.slice.apply(t3);
}, s = function(t3) {
  var e3 = t3.reduce(function(t4, e4) {
    return t4[e4] = (t4[e4] || 0) + 1, t4;
  }, {});
  return Object.keys(e3).filter(function(t4) {
    return e3[t4] > 1;
  });
};
function a(t3) {
  return [].slice.call(arguments, 1).forEach(function(e3) {
    if (e3)
      for (var i2 in e3)
        Object.prototype.hasOwnProperty.call(e3, i2) && (t3[i2] = e3[i2]);
  }), t3;
}
var o, l = function(t3, e3, i2) {
  return t3 + (e3 - t3) * i2;
}, p = { __proto__: null, isNumber: e, isFunction: i$1, isObject: n, toArray: r$1, getDuplicateValsAsStrings: s, assign: a, tweenProp: l }, c$1 = "data-flip-id", u$1 = "data-inverse-flip-id", d$1 = "data-portal-key", f$1 = "data-exit-container", h$1 = { __proto__: null, DATA_FLIP_ID: c$1, DATA_INVERSE_FLIP_ID: u$1, DATA_FLIP_COMPONENT_ID: "data-flip-component-id", DATA_FLIP_CONFIG: "data-flip-config", DATA_PORTAL_KEY: d$1, DATA_EXIT_CONTAINER: f$1 }, g = { noWobble: { stiffness: 200, damping: 26 }, gentle: { stiffness: 120, damping: 14 }, veryGentle: { stiffness: 130, damping: 17 }, wobbly: { stiffness: 180, damping: 12 }, stiff: { stiffness: 260, damping: 26 } }, m$1 = function(t3) {
  return n(t3) ? t3 : Object.keys(g).indexOf(t3) > -1 ? g[t3] : {};
};
"undefined" != typeof window && (o = window.requestAnimationFrame);
var v = o = o || function(t3) {
  window.setTimeout(t3, 1e3 / 60);
}, y$1 = Date.now(), _ = "object" == typeof performance && "function" == typeof performance.now ? function() {
  return performance.now();
} : function() {
  return Date.now() - y$1;
};
function S(t3, e3) {
  var i2 = t3.indexOf(e3);
  -1 !== i2 && t3.splice(i2, 1);
}
var E = /* @__PURE__ */ function() {
  function t3() {
  }
  return t3.prototype.run = function() {
    var t4 = this;
    v(function() {
      t4.springSystem.loop(_());
    });
  }, t3;
}(), A = function() {
  this.position = 0, this.velocity = 0;
}, C = 0, b = 1e-3, I = /* @__PURE__ */ function() {
  function t3(t4) {
    this._id = "s" + C++, this._springSystem = t4, this.listeners = [], this._startValue = 0, this._currentState = new A(), this._displacementFromRestThreshold = 1e-3, this._endValue = 0, this._overshootClampingEnabled = false, this._previousState = new A(), this._restSpeedThreshold = 1e-3, this._tempState = new A(), this._timeAccumulator = 0, this._wasAtRest = true, this._cachedSpringConfig = {};
  }
  var e3 = t3.prototype;
  return e3.getId = function() {
    return this._id;
  }, e3.destroy = function() {
    this.listeners = [], this._springSystem.deregisterSpring(this);
  }, e3.setSpringConfig = function(t4) {
    return this._springConfig = t4, this;
  }, e3.getCurrentValue = function() {
    return this._currentState.position;
  }, e3.getDisplacementDistanceForState = function(t4) {
    return Math.abs(this._endValue - t4.position);
  }, e3.setEndValue = function(t4) {
    if (t4 === this._endValue)
      return this;
    if (this.prevEndValue = t4, this._endValue === t4 && this.isAtRest())
      return this;
    this._startValue = this.getCurrentValue(), this._endValue = t4, this._springSystem.activateSpring(this.getId());
    for (var e4 = 0, i2 = this.listeners.length; e4 < i2; e4++) {
      var n2 = this.listeners[e4].onSpringEndStateChange;
      n2 && n2(this);
    }
    return this;
  }, e3.setVelocity = function(t4) {
    return t4 === this._currentState.velocity || (this._currentState.velocity = t4, this._springSystem.activateSpring(this.getId())), this;
  }, e3.setCurrentValue = function(t4) {
    this._startValue = t4, this._currentState.position = t4;
    for (var e4 = 0, i2 = this.listeners.length; e4 < i2; e4++) {
      var n2 = this.listeners[e4];
      n2.onSpringUpdate && n2.onSpringUpdate(this);
    }
    return this;
  }, e3.setAtRest = function() {
    return this._endValue = this._currentState.position, this._tempState.position = this._currentState.position, this._currentState.velocity = 0, this;
  }, e3.setOvershootClampingEnabled = function(t4) {
    return this._overshootClampingEnabled = t4, this;
  }, e3.isOvershooting = function() {
    var t4 = this._startValue, e4 = this._endValue;
    return this._springConfig.tension > 0 && (t4 < e4 && this.getCurrentValue() > e4 || t4 > e4 && this.getCurrentValue() < e4);
  }, e3.advance = function(t4, e4) {
    var i2 = this.isAtRest();
    if (!i2 || !this._wasAtRest) {
      var n2 = e4;
      e4 > 0.064 && (n2 = 0.064), this._timeAccumulator += n2;
      for (var r2, s4, a4, o2, l2, p2, c3 = this._springConfig.tension, u3 = this._springConfig.friction, d4 = this._currentState.position, f2 = this._currentState.velocity, h4 = this._tempState.position, g2 = this._tempState.velocity; this._timeAccumulator >= b; )
        this._timeAccumulator -= b, this._timeAccumulator < b && (this._previousState.position = d4, this._previousState.velocity = f2), s4 = c3 * (this._endValue - h4) - u3 * f2, o2 = c3 * (this._endValue - (h4 = d4 + (r2 = f2) * b * 0.5)) - u3 * (g2 = f2 + s4 * b * 0.5), p2 = c3 * (this._endValue - (h4 = d4 + (a4 = g2) * b * 0.5)) - u3 * (g2 = f2 + o2 * b * 0.5), h4 = d4 + (l2 = g2) * b, d4 += 1 / 6 * (r2 + 2 * (a4 + l2) + (g2 = f2 + p2 * b)) * b, f2 += 1 / 6 * (s4 + 2 * (o2 + p2) + (c3 * (this._endValue - h4) - u3 * g2)) * b;
      this._tempState.position = h4, this._tempState.velocity = g2, this._currentState.position = d4, this._currentState.velocity = f2, this._timeAccumulator > 0 && this._interpolate(this._timeAccumulator / b), (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) && (this._springConfig.tension > 0 ? (this._startValue = this._endValue, this._currentState.position = this._endValue) : (this._endValue = this._currentState.position, this._startValue = this._endValue), this.setVelocity(0), i2 = true);
      var m4 = false;
      this._wasAtRest && (this._wasAtRest = false, m4 = true);
      var v2 = false;
      i2 && (this._wasAtRest = true, v2 = true), this.notifyPositionUpdated(m4, v2);
    }
  }, e3.notifyPositionUpdated = function(t4, e4) {
    var i2 = this;
    this.listeners.filter(Boolean).forEach(function(n2) {
      t4 && n2.onSpringActivate && !i2._onActivateCalled && (n2.onSpringActivate(i2), i2._onActivateCalled = true), n2.onSpringUpdate && n2.onSpringUpdate(i2), e4 && n2.onSpringAtRest && n2.onSpringAtRest(i2);
    });
  }, e3.systemShouldAdvance = function() {
    return !this.isAtRest() || !this.wasAtRest();
  }, e3.wasAtRest = function() {
    return this._wasAtRest;
  }, e3.isAtRest = function() {
    return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || 0 === this._springConfig.tension);
  }, e3._interpolate = function(t4) {
    this._currentState.position = this._currentState.position * t4 + this._previousState.position * (1 - t4), this._currentState.velocity = this._currentState.velocity * t4 + this._previousState.velocity * (1 - t4);
  }, e3.addListener = function(t4) {
    return this.listeners.push(t4), this;
  }, e3.addOneTimeListener = function(t4) {
    var e4 = this;
    return Object.keys(t4).forEach(function(i2) {
      var n2;
      t4[i2] = (n2 = t4[i2], function() {
        n2.apply(void 0, [].slice.call(arguments)), e4.removeListener(t4);
      });
    }), this.listeners.push(t4), this;
  }, e3.removeListener = function(t4) {
    return S(this.listeners, t4), this;
  }, t3;
}(), w = /* @__PURE__ */ function() {
  function t3(t4) {
    this.looper = t4 || new E(), this.looper.springSystem = this, this.listeners = [], this._activeSprings = [], this._idleSpringIndices = [], this._isIdle = true, this._lastTimeMillis = -1, this._springRegistry = {};
  }
  var e3 = t3.prototype;
  return e3.createSpring = function(t4, e4) {
    return this.createSpringWithConfig({ tension: t4, friction: e4 });
  }, e3.createSpringWithConfig = function(t4) {
    var e4 = new I(this);
    return this.registerSpring(e4), e4.setSpringConfig(t4), e4;
  }, e3.getIsIdle = function() {
    return this._isIdle;
  }, e3.registerSpring = function(t4) {
    this._springRegistry[t4.getId()] = t4;
  }, e3.deregisterSpring = function(t4) {
    S(this._activeSprings, t4), delete this._springRegistry[t4.getId()];
  }, e3.advance = function(t4, e4) {
    for (var i2 = this; this._idleSpringIndices.length > 0; )
      this._idleSpringIndices.pop();
    for (this._activeSprings.filter(Boolean).forEach(function(n3) {
      n3.systemShouldAdvance() ? n3.advance(t4 / 1e3, e4 / 1e3) : i2._idleSpringIndices.push(i2._activeSprings.indexOf(n3));
    }); this._idleSpringIndices.length > 0; ) {
      var n2 = this._idleSpringIndices.pop();
      n2 >= 0 && this._activeSprings.splice(n2, 1);
    }
  }, e3.loop = function(t4) {
    var e4;
    -1 === this._lastTimeMillis && (this._lastTimeMillis = t4 - 1);
    var i2 = t4 - this._lastTimeMillis;
    this._lastTimeMillis = t4;
    var n2 = 0, r2 = this.listeners.length;
    for (n2 = 0; n2 < r2; n2++)
      (e4 = this.listeners[n2]).onBeforeIntegrate && e4.onBeforeIntegrate(this);
    for (this.advance(t4, i2), 0 === this._activeSprings.length && (this._isIdle = true, this._lastTimeMillis = -1), n2 = 0; n2 < r2; n2++)
      (e4 = this.listeners[n2]).onAfterIntegrate && e4.onAfterIntegrate(this);
    this._isIdle || this.looper.run();
  }, e3.activateSpring = function(t4) {
    var e4 = this._springRegistry[t4];
    -1 === this._activeSprings.indexOf(e4) && this._activeSprings.push(e4), this.getIsIdle() && (this._isIdle = false, this.looper.run());
  }, t3;
}(), O = new w(), x = function(t3) {
  var e3 = t3.springConfig, i2 = e3.overshootClamping, n2 = t3.getOnUpdateFunc, r2 = t3.onAnimationEnd, s4 = t3.onSpringActivate, a4 = O.createSpring(e3.stiffness, e3.damping);
  a4.setOvershootClampingEnabled(!!i2);
  var o2 = { onSpringActivate: s4, onSpringAtRest: function() {
    a4.destroy(), r2();
  }, onSpringUpdate: n2({ spring: a4, onAnimationEnd: r2 }) };
  return a4.addListener(o2), a4;
}, U = function(t3) {
  var e3 = x(t3);
  return e3.setEndValue(1), e3;
}, V = function(t3, e3) {
  if (void 0 === e3 && (e3 = {}), t3 && t3.length) {
    e3.reverse && t3.reverse();
    var i2, n2 = "number" != typeof (i2 = e3.speed) ? 1.1 : 1 + Math.min(Math.max(5 * i2, 0), 5), r2 = 1 / Math.max(Math.min(t3.length, 100), 10), s4 = t3.map(function(t4, e4) {
      var i3 = t4.getOnUpdateFunc;
      return t4.getOnUpdateFunc = function(t5) {
        var a4 = i3(t5);
        return function(t6) {
          var i4 = t6.getCurrentValue();
          (i4 = i4 < 0.01 ? 0 : i4 > 0.99 ? 1 : i4) >= r2 && s4[e4 + 1] && s4[e4 + 1](Math.max(Math.min(i4 * n2, 1), 0)), a4(t6);
        };
      }, t4;
    }).map(function(t4) {
      var e4 = x(t4);
      if (e4)
        return e4.setEndValue.bind(e4);
    }).filter(Boolean);
    s4[0] && s4[0](1);
  }
}, F = function(t3) {
  return [0, 1, 4, 5, 12, 13].map(function(e3) {
    return t3[e3];
  });
}, P = function(t3) {
  return t3.top < window.innerHeight && t3.bottom > 0 && t3.left < window.innerWidth && t3.right > 0;
};
function D(t3) {
  return JSON.parse(t3.dataset.flipConfig || "{}");
}
var R = function(t3, e3) {
  var i2;
  return a(t3, ((i2 = {})[e3[0]] = e3[1], i2));
}, T = function(t3, e3) {
  return r$1(e3 ? document.querySelectorAll("[" + d$1 + '="' + e3 + '"]') : t3.querySelectorAll("[" + c$1 + "]"));
}, M = function(t3) {
  return t3.map(function(t4) {
    return [t4, t4.getBoundingClientRect()];
  });
}, k = function(n2) {
  var o2 = n2.cachedOrderedFlipIds, p2 = void 0 === o2 ? [] : o2, f2 = n2.inProgressAnimations, h4 = void 0 === f2 ? {} : f2, v2 = n2.flippedElementPositionsBeforeUpdate, y4 = void 0 === v2 ? {} : v2, _2 = n2.flipCallbacks, S4 = void 0 === _2 ? {} : _2, E3 = n2.containerEl, A2 = n2.applyTransformOrigin, C2 = n2.spring, b3 = n2.debug, I3 = n2.portalKey, w3 = n2.staggerConfig, O3 = void 0 === w3 ? {} : w3, x3 = n2.decisionData, k3 = void 0 === x3 ? {} : x3, j2 = n2.handleEnterUpdateDelete, B2 = n2.onComplete, N = n2.onStart;
  if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
    var L2, q2 = M(T((L2 = { element: E3, portalKey: I3 }).element, L2.portalKey)).map(function(t3) {
      var e3 = t3[0], i2 = t3[1], n3 = window.getComputedStyle(e3);
      return [e3.dataset.flipId, { element: e3, rect: i2, opacity: parseFloat(n3.opacity), transform: n3.transform }];
    }).reduce(R, {}), X2 = function(t3) {
      var e3 = t3.containerEl, i2 = t3.portalKey;
      return i2 ? function(t4) {
        return function(e4) {
          return r$1(document.querySelectorAll("[" + d$1 + '="' + t4 + '"]' + e4));
        };
      }(i2) : e3 ? function(t4) {
        var e4 = Math.random().toFixed(5);
        return t4.dataset.flipperId = e4, function(i3) {
          return r$1(t4.querySelectorAll('[data-flipper-id="' + e4 + '"] ' + i3));
        };
      }(e3) : function() {
        return [];
      };
    }({ containerEl: E3, portalKey: I3 }), Y2 = function(t3) {
      return function(e3) {
        return t3("[" + c$1 + '="' + e3 + '"]')[0];
      };
    }(X2), W = function(t3) {
      return y4[t3] && q2[t3];
    }, K2 = Object.keys(y4).concat(Object.keys(q2)).filter(function(t3) {
      return !W(t3);
    }), H3 = { flipCallbacks: S4, getElement: Y2, flippedElementPositionsBeforeUpdate: y4, flippedElementPositionsAfterUpdate: q2, inProgressAnimations: h4, decisionData: k3 }, J = function(t3) {
      var e3, i2 = t3.unflippedIds, n3 = t3.flipCallbacks, r2 = t3.getElement, s4 = t3.flippedElementPositionsBeforeUpdate, a4 = t3.flippedElementPositionsAfterUpdate, o3 = t3.inProgressAnimations, l2 = t3.decisionData, p3 = i2.filter(function(t4) {
        return a4[t4];
      }).filter(function(t4) {
        return n3[t4] && n3[t4].onAppear;
      }), c3 = i2.filter(function(t4) {
        return s4[t4] && n3[t4] && n3[t4].onExit;
      }), u3 = new Promise(function(t4) {
        e3 = t4;
      }), d4 = [], f3 = 0, h5 = c3.map(function(t4, i3) {
        var r3 = s4[t4].domDataForExitAnimations, a5 = r3.element, p4 = r3.parent, c4 = r3.childPosition, u4 = c4.top, h6 = c4.left, g2 = c4.width, m4 = c4.height;
        "static" === getComputedStyle(p4).position && (p4.style.position = "relative"), a5.style.transform = "matrix(1, 0, 0, 1, 0, 0)", a5.style.position = "absolute", a5.style.top = u4 + "px", a5.style.left = h6 + "px", a5.style.height = m4 + "px", a5.style.width = g2 + "px";
        var v3 = d4.filter(function(t5) {
          return t5[0] === p4;
        })[0];
        v3 || (v3 = [p4, document.createDocumentFragment()], d4.push(v3)), v3[1].appendChild(a5), f3 += 1;
        var y5 = function() {
          try {
            p4.removeChild(a5);
          } catch (t5) {
          } finally {
            0 == (f3 -= 1) && e3();
          }
        };
        return o3[t4] = { stop: y5 }, function() {
          return n3[t4].onExit(a5, i3, y5, l2);
        };
      });
      return d4.forEach(function(t4) {
        t4[0].appendChild(t4[1]);
      }), h5.length || e3(), { hideEnteringElements: function() {
        p3.forEach(function(t4) {
          var e4 = r2(t4);
          e4 && (e4.style.opacity = "0");
        });
      }, animateEnteringElements: function() {
        p3.forEach(function(t4, e4) {
          var i3 = r2(t4);
          i3 && n3[t4].onAppear(i3, e4, l2);
        });
      }, animateExitingElements: function() {
        return h5.forEach(function(t4) {
          return t4();
        }), u3;
      } };
    }(a({}, H3, { unflippedIds: K2 })), z2 = J.hideEnteringElements, G2 = J.animateEnteringElements, Q2 = J.animateExitingElements, Z = a({}, H3, { containerEl: E3, flippedIds: p2.filter(W), applyTransformOrigin: A2, spring: C2, debug: b3, staggerConfig: O3, scopedSelector: X2, onComplete: B2 });
    N && N(E3, k3);
    var $ = function(n3) {
      var o3, p3 = n3.flippedIds, c3 = n3.flipCallbacks, d4 = n3.inProgressAnimations, f3 = n3.flippedElementPositionsBeforeUpdate, h5 = n3.flippedElementPositionsAfterUpdate, v3 = n3.applyTransformOrigin, y5 = n3.spring, _3 = n3.getElement, S5 = n3.debug, E4 = n3.staggerConfig, A3 = void 0 === E4 ? {} : E4, C3 = n3.decisionData, b4 = void 0 === C3 ? {} : C3, I4 = n3.onComplete, w4 = n3.containerEl, O4 = new Promise(function(t3) {
        o3 = t3;
      });
      if (I4 && O4.then(function() {
        return I4(w4, b4);
      }), !p3.length)
        return function() {
          return o3([]), O4;
        };
      var x4 = [], R3 = _3(p3[0]), T3 = R3 ? R3.ownerDocument.querySelector("body") : document.querySelector("body");
      s(p3);
      var M4 = p3.map(function(n4) {
        var s4 = f3[n4].rect, p4 = h5[n4].rect, _4 = f3[n4].opacity, S6 = h5[n4].opacity, E5 = p4.width < 1 || p4.height < 1, A4 = h5[n4].element;
        if (!P(s4) && !P(p4))
          return false;
        if (!A4)
          return false;
        var C4, I5, w5, O5 = D(A4), U2 = (w5 = (I5 = void 0 === (C4 = { flipperSpring: y5, flippedSpring: O5.spring }) ? {} : C4).flippedSpring, a({}, g.noWobble, m$1(I5.flipperSpring), m$1(w5))), V2 = true === O5.stagger ? "default" : O5.stagger, R4 = { element: A4, id: n4, stagger: V2, springConfig: U2 };
        if (c3[n4] && c3[n4].shouldFlip && !c3[n4].shouldFlip(b4.previous, b4.current))
          return false;
        var k5 = Math.abs(s4.left - p4.left) + Math.abs(s4.top - p4.top), j4 = Math.abs(s4.width - p4.width) + Math.abs(s4.height - p4.height), B4 = Math.abs(S6 - _4);
        if (0 === s4.height && 0 === p4.height || 0 === s4.width && 0 === p4.width || k5 < 0.5 && j4 < 0.5 && B4 < 0.01)
          return false;
        var N3 = parse$1(h5[n4].transform), L4 = { matrix: N3 }, q4 = { matrix: [] }, X3 = [N3];
        O5.translate && (X3.push(translateX(s4.left - p4.left)), X3.push(translateY(s4.top - p4.top))), O5.scale && (X3.push(scaleX(Math.max(s4.width, 1) / Math.max(p4.width, 1))), X3.push(scaleY(Math.max(s4.height, 1) / Math.max(p4.height, 1)))), O5.opacity && (q4.opacity = _4, L4.opacity = S6);
        var Y3 = [];
        if (!c3[n4] || !c3[n4].shouldInvert || c3[n4].shouldInvert(b4.previous, b4.current)) {
          var W2 = function(t3, e3) {
            return r$1(t3.querySelectorAll("[" + u$1 + '="' + e3 + '"]'));
          }(A4, n4);
          Y3 = W2.map(function(t3) {
            return [t3, D(t3)];
          });
        }
        q4.matrix = F(X3.reduce(multiply)), L4.matrix = F(L4.matrix);
        var K3, H4 = function(t3) {
          var i2 = t3.element, n5 = t3.invertedChildren, r2 = t3.body;
          return function(t4) {
            var s5 = t4.matrix, a4 = t4.opacity, o4 = t4.forceMinVals;
            if (e(a4) && (i2.style.opacity = a4 + ""), o4 && (i2.style.minHeight = "1px", i2.style.minWidth = "1px"), s5) {
              var l2 = function(t5) {
                return "matrix(" + t5.join(", ") + ")";
              }(s5);
              i2.style.transform = l2, n5 && function(t5) {
                var e3 = t5.matrix, i3 = t5.body;
                t5.invertedChildren.forEach(function(t6) {
                  var n6 = t6[0], r3 = t6[1];
                  if (i3.contains(n6)) {
                    var s6 = e3[0], a5 = e3[3], o5 = e3[5], l3 = { translateX: 0, translateY: 0, scaleX: 1, scaleY: 1 }, p5 = "";
                    r3.translate && (l3.translateX = -e3[4] / s6, l3.translateY = -o5 / a5, p5 += "translate(" + l3.translateX + "px, " + l3.translateY + "px)"), r3.scale && (l3.scaleX = 1 / s6, l3.scaleY = 1 / a5, p5 += " scale(" + l3.scaleX + ", " + l3.scaleY + ")"), n6.style.transform = p5;
                  }
                });
              }({ invertedChildren: n5, matrix: s5, body: r2 });
            }
          };
        }({ element: A4, invertedChildren: Y3, body: T3 });
        if (c3[n4] && c3[n4].onComplete) {
          var J2 = c3[n4].onComplete;
          K3 = function() {
            return J2(A4, b4);
          };
        }
        var z3 = e(q4.opacity) && e(L4.opacity) && q4.opacity !== L4.opacity, G3 = false;
        return a({}, R4, { stagger: V2, springConfig: U2, getOnUpdateFunc: function(t3) {
          var e3 = t3.spring, i2 = t3.onAnimationEnd;
          return d4[n4] = { destroy: e3.destroy.bind(e3), onAnimationEnd: i2 }, function(t4) {
            c3[n4] && c3[n4].onSpringUpdate && c3[n4].onSpringUpdate(t4.getCurrentValue()), G3 || (G3 = true, c3[n4] && c3[n4].onStart && c3[n4].onStart(A4, b4));
            var e4 = t4.getCurrentValue();
            if (T3.contains(A4)) {
              var i3 = { matrix: [] };
              i3.matrix = q4.matrix.map(function(t5, i4) {
                return l(t5, L4.matrix[i4], e4);
              }), z3 && (i3.opacity = l(q4.opacity, L4.opacity, e4)), H4(i3);
            } else
              t4.destroy();
          };
        }, initializeFlip: function() {
          H4({ matrix: q4.matrix, opacity: z3 ? q4.opacity : void 0, forceMinVals: E5 }), c3[n4] && c3[n4].onStartImmediate && c3[n4].onStartImmediate(A4, b4), O5.transformOrigin ? A4.style.transformOrigin = O5.transformOrigin : v3 && (A4.style.transformOrigin = "0 0"), Y3.forEach(function(t3) {
            var e3 = t3[0], i2 = t3[1];
            i2.transformOrigin ? e3.style.transformOrigin = i2.transformOrigin : v3 && (e3.style.transformOrigin = "0 0");
          });
        }, onAnimationEnd: function(t3) {
          delete d4[n4], i$1(K3) && K3(), A4.style.transform = "", Y3.forEach(function(t4) {
            t4[0].style.transform = "";
          }), E5 && A4 && (A4.style.minHeight = "", A4.style.minWidth = ""), t3 || (x4.push(n4), x4.length >= M4.length && o3(x4));
        }, delayUntil: O5.delayUntil });
      }).filter(Boolean);
      if (M4.forEach(function(t3) {
        return (0, t3.initializeFlip)();
      }), S5)
        return function() {
        };
      var k4 = M4.filter(function(t3) {
        return t3.delayUntil && (e3 = t3.delayUntil, M4.filter(function(t4) {
          return t4.id === e3;
        }).length);
        var e3;
      }), j3 = {}, B3 = {}, N2 = {};
      k4.forEach(function(t3) {
        t3.stagger ? (N2[t3.stagger] = true, B3[t3.delayUntil] ? B3[t3.delayUntil].push(t3.stagger) : B3[t3.delayUntil] = [t3.stagger]) : j3[t3.delayUntil] ? j3[t3.delayUntil].push(t3) : j3[t3.delayUntil] = [t3];
      });
      var L3 = M4.filter(function(t3) {
        return t3.stagger;
      }).reduce(function(t3, e3) {
        return t3[e3.stagger] ? t3[e3.stagger].push(e3) : t3[e3.stagger] = [e3], t3;
      }, {}), q3 = M4.filter(function(t3) {
        return -1 === k4.indexOf(t3);
      });
      return q3.forEach(function(t3) {
        t3.onSpringActivate = function() {
          j3[t3.id] && j3[t3.id].forEach(U), B3[t3.id] && Object.keys(B3[t3.id].reduce(function(t4, e3) {
            var i2;
            return a(t4, ((i2 = {})[e3] = true, i2));
          }, {})).forEach(function(t4) {
            V(L3[t4], A3[t4]);
          });
        };
      }), function() {
        return M4.length || o3([]), q3.filter(function(t3) {
          return !t3.stagger;
        }).forEach(U), Object.keys(L3).forEach(function(t3) {
          N2[t3] || V(L3[t3], A3[t3]);
        }), O4;
      };
    }(Z);
    j2 ? j2({ hideEnteringElements: z2, animateEnteringElements: G2, animateExitingElements: Q2, animateFlippedElements: $ }) : (z2(), Q2().then(G2), $());
  }
}, j = function(t3) {
  var e3 = t3.element, i2 = t3.flipCallbacks, n2 = void 0 === i2 ? {} : i2, s4 = t3.inProgressAnimations, o2 = void 0 === s4 ? {} : s4, l2 = T(e3, t3.portalKey), p2 = r$1(e3.querySelectorAll("[" + u$1 + "]")), c3 = {}, d4 = [], h4 = {};
  l2.filter(function(t4) {
    return n2 && n2[t4.dataset.flipId] && n2[t4.dataset.flipId].onExit;
  }).forEach(function(t4) {
    var e4 = t4.parentNode;
    if (t4.closest) {
      var i3 = t4.closest("[" + f$1 + "]");
      i3 && (e4 = i3);
    }
    var n3 = d4.findIndex(function(t5) {
      return t5[0] === e4;
    });
    -1 === n3 && (d4.push([e4, e4.getBoundingClientRect()]), n3 = d4.length - 1), c3[t4.dataset.flipId] = d4[n3][1], h4[t4.dataset.flipId] = e4;
  });
  var g2 = M(l2), m4 = g2.map(function(t4) {
    var e4 = t4[0], i3 = t4[1], r2 = {};
    if (n2 && n2[e4.dataset.flipId] && n2[e4.dataset.flipId].onExit) {
      var s5 = c3[e4.dataset.flipId];
      a(r2, { element: e4, parent: h4[e4.dataset.flipId], childPosition: { top: i3.top - s5.top, left: i3.left - s5.left, width: i3.width, height: i3.height } });
    }
    return [e4.dataset.flipId, { rect: i3, opacity: parseFloat(window.getComputedStyle(e4).opacity || "1"), domDataForExitAnimations: r2 }];
  }).reduce(R, {});
  return function(t4, e4) {
    Object.keys(t4).forEach(function(e5) {
      t4[e5].destroy && t4[e5].destroy(), t4[e5].onAnimationEnd && t4[e5].onAnimationEnd(true), delete t4[e5];
    }), e4.forEach(function(t5) {
      t5.style.transform = "", t5.style.opacity = "";
    });
  }(o2, l2.concat(p2)), { flippedElementPositions: m4, cachedOrderedFlipIds: g2.map(function(t4) {
    return t4[0].dataset.flipId;
  }) };
};
new w();
function c(e3, t3) {
  return (c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
    return e4.__proto__ = t4, e4;
  })(e3, t3);
}
function d(e3, t3) {
  if (null == e3)
    return {};
  var r2, n2, i2 = {}, o2 = Object.keys(e3);
  for (n2 = 0; n2 < o2.length; n2++)
    t3.indexOf(r2 = o2[n2]) >= 0 || (i2[r2] = e3[r2]);
  return i2;
}
var f = reactExports.createContext({}), u = reactExports.createContext("portal"), h = function(t3) {
  var r2, n2;
  function i2() {
    var e3;
    return (e3 = t3.apply(this, arguments) || this).inProgressAnimations = {}, e3.flipCallbacks = {}, e3.el = void 0, e3;
  }
  n2 = t3, (r2 = i2).prototype = Object.create(n2.prototype), r2.prototype.constructor = r2, c(r2, n2);
  var l2 = i2.prototype;
  return l2.getSnapshotBeforeUpdate = function(e3) {
    return e3.flipKey !== this.props.flipKey && this.el ? j({ element: this.el, flipCallbacks: this.flipCallbacks, inProgressAnimations: this.inProgressAnimations, portalKey: this.props.portalKey }) : null;
  }, l2.componentDidUpdate = function(e3, t4, r3) {
    this.props.flipKey !== e3.flipKey && this.el && k({ flippedElementPositionsBeforeUpdate: r3.flippedElementPositions, cachedOrderedFlipIds: r3.cachedOrderedFlipIds, containerEl: this.el, inProgressAnimations: this.inProgressAnimations, flipCallbacks: this.flipCallbacks, applyTransformOrigin: this.props.applyTransformOrigin, spring: this.props.spring, debug: this.props.debug, portalKey: this.props.portalKey, staggerConfig: this.props.staggerConfig, handleEnterUpdateDelete: this.props.handleEnterUpdateDelete, decisionData: { previous: e3.decisionData, current: this.props.decisionData }, onComplete: this.props.onComplete, onStart: this.props.onStart });
  }, l2.render = function() {
    var t4 = this, r3 = this.props, n3 = r3.portalKey, i3 = e$1.createElement(f.Provider, { value: this.flipCallbacks }, e$1.createElement(r3.element, { className: r3.className, ref: function(e3) {
      return t4.el = e3;
    } }, this.props.children));
    return n3 && (i3 = e$1.createElement(u.Provider, { value: n3 }, i3)), i3;
  }, i2;
}(reactExports.Component);
h.defaultProps = { applyTransformOrigin: true, element: "div" };
var m = function(e3) {
  var t3, r2 = e3.children, o2 = e3.flipId, p$1 = e3.inverseFlipId, a4 = e3.portalKey, c3 = d(e3, ["children", "flipId", "inverseFlipId", "portalKey"]), f2 = r2, u3 = function(e4) {
    return "function" == typeof e4;
  }(f2);
  if (!u3)
    try {
      f2 = reactExports.Children.only(r2);
    } catch (e4) {
      throw new Error("Each Flipped component must wrap a single child");
    }
  c3.scale || c3.translate || c3.opacity || p.assign(c3, { translate: true, scale: true, opacity: true });
  var h4 = ((t3 = {})[h$1.DATA_FLIP_CONFIG] = JSON.stringify(c3), t3);
  return void 0 !== o2 ? h4[h$1.DATA_FLIP_ID] = String(o2) : p$1 && (h4[h$1.DATA_INVERSE_FLIP_ID] = String(p$1)), void 0 !== a4 && (h4[h$1.DATA_PORTAL_KEY] = a4), u3 ? f2(h4) : reactExports.cloneElement(f2, h4);
}, y = function(t3) {
  var r2 = t3.children, n2 = t3.flipId, i2 = t3.shouldFlip, o2 = t3.shouldInvert, p$1 = t3.onAppear, s4 = t3.onStart, a4 = t3.onStartImmediate, c3 = t3.onComplete, h4 = t3.onExit, y4 = t3.onSpringUpdate, g2 = d(t3, ["children", "flipId", "shouldFlip", "shouldInvert", "onAppear", "onStart", "onStartImmediate", "onComplete", "onExit", "onSpringUpdate"]);
  return r2 ? g2.inverseFlipId ? e$1.createElement(m, Object.assign({}, g2), r2) : e$1.createElement(u.Consumer, null, function(t4) {
    return e$1.createElement(f.Consumer, null, function(d4) {
      return p.isObject(d4) && n2 && (d4[n2] = { shouldFlip: i2, shouldInvert: o2, onAppear: p$1, onStart: s4, onStartImmediate: a4, onComplete: c3, onExit: h4, onSpringUpdate: y4 }), e$1.createElement(m, Object.assign({ flipId: n2 }, g2, { portalKey: t4 }), r2);
    });
  }) : null;
};
y.displayName = "Flipped";
function debounce(func, wait) {
  let timeout = null;
  return function executedFunction(...args) {
    const later = () => {
      timeout = null;
      func(...args);
    };
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = window.setTimeout(later, wait);
  };
}
function useEffectDebounced(callback, deps, time) {
  const callbackRef = reactExports.useRef(callback);
  const debouncedCallback = reactExports.useMemo(() => {
    return debounce((...args) => callbackRef.current(...args), time);
  }, []);
  callbackRef.current = callback;
  reactExports.useEffect(() => {
    debouncedCallback();
  }, deps);
}
function usePreview(data, previewUrl, initialHTML) {
  const [loading, setLoading] = reactExports.useState(false);
  const [html, setHTML] = reactExports.useState(initialHTML);
  const isFirstRender = reactExports.useRef(!!initialHTML);
  useEffectDebounced(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    const timer = window.setTimeout(() => setLoading(true), 200);
    fetch(previewUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      body: JSON.stringify({
        ...data,
        preview: true
      })
    }).then((r2) => r2.text()).then(setHTML).finally(() => {
      clearTimeout(timer);
      setLoading(false);
    });
    return () => clearTimeout(timer);
  }, [data], 500);
  return {
    loading,
    html
  };
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$m() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function PreviewAddFloating({
  onClick,
  style: style2
}) {
  return /* @__PURE__ */ jsx(Button$7, {
    onClick,
    style: style2,
    children: /* @__PURE__ */ jsx("span", {
      children: "Ajouter un bloc"
    })
  });
}
const Button$7 = /* @__PURE__ */ createStyled(UnstyledButton, process.env.NODE_ENV === "production" ? {
  target: "e1a8gnlt0"
} : {
  target: "e1a8gnlt0",
  label: "Button"
})(process.env.NODE_ENV === "production" ? {
  name: "ksevry",
  styles: "position:absolute;top:0;left:0;right:0;margin-top:-40px;margin-bottom:-40px;opacity:0;width:100%;height:80px;display:flex;align-items:center;justify-content:center;z-index:101;background-color:transparent;border:none;transition:opacity .3s;&:hover{opacity:1;}&::before{content:'';height:2px;width:100%;position:absolute;top:calc(50% - 1px);left:0;z-index:101;background-color:var(--ve-primary);}&::after{content:'+';font-size:1.5em;z-index:101;width:40px;height:40px;background:var(--ve-primary);display:flex;align-items:center;justify-content:center;color:#FFF;border-radius:40px;transition:transform .3s;}& span{pointer-events:none;font-size:15px;height:34px;background:var(--ve-primary);padding:0 .5em;display:flex;align-items:center;position:absolute;left:50%;bottom:-30px;transform:translate(-50%, 5px);color:#FFF;transition:transform .3s;&::before{content:'';position:absolute;display:block;left:calc(50% - 6px);top:-6px;width:12px;height:12px;background:var(--bs-primary);transform:rotate(45deg);}}&:hover span{transform:translate(-50%, 0px);}"
} : {
  name: "ksevry",
  styles: "position:absolute;top:0;left:0;right:0;margin-top:-40px;margin-bottom:-40px;opacity:0;width:100%;height:80px;display:flex;align-items:center;justify-content:center;z-index:101;background-color:transparent;border:none;transition:opacity .3s;&:hover{opacity:1;}&::before{content:'';height:2px;width:100%;position:absolute;top:calc(50% - 1px);left:0;z-index:101;background-color:var(--ve-primary);}&::after{content:'+';font-size:1.5em;z-index:101;width:40px;height:40px;background:var(--ve-primary);display:flex;align-items:center;justify-content:center;color:#FFF;border-radius:40px;transition:transform .3s;}& span{pointer-events:none;font-size:15px;height:34px;background:var(--ve-primary);padding:0 .5em;display:flex;align-items:center;position:absolute;left:50%;bottom:-30px;transform:translate(-50%, 5px);color:#FFF;transition:transform .3s;&::before{content:'';position:absolute;display:block;left:calc(50% - 6px);top:-6px;width:12px;height:12px;background:var(--bs-primary);transform:rotate(45deg);}}&:hover span{transform:translate(-50%, 0px);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkRmxvYXRpbmcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CZSIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld0FkZEZsb2F0aW5nLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCBTeW50aGV0aWNFdmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuXG50eXBlIFByZXZpZXdBZGRGbG9hdGluZ1Byb3BzID0ge1xuICBvbkNsaWNrPzogKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG4gIHN0eWxlPzogQ1NTUHJvcGVydGllc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJldmlld0FkZEZsb2F0aW5nKHtcbiAgb25DbGljayxcbiAgc3R5bGUsXG59OiBQcmV2aWV3QWRkRmxvYXRpbmdQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxCdXR0b24gb25DbGljaz17b25DbGlja30gc3R5bGU9e3N0eWxlfT5cbiAgICAgIDxzcGFuPkFqb3V0ZXIgdW4gYmxvYzwvc3Bhbj5cbiAgICA8L0J1dHRvbj5cbiAgKVxufVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoVW5zdHlsZWRCdXR0b24pKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIG1hcmdpblRvcDogJy00MHB4JyxcbiAgbWFyZ2luQm90dG9tOiAnLTQwcHgnLFxuICBvcGFjaXR5OiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICc4MHB4JyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB6SW5kZXg6IDEwMSxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXI6ICdub25lJyxcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgLjNzJyxcbiAgJyY6aG92ZXInOiB7IG9wYWNpdHk6IDEgfSxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgaGVpZ2h0OiAnMnB4JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJ2NhbGMoNTAlIC0gMXB4KScsXG4gICAgbGVmdDogJzAnLFxuICAgIHpJbmRleDogMTAxLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgfSxcbiAgJyY6OmFmdGVyJzoge1xuICAgIGNvbnRlbnQ6IFwiJysnXCIsXG4gICAgZm9udFNpemU6ICcxLjVlbScsXG4gICAgekluZGV4OiAxMDEsXG4gICAgd2lkdGg6ICc0MHB4JyxcbiAgICBoZWlnaHQ6ICc0MHB4JyxcbiAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgY29sb3I6ICcjRkZGJyxcbiAgICBib3JkZXJSYWRpdXM6ICc0MHB4JyxcbiAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIC4zcycsXG4gIH0sXG4gICcmIHNwYW4nOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIGZvbnRTaXplOiAnMTVweCcsXG4gICAgaGVpZ2h0OiAnMzRweCcsXG4gICAgYmFja2dyb3VuZDogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICBwYWRkaW5nOiAnMCAuNWVtJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgYm90dG9tOiAnLTMwcHgnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCA1cHgpJyxcbiAgICBjb2xvcjogJyNGRkYnLFxuICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gLjNzJyxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgbGVmdDogJ2NhbGMoNTAlIC0gNnB4KScsXG4gICAgICB0b3A6ICctNnB4JyxcbiAgICAgIHdpZHRoOiAnMTJweCcsXG4gICAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICAgIGJhY2tncm91bmQ6ICd2YXIoLS1icy1wcmltYXJ5KScsXG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoNDVkZWcpJyxcbiAgICB9LFxuICB9LFxuICAnJjpob3ZlciBzcGFuJzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgMHB4KScgfSxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$m
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$l() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const PreviewItemWrapper = reactExports.forwardRef(({
  title,
  isFocused,
  style: style2,
  onClick,
  onAdd,
  onDelete,
  onMove
}, ref) => {
  const handleAdd = (e3) => {
    e3.preventDefault();
    e3.stopPropagation();
    onAdd(e3);
  };
  const handleDelete = (e3) => {
    e3.preventDefault();
    e3.stopPropagation();
    onDelete(e3);
  };
  return /* @__PURE__ */ jsxs(PreviewItemWrapperDiv, {
    isFocused,
    ref,
    style: style2,
    onClick,
    children: [/* @__PURE__ */ jsx(PreviewAddFloating, {
      onClick: handleAdd
    }), title && /* @__PURE__ */ jsx(PreviewItemTitle, {
      isFocused,
      children: title
    }), /* @__PURE__ */ jsxs(PreviewItemHeader, {
      isFocused,
      children: [/* @__PURE__ */ jsx(PreviewButton, {
        onClick: prevent(() => onMove(-1)),
        style: {
          marginLeft: "auto"
        },
        children: /* @__PURE__ */ jsx(IconUp, {
          size: 16
        })
      }), /* @__PURE__ */ jsx(PreviewButton, {
        onClick: prevent(() => onMove(1)),
        style: {
          marginLeft: "auto"
        },
        children: /* @__PURE__ */ jsx(IconDown, {
          size: 16
        })
      }), /* @__PURE__ */ jsx(PreviewButton, {
        onClick: handleDelete,
        style: {
          backgroundColor: "var(--ve-danger)"
        },
        children: /* @__PURE__ */ jsx(IconTrash, {
          size: 16
        })
      })]
    })]
  });
});
const PreviewItemWrapperDiv = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e10fho2z3"
} : {
  target: "e10fho2z3",
  label: "PreviewItemWrapperDiv"
})("position:absolute;inset:0;cursor:pointer;&:hover{border-color:var(--ve-primary);}&::before{content:'';position:absolute;inset:0;border-style:solid;border-color:transparent;z-index:10;}&:hover::before{border-color:var(--ve-primary);}", ({
  isFocused
}) => ({
  "&::before": {
    borderWidth: isFocused ? 2 : 1,
    borderColor: isFocused ? "var(--ve-primary)" : "transparent"
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbVdyYXBwZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdFOEIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXdJdGVtV3JhcHBlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENTU1Byb3BlcnRpZXMsIGZvcndhcmRSZWYsIHR5cGUgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgUHJldmlld0FkZEZsb2F0aW5nIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkRmxvYXRpbmcnXG5pbXBvcnQgeyBJY29uRG93biwgSWNvblRyYXNoLCBJY29uVXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBQcm9wcyA9IHtcbiAgdGl0bGU/OiBzdHJpbmdcbiAgaXNGb2N1c2VkOiBib29sZWFuXG4gIHN0eWxlPzogQ1NTUHJvcGVydGllc1xuICBvbkNsaWNrOiAoZTogU3ludGhldGljRXZlbnQpID0+IHZvaWRcbiAgb25BZGQ6IChlOiBTeW50aGV0aWNFdmVudCkgPT4gdm9pZFxuICBvbkRlbGV0ZTogKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG4gIG9uTW92ZTogKGRpcmVjdGlvbjogbnVtYmVyKSA9PiB2b2lkXG4gIGlkPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBQcmV2aWV3SXRlbVdyYXBwZXIgPSBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBQcm9wcz4oXG4gICh7IHRpdGxlLCBpc0ZvY3VzZWQsIHN0eWxlLCBvbkNsaWNrLCBvbkFkZCwgb25EZWxldGUsIG9uTW92ZSB9LCByZWYpID0+IHtcbiAgICBjb25zdCBoYW5kbGVBZGQgPSAoZTogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgb25BZGQoZSlcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIG9uRGVsZXRlKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcmV2aWV3SXRlbVdyYXBwZXJEaXZcbiAgICAgICAgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIDxQcmV2aWV3QWRkRmxvYXRpbmcgb25DbGljaz17aGFuZGxlQWRkfSAvPlxuICAgICAgICB7dGl0bGUgJiYgKFxuICAgICAgICAgIDxQcmV2aWV3SXRlbVRpdGxlIGlzRm9jdXNlZD17aXNGb2N1c2VkfT57dGl0bGV9PC9QcmV2aWV3SXRlbVRpdGxlPlxuICAgICAgICApfVxuICAgICAgICA8UHJldmlld0l0ZW1IZWFkZXIgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9PlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IG9uTW92ZSgtMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvblVwIHNpemU9ezE2fSAvPlxuICAgICAgICAgIDwvUHJldmlld0J1dHRvbj5cbiAgICAgICAgICA8UHJldmlld0J1dHRvblxuICAgICAgICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiBvbk1vdmUoMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvbkRvd24gc2l6ZT17MTZ9IC8+XG4gICAgICAgICAgPC9QcmV2aWV3QnV0dG9uPlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVEZWxldGV9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsxNn0gLz5cbiAgICAgICAgICA8L1ByZXZpZXdCdXR0b24+XG4gICAgICAgIDwvUHJldmlld0l0ZW1IZWFkZXI+XG4gICAgICA8L1ByZXZpZXdJdGVtV3JhcHBlckRpdj5cbiAgICApXG4gIH1cbilcblxuY29uc3QgUHJldmlld0l0ZW1XcmFwcGVyRGl2ID0gc3R5bGVkLmRpdjx7IGlzRm9jdXNlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGluc2V0OiAwLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBpbnNldDogMCxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gICAgJyY6aG92ZXI6OmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJXaWR0aDogaXNGb2N1c2VkID8gMiA6IDEsXG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gJ3ZhcigtLXZlLXByaW1hcnkpJyA6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbiAgfSlcbilcblxuY29uc3QgUHJldmlld0l0ZW1IZWFkZXIgPSBzdHlsZWQuZGl2PHsgaXNGb2N1c2VkOiBib29sZWFuIH0+KFxuICB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAtMSxcbiAgICByaWdodDogMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICBnYXA6IDIsXG4gICAgY29sb3I6ICcjRkZGJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHBhZGRpbmdSaWdodDogJy41cmVtJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKGNhbGMoMXB4IC0gMTAwJSkpJyxcbiAgICB6SW5kZXg6IDEwMixcbiAgICB0cmFuc2l0aW9uOiAnLjNzJyxcbiAgICAnKjpob3ZlciA+ICYnOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgIG9wYWNpdHk6IGlzRm9jdXNlZCA/IDEgOiAwLFxuICB9KVxuKVxuXG5jb25zdCBQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGNvbG9yOiAnI0ZGRicsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGhlaWdodDogMzAsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6ICc1cHgnLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogJzVweCcsXG4gIHRyYW5zaXRpb246ICcuM3MnLFxuICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnLFxuICAnJjpob3Zlcic6IHtcbiAgICBoZWlnaHQ6IDM2LFxuICB9LFxufSlcblxuY29uc3QgUHJldmlld0l0ZW1UaXRsZSA9IHN0eWxlZC5kaXY8eyBpc0ZvY3VzZWQ6IGJvb2xlYW4gfT4oXG4gIHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGNvbG9yOiAnI0ZGRicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIGhlaWdodDogMzAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJzVweCcsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICc1cHgnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoY2FsYygxcHggLSAxMDAlKSknLFxuICAgICcqOmhvdmVyID4gJic6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSxcbiAgfSxcbiAgKHsgaXNGb2N1c2VkIH0pID0+ICh7XG4gICAgb3BhY2l0eTogaXNGb2N1c2VkID8gMSA6IDAsXG4gIH0pXG4pXG4iXX0= */");
const PreviewItemHeader = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e10fho2z2"
} : {
  target: "e10fho2z2",
  label: "PreviewItemHeader"
})({
  position: "absolute",
  top: -1,
  right: 0,
  display: "flex",
  alignItems: "flex-end",
  justifyContent: "flex-end",
  gap: 2,
  color: "#FFF",
  opacity: 0,
  paddingRight: ".5rem",
  transform: "translateY(calc(1px - 100%))",
  zIndex: 102,
  transition: ".3s",
  "*:hover > &": {
    opacity: 1
  }
}, ({
  isFocused
}) => ({
  opacity: isFocused ? 1 : 0
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbVdyYXBwZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9HMEIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXdJdGVtV3JhcHBlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENTU1Byb3BlcnRpZXMsIGZvcndhcmRSZWYsIHR5cGUgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgUHJldmlld0FkZEZsb2F0aW5nIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkRmxvYXRpbmcnXG5pbXBvcnQgeyBJY29uRG93biwgSWNvblRyYXNoLCBJY29uVXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBQcm9wcyA9IHtcbiAgdGl0bGU/OiBzdHJpbmdcbiAgaXNGb2N1c2VkOiBib29sZWFuXG4gIHN0eWxlPzogQ1NTUHJvcGVydGllc1xuICBvbkNsaWNrOiAoZTogU3ludGhldGljRXZlbnQpID0+IHZvaWRcbiAgb25BZGQ6IChlOiBTeW50aGV0aWNFdmVudCkgPT4gdm9pZFxuICBvbkRlbGV0ZTogKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG4gIG9uTW92ZTogKGRpcmVjdGlvbjogbnVtYmVyKSA9PiB2b2lkXG4gIGlkPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBQcmV2aWV3SXRlbVdyYXBwZXIgPSBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBQcm9wcz4oXG4gICh7IHRpdGxlLCBpc0ZvY3VzZWQsIHN0eWxlLCBvbkNsaWNrLCBvbkFkZCwgb25EZWxldGUsIG9uTW92ZSB9LCByZWYpID0+IHtcbiAgICBjb25zdCBoYW5kbGVBZGQgPSAoZTogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgb25BZGQoZSlcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIG9uRGVsZXRlKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcmV2aWV3SXRlbVdyYXBwZXJEaXZcbiAgICAgICAgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIDxQcmV2aWV3QWRkRmxvYXRpbmcgb25DbGljaz17aGFuZGxlQWRkfSAvPlxuICAgICAgICB7dGl0bGUgJiYgKFxuICAgICAgICAgIDxQcmV2aWV3SXRlbVRpdGxlIGlzRm9jdXNlZD17aXNGb2N1c2VkfT57dGl0bGV9PC9QcmV2aWV3SXRlbVRpdGxlPlxuICAgICAgICApfVxuICAgICAgICA8UHJldmlld0l0ZW1IZWFkZXIgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9PlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IG9uTW92ZSgtMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvblVwIHNpemU9ezE2fSAvPlxuICAgICAgICAgIDwvUHJldmlld0J1dHRvbj5cbiAgICAgICAgICA8UHJldmlld0J1dHRvblxuICAgICAgICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiBvbk1vdmUoMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvbkRvd24gc2l6ZT17MTZ9IC8+XG4gICAgICAgICAgPC9QcmV2aWV3QnV0dG9uPlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVEZWxldGV9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsxNn0gLz5cbiAgICAgICAgICA8L1ByZXZpZXdCdXR0b24+XG4gICAgICAgIDwvUHJldmlld0l0ZW1IZWFkZXI+XG4gICAgICA8L1ByZXZpZXdJdGVtV3JhcHBlckRpdj5cbiAgICApXG4gIH1cbilcblxuY29uc3QgUHJldmlld0l0ZW1XcmFwcGVyRGl2ID0gc3R5bGVkLmRpdjx7IGlzRm9jdXNlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGluc2V0OiAwLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBpbnNldDogMCxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gICAgJyY6aG92ZXI6OmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJXaWR0aDogaXNGb2N1c2VkID8gMiA6IDEsXG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gJ3ZhcigtLXZlLXByaW1hcnkpJyA6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbiAgfSlcbilcblxuY29uc3QgUHJldmlld0l0ZW1IZWFkZXIgPSBzdHlsZWQuZGl2PHsgaXNGb2N1c2VkOiBib29sZWFuIH0+KFxuICB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAtMSxcbiAgICByaWdodDogMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICBnYXA6IDIsXG4gICAgY29sb3I6ICcjRkZGJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHBhZGRpbmdSaWdodDogJy41cmVtJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKGNhbGMoMXB4IC0gMTAwJSkpJyxcbiAgICB6SW5kZXg6IDEwMixcbiAgICB0cmFuc2l0aW9uOiAnLjNzJyxcbiAgICAnKjpob3ZlciA+ICYnOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgIG9wYWNpdHk6IGlzRm9jdXNlZCA/IDEgOiAwLFxuICB9KVxuKVxuXG5jb25zdCBQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGNvbG9yOiAnI0ZGRicsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGhlaWdodDogMzAsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6ICc1cHgnLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogJzVweCcsXG4gIHRyYW5zaXRpb246ICcuM3MnLFxuICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnLFxuICAnJjpob3Zlcic6IHtcbiAgICBoZWlnaHQ6IDM2LFxuICB9LFxufSlcblxuY29uc3QgUHJldmlld0l0ZW1UaXRsZSA9IHN0eWxlZC5kaXY8eyBpc0ZvY3VzZWQ6IGJvb2xlYW4gfT4oXG4gIHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGNvbG9yOiAnI0ZGRicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIGhlaWdodDogMzAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJzVweCcsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICc1cHgnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoY2FsYygxcHggLSAxMDAlKSknLFxuICAgICcqOmhvdmVyID4gJic6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSxcbiAgfSxcbiAgKHsgaXNGb2N1c2VkIH0pID0+ICh7XG4gICAgb3BhY2l0eTogaXNGb2N1c2VkID8gMSA6IDAsXG4gIH0pXG4pXG4iXX0= */");
const PreviewButton = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "e10fho2z1"
} : {
  target: "e10fho2z1",
  label: "PreviewButton"
})(process.env.NODE_ENV === "production" ? {
  name: "1p391qn",
  styles: "color:#FFF;border:none;background-color:var(--ve-primary);height:30px;display:flex;align-items:center;padding-inline:.4rem;border-top-left-radius:5px;border-top-right-radius:5px;transition:.3s;transform-origin:0 0;&:hover{height:36px;}"
} : {
  name: "1p391qn",
  styles: "color:#FFF;border:none;background-color:var(--ve-primary);height:30px;display:flex;align-items:center;padding-inline:.4rem;border-top-left-radius:5px;border-top-right-radius:5px;transition:.3s;transform-origin:0 0;&:hover{height:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbVdyYXBwZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRIc0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXdJdGVtV3JhcHBlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENTU1Byb3BlcnRpZXMsIGZvcndhcmRSZWYsIHR5cGUgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgUHJldmlld0FkZEZsb2F0aW5nIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkRmxvYXRpbmcnXG5pbXBvcnQgeyBJY29uRG93biwgSWNvblRyYXNoLCBJY29uVXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBQcm9wcyA9IHtcbiAgdGl0bGU/OiBzdHJpbmdcbiAgaXNGb2N1c2VkOiBib29sZWFuXG4gIHN0eWxlPzogQ1NTUHJvcGVydGllc1xuICBvbkNsaWNrOiAoZTogU3ludGhldGljRXZlbnQpID0+IHZvaWRcbiAgb25BZGQ6IChlOiBTeW50aGV0aWNFdmVudCkgPT4gdm9pZFxuICBvbkRlbGV0ZTogKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG4gIG9uTW92ZTogKGRpcmVjdGlvbjogbnVtYmVyKSA9PiB2b2lkXG4gIGlkPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBQcmV2aWV3SXRlbVdyYXBwZXIgPSBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBQcm9wcz4oXG4gICh7IHRpdGxlLCBpc0ZvY3VzZWQsIHN0eWxlLCBvbkNsaWNrLCBvbkFkZCwgb25EZWxldGUsIG9uTW92ZSB9LCByZWYpID0+IHtcbiAgICBjb25zdCBoYW5kbGVBZGQgPSAoZTogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgb25BZGQoZSlcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIG9uRGVsZXRlKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcmV2aWV3SXRlbVdyYXBwZXJEaXZcbiAgICAgICAgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIDxQcmV2aWV3QWRkRmxvYXRpbmcgb25DbGljaz17aGFuZGxlQWRkfSAvPlxuICAgICAgICB7dGl0bGUgJiYgKFxuICAgICAgICAgIDxQcmV2aWV3SXRlbVRpdGxlIGlzRm9jdXNlZD17aXNGb2N1c2VkfT57dGl0bGV9PC9QcmV2aWV3SXRlbVRpdGxlPlxuICAgICAgICApfVxuICAgICAgICA8UHJldmlld0l0ZW1IZWFkZXIgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9PlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IG9uTW92ZSgtMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvblVwIHNpemU9ezE2fSAvPlxuICAgICAgICAgIDwvUHJldmlld0J1dHRvbj5cbiAgICAgICAgICA8UHJldmlld0J1dHRvblxuICAgICAgICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiBvbk1vdmUoMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvbkRvd24gc2l6ZT17MTZ9IC8+XG4gICAgICAgICAgPC9QcmV2aWV3QnV0dG9uPlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVEZWxldGV9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsxNn0gLz5cbiAgICAgICAgICA8L1ByZXZpZXdCdXR0b24+XG4gICAgICAgIDwvUHJldmlld0l0ZW1IZWFkZXI+XG4gICAgICA8L1ByZXZpZXdJdGVtV3JhcHBlckRpdj5cbiAgICApXG4gIH1cbilcblxuY29uc3QgUHJldmlld0l0ZW1XcmFwcGVyRGl2ID0gc3R5bGVkLmRpdjx7IGlzRm9jdXNlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGluc2V0OiAwLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBpbnNldDogMCxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gICAgJyY6aG92ZXI6OmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJXaWR0aDogaXNGb2N1c2VkID8gMiA6IDEsXG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gJ3ZhcigtLXZlLXByaW1hcnkpJyA6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbiAgfSlcbilcblxuY29uc3QgUHJldmlld0l0ZW1IZWFkZXIgPSBzdHlsZWQuZGl2PHsgaXNGb2N1c2VkOiBib29sZWFuIH0+KFxuICB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAtMSxcbiAgICByaWdodDogMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICBnYXA6IDIsXG4gICAgY29sb3I6ICcjRkZGJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHBhZGRpbmdSaWdodDogJy41cmVtJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKGNhbGMoMXB4IC0gMTAwJSkpJyxcbiAgICB6SW5kZXg6IDEwMixcbiAgICB0cmFuc2l0aW9uOiAnLjNzJyxcbiAgICAnKjpob3ZlciA+ICYnOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgIG9wYWNpdHk6IGlzRm9jdXNlZCA/IDEgOiAwLFxuICB9KVxuKVxuXG5jb25zdCBQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGNvbG9yOiAnI0ZGRicsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGhlaWdodDogMzAsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6ICc1cHgnLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogJzVweCcsXG4gIHRyYW5zaXRpb246ICcuM3MnLFxuICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnLFxuICAnJjpob3Zlcic6IHtcbiAgICBoZWlnaHQ6IDM2LFxuICB9LFxufSlcblxuY29uc3QgUHJldmlld0l0ZW1UaXRsZSA9IHN0eWxlZC5kaXY8eyBpc0ZvY3VzZWQ6IGJvb2xlYW4gfT4oXG4gIHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGNvbG9yOiAnI0ZGRicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIGhlaWdodDogMzAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJzVweCcsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICc1cHgnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoY2FsYygxcHggLSAxMDAlKSknLFxuICAgICcqOmhvdmVyID4gJic6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSxcbiAgfSxcbiAgKHsgaXNGb2N1c2VkIH0pID0+ICh7XG4gICAgb3BhY2l0eTogaXNGb2N1c2VkID8gMSA6IDAsXG4gIH0pXG4pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$l
});
const PreviewItemTitle = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e10fho2z0"
} : {
  target: "e10fho2z0",
  label: "PreviewItemTitle"
})("position:absolute;top:0;left:0;opacity:0;color:#FFF;background-color:var(--ve-primary);height:30px;display:flex;align-items:center;padding-inline:.4rem;border-top-left-radius:5px;border-top-right-radius:5px;transform:translateY(calc(1px - 100%));*:hover > &{opacity:1;}", ({
  isFocused
}) => ({
  opacity: isFocused ? 1 : 0
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbVdyYXBwZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZJeUIiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXdJdGVtV3JhcHBlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENTU1Byb3BlcnRpZXMsIGZvcndhcmRSZWYsIHR5cGUgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgUHJldmlld0FkZEZsb2F0aW5nIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkRmxvYXRpbmcnXG5pbXBvcnQgeyBJY29uRG93biwgSWNvblRyYXNoLCBJY29uVXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBQcm9wcyA9IHtcbiAgdGl0bGU/OiBzdHJpbmdcbiAgaXNGb2N1c2VkOiBib29sZWFuXG4gIHN0eWxlPzogQ1NTUHJvcGVydGllc1xuICBvbkNsaWNrOiAoZTogU3ludGhldGljRXZlbnQpID0+IHZvaWRcbiAgb25BZGQ6IChlOiBTeW50aGV0aWNFdmVudCkgPT4gdm9pZFxuICBvbkRlbGV0ZTogKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG4gIG9uTW92ZTogKGRpcmVjdGlvbjogbnVtYmVyKSA9PiB2b2lkXG4gIGlkPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBQcmV2aWV3SXRlbVdyYXBwZXIgPSBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBQcm9wcz4oXG4gICh7IHRpdGxlLCBpc0ZvY3VzZWQsIHN0eWxlLCBvbkNsaWNrLCBvbkFkZCwgb25EZWxldGUsIG9uTW92ZSB9LCByZWYpID0+IHtcbiAgICBjb25zdCBoYW5kbGVBZGQgPSAoZTogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgb25BZGQoZSlcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlRGVsZXRlID0gKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIG9uRGVsZXRlKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcmV2aWV3SXRlbVdyYXBwZXJEaXZcbiAgICAgICAgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIDxQcmV2aWV3QWRkRmxvYXRpbmcgb25DbGljaz17aGFuZGxlQWRkfSAvPlxuICAgICAgICB7dGl0bGUgJiYgKFxuICAgICAgICAgIDxQcmV2aWV3SXRlbVRpdGxlIGlzRm9jdXNlZD17aXNGb2N1c2VkfT57dGl0bGV9PC9QcmV2aWV3SXRlbVRpdGxlPlxuICAgICAgICApfVxuICAgICAgICA8UHJldmlld0l0ZW1IZWFkZXIgaXNGb2N1c2VkPXtpc0ZvY3VzZWR9PlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IG9uTW92ZSgtMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvblVwIHNpemU9ezE2fSAvPlxuICAgICAgICAgIDwvUHJldmlld0J1dHRvbj5cbiAgICAgICAgICA8UHJldmlld0J1dHRvblxuICAgICAgICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiBvbk1vdmUoMSkpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvbkRvd24gc2l6ZT17MTZ9IC8+XG4gICAgICAgICAgPC9QcmV2aWV3QnV0dG9uPlxuICAgICAgICAgIDxQcmV2aWV3QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVEZWxldGV9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1kYW5nZXIpJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsxNn0gLz5cbiAgICAgICAgICA8L1ByZXZpZXdCdXR0b24+XG4gICAgICAgIDwvUHJldmlld0l0ZW1IZWFkZXI+XG4gICAgICA8L1ByZXZpZXdJdGVtV3JhcHBlckRpdj5cbiAgICApXG4gIH1cbilcblxuY29uc3QgUHJldmlld0l0ZW1XcmFwcGVyRGl2ID0gc3R5bGVkLmRpdjx7IGlzRm9jdXNlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGluc2V0OiAwLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBpbnNldDogMCxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gICAgJyY6aG92ZXI6OmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJXaWR0aDogaXNGb2N1c2VkID8gMiA6IDEsXG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gJ3ZhcigtLXZlLXByaW1hcnkpJyA6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbiAgfSlcbilcblxuY29uc3QgUHJldmlld0l0ZW1IZWFkZXIgPSBzdHlsZWQuZGl2PHsgaXNGb2N1c2VkOiBib29sZWFuIH0+KFxuICB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAtMSxcbiAgICByaWdodDogMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICBnYXA6IDIsXG4gICAgY29sb3I6ICcjRkZGJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHBhZGRpbmdSaWdodDogJy41cmVtJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKGNhbGMoMXB4IC0gMTAwJSkpJyxcbiAgICB6SW5kZXg6IDEwMixcbiAgICB0cmFuc2l0aW9uOiAnLjNzJyxcbiAgICAnKjpob3ZlciA+ICYnOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0sXG4gICh7IGlzRm9jdXNlZCB9KSA9PiAoe1xuICAgIG9wYWNpdHk6IGlzRm9jdXNlZCA/IDEgOiAwLFxuICB9KVxuKVxuXG5jb25zdCBQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGNvbG9yOiAnI0ZGRicsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gIGhlaWdodDogMzAsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6ICc1cHgnLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogJzVweCcsXG4gIHRyYW5zaXRpb246ICcuM3MnLFxuICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnLFxuICAnJjpob3Zlcic6IHtcbiAgICBoZWlnaHQ6IDM2LFxuICB9LFxufSlcblxuY29uc3QgUHJldmlld0l0ZW1UaXRsZSA9IHN0eWxlZC5kaXY8eyBpc0ZvY3VzZWQ6IGJvb2xlYW4gfT4oXG4gIHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGNvbG9yOiAnI0ZGRicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIGhlaWdodDogMzAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcuNHJlbScsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJzVweCcsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICc1cHgnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoY2FsYygxcHggLSAxMDAlKSknLFxuICAgICcqOmhvdmVyID4gJic6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSxcbiAgfSxcbiAgKHsgaXNGb2N1c2VkIH0pID0+ICh7XG4gICAgb3BhY2l0eTogaXNGb2N1c2VkID8gMSA6IDAsXG4gIH0pXG4pXG4iXX0= */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$k() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function PreviewItem({
  index: index2,
  data,
  initialHTML,
  previewUrl,
  title
}) {
  const ref = reactExports.useRef(null);
  const {
    loading,
    html
  } = usePreview(data, previewUrl, initialHTML);
  const isFocused = useFieldFocused(data._id);
  const {
    removeBloc,
    setAddBlockIndex,
    setFocusIndex,
    moveBloc
  } = usePartialStore("setFocusIndex", "setAddBlockIndex", "removeBloc", "moveBloc");
  reactExports.useEffect(() => {
    if (isFocused) {
      const top2 = offsetTop(ref.current) - 40;
      const root = ref.current.closest("html");
      root.scrollTop = top2;
    }
  }, [isFocused]);
  return /* @__PURE__ */ jsx(y, {
    flipId: data._id,
    children: /* @__PURE__ */ jsxs("div", {
      children: [loading && /* @__PURE__ */ jsx(StyledSpinner, {
        size: 12
      }), /* @__PURE__ */ jsx("div", {
        dangerouslySetInnerHTML: {
          __html: html
        }
      }), /* @__PURE__ */ jsx(PreviewItemWrapper, {
        title,
        id: `previewItem${data._id}`,
        isFocused,
        ref,
        onClick: () => setFocusIndex(data._id),
        onAdd: () => setAddBlockIndex(index2),
        onDelete: () => removeBloc(data._id),
        onMove: (direction) => moveBloc(data._id, direction)
      })]
    })
  });
}
const StyledSpinner = /* @__PURE__ */ createStyled(Spinner, process.env.NODE_ENV === "production" ? {
  target: "e107xtgs0"
} : {
  target: "e107xtgs0",
  label: "StyledSpinner"
})(process.env.NODE_ENV === "production" ? {
  name: "7xu5g",
  styles: "top:1rem;right:1rem;left:auto;bottom:auto;color:var(--ve-primary)"
} : {
  name: "7xu5g",
  styles: "top:1rem;right:1rem;left:auto;bottom:auto;color:var(--ve-primary)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0VzQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld0l0ZW0udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50RGF0YSB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlUHJldmlldyB9IGZyb20gJ3NyYy9ob29rcy91c2VQcmV2aWV3J1xuaW1wb3J0IHsgdXNlRmllbGRGb2N1c2VkLCB1c2VQYXJ0aWFsU3RvcmUgfSBmcm9tICdzcmMvc3RvcmUnXG5pbXBvcnQgeyBvZmZzZXRUb3AgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2RvbSdcbmltcG9ydCB7IEZsaXBwZWQgfSBmcm9tICdyZWFjdC1mbGlwLXRvb2xraXQnXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IFByZXZpZXdJdGVtV3JhcHBlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld0l0ZW1XcmFwcGVyJ1xuXG50eXBlIFByZXZpZXdJdGVtUHJvcHMgPSB7XG4gIGRhdGE6IEVkaXRvckNvbXBvbmVudERhdGFcbiAgaW5pdGlhbEhUTUw6IHN0cmluZ1xuICBwcmV2aWV3VXJsOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBpbmRleDogbnVtYmVyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmV2aWV3SXRlbSh7XG4gIGluZGV4LFxuICBkYXRhLFxuICBpbml0aWFsSFRNTCxcbiAgcHJldmlld1VybCxcbiAgdGl0bGUsXG59OiBQcmV2aWV3SXRlbVByb3BzKSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcbiAgY29uc3QgeyBsb2FkaW5nLCBodG1sIH0gPSB1c2VQcmV2aWV3KGRhdGEsIHByZXZpZXdVcmwsIGluaXRpYWxIVE1MKVxuICBjb25zdCBpc0ZvY3VzZWQgPSB1c2VGaWVsZEZvY3VzZWQoZGF0YS5faWQpXG4gIGNvbnN0IHsgcmVtb3ZlQmxvYywgc2V0QWRkQmxvY2tJbmRleCwgc2V0Rm9jdXNJbmRleCwgbW92ZUJsb2MgfSA9XG4gICAgdXNlUGFydGlhbFN0b3JlKFxuICAgICAgJ3NldEZvY3VzSW5kZXgnLFxuICAgICAgJ3NldEFkZEJsb2NrSW5kZXgnLFxuICAgICAgJ3JlbW92ZUJsb2MnLFxuICAgICAgJ21vdmVCbG9jJ1xuICAgIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgIGNvbnN0IHRvcCA9IG9mZnNldFRvcChyZWYuY3VycmVudCEpIC0gNDBcbiAgICAgIGNvbnN0IHJvb3QgPSByZWYuY3VycmVudCEuY2xvc2VzdCgnaHRtbCcpIVxuICAgICAgcm9vdC5zY3JvbGxUb3AgPSB0b3BcbiAgICB9XG4gIH0sIFtpc0ZvY3VzZWRdKVxuXG4gIHJldHVybiAoXG4gICAgPEZsaXBwZWQgZmxpcElkPXtkYXRhLl9pZH0+XG4gICAgICA8ZGl2PlxuICAgICAgICB7bG9hZGluZyAmJiA8U3R5bGVkU3Bpbm5lciBzaXplPXsxMn0gLz59XG4gICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBodG1sIH19IC8+XG4gICAgICAgIDxQcmV2aWV3SXRlbVdyYXBwZXJcbiAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgaWQ9e2BwcmV2aWV3SXRlbSR7ZGF0YS5faWR9YH1cbiAgICAgICAgICBpc0ZvY3VzZWQ9e2lzRm9jdXNlZH1cbiAgICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRGb2N1c0luZGV4KGRhdGEuX2lkKX1cbiAgICAgICAgICBvbkFkZD17KCkgPT4gc2V0QWRkQmxvY2tJbmRleChpbmRleCl9XG4gICAgICAgICAgb25EZWxldGU9eygpID0+IHJlbW92ZUJsb2MoZGF0YS5faWQpfVxuICAgICAgICAgIG9uTW92ZT17KGRpcmVjdGlvbikgPT4gbW92ZUJsb2MoZGF0YS5faWQsIGRpcmVjdGlvbil9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZsaXBwZWQ+XG4gIClcbn1cblxuY29uc3QgU3R5bGVkU3Bpbm5lciA9IHN0eWxlZChTcGlubmVyKSh7XG4gIHRvcDogJzFyZW0nLFxuICByaWdodDogJzFyZW0nLFxuICBsZWZ0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBjb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$k
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$j() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function PreviewAddButton({
  onClick
}) {
  return /* @__PURE__ */ jsx(Wrapper$7, {
    children: /* @__PURE__ */ jsx(Button$8, {
      icon: IconCirclePlus,
      onClick,
      children: "Ajouter un bloc"
    })
  });
}
const Wrapper$7 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1a3zy1k0"
} : {
  target: "e1a3zy1k0",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1rh8xtt",
  styles: "background-color:transparent;border:2px dashed var(--ve-field-border);display:flex;align-items:center;justify-content:center;font-weight:bold;color:var(--ve-color);width:calc(100% - 2rem);margin:1rem;padding:1rem"
} : {
  name: "1rh8xtt",
  styles: "background-color:transparent;border:2px dashed var(--ve-field-border);display:flex;align-items:center;justify-content:center;font-weight:bold;color:var(--ve-color);width:calc(100% - 2rem);margin:1rem;padding:1rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkQnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQmdCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3QWRkQnV0dG9uLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvbiwgSWNvbkNpcmNsZVBsdXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCBSZWFjdCwgeyBTeW50aGV0aWNFdmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbnR5cGUgUHJldmlld0FkZEJ1dHRvblByb3BzID0ge1xuICBvbkNsaWNrPzogKGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmV2aWV3QWRkQnV0dG9uKHsgb25DbGljayB9OiBQcmV2aWV3QWRkQnV0dG9uUHJvcHMpIHtcblxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyPlxuICAgICAgPEJ1dHRvblxuICAgICAgICBpY29uPXtJY29uQ2lyY2xlUGx1c31cbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgQWpvdXRlciB1biBibG9jXG4gICAgICA8L0J1dHRvbj5cbiAgICA8L1dyYXBwZXI+XG4gIClcbn1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcjogJzJweCBkYXNoZWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgZm9udFdlaWdodDogJ2JvbGQnLFxuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gIHdpZHRoOiAnY2FsYygxMDAlIC0gMnJlbSknLFxuICBtYXJnaW46ICcxcmVtJyxcbiAgcGFkZGluZzogJzFyZW0nLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$j
});
function PreviewItems({
  initialHTML = {},
  previewUrl
}) {
  const {
    definitions,
    setAddBlockIndex,
    data
  } = usePartialStore("setAddBlockIndex", "definitions", "data");
  return /* @__PURE__ */ jsxs(Fragment$1, {
    children: [/* @__PURE__ */ jsx(h, {
      flipKey: data.map((d4) => d4._id).join("_"),
      children: data.map((v2, k3) => {
        var _a;
        return /* @__PURE__ */ jsx("div", {
          style: {
            position: "relative"
          },
          children: /* @__PURE__ */ jsx(PreviewItem, {
            index: k3,
            title: ((_a = definitions[v2._name]) == null ? void 0 : _a.title) || "",
            data: v2,
            initialHTML: initialHTML[v2._id] || "",
            previewUrl
          })
        }, v2._id);
      })
    }), /* @__PURE__ */ jsx(PreviewAddButton, {
      onClick: () => setAddBlockIndex(data.length)
    })]
  });
}
function on(obj) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (obj && obj.addEventListener) {
    obj.addEventListener.apply(obj, args);
  }
}
function off(obj) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (obj && obj.removeEventListener) {
    obj.removeEventListener.apply(obj, args);
  }
}
var isBrowser = typeof window !== "undefined";
var useEffectOnce = function(effect3) {
  reactExports.useEffect(effect3, []);
};
const useEffectOnce$1 = useEffectOnce;
var useUnmount = function(fn3) {
  var fnRef = reactExports.useRef(fn3);
  fnRef.current = fn3;
  useEffectOnce$1(function() {
    return function() {
      return fnRef.current();
    };
  });
};
const useUnmount$1 = useUnmount;
var useRafState = function(initialState) {
  var frame2 = reactExports.useRef(0);
  var _a = reactExports.useState(initialState), state = _a[0], setState = _a[1];
  var setRafState = reactExports.useCallback(function(value) {
    cancelAnimationFrame(frame2.current);
    frame2.current = requestAnimationFrame(function() {
      setState(value);
    });
  }, []);
  useUnmount$1(function() {
    cancelAnimationFrame(frame2.current);
  });
  return [state, setRafState];
};
const useRafState$1 = useRafState;
var useWindowSize = function(initialWidth, initialHeight) {
  if (initialWidth === void 0) {
    initialWidth = Infinity;
  }
  if (initialHeight === void 0) {
    initialHeight = Infinity;
  }
  var _a = useRafState$1({
    width: isBrowser ? window.innerWidth : initialWidth,
    height: isBrowser ? window.innerHeight : initialHeight
  }), state = _a[0], setState = _a[1];
  reactExports.useEffect(function() {
    if (isBrowser) {
      var handler_1 = function() {
        setState({
          width: window.innerWidth,
          height: window.innerHeight
        });
      };
      on(window, "resize", handler_1);
      return function() {
        off(window, "resize", handler_1);
      };
    }
  }, []);
  return state;
};
const useWindowSize$1 = useWindowSize;
function Header() {
  const {
    sidebarWidth: sidebarWidth2,
    devices,
    setDevice,
    device: currentDevice
  } = usePartialStore("sidebarWidth", "devices", "setDevice", "device");
  return /* @__PURE__ */ jsx(Wrapper$6, {
    center: true,
    style: {
      left: `${sidebarWidth2}vw`
    },
    children: devices.map((device) => /* @__PURE__ */ jsx(Tooltip$1, {
      content: device.name,
      children: /* @__PURE__ */ jsx(Button$6, {
        onClick: prevent(() => setDevice(device)),
        "aria-selected": device === currentDevice,
        children: /* @__PURE__ */ jsx(DeviceIcon, {
          icon: device.icon
        })
      })
    }, device.name))
  });
}
function DeviceIcon({
  icon
}) {
  if (icon === "tablet") {
    return /* @__PURE__ */ jsx(IconTablet, {});
  }
  if (icon === "desktop") {
    return /* @__PURE__ */ jsx(IconDesktop, {});
  }
  return /* @__PURE__ */ jsx(IconPhone, {});
}
const headerHeight = 50;
const Out$2 = keyframes({
  from: {
    transform: "translateY(0)"
  },
  to: {
    transform: "translateY(-100%)"
  }
});
const In$3 = keyframes({
  from: {
    transform: "translateY(-100%)"
  },
  to: {
    transform: "translateY(0)"
  }
});
const Wrapper$6 = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "e1f9b3eb1"
} : {
  target: "e1f9b3eb1",
  label: "Wrapper"
})({
  position: "fixed",
  top: 0,
  left: 0,
  gap: 0,
  right: 0,
  zIndex: 2,
  padding: "0 1em",
  flex: "none",
  backgroundColor: "#FFF",
  borderBottom: "1px solid rgba(0,0,0,0.06)",
  boxShadow: "rgba(0, 0, 0, 0.05) 0 1px 2px 0",
  height: headerHeight,
  animation: `${In$3} .7s cubic-bezier(0.19, 1, 0.22, 1) both`,
  "[hidden=hidden] &": {
    animation: `${Out$2} .7s cubic-bezier(0.19, 1, 0.22, 1) both`
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeURnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQge1xuICBGbGV4LFxuICBJY29uRGVza3RvcCxcbiAgSWNvblBob25lLFxuICBJY29uVGFibGV0LFxuICBUb29sdGlwLFxufSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVyKCkge1xuICBjb25zdCB7XG4gICAgc2lkZWJhcldpZHRoLFxuICAgIGRldmljZXMsXG4gICAgc2V0RGV2aWNlLFxuICAgIGRldmljZTogY3VycmVudERldmljZSxcbiAgfSA9IHVzZVBhcnRpYWxTdG9yZSgnc2lkZWJhcldpZHRoJywgJ2RldmljZXMnLCAnc2V0RGV2aWNlJywgJ2RldmljZScpXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXIgY2VudGVyIHN0eWxlPXt7IGxlZnQ6IGAke3NpZGViYXJXaWR0aH12d2AgfX0+XG4gICAgICB7ZGV2aWNlcy5tYXAoKGRldmljZSkgPT4gKFxuICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtkZXZpY2UubmFtZX0ga2V5PXtkZXZpY2UubmFtZX0+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17cHJldmVudCgoKSA9PiBzZXREZXZpY2UoZGV2aWNlKSl9XG4gICAgICAgICAgICBhcmlhLXNlbGVjdGVkPXtkZXZpY2UgPT09IGN1cnJlbnREZXZpY2V9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPERldmljZUljb24gaWNvbj17ZGV2aWNlLmljb259IC8+XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICkpfVxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5mdW5jdGlvbiBEZXZpY2VJY29uKHsgaWNvbiB9OiB7IGljb246IHN0cmluZyB9KSB7XG4gIGlmIChpY29uID09PSAndGFibGV0Jykge1xuICAgIHJldHVybiA8SWNvblRhYmxldCAvPlxuICB9XG4gIGlmIChpY29uID09PSAnZGVza3RvcCcpIHtcbiAgICByZXR1cm4gPEljb25EZXNrdG9wIC8+XG4gIH1cbiAgcmV0dXJuIDxJY29uUGhvbmUgLz5cbn1cblxuZXhwb3J0IGNvbnN0IGhlYWRlckhlaWdodCA9IDUwXG5cbmNvbnN0IE91dCA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKScgfSxcbiAgdG86IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMTAwJSknIH0sXG59KVxuXG5jb25zdCBJbiA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMTAwJSknIH0sXG4gIHRvOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXG59KVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkKEZsZXgpKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgZ2FwOiAwLFxuICByaWdodDogMCxcbiAgekluZGV4OiAyLFxuICBwYWRkaW5nOiAnMCAxZW0nLFxuICBmbGV4OiAnbm9uZScsXG4gIGJhY2tncm91bmRDb2xvcjogJyNGRkYnLFxuICBib3JkZXJCb3R0b206ICcxcHggc29saWQgcmdiYSgwLDAsMCwwLjA2KScsXG4gIGJveFNoYWRvdzogJ3JnYmEoMCwgMCwgMCwgMC4wNSkgMCAxcHggMnB4IDAnLFxuICBoZWlnaHQ6IGhlYWRlckhlaWdodCxcbiAgYW5pbWF0aW9uOiBgJHtJbn0gLjdzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKSBib3RoYCxcbiAgJ1toaWRkZW49aGlkZGVuXSAmJzoge1xuICAgIGFuaW1hdGlvbjogYCR7T3V0fSAuN3MgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpIGJvdGhgLFxuICB9LFxufSlcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkKCdidXR0b24nKSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBoZWlnaHQ6IGhlYWRlckhlaWdodCxcbiAgcGFkZGluZzogJzFyZW0nLFxuICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJCb3R0b206ICdzb2xpZCA0cHggdHJhbnNwYXJlbnQnLFxuICAnJjpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtaG92ZXIpJyxcbiAgICBjb2xvcjogJ3ZhcigtLXZlLWRhcmspJyxcbiAgfSxcbiAgJyZbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0nOiB7XG4gICAgYmFja2dyb3VuZDogJ3ZhcigtLXZlLWhvdmVyKScsXG4gICAgY29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgYm9yZGVyQm90dG9tOiAnc29saWQgNHB4IHZhcigtLXZlLXByaW1hcnkpJyxcbiAgfSxcbn0pXG4iXX0= */");
const Button$6 = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "e1f9b3eb0"
} : {
  target: "e1f9b3eb0",
  label: "Button"
})({
  display: "flex",
  alignItems: "center",
  border: "none",
  height: headerHeight,
  padding: "1rem",
  background: "transparent",
  borderBottom: "solid 4px transparent",
  "&:hover": {
    background: "var(--ve-hover)",
    color: "var(--ve-dark)"
  },
  '&[aria-selected="true"]': {
    background: "var(--ve-hover)",
    color: "var(--ve-primary)",
    borderBottom: "solid 4px var(--ve-primary)"
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEVlIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7XG4gIEZsZXgsXG4gIEljb25EZXNrdG9wLFxuICBJY29uUGhvbmUsXG4gIEljb25UYWJsZXQsXG4gIFRvb2x0aXAsXG59IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHsgdXNlUGFydGlhbFN0b3JlIH0gZnJvbSAnc3JjL3N0b3JlJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnXG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXIoKSB7XG4gIGNvbnN0IHtcbiAgICBzaWRlYmFyV2lkdGgsXG4gICAgZGV2aWNlcyxcbiAgICBzZXREZXZpY2UsXG4gICAgZGV2aWNlOiBjdXJyZW50RGV2aWNlLFxuICB9ID0gdXNlUGFydGlhbFN0b3JlKCdzaWRlYmFyV2lkdGgnLCAnZGV2aWNlcycsICdzZXREZXZpY2UnLCAnZGV2aWNlJylcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlciBjZW50ZXIgc3R5bGU9e3sgbGVmdDogYCR7c2lkZWJhcldpZHRofXZ3YCB9fT5cbiAgICAgIHtkZXZpY2VzLm1hcCgoZGV2aWNlKSA9PiAoXG4gICAgICAgIDxUb29sdGlwIGNvbnRlbnQ9e2RldmljZS5uYW1lfSBrZXk9e2RldmljZS5uYW1lfT5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KCgpID0+IHNldERldmljZShkZXZpY2UpKX1cbiAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9e2RldmljZSA9PT0gY3VycmVudERldmljZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RGV2aWNlSWNvbiBpY29uPXtkZXZpY2UuaWNvbn0gLz5cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgKSl9XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbmZ1bmN0aW9uIERldmljZUljb24oeyBpY29uIH06IHsgaWNvbjogc3RyaW5nIH0pIHtcbiAgaWYgKGljb24gPT09ICd0YWJsZXQnKSB7XG4gICAgcmV0dXJuIDxJY29uVGFibGV0IC8+XG4gIH1cbiAgaWYgKGljb24gPT09ICdkZXNrdG9wJykge1xuICAgIHJldHVybiA8SWNvbkRlc2t0b3AgLz5cbiAgfVxuICByZXR1cm4gPEljb25QaG9uZSAvPlxufVxuXG5leHBvcnQgY29uc3QgaGVhZGVySGVpZ2h0ID0gNTBcblxuY29uc3QgT3V0ID0ga2V5ZnJhbWVzKHtcbiAgZnJvbTogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxuICB0bzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDAlKScgfSxcbn0pXG5cbmNvbnN0IEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbTogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDAlKScgfSxcbiAgdG86IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKScgfSxcbn0pXG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoRmxleCkoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBnYXA6IDAsXG4gIHJpZ2h0OiAwLFxuICB6SW5kZXg6IDIsXG4gIHBhZGRpbmc6ICcwIDFlbScsXG4gIGZsZXg6ICdub25lJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRicsXG4gIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMDYpJyxcbiAgYm94U2hhZG93OiAncmdiYSgwLCAwLCAwLCAwLjA1KSAwIDFweCAycHggMCcsXG4gIGhlaWdodDogaGVhZGVySGVpZ2h0LFxuICBhbmltYXRpb246IGAke0lufSAuN3MgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpIGJvdGhgLFxuICAnW2hpZGRlbj1oaWRkZW5dICYnOiB7XG4gICAgYW5pbWF0aW9uOiBgJHtPdXR9IC43cyBjdWJpYy1iZXppZXIoMC4xOSwgMSwgMC4yMiwgMSkgYm90aGAsXG4gIH0sXG59KVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoJ2J1dHRvbicpKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIGhlaWdodDogaGVhZGVySGVpZ2h0LFxuICBwYWRkaW5nOiAnMXJlbScsXG4gIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlckJvdHRvbTogJ3NvbGlkIDRweCB0cmFuc3BhcmVudCcsXG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1ob3ZlciknLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtZGFyayknLFxuICB9LFxuICAnJlthcmlhLXNlbGVjdGVkPVwidHJ1ZVwiXSc6IHtcbiAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtaG92ZXIpJyxcbiAgICBjb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICBib3JkZXJCb3R0b206ICdzb2xpZCA0cHggdmFyKC0tdmUtcHJpbWFyeSknLFxuICB9LFxufSlcbiJdfQ== */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$i() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function PreviewWrapper$1({
  children
}) {
  const style2 = useViewportStyle();
  return /* @__PURE__ */ jsx(ViewportWrapper, {
    children: /* @__PURE__ */ jsx(Viewport, {
      id: "viewport",
      style: style2,
      children
    })
  });
}
function useViewportStyle() {
  const {
    height: windowHeight,
    width: windowWidth
  } = useWindowSize$1();
  const {
    device,
    sidebarWidth: sidebarWidth2
  } = usePartialStore("device", "sidebarWidth");
  const viewportWidth = windowWidth - sidebarWidth2 / 100 * windowWidth;
  const viewportHeight = windowHeight - headerHeight;
  const deviceWidth = typeof device.width === "number" ? device.width : viewportWidth;
  const deviceHeight = typeof device.height === "number" ? device.height : viewportHeight;
  let scale = 1;
  if (deviceWidth > viewportWidth || deviceHeight > viewportHeight) {
    scale = Math.min(viewportWidth / deviceWidth, viewportHeight / deviceHeight);
  }
  return {
    width: Number.isInteger(device.width) ? device.width : "100%",
    height: Number.isInteger(device.height) ? device.height : "100%",
    transform: `scale(${scale.toFixed(2)})`
  };
}
const Out$1 = keyframes({
  from: {
    opacity: 1
  },
  to: {
    opacity: 0
  }
});
const In$2 = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
const ViewportWrapper = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e9yh8pk1"
} : {
  target: "e9yh8pk1",
  label: "ViewportWrapper"
})({
  width: "100%",
  height: "100%",
  paddingTop: 50,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  overflow: "hidden",
  background: "var(--ve-hover)",
  animation: `${In$2} .7s cubic-bezier(0.19, 1, 0.22, 1) both`,
  '[hidden="hidden"] &': {
    animationName: `${Out$1}`
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3V3JhcHBlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0QrQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld1dyYXBwZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IHR5cGUgUHJvcHNXaXRoQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVdpbmRvd1NpemUgfSBmcm9tICdyZWFjdC11c2UnXG5pbXBvcnQgeyB1c2VQYXJ0aWFsU3RvcmUgfSBmcm9tICdzcmMvc3RvcmUnXG5pbXBvcnQgeyBoZWFkZXJIZWlnaHQgfSBmcm9tICdzcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyJ1xuXG5leHBvcnQgZnVuY3Rpb24gUHJldmlld1dyYXBwZXIoeyBjaGlsZHJlbiB9OiBQcm9wc1dpdGhDaGlsZHJlbikge1xuICBjb25zdCBzdHlsZSA9IHVzZVZpZXdwb3J0U3R5bGUoKVxuICByZXR1cm4gKFxuICAgIDxWaWV3cG9ydFdyYXBwZXI+XG4gICAgICA8Vmlld3BvcnQgaWQ9XCJ2aWV3cG9ydFwiIHN0eWxlPXtzdHlsZX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlld3BvcnQ+XG4gICAgPC9WaWV3cG9ydFdyYXBwZXI+XG4gIClcbn1cblxuZnVuY3Rpb24gdXNlVmlld3BvcnRTdHlsZSgpIHtcbiAgY29uc3QgeyBoZWlnaHQ6IHdpbmRvd0hlaWdodCwgd2lkdGg6IHdpbmRvd1dpZHRoIH0gPSB1c2VXaW5kb3dTaXplKClcbiAgY29uc3QgeyBkZXZpY2UsIHNpZGViYXJXaWR0aCB9ID0gdXNlUGFydGlhbFN0b3JlKCdkZXZpY2UnLCAnc2lkZWJhcldpZHRoJylcbiAgY29uc3Qgdmlld3BvcnRXaWR0aCA9IHdpbmRvd1dpZHRoIC0gKHNpZGViYXJXaWR0aCAvIDEwMCkgKiB3aW5kb3dXaWR0aFxuICBjb25zdCB2aWV3cG9ydEhlaWdodCA9IHdpbmRvd0hlaWdodCAtIGhlYWRlckhlaWdodFxuICBjb25zdCBkZXZpY2VXaWR0aCA9XG4gICAgdHlwZW9mIGRldmljZS53aWR0aCA9PT0gJ251bWJlcicgPyBkZXZpY2Uud2lkdGggOiB2aWV3cG9ydFdpZHRoXG4gIGNvbnN0IGRldmljZUhlaWdodCA9XG4gICAgdHlwZW9mIGRldmljZS5oZWlnaHQgPT09ICdudW1iZXInID8gZGV2aWNlLmhlaWdodCA6IHZpZXdwb3J0SGVpZ2h0XG5cbiAgbGV0IHNjYWxlID0gMVxuICBpZiAoZGV2aWNlV2lkdGggPiB2aWV3cG9ydFdpZHRoIHx8IGRldmljZUhlaWdodCA+IHZpZXdwb3J0SGVpZ2h0KSB7XG4gICAgc2NhbGUgPSBNYXRoLm1pbih2aWV3cG9ydFdpZHRoIC8gZGV2aWNlV2lkdGgsIHZpZXdwb3J0SGVpZ2h0IC8gZGV2aWNlSGVpZ2h0KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogTnVtYmVyLmlzSW50ZWdlcihkZXZpY2Uud2lkdGgpID8gZGV2aWNlLndpZHRoIDogJzEwMCUnLFxuICAgIGhlaWdodDogTnVtYmVyLmlzSW50ZWdlcihkZXZpY2UuaGVpZ2h0KSA/IGRldmljZS5oZWlnaHQgOiAnMTAwJScsXG4gICAgdHJhbnNmb3JtOiBgc2NhbGUoJHtzY2FsZS50b0ZpeGVkKDIpfSlgLFxuICB9XG59XG5cbmNvbnN0IE91dCA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgb3BhY2l0eTogMSB9LFxuICB0bzogeyBvcGFjaXR5OiAwIH0sXG59KVxuXG5jb25zdCBJbiA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgb3BhY2l0eTogMCB9LFxuICB0bzogeyBvcGFjaXR5OiAxIH0sXG59KVxuXG5leHBvcnQgY29uc3QgVmlld3BvcnRXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nVG9wOiA1MCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1ob3ZlciknLFxuICBhbmltYXRpb246IGAke0lufSAuN3MgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpIGJvdGhgLFxuICAnW2hpZGRlbj1cImhpZGRlblwiXSAmJzoge1xuICAgIGFuaW1hdGlvbk5hbWU6IGAke091dH1gLFxuICB9LFxufSlcblxuZXhwb3J0IGNvbnN0IFZpZXdwb3J0ID0gc3R5bGVkLmRpdih7XG4gIGZsZXg6ICdub25lJyxcbiAgYm94U2hhZG93OiAncmdiYSgwLCAwLCAwLCAwLjIpIDAgNHB4IDhweCAwJyxcbn0pXG4iXX0= */");
const Viewport = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e9yh8pk0"
} : {
  target: "e9yh8pk0",
  label: "Viewport"
})(process.env.NODE_ENV === "production" ? {
  name: "1xbfi37",
  styles: "flex:none;box-shadow:rgba(0, 0, 0, 0.2) 0 4px 8px 0"
} : {
  name: "1xbfi37",
  styles: "flex:none;box-shadow:rgba(0, 0, 0, 0.2) 0 4px 8px 0",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3V3JhcHBlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUV3QiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld1dyYXBwZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IHR5cGUgUHJvcHNXaXRoQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVdpbmRvd1NpemUgfSBmcm9tICdyZWFjdC11c2UnXG5pbXBvcnQgeyB1c2VQYXJ0aWFsU3RvcmUgfSBmcm9tICdzcmMvc3RvcmUnXG5pbXBvcnQgeyBoZWFkZXJIZWlnaHQgfSBmcm9tICdzcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyJ1xuXG5leHBvcnQgZnVuY3Rpb24gUHJldmlld1dyYXBwZXIoeyBjaGlsZHJlbiB9OiBQcm9wc1dpdGhDaGlsZHJlbikge1xuICBjb25zdCBzdHlsZSA9IHVzZVZpZXdwb3J0U3R5bGUoKVxuICByZXR1cm4gKFxuICAgIDxWaWV3cG9ydFdyYXBwZXI+XG4gICAgICA8Vmlld3BvcnQgaWQ9XCJ2aWV3cG9ydFwiIHN0eWxlPXtzdHlsZX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlld3BvcnQ+XG4gICAgPC9WaWV3cG9ydFdyYXBwZXI+XG4gIClcbn1cblxuZnVuY3Rpb24gdXNlVmlld3BvcnRTdHlsZSgpIHtcbiAgY29uc3QgeyBoZWlnaHQ6IHdpbmRvd0hlaWdodCwgd2lkdGg6IHdpbmRvd1dpZHRoIH0gPSB1c2VXaW5kb3dTaXplKClcbiAgY29uc3QgeyBkZXZpY2UsIHNpZGViYXJXaWR0aCB9ID0gdXNlUGFydGlhbFN0b3JlKCdkZXZpY2UnLCAnc2lkZWJhcldpZHRoJylcbiAgY29uc3Qgdmlld3BvcnRXaWR0aCA9IHdpbmRvd1dpZHRoIC0gKHNpZGViYXJXaWR0aCAvIDEwMCkgKiB3aW5kb3dXaWR0aFxuICBjb25zdCB2aWV3cG9ydEhlaWdodCA9IHdpbmRvd0hlaWdodCAtIGhlYWRlckhlaWdodFxuICBjb25zdCBkZXZpY2VXaWR0aCA9XG4gICAgdHlwZW9mIGRldmljZS53aWR0aCA9PT0gJ251bWJlcicgPyBkZXZpY2Uud2lkdGggOiB2aWV3cG9ydFdpZHRoXG4gIGNvbnN0IGRldmljZUhlaWdodCA9XG4gICAgdHlwZW9mIGRldmljZS5oZWlnaHQgPT09ICdudW1iZXInID8gZGV2aWNlLmhlaWdodCA6IHZpZXdwb3J0SGVpZ2h0XG5cbiAgbGV0IHNjYWxlID0gMVxuICBpZiAoZGV2aWNlV2lkdGggPiB2aWV3cG9ydFdpZHRoIHx8IGRldmljZUhlaWdodCA+IHZpZXdwb3J0SGVpZ2h0KSB7XG4gICAgc2NhbGUgPSBNYXRoLm1pbih2aWV3cG9ydFdpZHRoIC8gZGV2aWNlV2lkdGgsIHZpZXdwb3J0SGVpZ2h0IC8gZGV2aWNlSGVpZ2h0KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogTnVtYmVyLmlzSW50ZWdlcihkZXZpY2Uud2lkdGgpID8gZGV2aWNlLndpZHRoIDogJzEwMCUnLFxuICAgIGhlaWdodDogTnVtYmVyLmlzSW50ZWdlcihkZXZpY2UuaGVpZ2h0KSA/IGRldmljZS5oZWlnaHQgOiAnMTAwJScsXG4gICAgdHJhbnNmb3JtOiBgc2NhbGUoJHtzY2FsZS50b0ZpeGVkKDIpfSlgLFxuICB9XG59XG5cbmNvbnN0IE91dCA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgb3BhY2l0eTogMSB9LFxuICB0bzogeyBvcGFjaXR5OiAwIH0sXG59KVxuXG5jb25zdCBJbiA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgb3BhY2l0eTogMCB9LFxuICB0bzogeyBvcGFjaXR5OiAxIH0sXG59KVxuXG5leHBvcnQgY29uc3QgVmlld3BvcnRXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nVG9wOiA1MCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1ob3ZlciknLFxuICBhbmltYXRpb246IGAke0lufSAuN3MgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpIGJvdGhgLFxuICAnW2hpZGRlbj1cImhpZGRlblwiXSAmJzoge1xuICAgIGFuaW1hdGlvbk5hbWU6IGAke091dH1gLFxuICB9LFxufSlcblxuZXhwb3J0IGNvbnN0IFZpZXdwb3J0ID0gc3R5bGVkLmRpdih7XG4gIGZsZXg6ICdub25lJyxcbiAgYm94U2hhZG93OiAncmdiYSgwLCAwLCAwLCAwLjIpIDAgNHB4IDhweCAwJyxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$i
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$h() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$6 = process.env.NODE_ENV === "production" ? {
  name: "1elmght",
  styles: "color:white;opacity:0.6"
} : {
  name: "jtui74-Preview",
  styles: "color:white;opacity:0.6;label:Preview;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RCtCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvckNvbXBvbmVudERhdGEgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgdXNlQXN5bmNFZmZlY3QgfSBmcm9tICdzcmMvaG9va3MvdXNlQXN5bmNFZmZlY3QnXG5pbXBvcnQgeyB1c2VXaW5kb3dTaXplIH0gZnJvbSAncmVhY3QtdXNlJ1xuaW1wb3J0IHsgUEhPTkVfSEVJR0hUIH0gZnJvbSAnc3JjL2NvbnN0YW50cydcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IEZyYW1lUHJvdmlkZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9QcmV2aWV3L0ZyYW1lUHJvdmlkZXInXG5pbXBvcnQgeyBCYXNlU3R5bGVzIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvQmFzZVN0eWxlcydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgUHJldmlld0l0ZW1zIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbXMnXG5pbXBvcnQgeyBQcmV2aWV3V3JhcHBlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld1dyYXBwZXInXG5pbXBvcnQgeyB1c2VHZXREYXRhIH0gZnJvbSAnc3JjL3N0b3JlJ1xuXG5leHBvcnQgdHlwZSBQcmV2aWV3UHJvcHMgPSB7XG4gIHByZXZpZXdVcmw6IHN0cmluZ1xufVxuXG4vKipcbiAqIEFmZmljaGUgdW4gYXBlcsOndSBkdSByZW5kdSBkZSBsYSBwYWdlIGRhbnMgdW5lIGlmcmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJldmlldyh7IHByZXZpZXdVcmwgfTogUHJldmlld1Byb3BzKSB7XG4gIGNvbnN0IGlmcmFtZSA9IHVzZVJlZjxIVE1MSUZyYW1lRWxlbWVudD4obnVsbClcbiAgY29uc3QgW2lmcmFtZVJvb3QsIHNldElmcmFtZVJvb3RdID0gdXNlU3RhdGU8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuICBjb25zdCBpbml0aWFsSFRNTCA9IHVzZVJlZjxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pih7fSlcbiAgY29uc3QgW2xvYWRlZCwgc2V0TG9hZGVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBzaG93U3Bpbm5lciA9ICFsb2FkZWRcbiAgY29uc3QgZ2V0RGF0YSA9IHVzZUdldERhdGEoKVxuXG4gIC8vIEfDqHJlIGxlIGNoYXJnZW1lbnQgZGUgbGEgcHJldmlldyBpbml0aWFsZVxuICB1c2VBc3luY0VmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGdldERhdGEoKVxuICAgIC8vIE9uIGfDqW7DqHJlIGxlIHByZW1pZXIgcmVuZHUgZGUgbGEgcGFnZSBjb21wbMOodGVcbiAgICBjb25zdCByID0gYXdhaXQgZmV0Y2gocHJldmlld1VybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pXG4gICAgaWYgKCFyLm9rKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBPbiDDqWNyaXQgbGUgY29udGVudSBkYW5zIGwnaWZyYW1lXG4gICAgY29uc3QgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY3VycmVudCEuY29udGVudERvY3VtZW50IVxuICAgIGlmcmFtZURvY3VtZW50Lm9wZW4oKVxuICAgIGlmcmFtZURvY3VtZW50LndyaXRlKGF3YWl0IHIudGV4dCgpKVxuICAgIGlmcmFtZURvY3VtZW50LmNsb3NlKClcbiAgICBjb25zdCByb290ID0gaWZyYW1lRG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ZlLWNvbXBvbmVudHMnKSBhcyBIVE1MRWxlbWVudFxuICAgIGluaXRpYWxIVE1MLmN1cnJlbnQgPSBBcnJheS5mcm9tKHJvb3QuY2hpbGRyZW4pLnJlZHVjZShcbiAgICAgIChhY2MsIHYsIGspID0+ICh7IC4uLmFjYywgW2RhdGFba10hLl9pZF06IHYub3V0ZXJIVE1MIH0pLFxuICAgICAge31cbiAgICApXG4gICAgcm9vdC5pbm5lckhUTUwgPSAnJ1xuICAgIHNldElmcmFtZVJvb3Qocm9vdClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8UHJldmlld1dyYXBwZXI+XG4gICAgICB7c2hvd1NwaW5uZXIgJiYgPFNwaW5uZXIgY3NzPXt7IGNvbG9yOiAnd2hpdGUnLCBvcGFjaXR5OiAwLjYgfX0gLz59XG4gICAgICA8U3R5bGVkSWZyYW1lXG4gICAgICAgIGxvYWRlZD17bG9hZGVkfVxuICAgICAgICByZWY9e2lmcmFtZX1cbiAgICAgICAgb25Mb2FkPXsoKSA9PiBzZXRMb2FkZWQodHJ1ZSl9XG4gICAgICAvPlxuICAgICAge2lmcmFtZVJvb3QgJiZcbiAgICAgICAgY3JlYXRlUG9ydGFsKFxuICAgICAgICAgIDxGcmFtZVByb3ZpZGVyIGNvbnRhaW5lcj17aWZyYW1lLmN1cnJlbnQhLmNvbnRlbnREb2N1bWVudCF9PlxuICAgICAgICAgICAgPEJhc2VTdHlsZXMgY29tcGxldGU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgPFByZXZpZXdJdGVtc1xuICAgICAgICAgICAgICAgIGluaXRpYWxIVE1MPXtpbml0aWFsSFRNTC5jdXJyZW50fVxuICAgICAgICAgICAgICAgIHByZXZpZXdVcmw9e3ByZXZpZXdVcmx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Jhc2VTdHlsZXM+XG4gICAgICAgICAgPC9GcmFtZVByb3ZpZGVyPixcbiAgICAgICAgICBpZnJhbWVSb290XG4gICAgICAgICl9XG4gICAgPC9QcmV2aWV3V3JhcHBlcj5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgU3R5bGVkSWZyYW1lID0gc3R5bGVkLmlmcmFtZTx7IGxvYWRlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIHRyYW5zaXRpb246ICdvcGFjaXR5IC41cycsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIG9wYWNpdHk6IHByb3BzLmxvYWRlZCA/IDEgOiAwLFxuICB9KVxuKVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$h
};
function Preview({
  previewUrl
}) {
  const iframe = reactExports.useRef(null);
  const [iframeRoot, setIframeRoot] = reactExports.useState(null);
  const initialHTML = reactExports.useRef({});
  const [loaded, setLoaded] = reactExports.useState(false);
  const showSpinner = !loaded;
  const getData = useGetData();
  useAsyncEffect(async () => {
    const data = getData();
    const r2 = await fetch(previewUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      body: JSON.stringify(data)
    });
    if (!r2.ok) {
      return;
    }
    const iframeDocument = iframe.current.contentDocument;
    iframeDocument.open();
    iframeDocument.write(await r2.text());
    iframeDocument.close();
    const root = iframeDocument.querySelector("#ve-components");
    initialHTML.current = Array.from(root.children).reduce((acc, v2, k3) => ({
      ...acc,
      [data[k3]._id]: v2.outerHTML
    }), {});
    root.innerHTML = "";
    setIframeRoot(root);
  }, []);
  return /* @__PURE__ */ jsxs(PreviewWrapper$1, {
    children: [showSpinner && /* @__PURE__ */ jsx(Spinner, {
      css: _ref$6
    }), /* @__PURE__ */ jsx(StyledIframe, {
      loaded,
      ref: iframe,
      onLoad: () => setLoaded(true)
    }), iframeRoot && reactDomExports.createPortal(/* @__PURE__ */ jsx(FrameProvider, {
      container: iframe.current.contentDocument,
      children: /* @__PURE__ */ jsx(BaseStyles, {
        complete: false,
        children: /* @__PURE__ */ jsx(PreviewItems, {
          initialHTML: initialHTML.current,
          previewUrl
        })
      })
    }), iframeRoot)]
  });
}
const StyledIframe = /* @__PURE__ */ createStyled("iframe", process.env.NODE_ENV === "production" ? {
  target: "ecek4cz0"
} : {
  target: "ecek4cz0",
  label: "StyledIframe"
})("transform-origin:50% 50%;border:none;color:var(--ve-primary);transition:opacity .5s;width:100%;height:100%;", (props) => ({
  opacity: props.loaded ? 1 : 0
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRjRCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvckNvbXBvbmVudERhdGEgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgdXNlQXN5bmNFZmZlY3QgfSBmcm9tICdzcmMvaG9va3MvdXNlQXN5bmNFZmZlY3QnXG5pbXBvcnQgeyB1c2VXaW5kb3dTaXplIH0gZnJvbSAncmVhY3QtdXNlJ1xuaW1wb3J0IHsgUEhPTkVfSEVJR0hUIH0gZnJvbSAnc3JjL2NvbnN0YW50cydcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IEZyYW1lUHJvdmlkZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9QcmV2aWV3L0ZyYW1lUHJvdmlkZXInXG5pbXBvcnQgeyBCYXNlU3R5bGVzIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvQmFzZVN0eWxlcydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgUHJldmlld0l0ZW1zIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3SXRlbXMnXG5pbXBvcnQgeyBQcmV2aWV3V3JhcHBlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlld1dyYXBwZXInXG5pbXBvcnQgeyB1c2VHZXREYXRhIH0gZnJvbSAnc3JjL3N0b3JlJ1xuXG5leHBvcnQgdHlwZSBQcmV2aWV3UHJvcHMgPSB7XG4gIHByZXZpZXdVcmw6IHN0cmluZ1xufVxuXG4vKipcbiAqIEFmZmljaGUgdW4gYXBlcsOndSBkdSByZW5kdSBkZSBsYSBwYWdlIGRhbnMgdW5lIGlmcmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJldmlldyh7IHByZXZpZXdVcmwgfTogUHJldmlld1Byb3BzKSB7XG4gIGNvbnN0IGlmcmFtZSA9IHVzZVJlZjxIVE1MSUZyYW1lRWxlbWVudD4obnVsbClcbiAgY29uc3QgW2lmcmFtZVJvb3QsIHNldElmcmFtZVJvb3RdID0gdXNlU3RhdGU8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuICBjb25zdCBpbml0aWFsSFRNTCA9IHVzZVJlZjxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pih7fSlcbiAgY29uc3QgW2xvYWRlZCwgc2V0TG9hZGVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBzaG93U3Bpbm5lciA9ICFsb2FkZWRcbiAgY29uc3QgZ2V0RGF0YSA9IHVzZUdldERhdGEoKVxuXG4gIC8vIEfDqHJlIGxlIGNoYXJnZW1lbnQgZGUgbGEgcHJldmlldyBpbml0aWFsZVxuICB1c2VBc3luY0VmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGdldERhdGEoKVxuICAgIC8vIE9uIGfDqW7DqHJlIGxlIHByZW1pZXIgcmVuZHUgZGUgbGEgcGFnZSBjb21wbMOodGVcbiAgICBjb25zdCByID0gYXdhaXQgZmV0Y2gocHJldmlld1VybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pXG4gICAgaWYgKCFyLm9rKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBPbiDDqWNyaXQgbGUgY29udGVudSBkYW5zIGwnaWZyYW1lXG4gICAgY29uc3QgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY3VycmVudCEuY29udGVudERvY3VtZW50IVxuICAgIGlmcmFtZURvY3VtZW50Lm9wZW4oKVxuICAgIGlmcmFtZURvY3VtZW50LndyaXRlKGF3YWl0IHIudGV4dCgpKVxuICAgIGlmcmFtZURvY3VtZW50LmNsb3NlKClcbiAgICBjb25zdCByb290ID0gaWZyYW1lRG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ZlLWNvbXBvbmVudHMnKSBhcyBIVE1MRWxlbWVudFxuICAgIGluaXRpYWxIVE1MLmN1cnJlbnQgPSBBcnJheS5mcm9tKHJvb3QuY2hpbGRyZW4pLnJlZHVjZShcbiAgICAgIChhY2MsIHYsIGspID0+ICh7IC4uLmFjYywgW2RhdGFba10hLl9pZF06IHYub3V0ZXJIVE1MIH0pLFxuICAgICAge31cbiAgICApXG4gICAgcm9vdC5pbm5lckhUTUwgPSAnJ1xuICAgIHNldElmcmFtZVJvb3Qocm9vdClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8UHJldmlld1dyYXBwZXI+XG4gICAgICB7c2hvd1NwaW5uZXIgJiYgPFNwaW5uZXIgY3NzPXt7IGNvbG9yOiAnd2hpdGUnLCBvcGFjaXR5OiAwLjYgfX0gLz59XG4gICAgICA8U3R5bGVkSWZyYW1lXG4gICAgICAgIGxvYWRlZD17bG9hZGVkfVxuICAgICAgICByZWY9e2lmcmFtZX1cbiAgICAgICAgb25Mb2FkPXsoKSA9PiBzZXRMb2FkZWQodHJ1ZSl9XG4gICAgICAvPlxuICAgICAge2lmcmFtZVJvb3QgJiZcbiAgICAgICAgY3JlYXRlUG9ydGFsKFxuICAgICAgICAgIDxGcmFtZVByb3ZpZGVyIGNvbnRhaW5lcj17aWZyYW1lLmN1cnJlbnQhLmNvbnRlbnREb2N1bWVudCF9PlxuICAgICAgICAgICAgPEJhc2VTdHlsZXMgY29tcGxldGU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgPFByZXZpZXdJdGVtc1xuICAgICAgICAgICAgICAgIGluaXRpYWxIVE1MPXtpbml0aWFsSFRNTC5jdXJyZW50fVxuICAgICAgICAgICAgICAgIHByZXZpZXdVcmw9e3ByZXZpZXdVcmx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Jhc2VTdHlsZXM+XG4gICAgICAgICAgPC9GcmFtZVByb3ZpZGVyPixcbiAgICAgICAgICBpZnJhbWVSb290XG4gICAgICAgICl9XG4gICAgPC9QcmV2aWV3V3JhcHBlcj5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgU3R5bGVkSWZyYW1lID0gc3R5bGVkLmlmcmFtZTx7IGxvYWRlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIHRyYW5zaXRpb246ICdvcGFjaXR5IC41cycsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIG9wYWNpdHk6IHByb3BzLmxvYWRlZCA/IDEgOiAwLFxuICB9KVxuKVxuIl19 */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$g() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function ResizeBar() {
  const [drag, setDrag] = reactExports.useState(false);
  const {
    setSidebarWidth
  } = usePartialStore("setSidebarWidth");
  const handleMouseDown = (e3) => {
    e3.stopPropagation();
    e3.preventDefault();
    setDrag(true);
    const listener = (e22) => {
      setSidebarWidth(Math.round(100 * e22.clientX / window.innerWidth));
    };
    document.documentElement.addEventListener("mousemove", listener);
    document.documentElement.addEventListener("mouseup", () => {
      setDrag(false);
      document.documentElement.removeEventListener("mousemove", listener);
    }, {
      once: true
    });
  };
  return /* @__PURE__ */ jsxs(Fragment$1, {
    children: [/* @__PURE__ */ jsx(Wrapper$5, {
      isDragging: drag,
      onMouseDown: handleMouseDown
    }), drag && /* @__PURE__ */ jsx(ResizeBarOverlay, {})]
  });
}
const Wrapper$5 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "eufvao51"
} : {
  target: "eufvao51",
  label: "Wrapper"
})("position:fixed;top:0;bottom:0;height:100%;left:var(--ve-clampedSidebar);width:15px;z-index:1002;cursor:ew-resize;transition:box-shadow .3s;:hover{box-shadow:-1px -1px 0 1px var(--ve-primary);}", ({
  isDragging
}) => isDragging ? {
  boxShadow: "-1px -1px 0 1px var(--ve-primary)"
} : null, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUmVzaXplQmFyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQ2dCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUmVzaXplQmFyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN5bnRoZXRpY0V2ZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc2l6ZUJhcigpIHtcbiAgY29uc3QgW2RyYWcsIHNldERyYWddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgc2V0U2lkZWJhcldpZHRoIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3NldFNpZGViYXJXaWR0aCcpXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IChlOiBTeW50aGV0aWNFdmVudCkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBzZXREcmFnKHRydWUpXG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgc2V0U2lkZWJhcldpZHRoKE1hdGgucm91bmQoKDEwMCAqIGUuY2xpZW50WCkgLyB3aW5kb3cuaW5uZXJXaWR0aCkpXG4gICAgfVxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBsaXN0ZW5lcilcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZXVwJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgc2V0RHJhZyhmYWxzZSlcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGxpc3RlbmVyKVxuICAgICAgfSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFdyYXBwZXIgaXNEcmFnZ2luZz17ZHJhZ30gb25Nb3VzZURvd249e2hhbmRsZU1vdXNlRG93bn0gLz5cbiAgICAgIHtkcmFnICYmIDxSZXNpemVCYXJPdmVybGF5IC8+fVxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2PHsgaXNEcmFnZ2luZzogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDAsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgbGVmdDogJ3ZhcigtLXZlLWNsYW1wZWRTaWRlYmFyKScsXG4gICAgd2lkdGg6IDE1LFxuICAgIHpJbmRleDogMTAwMixcbiAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgIHRyYW5zaXRpb246ICdib3gtc2hhZG93IC4zcycsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGJveFNoYWRvdzogJy0xcHggLTFweCAwIDFweCB2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgfSxcbiAgfSxcbiAgKHsgaXNEcmFnZ2luZyB9KSA9PlxuICAgIGlzRHJhZ2dpbmdcbiAgICAgID8ge1xuICAgICAgICAgIGJveFNoYWRvdzogJy0xcHggLTFweCAwIDFweCB2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgICAgIH1cbiAgICAgIDogbnVsbFxuKVxuXG5jb25zdCBSZXNpemVCYXJPdmVybGF5ID0gc3R5bGVkLmRpdih7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICB6SW5kZXg6IDEwMDEsXG59KVxuIl19 */");
const ResizeBarOverlay = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "eufvao50"
} : {
  target: "eufvao50",
  label: "ResizeBarOverlay"
})(process.env.NODE_ENV === "production" ? {
  name: "1rfie70",
  styles: "position:fixed;top:0;left:0;width:100%;height:100%;z-index:1001"
} : {
  name: "1rfie70",
  styles: "position:fixed;top:0;left:0;width:100%;height:100%;z-index:1001",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUmVzaXplQmFyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RHlCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvUmVzaXplQmFyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN5bnRoZXRpY0V2ZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHVzZVBhcnRpYWxTdG9yZSB9IGZyb20gJ3NyYy9zdG9yZSdcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc2l6ZUJhcigpIHtcbiAgY29uc3QgW2RyYWcsIHNldERyYWddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgc2V0U2lkZWJhcldpZHRoIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3NldFNpZGViYXJXaWR0aCcpXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IChlOiBTeW50aGV0aWNFdmVudCkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBzZXREcmFnKHRydWUpXG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgc2V0U2lkZWJhcldpZHRoKE1hdGgucm91bmQoKDEwMCAqIGUuY2xpZW50WCkgLyB3aW5kb3cuaW5uZXJXaWR0aCkpXG4gICAgfVxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBsaXN0ZW5lcilcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZXVwJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgc2V0RHJhZyhmYWxzZSlcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGxpc3RlbmVyKVxuICAgICAgfSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFdyYXBwZXIgaXNEcmFnZ2luZz17ZHJhZ30gb25Nb3VzZURvd249e2hhbmRsZU1vdXNlRG93bn0gLz5cbiAgICAgIHtkcmFnICYmIDxSZXNpemVCYXJPdmVybGF5IC8+fVxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2PHsgaXNEcmFnZ2luZzogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDAsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgbGVmdDogJ3ZhcigtLXZlLWNsYW1wZWRTaWRlYmFyKScsXG4gICAgd2lkdGg6IDE1LFxuICAgIHpJbmRleDogMTAwMixcbiAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgIHRyYW5zaXRpb246ICdib3gtc2hhZG93IC4zcycsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGJveFNoYWRvdzogJy0xcHggLTFweCAwIDFweCB2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgfSxcbiAgfSxcbiAgKHsgaXNEcmFnZ2luZyB9KSA9PlxuICAgIGlzRHJhZ2dpbmdcbiAgICAgID8ge1xuICAgICAgICAgIGJveFNoYWRvdzogJy0xcHggLTFweCAwIDFweCB2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgICAgIH1cbiAgICAgIDogbnVsbFxuKVxuXG5jb25zdCBSZXNpemVCYXJPdmVybGF5ID0gc3R5bGVkLmRpdih7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICB6SW5kZXg6IDEwMDEsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$g
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$f() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function BlocSelectorItem({
  definition,
  name,
  iconsUrl,
  onClick
}) {
  const icon = iconsUrl.replace("[name]", name);
  const title = definition.title;
  return /* @__PURE__ */ jsxs(Button$5, {
    onClick: prevent(onClick),
    children: [/* @__PURE__ */ jsx(ButtonImage, {
      children: /* @__PURE__ */ jsx("img", {
        src: icon,
        alt: ""
      })
    }), /* @__PURE__ */ jsx("div", {
      children: title
    })]
  });
}
const Button$5 = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "ejh7y2g1"
} : {
  target: "ejh7y2g1",
  label: "Button"
})(process.env.NODE_ENV === "production" ? {
  name: "xggmpv",
  styles: "background-color:transparent;border:none;display:flex;flex-direction:column;gap:1rem;font:inherit;font-weight:500;cursor:pointer;transition:.3s;&:hover, &:focus{outline:none;color:var(--ve-primary);& img{transform:translateY(-5px);}}"
} : {
  name: "xggmpv",
  styles: "background-color:transparent;border:none;display:flex;flex-direction:column;gap:1rem;font:inherit;font-weight:500;cursor:pointer;transition:.3s;&:hover, &:focus{outline:none;color:var(--ve-primary);& img{transform:translateY(-5px);}}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9ySXRlbS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEJlIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9ySXRlbS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JDb21wb25lbnREZWZpbml0aW9uIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5cbmV4cG9ydCBmdW5jdGlvbiBCbG9jU2VsZWN0b3JJdGVtKHtcbiAgZGVmaW5pdGlvbixcbiAgbmFtZSxcbiAgaWNvbnNVcmwsXG4gIG9uQ2xpY2ssXG59OiB7XG4gIG5hbWU6IHN0cmluZ1xuICBkZWZpbml0aW9uOiBFZGl0b3JDb21wb25lbnREZWZpbml0aW9uXG4gIGljb25zVXJsOiBzdHJpbmdcbiAgb25DbGljazogKCkgPT4gdm9pZFxufSkge1xuICBjb25zdCBpY29uID0gaWNvbnNVcmwucmVwbGFjZSgnW25hbWVdJywgbmFtZSlcbiAgY29uc3QgdGl0bGUgPSBkZWZpbml0aW9uLnRpdGxlXG5cbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uIG9uQ2xpY2s9e3ByZXZlbnQob25DbGljayl9PlxuICAgICAgPEJ1dHRvbkltYWdlPlxuICAgICAgICA8aW1nIHNyYz17aWNvbn0gYWx0PVwiXCIgLz5cbiAgICAgIDwvQnV0dG9uSW1hZ2U+XG4gICAgICA8ZGl2Pnt0aXRsZX08L2Rpdj5cbiAgICA8L0J1dHRvbj5cbiAgKVxufVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQuYnV0dG9uKHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXI6ICdub25lJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgZ2FwOiAnMXJlbScsXG4gIGZvbnQ6ICdpbmhlcml0JyxcbiAgZm9udFdlaWdodDogNTAwLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgdHJhbnNpdGlvbjogJy4zcycsXG4gICcmOmhvdmVyLCAmOmZvY3VzJzoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBjb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICAnJiBpbWcnOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01cHgpJyxcbiAgICB9LFxuICB9LFxufSlcblxuY29uc3QgQnV0dG9uSW1hZ2UgPSBzdHlsZWQuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtaG92ZXIpJyxcbiAgaGVpZ2h0OiAxMDcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHRyYW5zaXRpb246ICcuM3MnLFxuICBpbWc6IHtcbiAgICB3aWR0aDogMTIwLFxuICAgIGhlaWdodDogODAsXG4gICAgb2JqZWN0Rml0OiAnY29udGFpbicsXG4gICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gLjNzJyxcbiAgfSxcbiAgJyY6OmFmdGVyJzoge1xuICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBpbnNldDogMCxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgbWl4QmxlbmRNb2RlOiAnc2F0dXJhdGlvbicsXG4gICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgIHRyYW5zaXRpb246ICdvcGFjaXR5IC4zcycsXG4gIH0sXG4gIFtgYnV0dG9uOmhvdmVyICY6OmFmdGVyLCBidXR0b246Zm9jdXMgJjo6YWZ0ZXJgXToge1xuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG4gIFtgYnV0dG9uOmZvY3VzICZgXToge1xuICAgIHRyYW5zaXRpb246ICdub25lJyxcbiAgICBib3JkZXI6ICcycHggc29saWQgdmFyKC0tdmUtcHJpbWFyeSknLFxuICB9LFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$f
});
const ButtonImage = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "ejh7y2g0"
} : {
  target: "ejh7y2g0",
  label: "ButtonImage"
})({
  width: "100%",
  backgroundColor: "var(--ve-hover)",
  height: 107,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  transition: ".3s",
  img: {
    width: 120,
    height: 80,
    objectFit: "contain",
    borderRadius: 4,
    transition: "transform .3s"
  },
  "&::after": {
    content: "''",
    position: "absolute",
    inset: 0,
    opacity: 0,
    background: "var(--ve-primary)",
    mixBlendMode: "saturation",
    borderRadius: 4,
    transition: "opacity .3s"
  },
  [`button:hover &::after, button:focus &::after`]: {
    opacity: 1
  },
  [`button:focus &`]: {
    transition: "none",
    border: "2px solid var(--ve-primary)"
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9ySXRlbS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0NvQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0Jsb2NzL0Jsb2NTZWxlY3Rvckl0ZW0udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50RGVmaW5pdGlvbiB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuXG5leHBvcnQgZnVuY3Rpb24gQmxvY1NlbGVjdG9ySXRlbSh7XG4gIGRlZmluaXRpb24sXG4gIG5hbWUsXG4gIGljb25zVXJsLFxuICBvbkNsaWNrLFxufToge1xuICBuYW1lOiBzdHJpbmdcbiAgZGVmaW5pdGlvbjogRWRpdG9yQ29tcG9uZW50RGVmaW5pdGlvblxuICBpY29uc1VybDogc3RyaW5nXG4gIG9uQ2xpY2s6ICgpID0+IHZvaWRcbn0pIHtcbiAgY29uc3QgaWNvbiA9IGljb25zVXJsLnJlcGxhY2UoJ1tuYW1lXScsIG5hbWUpXG4gIGNvbnN0IHRpdGxlID0gZGVmaW5pdGlvbi50aXRsZVxuXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvbiBvbkNsaWNrPXtwcmV2ZW50KG9uQ2xpY2spfT5cbiAgICAgIDxCdXR0b25JbWFnZT5cbiAgICAgICAgPGltZyBzcmM9e2ljb259IGFsdD1cIlwiIC8+XG4gICAgICA8L0J1dHRvbkltYWdlPlxuICAgICAgPGRpdj57dGl0bGV9PC9kaXY+XG4gICAgPC9CdXR0b24+XG4gIClcbn1cblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbih7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGdhcDogJzFyZW0nLFxuICBmb250OiAnaW5oZXJpdCcsXG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHRyYW5zaXRpb246ICcuM3MnLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgY29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgJyYgaW1nJzoge1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNXB4KScsXG4gICAgfSxcbiAgfSxcbn0pXG5cbmNvbnN0IEJ1dHRvbkltYWdlID0gc3R5bGVkLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWhvdmVyKScsXG4gIGhlaWdodDogMTA3LFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB0cmFuc2l0aW9uOiAnLjNzJyxcbiAgaW1nOiB7XG4gICAgd2lkdGg6IDEyMCxcbiAgICBoZWlnaHQ6IDgwLFxuICAgIG9iamVjdEZpdDogJ2NvbnRhaW4nLFxuICAgIGJvcmRlclJhZGl1czogNCxcbiAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIC4zcycsXG4gIH0sXG4gICcmOjphZnRlcic6IHtcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgaW5zZXQ6IDAsXG4gICAgb3BhY2l0eTogMCxcbiAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIG1peEJsZW5kTW9kZTogJ3NhdHVyYXRpb24nLFxuICAgIGJvcmRlclJhZGl1czogNCxcbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuM3MnLFxuICB9LFxuICBbYGJ1dHRvbjpob3ZlciAmOjphZnRlciwgYnV0dG9uOmZvY3VzICY6OmFmdGVyYF06IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxuICBbYGJ1dHRvbjpmb2N1cyAmYF06IHtcbiAgICB0cmFuc2l0aW9uOiAnbm9uZScsXG4gICAgYm9yZGVyOiAnMnB4IHNvbGlkIHZhcigtLXZlLXByaW1hcnkpJyxcbiAgfSxcbn0pXG4iXX0= */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$e() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Wrapper$4 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "ehai5f71"
} : {
  target: "ehai5f71",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1d2bqma",
  styles: "position:relative;float:right;svg{position:absolute;left:1rem;top:50%;color:var(--ve-color-light);transform:translateY(-50%);}"
} : {
  name: "1d2bqma",
  styles: "position:relative;float:right;svg{position:absolute;left:1rem;top:50%;color:var(--ve-color-light);transform:translateY(-50%);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9yU2VhcmNoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTZ0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9CbG9jcy9CbG9jU2VsZWN0b3JTZWFyY2gudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWNvblNlYXJjaCwgU3R5bGVzIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5cbnR5cGUgQmxvY1NlbGVjdG9yU2VhcmNoUHJvcHMgPSB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgb25DaGFuZ2U6ICh2OiBzdHJpbmcpID0+IHZvaWRcbn1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZmxvYXQ6ICdyaWdodCcsXG4gIHN2Zzoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6ICcxcmVtJyxcbiAgICB0b3A6ICc1MCUnLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtY29sb3ItbGlnaHQpJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0KHtcbiAgaGVpZ2h0OiA0MCxcbiAgYmFja2dyb3VuZDogJ3ZhcigtLXZlLWhvdmVyKScsXG4gIGJvcmRlclJhZGl1czogNDAsXG4gIHBhZGRpbmc6ICcwIDFyZW0gMCAyLjZyZW0nLFxuICBib3JkZXI6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICBmb250OiAnaW5oZXJpdCcsXG4gICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG59KVxuXG5leHBvcnQgZnVuY3Rpb24gQmxvY1NlbGVjdG9yU2VhcmNoKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxufTogQmxvY1NlbGVjdG9yU2VhcmNoUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlcj5cbiAgICAgIDxJbnB1dFxuICAgICAgICB0eXBlPVwic2VhcmNoXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ3NlYXJjaENvbXBvbmVudCcpfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgLz5cbiAgICAgIDxJY29uU2VhcmNoIHNpemU9ezE0fSAvPlxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$e
});
const Input$1 = /* @__PURE__ */ createStyled("input", process.env.NODE_ENV === "production" ? {
  target: "ehai5f70"
} : {
  target: "ehai5f70",
  label: "Input"
})({
  height: 40,
  background: "var(--ve-hover)",
  borderRadius: 40,
  padding: "0 1rem 0 2.6rem",
  border: "1px solid transparent",
  font: "inherit",
  "&:focus": Styles.FocusState
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9yU2VhcmNoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQmMiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9CbG9jcy9CbG9jU2VsZWN0b3JTZWFyY2gudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWNvblNlYXJjaCwgU3R5bGVzIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5cbnR5cGUgQmxvY1NlbGVjdG9yU2VhcmNoUHJvcHMgPSB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgb25DaGFuZ2U6ICh2OiBzdHJpbmcpID0+IHZvaWRcbn1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZmxvYXQ6ICdyaWdodCcsXG4gIHN2Zzoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6ICcxcmVtJyxcbiAgICB0b3A6ICc1MCUnLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtY29sb3ItbGlnaHQpJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0KHtcbiAgaGVpZ2h0OiA0MCxcbiAgYmFja2dyb3VuZDogJ3ZhcigtLXZlLWhvdmVyKScsXG4gIGJvcmRlclJhZGl1czogNDAsXG4gIHBhZGRpbmc6ICcwIDFyZW0gMCAyLjZyZW0nLFxuICBib3JkZXI6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICBmb250OiAnaW5oZXJpdCcsXG4gICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG59KVxuXG5leHBvcnQgZnVuY3Rpb24gQmxvY1NlbGVjdG9yU2VhcmNoKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxufTogQmxvY1NlbGVjdG9yU2VhcmNoUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlcj5cbiAgICAgIDxJbnB1dFxuICAgICAgICB0eXBlPVwic2VhcmNoXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ3NlYXJjaENvbXBvbmVudCcpfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgLz5cbiAgICAgIDxJY29uU2VhcmNoIHNpemU9ezE0fSAvPlxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuIl19 */");
function BlocSelectorSearch({
  value,
  onChange
}) {
  return /* @__PURE__ */ jsxs(Wrapper$4, {
    children: [/* @__PURE__ */ jsx(Input$1, {
      type: "search",
      placeholder: t("searchComponent"),
      value,
      onChange: (e3) => onChange(e3.target.value)
    }), /* @__PURE__ */ jsx(IconSearch, {
      size: 14
    })]
  });
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$d() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const BlocSelectorGrid = /* @__PURE__ */ createStyled(Tabs$1.Tab, process.env.NODE_ENV === "production" ? {
  target: "eqbb8en0"
} : {
  target: "eqbb8en0",
  label: "BlocSelectorGrid"
})(process.env.NODE_ENV === "production" ? {
  name: "1dbqzqt",
  styles: "display:grid;grid-template-columns:repeat(auto-fit, 218px);gap:2rem;overflow:auto;max-height:calc(100vh - 300px);margin-top:2rem;align-content:flex-start;height:700px;&::-webkit-scrollbar{width:7px;height:7px;}&::-webkit-scrollbar-track{background:var(--ve-hover);padding:1px;}&::-webkit-scrollbar-thumb{background:var(--ve-field-border);border-radius:4px;}&[hidden]{display:none;}"
} : {
  name: "1dbqzqt",
  styles: "display:grid;grid-template-columns:repeat(auto-fit, 218px);gap:2rem;overflow:auto;max-height:calc(100vh - 300px);margin-top:2rem;align-content:flex-start;height:700px;&::-webkit-scrollbar{width:7px;height:7px;}&::-webkit-scrollbar-track{background:var(--ve-hover);padding:1px;}&::-webkit-scrollbar-thumb{background:var(--ve-field-border);border-radius:4px;}&[hidden]{display:none;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9yR3JpZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR2dDIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9yR3JpZC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IFRhYnMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcblxuZXhwb3J0IGNvbnN0IEJsb2NTZWxlY3RvckdyaWQgPSBzdHlsZWQoVGFicy5UYWIpKHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAncmVwZWF0KGF1dG8tZml0LCAyMThweCknLFxuICBnYXA6ICcycmVtJyxcbiAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgbWF4SGVpZ2h0OiAnY2FsYygxMDB2aCAtIDMwMHB4KScsXG4gIG1hcmdpblRvcDogJzJyZW0nLFxuICBhbGlnbkNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgaGVpZ2h0OiA3MDAsXG4gICcmOjotd2Via2l0LXNjcm9sbGJhcic6IHtcbiAgICB3aWR0aDogNyxcbiAgICBoZWlnaHQ6IDcsXG4gIH0sXG4gICcmOjotd2Via2l0LXNjcm9sbGJhci10cmFjayc6IHtcbiAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtaG92ZXIpJyxcbiAgICBwYWRkaW5nOiAxLFxuICB9LFxuICAnJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWInOiB7XG4gICAgYmFja2dyb3VuZDogJ3ZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICAgIGJvcmRlclJhZGl1czogNCxcbiAgfSxcbiAgJyZbaGlkZGVuXSc6IHtcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gIH0sXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$d
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$c() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const ALL_TAB = "Tous les blocs";
var _ref$5 = process.env.NODE_ENV === "production" ? {
  name: "di48ht",
  styles: "margin:1.5rem 0"
} : {
  name: "1xefjxs-BlocSelector",
  styles: "margin:1.5rem 0;label:BlocSelector;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9yLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0RFkiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9CbG9jcy9CbG9jU2VsZWN0b3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7XG4gIHVzZUFkZEJsb2NrLFxuICB1c2VCbG9jU2VsZWN0aW9uVmlzaWJsZSxcbiAgdXNlUGFydGlhbFN0b3JlLFxufSBmcm9tICdzcmMvc3RvcmUnXG5pbXBvcnQgeyBFZGl0b3JDb21wb25lbnREZWZpbml0aW9ucyB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IE1vZGFsLCBUYWJzIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgeyBCbG9jU2VsZWN0b3JJdGVtIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvQmxvY3MvQmxvY1NlbGVjdG9ySXRlbSdcbmltcG9ydCB7IEJsb2NTZWxlY3RvclNlYXJjaCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0Jsb2NzL0Jsb2NTZWxlY3RvclNlYXJjaCdcbmltcG9ydCB7IEJsb2NTZWxlY3RvckdyaWQgfSBmcm9tICdzcmMvY29tcG9uZW50cy9CbG9jcy9CbG9jU2VsZWN0b3JHcmlkJ1xuaW1wb3J0IHsgdCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvaTE4bidcblxuY29uc3QgQUxMX1RBQiA9ICdUb3VzIGxlcyBibG9jcydcblxudHlwZSBCbG9jU2VsZWN0b3JQcm9wcyA9IHtcbiAgaWNvbnNVcmw6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmxvY1NlbGVjdG9yKHsgaWNvbnNVcmwgfTogQmxvY1NlbGVjdG9yUHJvcHMpIHtcbiAgY29uc3QgaXNWaXNpYmxlID0gdXNlQmxvY1NlbGVjdGlvblZpc2libGUoKVxuICBjb25zdCB7IHNldEFkZEJsb2NrSW5kZXggfSA9IHVzZVBhcnRpYWxTdG9yZSgnc2V0QWRkQmxvY2tJbmRleCcpXG4gIGNvbnN0IFtzZWFyY2gsIHNldFNlYXJjaF0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgeyBkZWZpbml0aW9ucywgaGlkZGVuQ2F0ZWdvcmllcyB9ID0gdXNlUGFydGlhbFN0b3JlKFxuICAgICdkZWZpbml0aW9ucycsXG4gICAgJ2hpZGRlbkNhdGVnb3JpZXMnXG4gIClcbiAgY29uc3QgYWRkQmxvY2sgPSB1c2VBZGRCbG9jaygpXG4gIGNvbnN0IGNhdGVnb3JpZXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAgQUxMX1RBQixcbiAgICAgIC4uLk9iamVjdC52YWx1ZXMoZGVmaW5pdGlvbnMpXG4gICAgICAgIC5maWx0ZXIoKGQpID0+IGQuY2F0ZWdvcnkpXG4gICAgICAgIC5maWx0ZXIoKGQpID0+ICFoaWRkZW5DYXRlZ29yaWVzLmluY2x1ZGVzKGQuY2F0ZWdvcnkgPz8gJycpKVxuICAgICAgICAucmVkdWNlKFxuICAgICAgICAgIChhY2MsIGQpID0+IChhY2MuaW5jbHVkZXMoZC5jYXRlZ29yeSEpID8gYWNjIDogWy4uLmFjYywgZC5jYXRlZ29yeSFdKSxcbiAgICAgICAgICBbXSBhcyBzdHJpbmdbXVxuICAgICAgICApLFxuICAgIF1cbiAgfSwgW2RlZmluaXRpb25zXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFNlYXJjaCgnJylcbiAgfSwgW2lzVmlzaWJsZV0pXG5cbiAgaWYgKCFpc1Zpc2libGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICh2OiBhbnkpID0+IHtcbiAgICBzZXRBZGRCbG9ja0luZGV4KG51bGwpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxNb2RhbFxuICAgICAgdmlzaWJsZT17aXNWaXNpYmxlfVxuICAgICAgb25WaXNpYmlsaXR5Q2hhbmdlPXtoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlfVxuICAgICAgdGl0bGU9e3QoJ2FkZENvbXBvbmVudCcpfVxuICAgID5cbiAgICAgIDxCbG9jU2VsZWN0b3JTZWFyY2ggdmFsdWU9e3NlYXJjaH0gb25DaGFuZ2U9e3NldFNlYXJjaH0gLz5cbiAgICAgIDxUYWJzIGNzcz17eyBtYXJnaW46ICcxLjVyZW0gMCcgfX0+XG4gICAgICAgIHtjYXRlZ29yaWVzLm1hcCgoY2F0ZWdvcnkpID0+IChcbiAgICAgICAgICA8QmxvY1NlbGVjdG9yR3JpZCBrZXk9e2NhdGVnb3J5fSB0aXRsZT17Y2F0ZWdvcnl9PlxuICAgICAgICAgICAge09iamVjdC5rZXlzKGRlZmluaXRpb25zKVxuICAgICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChrZXkpID0+XG4gICAgICAgICAgICAgICAgICAhaGlkZGVuQ2F0ZWdvcmllcy5pbmNsdWRlcyhkZWZpbml0aW9uc1trZXldIS5jYXRlZ29yeSA/PyAnJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAuZmlsdGVyKHNlYXJjaERlZmluaXRpb24oc2VhcmNoID8/ICcnLCBjYXRlZ29yeSwgZGVmaW5pdGlvbnMpKVxuICAgICAgICAgICAgICAubWFwKChrZXkpID0+IChcbiAgICAgICAgICAgICAgICA8QmxvY1NlbGVjdG9ySXRlbVxuICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgICBkZWZpbml0aW9uPXtkZWZpbml0aW9uc1trZXldIX1cbiAgICAgICAgICAgICAgICAgIG5hbWU9e2tleX1cbiAgICAgICAgICAgICAgICAgIGljb25zVXJsPXtpY29uc1VybH1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFkZEJsb2NrKGtleSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9CbG9jU2VsZWN0b3JHcmlkPlxuICAgICAgICApKX1cbiAgICAgIDwvVGFicz5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmZ1bmN0aW9uIHNlYXJjaERlZmluaXRpb24oXG4gIHNlYXJjaDogc3RyaW5nLFxuICBjYXRlZ29yeTogc3RyaW5nLFxuICBkZWZpbml0aW9uczogRWRpdG9yQ29tcG9uZW50RGVmaW5pdGlvbnNcbikge1xuICByZXR1cm4gKGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY2F0ZWdvcnlGaWx0ZXIgPVxuICAgICAgY2F0ZWdvcnkgPT09IEFMTF9UQUIgPyB0cnVlIDogZGVmaW5pdGlvbnNba2V5XSEuY2F0ZWdvcnkgPT09IGNhdGVnb3J5XG4gICAgY29uc3Qgc2VhcmNoRmlsdGVyID1cbiAgICAgIHNlYXJjaCA9PT0gJydcbiAgICAgICAgPyB0cnVlXG4gICAgICAgIDogZGVmaW5pdGlvbnNba2V5XSEudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2gudG9Mb3dlckNhc2UoKSlcbiAgICByZXR1cm4gY2F0ZWdvcnlGaWx0ZXIgJiYgc2VhcmNoRmlsdGVyXG4gIH1cbn1cbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$c
};
function BlocSelector({
  iconsUrl
}) {
  const isVisible = useBlocSelectionVisible();
  const {
    setAddBlockIndex
  } = usePartialStore("setAddBlockIndex");
  const [search, setSearch] = reactExports.useState("");
  const {
    definitions,
    hiddenCategories
  } = usePartialStore("definitions", "hiddenCategories");
  const addBlock = useAddBlock();
  const categories = reactExports.useMemo(() => {
    return [ALL_TAB, ...Object.values(definitions).filter((d4) => d4.category).filter((d4) => !hiddenCategories.includes(d4.category ?? "")).reduce((acc, d4) => acc.includes(d4.category) ? acc : [...acc, d4.category], [])];
  }, [definitions]);
  reactExports.useEffect(() => {
    setSearch("");
  }, [isVisible]);
  if (!isVisible) {
    return null;
  }
  const handleVisibilityChange = (v2) => {
    setAddBlockIndex(null);
  };
  return /* @__PURE__ */ jsxs(Modal, {
    visible: isVisible,
    onVisibilityChange: handleVisibilityChange,
    title: t("addComponent"),
    children: [/* @__PURE__ */ jsx(BlocSelectorSearch, {
      value: search,
      onChange: setSearch
    }), /* @__PURE__ */ jsx(Tabs$1, {
      css: _ref$5,
      children: categories.map((category) => /* @__PURE__ */ jsx(BlocSelectorGrid, {
        title: category,
        children: Object.keys(definitions).filter((key) => !hiddenCategories.includes(definitions[key].category ?? "")).filter(searchDefinition(search ?? "", category, definitions)).map((key) => /* @__PURE__ */ jsx(BlocSelectorItem, {
          definition: definitions[key],
          name: key,
          iconsUrl,
          onClick: () => addBlock(key)
        }, key))
      }, category))
    })]
  });
}
function searchDefinition(search, category, definitions) {
  return (key) => {
    const categoryFilter = category === ALL_TAB ? true : definitions[key].category === category;
    const searchFilter = search === "" ? true : definitions[key].title.toLowerCase().includes(search.toLowerCase());
    return categoryFilter && searchFilter;
  };
}
function RollbackMessage() {
  const {
    message: rollbackMessage,
    rollback,
    voidRollback
  } = useRollbackMessage();
  return /* @__PURE__ */ jsx(Flash, {
    action: t("rollback"),
    onClick: rollback,
    duration: 3,
    onHide: voidRollback,
    children: rollbackMessage
  });
}
function SidebarToggleButton({
  collapsed,
  onClick
}) {
  return /* @__PURE__ */ jsx(Button$4, {
    onClick: prevent(onClick),
    collapsed,
    children: /* @__PURE__ */ jsx(IconBack, {
      size: 20
    })
  });
}
const Button$4 = /* @__PURE__ */ createStyled(ButtonIcon, process.env.NODE_ENV === "production" ? {
  target: "e1csy6z0"
} : {
  target: "e1csy6z0",
  label: "Button"
})("position:absolute;top:10px;z-index:1001;box-shadow:var(--ve-field-shadow);border:1px solid var(--ve-hover);transition:opacity .3s;&:hover{opacity:1;}", (props) => ({
  left: props.collapsed ? "1em" : "calc(var(--ve-clampedSidebar) + 1em)",
  opacity: props.collapsed ? 1 : 0,
  transform: props.collapsed ? "rotate(180deg)" : "none"
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvTGF5b3V0L1NpZGViYXJUb2dnbGVCdXR0b24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Cc0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9MYXlvdXQvU2lkZWJhclRvZ2dsZUJ1dHRvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IEJ1dHRvbkljb24sIEljb25CYWNrLCBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuXG50eXBlIFNpZGViYXJUb2dnbGVCdXR0b25Qcm9wcyA9IHtcbiAgY29sbGFwc2VkOiBib29sZWFuXG4gIG9uQ2xpY2s6IEZ1bmN0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyVG9nZ2xlQnV0dG9uKHtcbiAgY29sbGFwc2VkLFxuICBvbkNsaWNrLFxufTogU2lkZWJhclRvZ2dsZUJ1dHRvblByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEJ1dHRvbiBvbkNsaWNrPXtwcmV2ZW50KG9uQ2xpY2spfSBjb2xsYXBzZWQ9e2NvbGxhcHNlZH0+XG4gICAgICA8SWNvbkJhY2sgc2l6ZT17MjB9IC8+XG4gICAgPC9CdXR0b24+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IEJ1dHRvbiA9IHN0eWxlZChCdXR0b25JY29uKTx7IGNvbGxhcHNlZDogYm9vbGVhbiB9PihcbiAge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzEwcHgnLFxuICAgIHpJbmRleDogMTAwMSxcbiAgICBib3hTaGFkb3c6ICd2YXIoLS12ZS1maWVsZC1zaGFkb3cpJyxcbiAgICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtaG92ZXIpJyxcbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuM3MnLFxuICAgICcmOmhvdmVyJzogeyBvcGFjaXR5OiAxIH0sXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICBsZWZ0OiBwcm9wcy5jb2xsYXBzZWQgPyAnMWVtJyA6ICdjYWxjKHZhcigtLXZlLWNsYW1wZWRTaWRlYmFyKSArIDFlbSknLFxuICAgIG9wYWNpdHk6IHByb3BzLmNvbGxhcHNlZCA/IDEgOiAwLFxuICAgIHRyYW5zZm9ybTogcHJvcHMuY29sbGFwc2VkID8gJ3JvdGF0ZSgxODBkZWcpJyA6ICdub25lJyxcbiAgfSlcbilcbiJdfQ== */");
function PreviewPostMessage({
  previewUrl
}) {
  const iframe = reactExports.useRef(null);
  const [loaded, setLoaded] = reactExports.useState(false);
  let transform = void 0;
  const {
    setFocusIndex,
    setAddBlockIndex,
    removeBloc,
    focusIndex,
    moveBloc,
    data
  } = usePartialStore("data", "setFocusIndex", "setAddBlockIndex", "removeBloc", "focusIndex", "moveBloc");
  const previewUrlRef = reactExports.useRef(previewUrl);
  previewUrlRef.current = previewUrl;
  reactExports.useEffect(() => {
    const listener = (e3) => {
      switch (e3.data.type) {
        case "ve-focus":
          setFocusIndex(e3.data.payload.id);
          break;
        case "ve-add":
          setAddBlockIndex(e3.data.payload.id);
          break;
        case "ve-remove":
          removeBloc(e3.data.payload.id);
          break;
        case "ve-move":
          moveBloc(e3.data.payload.id, e3.data.payload.direction);
          break;
      }
    };
    window.addEventListener("message", listener);
    return () => {
      window.removeEventListener("message", listener);
    };
  }, []);
  reactExports.useEffect(() => {
    if (loaded && iframe.current && iframe.current.contentWindow) {
      iframe.current.contentWindow.postMessage({
        type: "ve-data",
        payload: data
      }, previewUrlRef.current);
    }
  }, [loaded, data]);
  reactExports.useEffect(() => {
    if (iframe.current && iframe.current.contentWindow) {
      iframe.current.contentWindow.postMessage({
        type: "ve-focus",
        payload: {
          id: focusIndex
        }
      }, previewUrlRef.current);
    }
  }, [focusIndex]);
  const previewURLWithReferrer = new URL(previewUrl);
  previewURLWithReferrer.searchParams.set("referrer", window.location.toString());
  return /* @__PURE__ */ jsx(PreviewWrapper$1, {
    children: /* @__PURE__ */ jsx(StyledIframe, {
      ref: iframe,
      src: previewURLWithReferrer.toString(),
      loaded,
      style: transform,
      onLoad: () => setLoaded(true)
    })
  });
}
function Layout({
  previewUrl,
  onClose,
  iconsUrl
}) {
  const [sidebarCollapsed, toggleSidebar] = useToggle(false);
  const showResizeControl = !sidebarCollapsed;
  const PreviewComponent = VisualEditor.postMessagePreview ? PreviewPostMessage : Preview;
  return /* @__PURE__ */ jsx(Fragment$1, {
    children: /* @__PURE__ */ jsxs(Wrapper$3, {
      withSidebar: !sidebarCollapsed,
      children: [/* @__PURE__ */ jsx(Header, {}), /* @__PURE__ */ jsx(Sidebar, {
        onClose,
        css: /* @__PURE__ */ css({
          display: sidebarCollapsed ? "none" : void 0
        }, process.env.NODE_ENV === "production" ? "" : ";label:Layout;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvTGF5b3V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ1UiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9MYXlvdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2lkZWJhciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhcidcbmltcG9ydCB7IFByZXZpZXcgfSBmcm9tICdzcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXcnXG5pbXBvcnQgeyB0eXBlIEVkaXRvckNvbXBvbmVudERhdGEgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBSZXNpemVCYXIgfSBmcm9tICcuL1Jlc2l6ZUJhcidcbmltcG9ydCB7IEJsb2NTZWxlY3RvciB9IGZyb20gJy4vQmxvY3MvQmxvY1NlbGVjdG9yJ1xuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUm9sbGJhY2tNZXNzYWdlIH0gZnJvbSAnLi9Sb2xsYmFja01lc3NhZ2UnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHsgU2lkZWJhclRvZ2dsZUJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0xheW91dC9TaWRlYmFyVG9nZ2xlQnV0dG9uJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVRvZ2dsZSdcbmltcG9ydCB7IFZpc3VhbEVkaXRvciB9IGZyb20gJ3NyYy9WaXN1YWxFZGl0b3InXG5pbXBvcnQgeyBQcmV2aWV3UG9zdE1lc3NhZ2UgfSBmcm9tICdzcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXdQb3N0TWVzc2FnZSdcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXInXG5pbXBvcnQgeyB1c2VQYXJ0aWFsU3RvcmUgfSBmcm9tICdzcmMvc3RvcmUnXG5cbnR5cGUgTGF5b3V0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZ1xuICBwcmV2aWV3VXJsPzogc3RyaW5nXG4gIG9uQ2xvc2U6ICgpID0+IHZvaWRcbiAgaWNvbnNVcmw6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGF5b3V0KHsgcHJldmlld1VybCwgb25DbG9zZSwgaWNvbnNVcmwgfTogTGF5b3V0UHJvcHMpIHtcbiAgY29uc3QgW3NpZGViYXJDb2xsYXBzZWQsIHRvZ2dsZVNpZGViYXJdID0gdXNlVG9nZ2xlKGZhbHNlKVxuICBjb25zdCBzaG93UmVzaXplQ29udHJvbCA9ICFzaWRlYmFyQ29sbGFwc2VkXG4gIGNvbnN0IFByZXZpZXdDb21wb25lbnQgPSBWaXN1YWxFZGl0b3IucG9zdE1lc3NhZ2VQcmV2aWV3XG4gICAgPyBQcmV2aWV3UG9zdE1lc3NhZ2VcbiAgICA6IFByZXZpZXdcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFdyYXBwZXIgd2l0aFNpZGViYXI9eyFzaWRlYmFyQ29sbGFwc2VkfT5cbiAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8U2lkZWJhclxuICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBzaWRlYmFyQ29sbGFwc2VkID8gJ25vbmUnIDogdW5kZWZpbmVkLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIHtwcmV2aWV3VXJsICYmIDxQcmV2aWV3Q29tcG9uZW50IHByZXZpZXdVcmw9e3ByZXZpZXdVcmx9IC8+fVxuICAgICAgICA8U2lkZWJhclRvZ2dsZUJ1dHRvblxuICAgICAgICAgIGNvbGxhcHNlZD17c2lkZWJhckNvbGxhcHNlZH1cbiAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVTaWRlYmFyfVxuICAgICAgICAvPlxuICAgICAgICB7c2hvd1Jlc2l6ZUNvbnRyb2wgJiYgPFJlc2l6ZUJhciAvPn1cbiAgICAgICAgPEJsb2NTZWxlY3RvciBpY29uc1VybD17aWNvbnNVcmx9IC8+XG4gICAgICAgIDxSb2xsYmFja01lc3NhZ2UgLz5cbiAgICAgIDwvV3JhcHBlcj5cbiAgICA8Lz5cbiAgKVxufVxuXG5mdW5jdGlvbiBXcmFwcGVyKHByb3BzOiB7IHdpdGhTaWRlYmFyOiBib29sZWFuOyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgeyBzaWRlYmFyV2lkdGggfSA9IHVzZVBhcnRpYWxTdG9yZSgnc2lkZWJhcldpZHRoJylcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZWRXcmFwcGVyXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBzdHlsZT17eyAnLS12ZS1zaWRlYmFyJzogYCR7c2lkZWJhcldpZHRofXZ3YCB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXN9XG4gICAgLz5cbiAgKVxufVxuXG5jb25zdCBJbiA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScgfSxcbiAgdG86IHsgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScgfSxcbn0pXG5cbmNvbnN0IE91dCA9IGtleWZyYW1lcyh7XG4gIGZyb206IHsgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScgfSxcbiAgdG86IHsgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScgfSxcbn0pXG5cbmNvbnN0IFN0eWxlZFdyYXBwZXIgPSBzdHlsZWQuZGl2PHsgd2l0aFNpZGViYXI6IGJvb2xlYW4gfT4oXG4gIHtcbiAgICBpc29sYXRpb246ICdpc29sYXRlJyxcbiAgICB6SW5kZXg6IDk5OTksXG4gICAgZm9udFNpemU6ICcxNXB4JyxcbiAgICAnLS12ZS1zaWRlYmFyJzogJzYwMHB4JyxcbiAgICAnLS12ZS1jbGFtcGVkU2lkZWJhcic6XG4gICAgICAnY2xhbXAoNDUwcHgsIHZhcigtLXZlLXNpZGViYXIpLCBjYWxjKDEwMHZ3IC0gMzc1cHgpKScsXG4gICAgY29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxuICAgIHRyYW5zaXRpb246ICdiYWNrZ3JvdW5kLWNvbG9yIC4zcycsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgaW5zZXQ6ICcwJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBhbmltYXRpb246IGAke0lufSAuN3MgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpIGJvdGhgLFxuICAgICdbaGlkZGVuPVwiaGlkZGVuXCJdICYnOiB7XG4gICAgICBhbmltYXRpb246IGAke091dH0gLjdzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKSBib3RoYCxcbiAgICB9LFxuICAgICcmIConOiB7XG4gICAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXInOiB7IHdpZHRoOiAnN3B4JywgaGVpZ2h0OiAnN3B4JyB9LFxuICAgICAgJyY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBwYWRkaW5nOiAnMXB4JyxcbiAgICAgIH0sXG4gICAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWInOiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IHByb3BzLndpdGhTaWRlYmFyXG4gICAgICA/ICd2YXIoLS12ZS1jbGFtcGVkU2lkZWJhcikgMWZyJ1xuICAgICAgOiAnMWZyJyxcbiAgfSlcbilcbiJdfQ== */")
      }), previewUrl && /* @__PURE__ */ jsx(PreviewComponent, {
        previewUrl
      }), /* @__PURE__ */ jsx(SidebarToggleButton, {
        collapsed: sidebarCollapsed,
        onClick: toggleSidebar
      }), showResizeControl && /* @__PURE__ */ jsx(ResizeBar, {}), /* @__PURE__ */ jsx(BlocSelector, {
        iconsUrl
      }), /* @__PURE__ */ jsx(RollbackMessage, {})]
    })
  });
}
function Wrapper$3(props) {
  const {
    sidebarWidth: sidebarWidth2
  } = usePartialStore("sidebarWidth");
  return /* @__PURE__ */ jsx(StyledWrapper, {
    ...props,
    style: {
      "--ve-sidebar": `${sidebarWidth2}vw`
    }
  });
}
const In$1 = keyframes({
  from: {
    backgroundColor: "rgba(255, 255, 255, 0)"
  },
  to: {
    backgroundColor: "var(--ve-field-border)"
  }
});
const Out = keyframes({
  from: {
    backgroundColor: "var(--ve-field-border)"
  },
  to: {
    backgroundColor: "rgba(255, 255, 255, 0)"
  }
});
const StyledWrapper = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e6csq180"
} : {
  target: "e6csq180",
  label: "StyledWrapper"
})({
  isolation: "isolate",
  zIndex: 9999,
  fontSize: "15px",
  "--ve-sidebar": "600px",
  "--ve-clampedSidebar": "clamp(450px, var(--ve-sidebar), calc(100vw - 375px))",
  color: "var(--ve-color-light)",
  transition: "background-color .3s",
  position: "fixed",
  inset: "0",
  width: "100%",
  height: "100%",
  display: "grid",
  backgroundColor: "var(--ve-field-border)",
  animation: `${In$1} .7s cubic-bezier(0.19, 1, 0.22, 1) both`,
  '[hidden="hidden"] &': {
    animation: `${Out} .7s cubic-bezier(0.19, 1, 0.22, 1) both`
  },
  "& *": {
    "&::-webkit-scrollbar": {
      width: "7px",
      height: "7px"
    },
    "&::-webkit-scrollbar-track": {
      background: "transparent",
      padding: "1px"
    },
    "&::-webkit-scrollbar-thumb": {
      background: "var(--ve-field-border)",
      borderRadius: "4px"
    }
  }
}, (props) => ({
  gridTemplateColumns: props.withSidebar ? "var(--ve-clampedSidebar) 1fr" : "1fr"
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvTGF5b3V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RXNCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvTGF5b3V0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZGViYXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXInXG5pbXBvcnQgeyBQcmV2aWV3IH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3J1xuaW1wb3J0IHsgdHlwZSBFZGl0b3JDb21wb25lbnREYXRhIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgUmVzaXplQmFyIH0gZnJvbSAnLi9SZXNpemVCYXInXG5pbXBvcnQgeyBCbG9jU2VsZWN0b3IgfSBmcm9tICcuL0Jsb2NzL0Jsb2NTZWxlY3RvcidcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFJvbGxiYWNrTWVzc2FnZSB9IGZyb20gJy4vUm9sbGJhY2tNZXNzYWdlJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IFNpZGViYXJUb2dnbGVCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy9MYXlvdXQvU2lkZWJhclRvZ2dsZUJ1dHRvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJ3NyYy9ob29rcy91c2VUb2dnbGUnXG5pbXBvcnQgeyBWaXN1YWxFZGl0b3IgfSBmcm9tICdzcmMvVmlzdWFsRWRpdG9yJ1xuaW1wb3J0IHsgUHJldmlld1Bvc3RNZXNzYWdlIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3UG9zdE1lc3NhZ2UnXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyJ1xuaW1wb3J0IHsgdXNlUGFydGlhbFN0b3JlIH0gZnJvbSAnc3JjL3N0b3JlJ1xuXG50eXBlIExheW91dFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgcHJldmlld1VybD86IHN0cmluZ1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkXG4gIGljb25zVXJsOiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExheW91dCh7IHByZXZpZXdVcmwsIG9uQ2xvc2UsIGljb25zVXJsIH06IExheW91dFByb3BzKSB7XG4gIGNvbnN0IFtzaWRlYmFyQ29sbGFwc2VkLCB0b2dnbGVTaWRlYmFyXSA9IHVzZVRvZ2dsZShmYWxzZSlcbiAgY29uc3Qgc2hvd1Jlc2l6ZUNvbnRyb2wgPSAhc2lkZWJhckNvbGxhcHNlZFxuICBjb25zdCBQcmV2aWV3Q29tcG9uZW50ID0gVmlzdWFsRWRpdG9yLnBvc3RNZXNzYWdlUHJldmlld1xuICAgID8gUHJldmlld1Bvc3RNZXNzYWdlXG4gICAgOiBQcmV2aWV3XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxXcmFwcGVyIHdpdGhTaWRlYmFyPXshc2lkZWJhckNvbGxhcHNlZH0+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgPFNpZGViYXJcbiAgICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgZGlzcGxheTogc2lkZWJhckNvbGxhcHNlZCA/ICdub25lJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICB7cHJldmlld1VybCAmJiA8UHJldmlld0NvbXBvbmVudCBwcmV2aWV3VXJsPXtwcmV2aWV3VXJsfSAvPn1cbiAgICAgICAgPFNpZGViYXJUb2dnbGVCdXR0b25cbiAgICAgICAgICBjb2xsYXBzZWQ9e3NpZGViYXJDb2xsYXBzZWR9XG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlU2lkZWJhcn1cbiAgICAgICAgLz5cbiAgICAgICAge3Nob3dSZXNpemVDb250cm9sICYmIDxSZXNpemVCYXIgLz59XG4gICAgICAgIDxCbG9jU2VsZWN0b3IgaWNvbnNVcmw9e2ljb25zVXJsfSAvPlxuICAgICAgICA8Um9sbGJhY2tNZXNzYWdlIC8+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgPC8+XG4gIClcbn1cblxuZnVuY3Rpb24gV3JhcHBlcihwcm9wczogeyB3aXRoU2lkZWJhcjogYm9vbGVhbjsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IHsgc2lkZWJhcldpZHRoIH0gPSB1c2VQYXJ0aWFsU3RvcmUoJ3NpZGViYXJXaWR0aCcpXG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkV3JhcHBlclxuICAgICAgey4uLnByb3BzfVxuICAgICAgc3R5bGU9e3sgJy0tdmUtc2lkZWJhcic6IGAke3NpZGViYXJXaWR0aH12d2AgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzfVxuICAgIC8+XG4gIClcbn1cblxuY29uc3QgSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7IGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknIH0sXG4gIHRvOiB7IGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWZpZWxkLWJvcmRlciknIH0sXG59KVxuXG5jb25zdCBPdXQgPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7IGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWZpZWxkLWJvcmRlciknIH0sXG4gIHRvOiB7IGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknIH0sXG59KVxuXG5jb25zdCBTdHlsZWRXcmFwcGVyID0gc3R5bGVkLmRpdjx7IHdpdGhTaWRlYmFyOiBib29sZWFuIH0+KFxuICB7XG4gICAgaXNvbGF0aW9uOiAnaXNvbGF0ZScsXG4gICAgekluZGV4OiA5OTk5LFxuICAgIGZvbnRTaXplOiAnMTVweCcsXG4gICAgJy0tdmUtc2lkZWJhcic6ICc2MDBweCcsXG4gICAgJy0tdmUtY2xhbXBlZFNpZGViYXInOlxuICAgICAgJ2NsYW1wKDQ1MHB4LCB2YXIoLS12ZS1zaWRlYmFyKSwgY2FsYygxMDB2dyAtIDM3NXB4KSknLFxuICAgIGNvbG9yOiAndmFyKC0tdmUtY29sb3ItbGlnaHQpJyxcbiAgICB0cmFuc2l0aW9uOiAnYmFja2dyb3VuZC1jb2xvciAuM3MnLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGluc2V0OiAnMCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gICAgYW5pbWF0aW9uOiBgJHtJbn0gLjdzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKSBib3RoYCxcbiAgICAnW2hpZGRlbj1cImhpZGRlblwiXSAmJzoge1xuICAgICAgYW5pbWF0aW9uOiBgJHtPdXR9IC43cyBjdWJpYy1iZXppZXIoMC4xOSwgMSwgMC4yMiwgMSkgYm90aGAsXG4gICAgfSxcbiAgICAnJiAqJzoge1xuICAgICAgJyY6Oi13ZWJraXQtc2Nyb2xsYmFyJzogeyB3aWR0aDogJzdweCcsIGhlaWdodDogJzdweCcgfSxcbiAgICAgICcmOjotd2Via2l0LXNjcm9sbGJhci10cmFjayc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgcGFkZGluZzogJzFweCcsXG4gICAgICB9LFxuICAgICAgJyY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBwcm9wcy53aXRoU2lkZWJhclxuICAgICAgPyAndmFyKC0tdmUtY2xhbXBlZFNpZGViYXIpIDFmcidcbiAgICAgIDogJzFmcicsXG4gIH0pXG4pXG4iXX0= */");
function useClipboardPaste(enabled) {
  const {
    insertData
  } = usePartialStore("insertData");
  reactExports.useEffect(() => {
    if (!enabled) {
      return;
    }
    const listener = (event) => {
      try {
        let paste = (event.clipboardData || window.clipboardData).getData("text").trim();
        if (paste.startsWith("{")) {
          event.preventDefault();
          const data = JSON.parse(paste);
          if (data._name) {
            insertData(data._name, 0, indexify(data));
          }
        } else if (paste.startsWith("[")) {
          event.preventDefault();
          const data = JSON.parse(paste);
          if (data.length > 0) {
            for (let i2 = data.length - 1; i2 >= 0; i2--) {
              insertData(data[i2]._name, 0, indexify(data[i2]));
            }
          }
        }
      } catch (e3) {
      }
    };
    document.addEventListener("paste", listener);
    return () => {
      document.removeEventListener("paste", listener);
    };
  }, [insertData, enabled]);
}
function useStateDelayed(originalState, duration = 700, onlyOnFalse = true) {
  const [delayedState, setDelayedState] = reactExports.useState(originalState);
  reactExports.useEffect(() => {
    if (originalState && onlyOnFalse) {
      setDelayedState(originalState);
    } else {
      const timer = window.setTimeout(() => setDelayedState(originalState), 700);
      return () => window.clearTimeout(timer);
    }
  }, [originalState]);
  return delayedState;
}
const Translations$1 = {
  unknownComponent: "Unknown component",
  deleteComponent: "Remove component",
  copyPage: "Copier le code de la page",
  copyComponent: "Copy the component",
  searchComponent: "Search a component",
  copySuccess: "The code has been copied",
  copyInstructions: "You can paste the component on another page (CTRL + V)",
  addComponent: "Add a component",
  responsiveView: "Responsive view",
  addItem: "Add an item",
  deleteItem: "Remove item",
  rollback: "Restore",
  deleteItemConfirm: "The component has been deleted",
  save: "Save",
  close: "Close",
  noContent: `You have no content yet`,
  useTemplate: "Use a template",
  poweredBy: "Powered by"
};
const stopPropagation = (e3) => e3.stopPropagation();
function useStopPropagation(ref, eventNames) {
  reactExports.useEffect(() => {
    if (!ref.current) {
      return;
    }
    eventNames.map((eventName) => {
      ref.current.addEventListener(eventName, stopPropagation);
    });
    return () => {
      if (!ref.current) {
        return;
      }
      eventNames.map((eventName) => {
        ref.current.removeEventListener(eventName, stopPropagation);
      });
    };
  });
}
class PreviewWrapper extends (isClientSide() ? HTMLElement : class {
}) {
  constructor() {
    super(...arguments);
    __publicField(this, "isFocused", false);
    __publicField(this, "root");
    __publicField(this, "referrer", () => {
      return new URL(document.location.toString()).searchParams.get("referrer") ?? "";
    });
    __publicField(this, "onWrapperClick", () => {
      window.parent.postMessage({
        type: "ve-focus",
        payload: {
          id: this.dataset.id,
          parent: true
        }
      }, this.referrer());
    });
    __publicField(this, "handleAdd", () => {
      window.parent.postMessage({
        type: "ve-add",
        payload: {
          id: this.dataset.id
        }
      }, this.referrer());
    });
    __publicField(this, "handleDelete", () => {
      window.parent.postMessage({
        type: "ve-remove",
        payload: {
          id: this.dataset.id
        }
      }, this.referrer());
    });
    __publicField(this, "handleMove", (direction) => {
      window.parent.postMessage({
        type: "ve-move",
        payload: {
          id: this.dataset.id,
          direction
        }
      }, this.referrer());
    });
    __publicField(this, "onFocusChange", (e3) => {
      if (e3.data.type === "ve-focus") {
        const isFocused = e3.data.payload.id === this.dataset.id;
        if (isFocused !== this.isFocused) {
          this.isFocused = e3.data.payload.id === this.dataset.id;
          this.render();
        }
      }
    });
  }
  render() {
    if (!this.root) {
      return;
    }
    this.root.render(/* @__PURE__ */ jsx(Reset, {
      complete: false,
      children: /* @__PURE__ */ jsx(PreviewItemWrapper, {
        title: this.dataset.name,
        onDelete: this.handleDelete,
        onAdd: this.handleAdd,
        isFocused: this.isFocused,
        style: {
          position: "absolute",
          inset: 0
        },
        onClick: this.onWrapperClick,
        onMove: this.handleMove
      })
    }));
  }
  connectedCallback() {
    this.style.setProperty("position", "relative");
    this.style.setProperty("display", "block");
    window.addEventListener("message", this.onFocusChange);
    const div2 = document.createElement("div");
    this.appendChild(div2);
    this.root = createRoot(div2);
    this.render();
  }
  disconnectedCallback() {
    window.removeEventListener("message", this.onFocusChange);
  }
}
class AddButton extends (isClientSide() ? HTMLElement : class {
}) {
  connectedCallback() {
    const div2 = document.createElement("div");
    this.appendChild(div2);
    const referrer = new URL(document.location.toString()).searchParams.get("referrer") ?? "";
    const onAddClick = (e3) => {
      e3.stopPropagation();
      e3.preventDefault();
      window.parent.postMessage({
        type: "ve-add",
        payload: {
          id: parseInt(this.dataset.index ?? "0")
        }
      }, referrer);
    };
    createRoot(div2).render(/* @__PURE__ */ jsx(Reset, {
      complete: true,
      children: /* @__PURE__ */ jsx(PreviewAddButton, {
        onClick: onAddClick
      })
    }));
  }
}
function useUniqId(prefix2 = "") {
  return reactExports.useMemo(() => prefix2 + uniqId(), []);
}
function defineField(args) {
  return (name, options = {}) => {
    const fieldArgs = typeof args === "function" ? args() : args;
    return {
      ...genericFieldDefinition(fieldArgs, options),
      ...fieldArgs,
      options: {
        ...fieldArgs.defaultOptions,
        ...options
      },
      name,
      group: false
    };
  };
}
function defineFieldGroup(args) {
  return (fields, options = {}) => {
    return {
      ...genericFieldDefinition(args, options),
      group: true,
      fields,
      render: args.render
    };
  };
}
function defaultFieldProperties() {
  return {
    conditions: [],
    shouldRender(data) {
      return this.conditions.filter((condition) => !condition(data)).length === 0;
    },
    when(fieldName, expectedValue = true) {
      return {
        ...this,
        conditions: [...this.conditions, (data) => {
          if (typeof expectedValue === "function") {
            return expectedValue(data[fieldName]);
          }
          return cast(data[fieldName], expectedValue) === expectedValue;
        }]
      };
    }
  };
}
function genericFieldDefinition(args, options) {
  return {
    options: {
      ...args.defaultOptions,
      ...options
    },
    ...defaultFieldProperties()
  };
}
const Component$c = ({
  value,
  onChange,
  options
}) => {
  const id = useUniqId("textinput");
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    type: options.multiline ? "textarea" : "text",
    id,
    value,
    onInput: (e3) => onChange(e3.target.value),
    help: options.help
  });
};
const Text$2 = defineField({
  defaultOptions: {
    default: ""
  },
  render: Component$c
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$b() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Component$b = ({
  value,
  onChange,
  options
}) => {
  const id = useUniqId("checkbox");
  return /* @__PURE__ */ jsx(Field$1, {
    help: options.help,
    children: /* @__PURE__ */ jsxs(Wrapper$2, {
      children: [/* @__PURE__ */ jsx(Input, {
        type: "checkbox",
        id,
        checked: value,
        onChange: () => onChange(!value)
      }), /* @__PURE__ */ jsx(Label, {
        htmlFor: id,
        children: options.label
      })]
    })
  });
};
const Checkbox = defineField({
  defaultOptions: {
    label: "",
    default: false
  },
  render: Component$b
});
const Wrapper$2 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1em4gv71"
} : {
  target: "e1em4gv71",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "8k1832",
  styles: "position:relative;display:flex"
} : {
  name: "8k1832",
  styles: "position:relative;display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9DaGVja2JveC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUNnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvQ2hlY2tib3gudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlVW5pcUlkIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVVuaXFJZCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw6IHN0cmluZ1xuICBoZWxwPzogc3RyaW5nXG4gIGRlZmF1bHQ/OiBib29sZWFuXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBib29sZWFuPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgaWQgPSB1c2VVbmlxSWQoJ2NoZWNrYm94JylcbiAgcmV0dXJuIChcbiAgICA8RmllbGQgaGVscD17b3B0aW9ucy5oZWxwfT5cbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICA8SW5wdXRcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICBjaGVja2VkPXt2YWx1ZX1cbiAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gb25DaGFuZ2UoIXZhbHVlKX1cbiAgICAgICAgLz5cbiAgICAgICAgPExhYmVsIGh0bWxGb3I9e2lkfT57b3B0aW9ucy5sYWJlbH08L0xhYmVsPlxuICAgICAgPC9XcmFwcGVyPlxuICAgIDwvRmllbGQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IENoZWNrYm94ID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBib29sZWFuPih7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgbGFiZWw6ICcnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pXG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdmbGV4Jyxcbn0pXG5cbmNvbnN0IElucHV0ID0gc3R5bGVkKCdpbnB1dCcsIHsgdGFyZ2V0OiAndmUtY2hlY2tib3gtaW5wdXQnIH0pKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGluc2V0OiAwLFxuICBvcGFjaXR5OiAwLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgekluZGV4OiA1LFxufSlcblxuY29uc3QgTGFiZWwgPSBzdHlsZWQubGFiZWwoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgbGluZUhlaWdodDogMSxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICB3aWR0aDogJzM4cHgnLFxuICAgIGhlaWdodDogJzIwcHgnLFxuICAgIGJvcmRlcjogJ3NvbGlkIDFweCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBib3JkZXJSYWRpdXM6ICcxOHB4JyxcbiAgICBtYXJnaW5SaWdodDogJy41ZW0nLFxuICAgIHRyYW5zaXRpb246ICcuM3MnLFxuICB9LFxuICAnJjo6YWZ0ZXInOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgY29udGVudDogXCInJ1wiLFxuICAgIHRvcDogJzJweCcsXG4gICAgbGVmdDogJzJweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMTZweCcsXG4gICAgd2lkdGg6ICcxNnB4JyxcbiAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxuICAgIHRyYW5zaXRpb246ICcuM3MnLFxuICB9LFxuICBbYCR7SW5wdXR9OmNoZWNrZWQgKyAmOjpiZWZvcmVgXToge1xuICAgIGJvcmRlckNvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgfSxcbiAgW2Ake0lucHV0fTpmb2N1cyArICY6OmJlZm9yZWBdOiB7XG4gICAgb3V0bGluZTogJzAnLFxuICAgIGJveFNoYWRvdzogJzAgMCAwIDAuMjVyZW0gcmdiKDIzIDExMyAyMzAgLyAyNSUpJyxcbiAgfSxcbiAgW2Ake0lucHV0fTpjaGVja2VkICsgJjo6YWZ0ZXJgXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJyNGRkYnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTdweCknLFxuICB9LFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$b
});
const Input = /* @__PURE__ */ createStyled("input", process.env.NODE_ENV === "production" ? {
  target: "ve-checkbox-input"
} : {
  target: "ve-checkbox-input",
  label: "Input"
})(process.env.NODE_ENV === "production" ? {
  name: "zr2kbf",
  styles: "position:absolute;inset:0;opacity:0;cursor:pointer;z-index:5"
} : {
  name: "zr2kbf",
  styles: "position:absolute;inset:0;opacity:0;cursor:pointer;z-index:5",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9DaGVja2JveC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOENjIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9DaGVja2JveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VVbmlxSWQgfSBmcm9tICdzcmMvaG9va3MvdXNlVW5pcUlkJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbDogc3RyaW5nXG4gIGhlbHA/OiBzdHJpbmdcbiAgZGVmYXVsdD86IGJvb2xlYW5cbn1cblxuY29uc3QgQ29tcG9uZW50OiBGaWVsZENvbXBvbmVudDxGaWVsZEFyZ3MsIGJvb2xlYW4+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICBjb25zdCBpZCA9IHVzZVVuaXFJZCgnY2hlY2tib3gnKVxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBoZWxwPXtvcHRpb25zLmhlbHB9PlxuICAgICAgPFdyYXBwZXI+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGNoZWNrZWQ9e3ZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiBvbkNoYW5nZSghdmFsdWUpfVxuICAgICAgICAvPlxuICAgICAgICA8TGFiZWwgaHRtbEZvcj17aWR9PntvcHRpb25zLmxhYmVsfTwvTGFiZWw+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgQ2hlY2tib3ggPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIGJvb2xlYW4+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBsYWJlbDogJycsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIHJlbmRlcjogQ29tcG9uZW50LFxufSlcblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxufSlcblxuY29uc3QgSW5wdXQgPSBzdHlsZWQoJ2lucHV0JywgeyB0YXJnZXQ6ICd2ZS1jaGVja2JveC1pbnB1dCcgfSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgaW5zZXQ6IDAsXG4gIG9wYWNpdHk6IDAsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB6SW5kZXg6IDUsXG59KVxuXG5jb25zdCBMYWJlbCA9IHN0eWxlZC5sYWJlbCh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBsaW5lSGVpZ2h0OiAxLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgY29udGVudDogXCInJ1wiLFxuICAgIHdpZHRoOiAnMzhweCcsXG4gICAgaGVpZ2h0OiAnMjBweCcsXG4gICAgYm9yZGVyOiAnc29saWQgMXB4IHZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICAgIGJvcmRlclJhZGl1czogJzE4cHgnLFxuICAgIG1hcmdpblJpZ2h0OiAnLjVlbScsXG4gICAgdHJhbnNpdGlvbjogJy4zcycsXG4gIH0sXG4gICcmOjphZnRlcic6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgdG9wOiAnMnB4JyxcbiAgICBsZWZ0OiAnMnB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICcxNnB4JyxcbiAgICB3aWR0aDogJzE2cHgnLFxuICAgIGhlaWdodDogJzE2cHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG4gICAgdHJhbnNpdGlvbjogJy4zcycsXG4gIH0sXG4gIFtgJHtJbnB1dH06Y2hlY2tlZCArICY6OmJlZm9yZWBdOiB7XG4gICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICB9LFxuICBbYCR7SW5wdXR9OmZvY3VzICsgJjo6YmVmb3JlYF06IHtcbiAgICBvdXRsaW5lOiAnMCcsXG4gICAgYm94U2hhZG93OiAnMCAwIDAgMC4yNXJlbSByZ2IoMjMgMTEzIDIzMCAvIDI1JSknLFxuICB9LFxuICBbYCR7SW5wdXR9OmNoZWNrZWQgKyAmOjphZnRlcmBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRicsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxN3B4KScsXG4gIH0sXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$b
});
const Label = /* @__PURE__ */ createStyled("label", process.env.NODE_ENV === "production" ? {
  target: "e1em4gv70"
} : {
  target: "e1em4gv70",
  label: "Label"
})({
  display: "flex",
  alignItems: "center",
  cursor: "pointer",
  lineHeight: 1,
  "&::before": {
    cursor: "pointer",
    display: "block",
    content: "''",
    width: "38px",
    height: "20px",
    border: "solid 1px var(--ve-field-border)",
    borderRadius: "18px",
    marginRight: ".5em",
    transition: ".3s"
  },
  "&::after": {
    position: "absolute",
    content: "''",
    top: "2px",
    left: "2px",
    borderRadius: "16px",
    width: "16px",
    height: "16px",
    backgroundColor: "var(--ve-color-light)",
    transition: ".3s"
  },
  [`${Input}:checked + &::before`]: {
    borderColor: "var(--ve-primary)",
    backgroundColor: "var(--ve-primary)"
  },
  [`${Input}:focus + &::before`]: {
    outline: "0",
    boxShadow: "0 0 0 0.25rem rgb(23 113 230 / 25%)"
  },
  [`${Input}:checked + &::after`]: {
    backgroundColor: "#FFF",
    transform: "translateX(17px)"
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9DaGVja2JveC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0RjIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9DaGVja2JveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VVbmlxSWQgfSBmcm9tICdzcmMvaG9va3MvdXNlVW5pcUlkJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbDogc3RyaW5nXG4gIGhlbHA/OiBzdHJpbmdcbiAgZGVmYXVsdD86IGJvb2xlYW5cbn1cblxuY29uc3QgQ29tcG9uZW50OiBGaWVsZENvbXBvbmVudDxGaWVsZEFyZ3MsIGJvb2xlYW4+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICBjb25zdCBpZCA9IHVzZVVuaXFJZCgnY2hlY2tib3gnKVxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBoZWxwPXtvcHRpb25zLmhlbHB9PlxuICAgICAgPFdyYXBwZXI+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGNoZWNrZWQ9e3ZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiBvbkNoYW5nZSghdmFsdWUpfVxuICAgICAgICAvPlxuICAgICAgICA8TGFiZWwgaHRtbEZvcj17aWR9PntvcHRpb25zLmxhYmVsfTwvTGFiZWw+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgQ2hlY2tib3ggPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIGJvb2xlYW4+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBsYWJlbDogJycsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIHJlbmRlcjogQ29tcG9uZW50LFxufSlcblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxufSlcblxuY29uc3QgSW5wdXQgPSBzdHlsZWQoJ2lucHV0JywgeyB0YXJnZXQ6ICd2ZS1jaGVja2JveC1pbnB1dCcgfSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgaW5zZXQ6IDAsXG4gIG9wYWNpdHk6IDAsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB6SW5kZXg6IDUsXG59KVxuXG5jb25zdCBMYWJlbCA9IHN0eWxlZC5sYWJlbCh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBsaW5lSGVpZ2h0OiAxLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgY29udGVudDogXCInJ1wiLFxuICAgIHdpZHRoOiAnMzhweCcsXG4gICAgaGVpZ2h0OiAnMjBweCcsXG4gICAgYm9yZGVyOiAnc29saWQgMXB4IHZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICAgIGJvcmRlclJhZGl1czogJzE4cHgnLFxuICAgIG1hcmdpblJpZ2h0OiAnLjVlbScsXG4gICAgdHJhbnNpdGlvbjogJy4zcycsXG4gIH0sXG4gICcmOjphZnRlcic6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgdG9wOiAnMnB4JyxcbiAgICBsZWZ0OiAnMnB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICcxNnB4JyxcbiAgICB3aWR0aDogJzE2cHgnLFxuICAgIGhlaWdodDogJzE2cHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG4gICAgdHJhbnNpdGlvbjogJy4zcycsXG4gIH0sXG4gIFtgJHtJbnB1dH06Y2hlY2tlZCArICY6OmJlZm9yZWBdOiB7XG4gICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxuICB9LFxuICBbYCR7SW5wdXR9OmZvY3VzICsgJjo6YmVmb3JlYF06IHtcbiAgICBvdXRsaW5lOiAnMCcsXG4gICAgYm94U2hhZG93OiAnMCAwIDAgMC4yNXJlbSByZ2IoMjMgMTEzIDIzMCAvIDI1JSknLFxuICB9LFxuICBbYCR7SW5wdXR9OmNoZWNrZWQgKyAmOjphZnRlcmBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRicsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxN3B4KScsXG4gIH0sXG59KVxuIl19 */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$a() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Wrapper$1 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "enln8hr3"
} : {
  target: "enln8hr3",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1908g4q",
  styles: "display:flex;flex-direction:column;background-color:#fff;border:1px solid rgba(0,0,0,0.06);box-shadow:0 1px 2px 0 rgba(0,0,0,0.05)"
} : {
  name: "1908g4q",
  styles: "display:flex;flex-direction:column;background-color:#fff;border:1px solid rgba(0,0,0,0.06);box-shadow:0 1px 2px 0 rgba(0,0,0,0.05)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SZXBlYXRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUNnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvUmVwZWF0ZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQsIEZpZWxkRGVmaW5pdGlvbiB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IGRlZXBTZXQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL29iamVjdCdcbmltcG9ydCB7IG1vdmVJdGVtIH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9hcnJheSdcbmltcG9ydCB7IHRleHRDb250ZW50LCB1bmlxSWQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL3N0cmluZydcbmltcG9ydCB7IFNvcnRhYmxlLCBTb3J0YWJsZVdyYXBwZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Tb3J0YWJsZSdcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJ3NyYy9ob29rcy91c2VUb2dnbGUnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyBmaWxsRGVmYXVsdHMgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2ZpZWxkcydcbmltcG9ydCB7XG4gIEJ1dHRvbixcbiAgQnV0dG9uSWNvbixcbiAgRmllbGQsXG4gIEljb25DaXJjbGVQbHVzLFxuICBJY29uRG93bixcbiAgSWNvblRyYXNoLFxufSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IFNpZGViYXJIZWFkaW5nIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGluZydcbmltcG9ydCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5pbXBvcnQgeyB0IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9pMThuJ1xuaW1wb3J0IHsgRmllbGRzUmVuZGVyZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL0ZpZWxkc1JlbmRlcmVyJ1xuXG50eXBlIEZpZWxkVmFsdWUgPSBSZXBlYXRlckxpbmVbXVxuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgbWluPzogbnVtYmVyXG4gIG1heD86IG51bWJlclxuICBhZGRMYWJlbD86IHN0cmluZ1xuICBmaWVsZHM6IEZpZWxkRGVmaW5pdGlvbjxhbnksIGFueT5bXVxuICBjb2xsYXBzZWQ/OiBzdHJpbmdcbiAgZGVmYXVsdD86IEZpZWxkVmFsdWVcbn1cblxudHlwZSBSZXBlYXRlckxpbmUgPSB7IF9pZDogc3RyaW5nOyBba2V5OiBzdHJpbmddOiB1bmtub3duIH1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgYm9yZGVyOiAnMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4wNiknLFxuICBib3hTaGFkb3c6ICcwIDFweCAycHggMCByZ2JhKDAsMCwwLDAuMDUpJyxcbn0pXG5cbmNvbnN0IEl0ZW0gPSBzdHlsZWQoU29ydGFibGUpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG4gIGdhcDogJy41ZW0nLFxuICBwYWRkaW5nOiAnLjRyZW0gLjdyZW0gLjRyZW0gY2FsYygxMHB4ICsgLjdyZW0pJyxcbiAgYm9yZGVyQm90dG9tOiAnc29saWQgMXB4IHJnYmEoMCwwLDAsMC4wNiknLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbn0pXG5cbmNvbnN0IEl0ZW1Cb2R5ID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG4gIGdhcDogJzFlbScsXG59KVxuXG5jb25zdCBGb290ZXIgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgcGFkZGluZzogJy4ycmVtJyxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjAzKScsXG59KVxuXG5jb25zdCBDb21wb25lbnQ6IEZpZWxkQ29tcG9uZW50PEZpZWxkQXJncywgRmllbGRWYWx1ZT4gPSAoe1xuICB2YWx1ZTogdmFsdWVQcm9wcyxcbiAgb25DaGFuZ2UsXG4gIG9wdGlvbnMsXG59KSA9PiB7XG4gIGNvbnN0IHZhbHVlOiBSZXBlYXRlckxpbmVbXSA9IHZhbHVlUHJvcHMgPz8gW11cbiAgY29uc3QgY2FuQWRkID0gIW9wdGlvbnMubWF4IHx8IHZhbHVlLmxlbmd0aCA8IG9wdGlvbnMubWF4XG4gIGNvbnN0IGNhblJlbW92ZSA9ICFvcHRpb25zLm1pbiB8fCB2YWx1ZS5sZW5ndGggPiBvcHRpb25zLm1pblxuICBjb25zdCBbbGFzdEFkZGl0aW9uSW5kZXgsIHNldExhc3RBZGRpdGlvbkluZGV4XSA9IHVzZVN0YXRlKC0xKVxuXG4gIGNvbnN0IGFkZCA9ICgpID0+IHtcbiAgICBvbkNoYW5nZShbXG4gICAgICAuLi52YWx1ZSxcbiAgICAgIGZpbGxEZWZhdWx0cyh7IF9pZDogdW5pcUlkKCkgfSwgb3B0aW9ucy5maWVsZHMpIGFzIFJlcGVhdGVyTGluZSxcbiAgICBdKVxuICAgIHNldExhc3RBZGRpdGlvbkluZGV4KHZhbHVlLmxlbmd0aClcbiAgfVxuXG4gIGNvbnN0IHJlbW92ZSA9IChsaW5lOiBPYmplY3QpID0+IHtcbiAgICBvbkNoYW5nZSh2YWx1ZS5maWx0ZXIoKHYpID0+IHYgIT09IGxpbmUpKVxuICB9XG5cbiAgY29uc3QgdXBkYXRlUHJvcGVydHkgPSAodjogdW5rbm93biwgcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgb25DaGFuZ2UoZGVlcFNldCh2YWx1ZSwgcGF0aCwgdikpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNb3ZlKGZyb206IG51bWJlciwgdG86IG51bWJlcikge1xuICAgIG9uQ2hhbmdlKG1vdmVJdGVtKHZhbHVlLCBmcm9tLCB0bykpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD17b3B0aW9ucy5sYWJlbH0+XG4gICAgICA8U29ydGFibGVXcmFwcGVyIGl0ZW1zPXt2YWx1ZX0gb25Nb3ZlPXtoYW5kbGVNb3ZlfT5cbiAgICAgICAgPFdyYXBwZXI+XG4gICAgICAgICAge3ZhbHVlLm1hcCgobGluZSwgaykgPT4gKFxuICAgICAgICAgICAgPEZpZWxkTGluZVxuICAgICAgICAgICAgICBrZXk9e2xpbmUuX2lkfVxuICAgICAgICAgICAgICBsaW5lPXtsaW5lfVxuICAgICAgICAgICAgICBpbmRleD17a31cbiAgICAgICAgICAgICAgb25VcGRhdGU9e3VwZGF0ZVByb3BlcnR5fVxuICAgICAgICAgICAgICBvblJlbW92ZT17Y2FuUmVtb3ZlID8gcmVtb3ZlIDogbnVsbH1cbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICAgICAgZGVmYXVsdENvbGxhcHNlZD17bGFzdEFkZGl0aW9uSW5kZXggIT09IGt9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICAgIHtjYW5BZGQgJiYgKFxuICAgICAgICAgICAgPEZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBzZWNvbmRhcnkgb25DbGljaz17cHJldmVudChhZGQpfSBpY29uPXtJY29uQ2lyY2xlUGx1c30+XG4gICAgICAgICAgICAgICAge29wdGlvbnMuYWRkTGFiZWx9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Gb290ZXI+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9XcmFwcGVyPlxuICAgICAgPC9Tb3J0YWJsZVdyYXBwZXI+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5jb25zdCBGaWVsZExpbmU6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbGluZTogUmVwZWF0ZXJMaW5lXG4gIGluZGV4OiBudW1iZXJcbiAgb25SZW1vdmU6IG51bGwgfCAoKGxpbmU6IFJlcGVhdGVyTGluZSkgPT4gdm9pZClcbiAgb25VcGRhdGU6ICh2OiB1bmtub3duLCBwYXRoOiBzdHJpbmcpID0+IHZvaWRcbiAgb3B0aW9uczogRmllbGRBcmdzXG4gIGRlZmF1bHRDb2xsYXBzZWQ6IGJvb2xlYW5cbn0+ID0gKHsgbGluZSwgaW5kZXgsIG9uUmVtb3ZlLCBvblVwZGF0ZSwgb3B0aW9ucywgZGVmYXVsdENvbGxhcHNlZCB9KSA9PiB7XG4gIGNvbnN0IFtjb2xsYXBzZWQsIHRvZ2dsZUNvbGxhcHNlZF0gPSB1c2VUb2dnbGUoZGVmYXVsdENvbGxhcHNlZClcblxuICBjb25zdCB0aXRsZSA9IG9wdGlvbnMuY29sbGFwc2VkXG4gICAgPyAobGluZVtvcHRpb25zLmNvbGxhcHNlZF0gYXMgc3RyaW5nKVxuICAgIDogYCMke2luZGV4ICsgMX1gXG4gIGNvbnN0IGVzY2FwZWRUaXRsZSA9IHVzZU1lbW8oKCkgPT4gdGV4dENvbnRlbnQodGl0bGUpLCBbdGl0bGVdKVxuXG4gIHJldHVybiAoXG4gICAgPEl0ZW0gaXRlbT17bGluZX0+XG4gICAgICA8U2lkZWJhckhlYWRpbmcgb25DbGljaz17cHJldmVudCh0b2dnbGVDb2xsYXBzZWQpfSB0aXRsZT17ZXNjYXBlZFRpdGxlfT5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nLkhvdmVyPlxuICAgICAgICAgIHtvblJlbW92ZSAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgICAgICBkYW5nZXJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25SZW1vdmUobGluZSl9XG4gICAgICAgICAgICAgIHRpdGxlPXt0KCdkZWxldGVJdGVtJyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxJY29uVHJhc2ggc2l6ZT17MjB9IC8+XG4gICAgICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TaWRlYmFySGVhZGluZy5Ib3Zlcj5cbiAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICByb3RhdGU9e2NvbGxhcHNlZCA/IC05MCA6IDB9XG4gICAgICAgICAgb25DbGljaz17cHJldmVudCh0b2dnbGVDb2xsYXBzZWQpfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb25Eb3duIHNpemU9ezI0fSAvPlxuICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICA8L1NpZGViYXJIZWFkaW5nPlxuICAgICAgeyFjb2xsYXBzZWQgJiYgKFxuICAgICAgICA8SXRlbUJvZHk+XG4gICAgICAgICAgPEZpZWxkc1JlbmRlcmVyXG4gICAgICAgICAgICBmaWVsZHM9e29wdGlvbnMuZmllbGRzfVxuICAgICAgICAgICAgZGF0YT17bGluZX1cbiAgICAgICAgICAgIG9uVXBkYXRlPXtvblVwZGF0ZX1cbiAgICAgICAgICAgIHBhdGg9e2luZGV4LnRvU3RyaW5nKCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9JdGVtQm9keT5cbiAgICAgICl9XG4gICAgPC9JdGVtPlxuICApXG59XG5cbmV4cG9ydCBjb25zdCBSZXBlYXRlciA9IGRlZmluZUZpZWxkPEZpZWxkQXJncywgRmllbGRWYWx1ZT4oKCkgPT4gKHtcbiAgZGVmYXVsdE9wdGlvbnM6IHsgYWRkTGFiZWw6IHQoJ2FkZEl0ZW0nKSwgZmllbGRzOiBbXSwgZGVmYXVsdDogW10gfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$a
});
const Item$1 = /* @__PURE__ */ createStyled(Sortable, process.env.NODE_ENV === "production" ? {
  target: "enln8hr2"
} : {
  target: "enln8hr2",
  label: "Item"
})(process.env.NODE_ENV === "production" ? {
  name: "3wafdo",
  styles: "position:relative;display:grid;grid-template-columns:1fr;gap:.5em;padding:.4rem .7rem .4rem calc(10px + .7rem);border-bottom:solid 1px rgba(0,0,0,0.06);background-color:#fff"
} : {
  name: "3wafdo",
  styles: "position:relative;display:grid;grid-template-columns:1fr;gap:.5em;padding:.4rem .7rem .4rem calc(10px + .7rem);border-bottom:solid 1px rgba(0,0,0,0.06);background-color:#fff",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SZXBlYXRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkNhIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SZXBlYXRlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCwgRmllbGREZWZpbml0aW9uIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgZGVlcFNldCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvb2JqZWN0J1xuaW1wb3J0IHsgbW92ZUl0ZW0gfSBmcm9tICdzcmMvZnVuY3Rpb25zL2FycmF5J1xuaW1wb3J0IHsgdGV4dENvbnRlbnQsIHVuaXFJZCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvc3RyaW5nJ1xuaW1wb3J0IHsgU29ydGFibGUsIFNvcnRhYmxlV3JhcHBlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1NvcnRhYmxlJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVRvZ2dsZSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IGZpbGxEZWZhdWx0cyB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZmllbGRzJ1xuaW1wb3J0IHtcbiAgQnV0dG9uLFxuICBCdXR0b25JY29uLFxuICBGaWVsZCxcbiAgSWNvbkNpcmNsZVBsdXMsXG4gIEljb25Eb3duLFxuICBJY29uVHJhc2gsXG59IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHsgU2lkZWJhckhlYWRpbmcgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJIZWFkaW5nJ1xuaW1wb3J0IHsgRnVuY3Rpb25Db21wb25lbnQsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5pbXBvcnQgeyBGaWVsZHNSZW5kZXJlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1NpZGViYXIvRmllbGRzUmVuZGVyZXInXG5cbnR5cGUgRmllbGRWYWx1ZSA9IFJlcGVhdGVyTGluZVtdXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBtaW4/OiBudW1iZXJcbiAgbWF4PzogbnVtYmVyXG4gIGFkZExhYmVsPzogc3RyaW5nXG4gIGZpZWxkczogRmllbGREZWZpbml0aW9uPGFueSwgYW55PltdXG4gIGNvbGxhcHNlZD86IHN0cmluZ1xuICBkZWZhdWx0PzogRmllbGRWYWx1ZVxufVxuXG50eXBlIFJlcGVhdGVyTGluZSA9IHsgX2lkOiBzdHJpbmc7IFtrZXk6IHN0cmluZ106IHVua25vd24gfVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICBib3JkZXI6ICcxcHggc29saWQgcmdiYSgwLDAsMCwwLjA2KScsXG4gIGJveFNoYWRvdzogJzAgMXB4IDJweCAwIHJnYmEoMCwwLDAsMC4wNSknLFxufSlcblxuY29uc3QgSXRlbSA9IHN0eWxlZChTb3J0YWJsZSkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMWZyJyxcbiAgZ2FwOiAnLjVlbScsXG4gIHBhZGRpbmc6ICcuNHJlbSAuN3JlbSAuNHJlbSBjYWxjKDEwcHggKyAuN3JlbSknLFxuICBib3JkZXJCb3R0b206ICdzb2xpZCAxcHggcmdiYSgwLDAsMCwwLjA2KScsXG4gIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxufSlcblxuY29uc3QgSXRlbUJvZHkgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMWZyJyxcbiAgZ2FwOiAnMWVtJyxcbn0pXG5cbmNvbnN0IEZvb3RlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICBwYWRkaW5nOiAnLjJyZW0nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMDMpJyxcbn0pXG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBGaWVsZFZhbHVlPiA9ICh7XG4gIHZhbHVlOiB2YWx1ZVByb3BzLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgdmFsdWU6IFJlcGVhdGVyTGluZVtdID0gdmFsdWVQcm9wcyA/PyBbXVxuICBjb25zdCBjYW5BZGQgPSAhb3B0aW9ucy5tYXggfHwgdmFsdWUubGVuZ3RoIDwgb3B0aW9ucy5tYXhcbiAgY29uc3QgY2FuUmVtb3ZlID0gIW9wdGlvbnMubWluIHx8IHZhbHVlLmxlbmd0aCA+IG9wdGlvbnMubWluXG4gIGNvbnN0IFtsYXN0QWRkaXRpb25JbmRleCwgc2V0TGFzdEFkZGl0aW9uSW5kZXhdID0gdXNlU3RhdGUoLTEpXG5cbiAgY29uc3QgYWRkID0gKCkgPT4ge1xuICAgIG9uQ2hhbmdlKFtcbiAgICAgIC4uLnZhbHVlLFxuICAgICAgZmlsbERlZmF1bHRzKHsgX2lkOiB1bmlxSWQoKSB9LCBvcHRpb25zLmZpZWxkcykgYXMgUmVwZWF0ZXJMaW5lLFxuICAgIF0pXG4gICAgc2V0TGFzdEFkZGl0aW9uSW5kZXgodmFsdWUubGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgcmVtb3ZlID0gKGxpbmU6IE9iamVjdCkgPT4ge1xuICAgIG9uQ2hhbmdlKHZhbHVlLmZpbHRlcigodikgPT4gdiAhPT0gbGluZSkpXG4gIH1cblxuICBjb25zdCB1cGRhdGVQcm9wZXJ0eSA9ICh2OiB1bmtub3duLCBwYXRoOiBzdHJpbmcpID0+IHtcbiAgICBvbkNoYW5nZShkZWVwU2V0KHZhbHVlLCBwYXRoLCB2KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1vdmUoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG4gICAgb25DaGFuZ2UobW92ZUl0ZW0odmFsdWUsIGZyb20sIHRvKSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEZpZWxkIGxhYmVsPXtvcHRpb25zLmxhYmVsfT5cbiAgICAgIDxTb3J0YWJsZVdyYXBwZXIgaXRlbXM9e3ZhbHVlfSBvbk1vdmU9e2hhbmRsZU1vdmV9PlxuICAgICAgICA8V3JhcHBlcj5cbiAgICAgICAgICB7dmFsdWUubWFwKChsaW5lLCBrKSA9PiAoXG4gICAgICAgICAgICA8RmllbGRMaW5lXG4gICAgICAgICAgICAgIGtleT17bGluZS5faWR9XG4gICAgICAgICAgICAgIGxpbmU9e2xpbmV9XG4gICAgICAgICAgICAgIGluZGV4PXtrfVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dXBkYXRlUHJvcGVydHl9XG4gICAgICAgICAgICAgIG9uUmVtb3ZlPXtjYW5SZW1vdmUgPyByZW1vdmUgOiBudWxsfVxuICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgICAgICBkZWZhdWx0Q29sbGFwc2VkPXtsYXN0QWRkaXRpb25JbmRleCAhPT0ga31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgICAge2NhbkFkZCAmJiAoXG4gICAgICAgICAgICA8Rm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIHNlY29uZGFyeSBvbkNsaWNrPXtwcmV2ZW50KGFkZCl9IGljb249e0ljb25DaXJjbGVQbHVzfT5cbiAgICAgICAgICAgICAgICB7b3B0aW9ucy5hZGRMYWJlbH1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvb3Rlcj5cbiAgICAgICAgICApfVxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICA8L1NvcnRhYmxlV3JhcHBlcj5cbiAgICA8L0ZpZWxkPlxuICApXG59XG5cbmNvbnN0IEZpZWxkTGluZTogRnVuY3Rpb25Db21wb25lbnQ8e1xuICBsaW5lOiBSZXBlYXRlckxpbmVcbiAgaW5kZXg6IG51bWJlclxuICBvblJlbW92ZTogbnVsbCB8ICgobGluZTogUmVwZWF0ZXJMaW5lKSA9PiB2b2lkKVxuICBvblVwZGF0ZTogKHY6IHVua25vd24sIHBhdGg6IHN0cmluZykgPT4gdm9pZFxuICBvcHRpb25zOiBGaWVsZEFyZ3NcbiAgZGVmYXVsdENvbGxhcHNlZDogYm9vbGVhblxufT4gPSAoeyBsaW5lLCBpbmRleCwgb25SZW1vdmUsIG9uVXBkYXRlLCBvcHRpb25zLCBkZWZhdWx0Q29sbGFwc2VkIH0pID0+IHtcbiAgY29uc3QgW2NvbGxhcHNlZCwgdG9nZ2xlQ29sbGFwc2VkXSA9IHVzZVRvZ2dsZShkZWZhdWx0Q29sbGFwc2VkKVxuXG4gIGNvbnN0IHRpdGxlID0gb3B0aW9ucy5jb2xsYXBzZWRcbiAgICA/IChsaW5lW29wdGlvbnMuY29sbGFwc2VkXSBhcyBzdHJpbmcpXG4gICAgOiBgIyR7aW5kZXggKyAxfWBcbiAgY29uc3QgZXNjYXBlZFRpdGxlID0gdXNlTWVtbygoKSA9PiB0ZXh0Q29udGVudCh0aXRsZSksIFt0aXRsZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8SXRlbSBpdGVtPXtsaW5lfT5cbiAgICAgIDxTaWRlYmFySGVhZGluZyBvbkNsaWNrPXtwcmV2ZW50KHRvZ2dsZUNvbGxhcHNlZCl9IHRpdGxlPXtlc2NhcGVkVGl0bGV9PlxuICAgICAgICA8U2lkZWJhckhlYWRpbmcuSG92ZXI+XG4gICAgICAgICAge29uUmVtb3ZlICYmIChcbiAgICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICAgIGRhbmdlclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblJlbW92ZShsaW5lKX1cbiAgICAgICAgICAgICAgdGl0bGU9e3QoJ2RlbGV0ZUl0ZW0nKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsyMH0gLz5cbiAgICAgICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NpZGViYXJIZWFkaW5nLkhvdmVyPlxuICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgIHJvdGF0ZT17Y29sbGFwc2VkID8gLTkwIDogMH1cbiAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KHRvZ2dsZUNvbGxhcHNlZCl9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbkRvd24gc2l6ZT17MjR9IC8+XG4gICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgIDwvU2lkZWJhckhlYWRpbmc+XG4gICAgICB7IWNvbGxhcHNlZCAmJiAoXG4gICAgICAgIDxJdGVtQm9keT5cbiAgICAgICAgICA8RmllbGRzUmVuZGVyZXJcbiAgICAgICAgICAgIGZpZWxkcz17b3B0aW9ucy5maWVsZHN9XG4gICAgICAgICAgICBkYXRhPXtsaW5lfVxuICAgICAgICAgICAgb25VcGRhdGU9e29uVXBkYXRlfVxuICAgICAgICAgICAgcGF0aD17aW5kZXgudG9TdHJpbmcoKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0l0ZW1Cb2R5PlxuICAgICAgKX1cbiAgICA8L0l0ZW0+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IFJlcGVhdGVyID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBGaWVsZFZhbHVlPigoKSA9PiAoe1xuICBkZWZhdWx0T3B0aW9uczogeyBhZGRMYWJlbDogdCgnYWRkSXRlbScpLCBmaWVsZHM6IFtdLCBkZWZhdWx0OiBbXSB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pKVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$a
});
const ItemBody = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "enln8hr1"
} : {
  target: "enln8hr1",
  label: "ItemBody"
})(process.env.NODE_ENV === "production" ? {
  name: "t117un",
  styles: "display:grid;grid-template-columns:1fr;gap:1em"
} : {
  name: "t117un",
  styles: "display:grid;grid-template-columns:1fr;gap:1em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SZXBlYXRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdURpQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvUmVwZWF0ZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQsIEZpZWxkRGVmaW5pdGlvbiB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IGRlZXBTZXQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL29iamVjdCdcbmltcG9ydCB7IG1vdmVJdGVtIH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9hcnJheSdcbmltcG9ydCB7IHRleHRDb250ZW50LCB1bmlxSWQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL3N0cmluZydcbmltcG9ydCB7IFNvcnRhYmxlLCBTb3J0YWJsZVdyYXBwZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Tb3J0YWJsZSdcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJ3NyYy9ob29rcy91c2VUb2dnbGUnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyBmaWxsRGVmYXVsdHMgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2ZpZWxkcydcbmltcG9ydCB7XG4gIEJ1dHRvbixcbiAgQnV0dG9uSWNvbixcbiAgRmllbGQsXG4gIEljb25DaXJjbGVQbHVzLFxuICBJY29uRG93bixcbiAgSWNvblRyYXNoLFxufSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IFNpZGViYXJIZWFkaW5nIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvU2lkZWJhci9TaWRlYmFySGVhZGluZydcbmltcG9ydCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5pbXBvcnQgeyB0IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9pMThuJ1xuaW1wb3J0IHsgRmllbGRzUmVuZGVyZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL0ZpZWxkc1JlbmRlcmVyJ1xuXG50eXBlIEZpZWxkVmFsdWUgPSBSZXBlYXRlckxpbmVbXVxuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgbWluPzogbnVtYmVyXG4gIG1heD86IG51bWJlclxuICBhZGRMYWJlbD86IHN0cmluZ1xuICBmaWVsZHM6IEZpZWxkRGVmaW5pdGlvbjxhbnksIGFueT5bXVxuICBjb2xsYXBzZWQ/OiBzdHJpbmdcbiAgZGVmYXVsdD86IEZpZWxkVmFsdWVcbn1cblxudHlwZSBSZXBlYXRlckxpbmUgPSB7IF9pZDogc3RyaW5nOyBba2V5OiBzdHJpbmddOiB1bmtub3duIH1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgYm9yZGVyOiAnMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4wNiknLFxuICBib3hTaGFkb3c6ICcwIDFweCAycHggMCByZ2JhKDAsMCwwLDAuMDUpJyxcbn0pXG5cbmNvbnN0IEl0ZW0gPSBzdHlsZWQoU29ydGFibGUpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG4gIGdhcDogJy41ZW0nLFxuICBwYWRkaW5nOiAnLjRyZW0gLjdyZW0gLjRyZW0gY2FsYygxMHB4ICsgLjdyZW0pJyxcbiAgYm9yZGVyQm90dG9tOiAnc29saWQgMXB4IHJnYmEoMCwwLDAsMC4wNiknLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbn0pXG5cbmNvbnN0IEl0ZW1Cb2R5ID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG4gIGdhcDogJzFlbScsXG59KVxuXG5jb25zdCBGb290ZXIgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgcGFkZGluZzogJy4ycmVtJyxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjAzKScsXG59KVxuXG5jb25zdCBDb21wb25lbnQ6IEZpZWxkQ29tcG9uZW50PEZpZWxkQXJncywgRmllbGRWYWx1ZT4gPSAoe1xuICB2YWx1ZTogdmFsdWVQcm9wcyxcbiAgb25DaGFuZ2UsXG4gIG9wdGlvbnMsXG59KSA9PiB7XG4gIGNvbnN0IHZhbHVlOiBSZXBlYXRlckxpbmVbXSA9IHZhbHVlUHJvcHMgPz8gW11cbiAgY29uc3QgY2FuQWRkID0gIW9wdGlvbnMubWF4IHx8IHZhbHVlLmxlbmd0aCA8IG9wdGlvbnMubWF4XG4gIGNvbnN0IGNhblJlbW92ZSA9ICFvcHRpb25zLm1pbiB8fCB2YWx1ZS5sZW5ndGggPiBvcHRpb25zLm1pblxuICBjb25zdCBbbGFzdEFkZGl0aW9uSW5kZXgsIHNldExhc3RBZGRpdGlvbkluZGV4XSA9IHVzZVN0YXRlKC0xKVxuXG4gIGNvbnN0IGFkZCA9ICgpID0+IHtcbiAgICBvbkNoYW5nZShbXG4gICAgICAuLi52YWx1ZSxcbiAgICAgIGZpbGxEZWZhdWx0cyh7IF9pZDogdW5pcUlkKCkgfSwgb3B0aW9ucy5maWVsZHMpIGFzIFJlcGVhdGVyTGluZSxcbiAgICBdKVxuICAgIHNldExhc3RBZGRpdGlvbkluZGV4KHZhbHVlLmxlbmd0aClcbiAgfVxuXG4gIGNvbnN0IHJlbW92ZSA9IChsaW5lOiBPYmplY3QpID0+IHtcbiAgICBvbkNoYW5nZSh2YWx1ZS5maWx0ZXIoKHYpID0+IHYgIT09IGxpbmUpKVxuICB9XG5cbiAgY29uc3QgdXBkYXRlUHJvcGVydHkgPSAodjogdW5rbm93biwgcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgb25DaGFuZ2UoZGVlcFNldCh2YWx1ZSwgcGF0aCwgdikpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNb3ZlKGZyb206IG51bWJlciwgdG86IG51bWJlcikge1xuICAgIG9uQ2hhbmdlKG1vdmVJdGVtKHZhbHVlLCBmcm9tLCB0bykpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD17b3B0aW9ucy5sYWJlbH0+XG4gICAgICA8U29ydGFibGVXcmFwcGVyIGl0ZW1zPXt2YWx1ZX0gb25Nb3ZlPXtoYW5kbGVNb3ZlfT5cbiAgICAgICAgPFdyYXBwZXI+XG4gICAgICAgICAge3ZhbHVlLm1hcCgobGluZSwgaykgPT4gKFxuICAgICAgICAgICAgPEZpZWxkTGluZVxuICAgICAgICAgICAgICBrZXk9e2xpbmUuX2lkfVxuICAgICAgICAgICAgICBsaW5lPXtsaW5lfVxuICAgICAgICAgICAgICBpbmRleD17a31cbiAgICAgICAgICAgICAgb25VcGRhdGU9e3VwZGF0ZVByb3BlcnR5fVxuICAgICAgICAgICAgICBvblJlbW92ZT17Y2FuUmVtb3ZlID8gcmVtb3ZlIDogbnVsbH1cbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICAgICAgZGVmYXVsdENvbGxhcHNlZD17bGFzdEFkZGl0aW9uSW5kZXggIT09IGt9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICAgIHtjYW5BZGQgJiYgKFxuICAgICAgICAgICAgPEZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBzZWNvbmRhcnkgb25DbGljaz17cHJldmVudChhZGQpfSBpY29uPXtJY29uQ2lyY2xlUGx1c30+XG4gICAgICAgICAgICAgICAge29wdGlvbnMuYWRkTGFiZWx9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Gb290ZXI+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9XcmFwcGVyPlxuICAgICAgPC9Tb3J0YWJsZVdyYXBwZXI+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5jb25zdCBGaWVsZExpbmU6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbGluZTogUmVwZWF0ZXJMaW5lXG4gIGluZGV4OiBudW1iZXJcbiAgb25SZW1vdmU6IG51bGwgfCAoKGxpbmU6IFJlcGVhdGVyTGluZSkgPT4gdm9pZClcbiAgb25VcGRhdGU6ICh2OiB1bmtub3duLCBwYXRoOiBzdHJpbmcpID0+IHZvaWRcbiAgb3B0aW9uczogRmllbGRBcmdzXG4gIGRlZmF1bHRDb2xsYXBzZWQ6IGJvb2xlYW5cbn0+ID0gKHsgbGluZSwgaW5kZXgsIG9uUmVtb3ZlLCBvblVwZGF0ZSwgb3B0aW9ucywgZGVmYXVsdENvbGxhcHNlZCB9KSA9PiB7XG4gIGNvbnN0IFtjb2xsYXBzZWQsIHRvZ2dsZUNvbGxhcHNlZF0gPSB1c2VUb2dnbGUoZGVmYXVsdENvbGxhcHNlZClcblxuICBjb25zdCB0aXRsZSA9IG9wdGlvbnMuY29sbGFwc2VkXG4gICAgPyAobGluZVtvcHRpb25zLmNvbGxhcHNlZF0gYXMgc3RyaW5nKVxuICAgIDogYCMke2luZGV4ICsgMX1gXG4gIGNvbnN0IGVzY2FwZWRUaXRsZSA9IHVzZU1lbW8oKCkgPT4gdGV4dENvbnRlbnQodGl0bGUpLCBbdGl0bGVdKVxuXG4gIHJldHVybiAoXG4gICAgPEl0ZW0gaXRlbT17bGluZX0+XG4gICAgICA8U2lkZWJhckhlYWRpbmcgb25DbGljaz17cHJldmVudCh0b2dnbGVDb2xsYXBzZWQpfSB0aXRsZT17ZXNjYXBlZFRpdGxlfT5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nLkhvdmVyPlxuICAgICAgICAgIHtvblJlbW92ZSAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgICAgICBkYW5nZXJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25SZW1vdmUobGluZSl9XG4gICAgICAgICAgICAgIHRpdGxlPXt0KCdkZWxldGVJdGVtJyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxJY29uVHJhc2ggc2l6ZT17MjB9IC8+XG4gICAgICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TaWRlYmFySGVhZGluZy5Ib3Zlcj5cbiAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICByb3RhdGU9e2NvbGxhcHNlZCA/IC05MCA6IDB9XG4gICAgICAgICAgb25DbGljaz17cHJldmVudCh0b2dnbGVDb2xsYXBzZWQpfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb25Eb3duIHNpemU9ezI0fSAvPlxuICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICA8L1NpZGViYXJIZWFkaW5nPlxuICAgICAgeyFjb2xsYXBzZWQgJiYgKFxuICAgICAgICA8SXRlbUJvZHk+XG4gICAgICAgICAgPEZpZWxkc1JlbmRlcmVyXG4gICAgICAgICAgICBmaWVsZHM9e29wdGlvbnMuZmllbGRzfVxuICAgICAgICAgICAgZGF0YT17bGluZX1cbiAgICAgICAgICAgIG9uVXBkYXRlPXtvblVwZGF0ZX1cbiAgICAgICAgICAgIHBhdGg9e2luZGV4LnRvU3RyaW5nKCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9JdGVtQm9keT5cbiAgICAgICl9XG4gICAgPC9JdGVtPlxuICApXG59XG5cbmV4cG9ydCBjb25zdCBSZXBlYXRlciA9IGRlZmluZUZpZWxkPEZpZWxkQXJncywgRmllbGRWYWx1ZT4oKCkgPT4gKHtcbiAgZGVmYXVsdE9wdGlvbnM6IHsgYWRkTGFiZWw6IHQoJ2FkZEl0ZW0nKSwgZmllbGRzOiBbXSwgZGVmYXVsdDogW10gfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$a
});
const Footer = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "enln8hr0"
} : {
  target: "enln8hr0",
  label: "Footer"
})(process.env.NODE_ENV === "production" ? {
  name: "12p1ehp",
  styles: "display:flex;justify-content:flex-end;padding:.2rem;background-color:rgba(0,0,0,0.03)"
} : {
  name: "12p1ehp",
  styles: "display:flex;justify-content:flex-end;padding:.2rem;background-color:rgba(0,0,0,0.03)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SZXBlYXRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkRlIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SZXBlYXRlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCwgRmllbGREZWZpbml0aW9uIH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgZGVlcFNldCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvb2JqZWN0J1xuaW1wb3J0IHsgbW92ZUl0ZW0gfSBmcm9tICdzcmMvZnVuY3Rpb25zL2FycmF5J1xuaW1wb3J0IHsgdGV4dENvbnRlbnQsIHVuaXFJZCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvc3RyaW5nJ1xuaW1wb3J0IHsgU29ydGFibGUsIFNvcnRhYmxlV3JhcHBlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1NvcnRhYmxlJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVRvZ2dsZSdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCB7IGZpbGxEZWZhdWx0cyB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZmllbGRzJ1xuaW1wb3J0IHtcbiAgQnV0dG9uLFxuICBCdXR0b25JY29uLFxuICBGaWVsZCxcbiAgSWNvbkNpcmNsZVBsdXMsXG4gIEljb25Eb3duLFxuICBJY29uVHJhc2gsXG59IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHsgU2lkZWJhckhlYWRpbmcgfSBmcm9tICdzcmMvY29tcG9uZW50cy9TaWRlYmFyL1NpZGViYXJIZWFkaW5nJ1xuaW1wb3J0IHsgRnVuY3Rpb25Db21wb25lbnQsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IHQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2kxOG4nXG5pbXBvcnQgeyBGaWVsZHNSZW5kZXJlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1NpZGViYXIvRmllbGRzUmVuZGVyZXInXG5cbnR5cGUgRmllbGRWYWx1ZSA9IFJlcGVhdGVyTGluZVtdXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBtaW4/OiBudW1iZXJcbiAgbWF4PzogbnVtYmVyXG4gIGFkZExhYmVsPzogc3RyaW5nXG4gIGZpZWxkczogRmllbGREZWZpbml0aW9uPGFueSwgYW55PltdXG4gIGNvbGxhcHNlZD86IHN0cmluZ1xuICBkZWZhdWx0PzogRmllbGRWYWx1ZVxufVxuXG50eXBlIFJlcGVhdGVyTGluZSA9IHsgX2lkOiBzdHJpbmc7IFtrZXk6IHN0cmluZ106IHVua25vd24gfVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdih7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICBib3JkZXI6ICcxcHggc29saWQgcmdiYSgwLDAsMCwwLjA2KScsXG4gIGJveFNoYWRvdzogJzAgMXB4IDJweCAwIHJnYmEoMCwwLDAsMC4wNSknLFxufSlcblxuY29uc3QgSXRlbSA9IHN0eWxlZChTb3J0YWJsZSkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMWZyJyxcbiAgZ2FwOiAnLjVlbScsXG4gIHBhZGRpbmc6ICcuNHJlbSAuN3JlbSAuNHJlbSBjYWxjKDEwcHggKyAuN3JlbSknLFxuICBib3JkZXJCb3R0b206ICdzb2xpZCAxcHggcmdiYSgwLDAsMCwwLjA2KScsXG4gIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxufSlcblxuY29uc3QgSXRlbUJvZHkgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnMWZyJyxcbiAgZ2FwOiAnMWVtJyxcbn0pXG5cbmNvbnN0IEZvb3RlciA9IHN0eWxlZC5kaXYoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICBwYWRkaW5nOiAnLjJyZW0nLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMDMpJyxcbn0pXG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBGaWVsZFZhbHVlPiA9ICh7XG4gIHZhbHVlOiB2YWx1ZVByb3BzLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgdmFsdWU6IFJlcGVhdGVyTGluZVtdID0gdmFsdWVQcm9wcyA/PyBbXVxuICBjb25zdCBjYW5BZGQgPSAhb3B0aW9ucy5tYXggfHwgdmFsdWUubGVuZ3RoIDwgb3B0aW9ucy5tYXhcbiAgY29uc3QgY2FuUmVtb3ZlID0gIW9wdGlvbnMubWluIHx8IHZhbHVlLmxlbmd0aCA+IG9wdGlvbnMubWluXG4gIGNvbnN0IFtsYXN0QWRkaXRpb25JbmRleCwgc2V0TGFzdEFkZGl0aW9uSW5kZXhdID0gdXNlU3RhdGUoLTEpXG5cbiAgY29uc3QgYWRkID0gKCkgPT4ge1xuICAgIG9uQ2hhbmdlKFtcbiAgICAgIC4uLnZhbHVlLFxuICAgICAgZmlsbERlZmF1bHRzKHsgX2lkOiB1bmlxSWQoKSB9LCBvcHRpb25zLmZpZWxkcykgYXMgUmVwZWF0ZXJMaW5lLFxuICAgIF0pXG4gICAgc2V0TGFzdEFkZGl0aW9uSW5kZXgodmFsdWUubGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgcmVtb3ZlID0gKGxpbmU6IE9iamVjdCkgPT4ge1xuICAgIG9uQ2hhbmdlKHZhbHVlLmZpbHRlcigodikgPT4gdiAhPT0gbGluZSkpXG4gIH1cblxuICBjb25zdCB1cGRhdGVQcm9wZXJ0eSA9ICh2OiB1bmtub3duLCBwYXRoOiBzdHJpbmcpID0+IHtcbiAgICBvbkNoYW5nZShkZWVwU2V0KHZhbHVlLCBwYXRoLCB2KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1vdmUoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG4gICAgb25DaGFuZ2UobW92ZUl0ZW0odmFsdWUsIGZyb20sIHRvKSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEZpZWxkIGxhYmVsPXtvcHRpb25zLmxhYmVsfT5cbiAgICAgIDxTb3J0YWJsZVdyYXBwZXIgaXRlbXM9e3ZhbHVlfSBvbk1vdmU9e2hhbmRsZU1vdmV9PlxuICAgICAgICA8V3JhcHBlcj5cbiAgICAgICAgICB7dmFsdWUubWFwKChsaW5lLCBrKSA9PiAoXG4gICAgICAgICAgICA8RmllbGRMaW5lXG4gICAgICAgICAgICAgIGtleT17bGluZS5faWR9XG4gICAgICAgICAgICAgIGxpbmU9e2xpbmV9XG4gICAgICAgICAgICAgIGluZGV4PXtrfVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dXBkYXRlUHJvcGVydHl9XG4gICAgICAgICAgICAgIG9uUmVtb3ZlPXtjYW5SZW1vdmUgPyByZW1vdmUgOiBudWxsfVxuICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgICAgICBkZWZhdWx0Q29sbGFwc2VkPXtsYXN0QWRkaXRpb25JbmRleCAhPT0ga31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgICAge2NhbkFkZCAmJiAoXG4gICAgICAgICAgICA8Rm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIHNlY29uZGFyeSBvbkNsaWNrPXtwcmV2ZW50KGFkZCl9IGljb249e0ljb25DaXJjbGVQbHVzfT5cbiAgICAgICAgICAgICAgICB7b3B0aW9ucy5hZGRMYWJlbH1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvb3Rlcj5cbiAgICAgICAgICApfVxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICA8L1NvcnRhYmxlV3JhcHBlcj5cbiAgICA8L0ZpZWxkPlxuICApXG59XG5cbmNvbnN0IEZpZWxkTGluZTogRnVuY3Rpb25Db21wb25lbnQ8e1xuICBsaW5lOiBSZXBlYXRlckxpbmVcbiAgaW5kZXg6IG51bWJlclxuICBvblJlbW92ZTogbnVsbCB8ICgobGluZTogUmVwZWF0ZXJMaW5lKSA9PiB2b2lkKVxuICBvblVwZGF0ZTogKHY6IHVua25vd24sIHBhdGg6IHN0cmluZykgPT4gdm9pZFxuICBvcHRpb25zOiBGaWVsZEFyZ3NcbiAgZGVmYXVsdENvbGxhcHNlZDogYm9vbGVhblxufT4gPSAoeyBsaW5lLCBpbmRleCwgb25SZW1vdmUsIG9uVXBkYXRlLCBvcHRpb25zLCBkZWZhdWx0Q29sbGFwc2VkIH0pID0+IHtcbiAgY29uc3QgW2NvbGxhcHNlZCwgdG9nZ2xlQ29sbGFwc2VkXSA9IHVzZVRvZ2dsZShkZWZhdWx0Q29sbGFwc2VkKVxuXG4gIGNvbnN0IHRpdGxlID0gb3B0aW9ucy5jb2xsYXBzZWRcbiAgICA/IChsaW5lW29wdGlvbnMuY29sbGFwc2VkXSBhcyBzdHJpbmcpXG4gICAgOiBgIyR7aW5kZXggKyAxfWBcbiAgY29uc3QgZXNjYXBlZFRpdGxlID0gdXNlTWVtbygoKSA9PiB0ZXh0Q29udGVudCh0aXRsZSksIFt0aXRsZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8SXRlbSBpdGVtPXtsaW5lfT5cbiAgICAgIDxTaWRlYmFySGVhZGluZyBvbkNsaWNrPXtwcmV2ZW50KHRvZ2dsZUNvbGxhcHNlZCl9IHRpdGxlPXtlc2NhcGVkVGl0bGV9PlxuICAgICAgICA8U2lkZWJhckhlYWRpbmcuSG92ZXI+XG4gICAgICAgICAge29uUmVtb3ZlICYmIChcbiAgICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICAgIGRhbmdlclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblJlbW92ZShsaW5lKX1cbiAgICAgICAgICAgICAgdGl0bGU9e3QoJ2RlbGV0ZUl0ZW0nKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEljb25UcmFzaCBzaXplPXsyMH0gLz5cbiAgICAgICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgICAgICApfVxuICAgICAgICA8L1NpZGViYXJIZWFkaW5nLkhvdmVyPlxuICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgIHJvdGF0ZT17Y29sbGFwc2VkID8gLTkwIDogMH1cbiAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50KHRvZ2dsZUNvbGxhcHNlZCl9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbkRvd24gc2l6ZT17MjR9IC8+XG4gICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgIDwvU2lkZWJhckhlYWRpbmc+XG4gICAgICB7IWNvbGxhcHNlZCAmJiAoXG4gICAgICAgIDxJdGVtQm9keT5cbiAgICAgICAgICA8RmllbGRzUmVuZGVyZXJcbiAgICAgICAgICAgIGZpZWxkcz17b3B0aW9ucy5maWVsZHN9XG4gICAgICAgICAgICBkYXRhPXtsaW5lfVxuICAgICAgICAgICAgb25VcGRhdGU9e29uVXBkYXRlfVxuICAgICAgICAgICAgcGF0aD17aW5kZXgudG9TdHJpbmcoKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0l0ZW1Cb2R5PlxuICAgICAgKX1cbiAgICA8L0l0ZW0+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IFJlcGVhdGVyID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBGaWVsZFZhbHVlPigoKSA9PiAoe1xuICBkZWZhdWx0T3B0aW9uczogeyBhZGRMYWJlbDogdCgnYWRkSXRlbScpLCBmaWVsZHM6IFtdLCBkZWZhdWx0OiBbXSB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pKVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$a
});
const Component$a = ({
  value: valueProps,
  onChange,
  options
}) => {
  const value = valueProps ?? [];
  const canAdd = !options.max || value.length < options.max;
  const canRemove = !options.min || value.length > options.min;
  const [lastAdditionIndex, setLastAdditionIndex] = reactExports.useState(-1);
  const add2 = () => {
    onChange([...value, fillDefaults({
      _id: uniqId()
    }, options.fields)]);
    setLastAdditionIndex(value.length);
  };
  const remove = (line2) => {
    onChange(value.filter((v2) => v2 !== line2));
  };
  const updateProperty = (v2, path) => {
    onChange(deepSet(value, path, v2));
  };
  function handleMove(from3, to) {
    onChange(moveItem(value, from3, to));
  }
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    children: /* @__PURE__ */ jsx(SortableWrapper, {
      items: value,
      onMove: handleMove,
      children: /* @__PURE__ */ jsxs(Wrapper$1, {
        children: [value.map((line2, k3) => /* @__PURE__ */ jsx(FieldLine, {
          line: line2,
          index: k3,
          onUpdate: updateProperty,
          onRemove: canRemove ? remove : null,
          options,
          defaultCollapsed: lastAdditionIndex !== k3
        }, line2._id)), canAdd && /* @__PURE__ */ jsx(Footer, {
          children: /* @__PURE__ */ jsx(Button$8, {
            secondary: true,
            onClick: prevent(add2),
            icon: IconCirclePlus,
            children: options.addLabel
          })
        })]
      })
    })
  });
};
const FieldLine = ({
  line: line2,
  index: index2,
  onRemove,
  onUpdate,
  options,
  defaultCollapsed
}) => {
  const [collapsed, toggleCollapsed] = useToggle(defaultCollapsed);
  const title = options.collapsed ? line2[options.collapsed] : `#${index2 + 1}`;
  const escapedTitle = reactExports.useMemo(() => textContent(title), [title]);
  return /* @__PURE__ */ jsxs(Item$1, {
    item: line2,
    children: [/* @__PURE__ */ jsxs(SidebarHeading, {
      onClick: prevent(toggleCollapsed),
      title: escapedTitle,
      children: [/* @__PURE__ */ jsx(SidebarHeading.Hover, {
        children: onRemove && /* @__PURE__ */ jsx(ButtonIcon, {
          danger: true,
          onClick: () => onRemove(line2),
          title: t("deleteItem"),
          children: /* @__PURE__ */ jsx(IconTrash, {
            size: 20
          })
        })
      }), /* @__PURE__ */ jsx(ButtonIcon, {
        rotate: collapsed ? -90 : 0,
        onClick: prevent(toggleCollapsed),
        children: /* @__PURE__ */ jsx(IconDown, {
          size: 24
        })
      })]
    }), !collapsed && /* @__PURE__ */ jsx(ItemBody, {
      children: /* @__PURE__ */ jsx(FieldsRenderer, {
        fields: options.fields,
        data: line2,
        onUpdate,
        path: index2.toString()
      })
    })]
  });
};
const Repeater = defineField(() => ({
  defaultOptions: {
    addLabel: t("addItem"),
    fields: [],
    default: []
  },
  render: Component$a
}));
function _EMOTION_STRINGIFIED_CSS_ERROR__$9() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$4 = process.env.NODE_ENV === "production" ? {
  name: "18hed01",
  styles: "padding-right:40px"
} : {
  name: "1djmhmp-Component",
  styles: "padding-right:40px;label:Component;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9JbWFnZVVybC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0NNIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9JbWFnZVVybC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IHVzZVVuaXFJZCB9IGZyb20gJ3NyYy9ob29rcy91c2VVbmlxSWQnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyBCdXR0b25JY29uLCBGaWVsZCwgSWNvbkZvbGRlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBoZWxwPzogc3RyaW5nXG4gIGRlZmF1bHQ/OiBzdHJpbmdcbiAgb25Ccm93c2U/OiAodXJsPzogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz5cbn1cblxuY29uc3QgQ29tcG9uZW50OiBGaWVsZENvbXBvbmVudDxGaWVsZEFyZ3MsIHN0cmluZz4gPSAoe1xuICB2YWx1ZSxcbiAgb25DaGFuZ2UsXG4gIG9wdGlvbnMsXG59KSA9PiB7XG4gIGNvbnN0IGlkID0gdXNlVW5pcUlkKCdpbWFnZWlucHV0JylcbiAgY29uc3QgaGFuZGxlQnJvd3NlID0gKCkgPT4ge1xuICAgIG9wdGlvbnMub25Ccm93c2UhKHZhbHVlKVxuICAgICAgLnRoZW4oKHYpID0+IHtcbiAgICAgICAgb25DaGFuZ2UodilcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHt9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGRcbiAgICAgIGlkPXtpZH1cbiAgICAgIGxhYmVsPXtvcHRpb25zLmxhYmVsfVxuICAgICAgaGVscD17b3B0aW9ucy5oZWxwfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgdG9vbHRpcD17dmFsdWUgPyA8VG9vbHRpcEltYWdlIHNyYz17dmFsdWV9IGFsdD1cIlwiIC8+IDogdW5kZWZpbmVkfVxuICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNoYW5nZSgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpfVxuICAgICAgY3NzPXt7IHBhZGRpbmdSaWdodDogNDAgfX1cbiAgICAgIGljb249e1xuICAgICAgICBvcHRpb25zLm9uQnJvd3NlID8gKFxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17cHJldmVudChoYW5kbGVCcm93c2UpfT5cbiAgICAgICAgICAgIDxJY29uRm9sZGVyIHNpemU9ezE2fSAvPlxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgSW1hZ2VVcmwgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIHN0cmluZz4oe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIGRlZmF1bHQ6ICcnLFxuICB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pXG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHdpZHRoOiAnMzJweCcsXG4gIGhlaWdodDogJzMycHgnLFxuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG59KVxuXG5jb25zdCBUb29sdGlwSW1hZ2UgPSBzdHlsZWQuaW1nKHtcbiAgd2lkdGg6ICcxNTBweCcsXG4gIGhlaWdodDogJzE1MHB4JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHpJbmRleDogMixcbiAgb2JqZWN0Rml0OiAnY292ZXInLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$9
};
const Component$9 = ({
  value,
  onChange,
  options
}) => {
  const id = useUniqId("imageinput");
  const handleBrowse = () => {
    options.onBrowse(value).then((v2) => {
      onChange(v2);
    }).catch((e3) => {
    });
  };
  return /* @__PURE__ */ jsx(Field$1, {
    id,
    label: options.label,
    help: options.help,
    value,
    tooltip: value ? /* @__PURE__ */ jsx(TooltipImage, {
      src: value,
      alt: ""
    }) : void 0,
    onChange: (e3) => onChange(e3.target.value),
    css: _ref$4,
    icon: options.onBrowse ? /* @__PURE__ */ jsx(Button$3, {
      onClick: prevent(handleBrowse),
      children: /* @__PURE__ */ jsx(IconFolder, {
        size: 16
      })
    }) : void 0
  });
};
const ImageUrl = defineField({
  defaultOptions: {
    default: ""
  },
  render: Component$9
});
const Button$3 = /* @__PURE__ */ createStyled(ButtonIcon, process.env.NODE_ENV === "production" ? {
  target: "euhtx1e1"
} : {
  target: "euhtx1e1",
  label: "Button"
})(process.env.NODE_ENV === "production" ? {
  name: "fcl53z",
  styles: "width:32px;height:32px;color:var(--ve-color-light)"
} : {
  name: "fcl53z",
  styles: "width:32px;height:32px;color:var(--ve-color-light)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9JbWFnZVVybC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdURlIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9JbWFnZVVybC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IHVzZVVuaXFJZCB9IGZyb20gJ3NyYy9ob29rcy91c2VVbmlxSWQnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyBCdXR0b25JY29uLCBGaWVsZCwgSWNvbkZvbGRlciB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBoZWxwPzogc3RyaW5nXG4gIGRlZmF1bHQ/OiBzdHJpbmdcbiAgb25Ccm93c2U/OiAodXJsPzogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz5cbn1cblxuY29uc3QgQ29tcG9uZW50OiBGaWVsZENvbXBvbmVudDxGaWVsZEFyZ3MsIHN0cmluZz4gPSAoe1xuICB2YWx1ZSxcbiAgb25DaGFuZ2UsXG4gIG9wdGlvbnMsXG59KSA9PiB7XG4gIGNvbnN0IGlkID0gdXNlVW5pcUlkKCdpbWFnZWlucHV0JylcbiAgY29uc3QgaGFuZGxlQnJvd3NlID0gKCkgPT4ge1xuICAgIG9wdGlvbnMub25Ccm93c2UhKHZhbHVlKVxuICAgICAgLnRoZW4oKHYpID0+IHtcbiAgICAgICAgb25DaGFuZ2UodilcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHt9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGRcbiAgICAgIGlkPXtpZH1cbiAgICAgIGxhYmVsPXtvcHRpb25zLmxhYmVsfVxuICAgICAgaGVscD17b3B0aW9ucy5oZWxwfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgdG9vbHRpcD17dmFsdWUgPyA8VG9vbHRpcEltYWdlIHNyYz17dmFsdWV9IGFsdD1cIlwiIC8+IDogdW5kZWZpbmVkfVxuICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNoYW5nZSgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpfVxuICAgICAgY3NzPXt7IHBhZGRpbmdSaWdodDogNDAgfX1cbiAgICAgIGljb249e1xuICAgICAgICBvcHRpb25zLm9uQnJvd3NlID8gKFxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17cHJldmVudChoYW5kbGVCcm93c2UpfT5cbiAgICAgICAgICAgIDxJY29uRm9sZGVyIHNpemU9ezE2fSAvPlxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgSW1hZ2VVcmwgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIHN0cmluZz4oe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIGRlZmF1bHQ6ICcnLFxuICB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pXG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHdpZHRoOiAnMzJweCcsXG4gIGhlaWdodDogJzMycHgnLFxuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG59KVxuXG5jb25zdCBUb29sdGlwSW1hZ2UgPSBzdHlsZWQuaW1nKHtcbiAgd2lkdGg6ICcxNTBweCcsXG4gIGhlaWdodDogJzE1MHB4JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHpJbmRleDogMixcbiAgb2JqZWN0Rml0OiAnY292ZXInLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$9
});
const TooltipImage = /* @__PURE__ */ createStyled("img", process.env.NODE_ENV === "production" ? {
  target: "euhtx1e0"
} : {
  target: "euhtx1e0",
  label: "TooltipImage"
})(process.env.NODE_ENV === "production" ? {
  name: "tw8fke",
  styles: "width:150px;height:150px;position:relative;z-index:2;object-fit:cover"
} : {
  name: "tw8fke",
  styles: "width:150px;height:150px;position:relative;z-index:2;object-fit:cover",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9JbWFnZVVybC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkRxQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvSW1hZ2VVcmwudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyB1c2VVbmlxSWQgfSBmcm9tICdzcmMvaG9va3MvdXNlVW5pcUlkJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHsgQnV0dG9uSWNvbiwgRmllbGQsIEljb25Gb2xkZXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgZGVmaW5lRmllbGQgfSBmcm9tICdzcmMvZmllbGRzL3V0aWxzJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgaGVscD86IHN0cmluZ1xuICBkZWZhdWx0Pzogc3RyaW5nXG4gIG9uQnJvd3NlPzogKHVybD86IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+XG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBzdHJpbmc+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICBjb25zdCBpZCA9IHVzZVVuaXFJZCgnaW1hZ2VpbnB1dCcpXG4gIGNvbnN0IGhhbmRsZUJyb3dzZSA9ICgpID0+IHtcbiAgICBvcHRpb25zLm9uQnJvd3NlISh2YWx1ZSlcbiAgICAgIC50aGVuKCh2KSA9PiB7XG4gICAgICAgIG9uQ2hhbmdlKHYpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB7fSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEZpZWxkXG4gICAgICBpZD17aWR9XG4gICAgICBsYWJlbD17b3B0aW9ucy5sYWJlbH1cbiAgICAgIGhlbHA9e29wdGlvbnMuaGVscH1cbiAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgIHRvb2x0aXA9e3ZhbHVlID8gPFRvb2x0aXBJbWFnZSBzcmM9e3ZhbHVlfSBhbHQ9XCJcIiAvPiA6IHVuZGVmaW5lZH1cbiAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25DaGFuZ2UoKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKX1cbiAgICAgIGNzcz17eyBwYWRkaW5nUmlnaHQ6IDQwIH19XG4gICAgICBpY29uPXtcbiAgICAgICAgb3B0aW9ucy5vbkJyb3dzZSA/IChcbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3ByZXZlbnQoaGFuZGxlQnJvd3NlKX0+XG4gICAgICAgICAgICA8SWNvbkZvbGRlciBzaXplPXsxNn0gLz5cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKSA6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IEltYWdlVXJsID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBzdHJpbmc+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBkZWZhdWx0OiAnJyxcbiAgfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoQnV0dG9uSWNvbikoe1xuICB3aWR0aDogJzMycHgnLFxuICBoZWlnaHQ6ICczMnB4JyxcbiAgY29sb3I6ICd2YXIoLS12ZS1jb2xvci1saWdodCknLFxufSlcblxuY29uc3QgVG9vbHRpcEltYWdlID0gc3R5bGVkLmltZyh7XG4gIHdpZHRoOiAnMTUwcHgnLFxuICBoZWlnaHQ6ICcxNTBweCcsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB6SW5kZXg6IDIsXG4gIG9iamVjdEZpdDogJ2NvdmVyJyxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$9
});
function OrderedMap(content) {
  this.content = content;
}
OrderedMap.prototype = {
  constructor: OrderedMap,
  find: function(key) {
    for (var i2 = 0; i2 < this.content.length; i2 += 2)
      if (this.content[i2] === key)
        return i2;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(key) {
    var found2 = this.find(key);
    return found2 == -1 ? void 0 : this.content[found2 + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(key, value, newKey) {
    var self = newKey && newKey != key ? this.remove(newKey) : this;
    var found2 = self.find(key), content = self.content.slice();
    if (found2 == -1) {
      content.push(newKey || key, value);
    } else {
      content[found2 + 1] = value;
      if (newKey)
        content[found2] = newKey;
    }
    return new OrderedMap(content);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(key) {
    var found2 = this.find(key);
    if (found2 == -1)
      return this;
    var content = this.content.slice();
    content.splice(found2, 2);
    return new OrderedMap(content);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(key, value) {
    return new OrderedMap([key, value].concat(this.remove(key).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(key, value) {
    var content = this.remove(key).content.slice();
    content.push(key, value);
    return new OrderedMap(content);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(place, key, value) {
    var without = this.remove(key), content = without.content.slice();
    var found2 = without.find(place);
    content.splice(found2 == -1 ? content.length : found2, 0, key, value);
    return new OrderedMap(content);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(f2) {
    for (var i2 = 0; i2 < this.content.length; i2 += 2)
      f2(this.content[i2], this.content[i2 + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(map2) {
    map2 = OrderedMap.from(map2);
    if (!map2.size)
      return this;
    return new OrderedMap(map2.content.concat(this.subtract(map2).content));
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(map2) {
    map2 = OrderedMap.from(map2);
    if (!map2.size)
      return this;
    return new OrderedMap(this.subtract(map2).content.concat(map2.content));
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(map2) {
    var result = this;
    map2 = OrderedMap.from(map2);
    for (var i2 = 0; i2 < map2.content.length; i2 += 2)
      result = result.remove(map2.content[i2]);
    return result;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var result = {};
    this.forEach(function(key, value) {
      result[key] = value;
    });
    return result;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
OrderedMap.from = function(value) {
  if (value instanceof OrderedMap)
    return value;
  var content = [];
  if (value)
    for (var prop in value)
      content.push(prop, value[prop]);
  return new OrderedMap(content);
};
function findDiffStart(a4, b3, pos) {
  for (let i2 = 0; ; i2++) {
    if (i2 == a4.childCount || i2 == b3.childCount)
      return a4.childCount == b3.childCount ? null : pos;
    let childA = a4.child(i2), childB = b3.child(i2);
    if (childA == childB) {
      pos += childA.nodeSize;
      continue;
    }
    if (!childA.sameMarkup(childB))
      return pos;
    if (childA.isText && childA.text != childB.text) {
      for (let j2 = 0; childA.text[j2] == childB.text[j2]; j2++)
        pos++;
      return pos;
    }
    if (childA.content.size || childB.content.size) {
      let inner = findDiffStart(childA.content, childB.content, pos + 1);
      if (inner != null)
        return inner;
    }
    pos += childA.nodeSize;
  }
}
function findDiffEnd(a4, b3, posA, posB) {
  for (let iA = a4.childCount, iB = b3.childCount; ; ) {
    if (iA == 0 || iB == 0)
      return iA == iB ? null : { a: posA, b: posB };
    let childA = a4.child(--iA), childB = b3.child(--iB), size2 = childA.nodeSize;
    if (childA == childB) {
      posA -= size2;
      posB -= size2;
      continue;
    }
    if (!childA.sameMarkup(childB))
      return { a: posA, b: posB };
    if (childA.isText && childA.text != childB.text) {
      let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
        same++;
        posA--;
        posB--;
      }
      return { a: posA, b: posB };
    }
    if (childA.content.size || childB.content.size) {
      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
      if (inner)
        return inner;
    }
    posA -= size2;
    posB -= size2;
  }
}
class Fragment {
  /**
  @internal
  */
  constructor(content, size2) {
    this.content = content;
    this.size = size2 || 0;
    if (size2 == null)
      for (let i2 = 0; i2 < content.length; i2++)
        this.size += content[i2].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(from3, to, f2, nodeStart = 0, parent) {
    for (let i2 = 0, pos = 0; pos < to; i2++) {
      let child = this.content[i2], end2 = pos + child.nodeSize;
      if (end2 > from3 && f2(child, nodeStart + pos, parent || null, i2) !== false && child.content.size) {
        let start2 = pos + 1;
        child.nodesBetween(Math.max(0, from3 - start2), Math.min(child.content.size, to - start2), f2, nodeStart + start2);
      }
      pos = end2;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(f2) {
    this.nodesBetween(0, this.size, f2);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(from3, to, blockSeparator, leafText) {
    let text = "", first2 = true;
    this.nodesBetween(from3, to, (node2, pos) => {
      let nodeText = node2.isText ? node2.text.slice(Math.max(from3, pos) - pos, to - pos) : !node2.isLeaf ? "" : leafText ? typeof leafText === "function" ? leafText(node2) : leafText : node2.type.spec.leafText ? node2.type.spec.leafText(node2) : "";
      if (node2.isBlock && (node2.isLeaf && nodeText || node2.isTextblock) && blockSeparator) {
        if (first2)
          first2 = false;
        else
          text += blockSeparator;
      }
      text += nodeText;
    }, 0);
    return text;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(other) {
    if (!other.size)
      return this;
    if (!this.size)
      return other;
    let last = this.lastChild, first2 = other.firstChild, content = this.content.slice(), i2 = 0;
    if (last.isText && last.sameMarkup(first2)) {
      content[content.length - 1] = last.withText(last.text + first2.text);
      i2 = 1;
    }
    for (; i2 < other.content.length; i2++)
      content.push(other.content[i2]);
    return new Fragment(content, this.size + other.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(from3, to = this.size) {
    if (from3 == 0 && to == this.size)
      return this;
    let result = [], size2 = 0;
    if (to > from3)
      for (let i2 = 0, pos = 0; pos < to; i2++) {
        let child = this.content[i2], end2 = pos + child.nodeSize;
        if (end2 > from3) {
          if (pos < from3 || end2 > to) {
            if (child.isText)
              child = child.cut(Math.max(0, from3 - pos), Math.min(child.text.length, to - pos));
            else
              child = child.cut(Math.max(0, from3 - pos - 1), Math.min(child.content.size, to - pos - 1));
          }
          result.push(child);
          size2 += child.nodeSize;
        }
        pos = end2;
      }
    return new Fragment(result, size2);
  }
  /**
  @internal
  */
  cutByIndex(from3, to) {
    if (from3 == to)
      return Fragment.empty;
    if (from3 == 0 && to == this.content.length)
      return this;
    return new Fragment(this.content.slice(from3, to));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(index2, node2) {
    let current = this.content[index2];
    if (current == node2)
      return this;
    let copy2 = this.content.slice();
    let size2 = this.size + node2.nodeSize - current.nodeSize;
    copy2[index2] = node2;
    return new Fragment(copy2, size2);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(node2) {
    return new Fragment([node2].concat(this.content), this.size + node2.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(node2) {
    return new Fragment(this.content.concat(node2), this.size + node2.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(other) {
    if (this.content.length != other.content.length)
      return false;
    for (let i2 = 0; i2 < this.content.length; i2++)
      if (!this.content[i2].eq(other.content[i2]))
        return false;
    return true;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(index2) {
    let found2 = this.content[index2];
    if (!found2)
      throw new RangeError("Index " + index2 + " out of range for " + this);
    return found2;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(index2) {
    return this.content[index2] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(f2) {
    for (let i2 = 0, p2 = 0; i2 < this.content.length; i2++) {
      let child = this.content[i2];
      f2(child, p2, i2);
      p2 += child.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(other, pos = 0) {
    return findDiffStart(this, other, pos);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(other, pos = this.size, otherPos = other.size) {
    return findDiffEnd(this, other, pos, otherPos);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. (Not public.)
  */
  findIndex(pos, round2 = -1) {
    if (pos == 0)
      return retIndex(0, pos);
    if (pos == this.size)
      return retIndex(this.content.length, pos);
    if (pos > this.size || pos < 0)
      throw new RangeError(`Position ${pos} outside of fragment (${this})`);
    for (let i2 = 0, curPos = 0; ; i2++) {
      let cur = this.child(i2), end2 = curPos + cur.nodeSize;
      if (end2 >= pos) {
        if (end2 == pos || round2 > 0)
          return retIndex(i2 + 1, end2);
        return retIndex(i2, curPos);
      }
      curPos = end2;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((n2) => n2.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(schema, value) {
    if (!value)
      return Fragment.empty;
    if (!Array.isArray(value))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new Fragment(value.map(schema.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(array) {
    if (!array.length)
      return Fragment.empty;
    let joined, size2 = 0;
    for (let i2 = 0; i2 < array.length; i2++) {
      let node2 = array[i2];
      size2 += node2.nodeSize;
      if (i2 && node2.isText && array[i2 - 1].sameMarkup(node2)) {
        if (!joined)
          joined = array.slice(0, i2);
        joined[joined.length - 1] = node2.withText(joined[joined.length - 1].text + node2.text);
      } else if (joined) {
        joined.push(node2);
      }
    }
    return new Fragment(joined || array, size2);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(nodes) {
    if (!nodes)
      return Fragment.empty;
    if (nodes instanceof Fragment)
      return nodes;
    if (Array.isArray(nodes))
      return this.fromArray(nodes);
    if (nodes.attrs)
      return new Fragment([nodes], nodes.nodeSize);
    throw new RangeError("Can not convert " + nodes + " to a Fragment" + (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
}
Fragment.empty = new Fragment([], 0);
const found = { index: 0, offset: 0 };
function retIndex(index2, offset2) {
  found.index = index2;
  found.offset = offset2;
  return found;
}
function compareDeep(a4, b3) {
  if (a4 === b3)
    return true;
  if (!(a4 && typeof a4 == "object") || !(b3 && typeof b3 == "object"))
    return false;
  let array = Array.isArray(a4);
  if (Array.isArray(b3) != array)
    return false;
  if (array) {
    if (a4.length != b3.length)
      return false;
    for (let i2 = 0; i2 < a4.length; i2++)
      if (!compareDeep(a4[i2], b3[i2]))
        return false;
  } else {
    for (let p2 in a4)
      if (!(p2 in b3) || !compareDeep(a4[p2], b3[p2]))
        return false;
    for (let p2 in b3)
      if (!(p2 in a4))
        return false;
  }
  return true;
}
let Mark$1 = class Mark {
  /**
  @internal
  */
  constructor(type, attrs) {
    this.type = type;
    this.attrs = attrs;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(set2) {
    let copy2, placed = false;
    for (let i2 = 0; i2 < set2.length; i2++) {
      let other = set2[i2];
      if (this.eq(other))
        return set2;
      if (this.type.excludes(other.type)) {
        if (!copy2)
          copy2 = set2.slice(0, i2);
      } else if (other.type.excludes(this.type)) {
        return set2;
      } else {
        if (!placed && other.type.rank > this.type.rank) {
          if (!copy2)
            copy2 = set2.slice(0, i2);
          copy2.push(this);
          placed = true;
        }
        if (copy2)
          copy2.push(other);
      }
    }
    if (!copy2)
      copy2 = set2.slice();
    if (!placed)
      copy2.push(this);
    return copy2;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(set2) {
    for (let i2 = 0; i2 < set2.length; i2++)
      if (this.eq(set2[i2]))
        return set2.slice(0, i2).concat(set2.slice(i2 + 1));
    return set2;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(set2) {
    for (let i2 = 0; i2 < set2.length; i2++)
      if (this.eq(set2[i2]))
        return true;
    return false;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(other) {
    return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let obj = { type: this.type.name };
    for (let _2 in this.attrs) {
      obj.attrs = this.attrs;
      break;
    }
    return obj;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(schema, json) {
    if (!json)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let type = schema.marks[json.type];
    if (!type)
      throw new RangeError(`There is no mark type ${json.type} in this schema`);
    return type.create(json.attrs);
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(a4, b3) {
    if (a4 == b3)
      return true;
    if (a4.length != b3.length)
      return false;
    for (let i2 = 0; i2 < a4.length; i2++)
      if (!a4[i2].eq(b3[i2]))
        return false;
    return true;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(marks) {
    if (!marks || Array.isArray(marks) && marks.length == 0)
      return Mark.none;
    if (marks instanceof Mark)
      return [marks];
    let copy2 = marks.slice();
    copy2.sort((a4, b3) => a4.type.rank - b3.type.rank);
    return copy2;
  }
};
Mark$1.none = [];
class ReplaceError extends Error {
}
class Slice {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(content, openStart, openEnd) {
    this.content = content;
    this.openStart = openStart;
    this.openEnd = openEnd;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(pos, fragment) {
    let content = insertInto(this.content, pos + this.openStart, fragment);
    return content && new Slice(content, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(from3, to) {
    return new Slice(removeRange(this.content, from3 + this.openStart, to + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(other) {
    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let json = { content: this.content.toJSON() };
    if (this.openStart > 0)
      json.openStart = this.openStart;
    if (this.openEnd > 0)
      json.openEnd = this.openEnd;
    return json;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(schema, json) {
    if (!json)
      return Slice.empty;
    let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
    if (typeof openStart != "number" || typeof openEnd != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(fragment, openIsolating = true) {
    let openStart = 0, openEnd = 0;
    for (let n2 = fragment.firstChild; n2 && !n2.isLeaf && (openIsolating || !n2.type.spec.isolating); n2 = n2.firstChild)
      openStart++;
    for (let n2 = fragment.lastChild; n2 && !n2.isLeaf && (openIsolating || !n2.type.spec.isolating); n2 = n2.lastChild)
      openEnd++;
    return new Slice(fragment, openStart, openEnd);
  }
}
Slice.empty = new Slice(Fragment.empty, 0, 0);
function removeRange(content, from3, to) {
  let { index: index2, offset: offset2 } = content.findIndex(from3), child = content.maybeChild(index2);
  let { index: indexTo, offset: offsetTo } = content.findIndex(to);
  if (offset2 == from3 || child.isText) {
    if (offsetTo != to && !content.child(indexTo).isText)
      throw new RangeError("Removing non-flat range");
    return content.cut(0, from3).append(content.cut(to));
  }
  if (index2 != indexTo)
    throw new RangeError("Removing non-flat range");
  return content.replaceChild(index2, child.copy(removeRange(child.content, from3 - offset2 - 1, to - offset2 - 1)));
}
function insertInto(content, dist, insert, parent) {
  let { index: index2, offset: offset2 } = content.findIndex(dist), child = content.maybeChild(index2);
  if (offset2 == dist || child.isText) {
    if (parent && !parent.canReplace(index2, index2, insert))
      return null;
    return content.cut(0, dist).append(insert).append(content.cut(dist));
  }
  let inner = insertInto(child.content, dist - offset2 - 1, insert);
  return inner && content.replaceChild(index2, child.copy(inner));
}
function replace($from, $to, slice3) {
  if (slice3.openStart > $from.depth)
    throw new ReplaceError("Inserted content deeper than insertion position");
  if ($from.depth - slice3.openStart != $to.depth - slice3.openEnd)
    throw new ReplaceError("Inconsistent open depths");
  return replaceOuter($from, $to, slice3, 0);
}
function replaceOuter($from, $to, slice3, depth) {
  let index2 = $from.index(depth), node2 = $from.node(depth);
  if (index2 == $to.index(depth) && depth < $from.depth - slice3.openStart) {
    let inner = replaceOuter($from, $to, slice3, depth + 1);
    return node2.copy(node2.content.replaceChild(index2, inner));
  } else if (!slice3.content.size) {
    return close(node2, replaceTwoWay($from, $to, depth));
  } else if (!slice3.openStart && !slice3.openEnd && $from.depth == depth && $to.depth == depth) {
    let parent = $from.parent, content = parent.content;
    return close(parent, content.cut(0, $from.parentOffset).append(slice3.content).append(content.cut($to.parentOffset)));
  } else {
    let { start: start2, end: end2 } = prepareSliceForReplace(slice3, $from);
    return close(node2, replaceThreeWay($from, start2, end2, $to, depth));
  }
}
function checkJoin(main2, sub) {
  if (!sub.type.compatibleContent(main2.type))
    throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main2.type.name);
}
function joinable$1($before, $after, depth) {
  let node2 = $before.node(depth);
  checkJoin(node2, $after.node(depth));
  return node2;
}
function addNode(child, target) {
  let last = target.length - 1;
  if (last >= 0 && child.isText && child.sameMarkup(target[last]))
    target[last] = child.withText(target[last].text + child.text);
  else
    target.push(child);
}
function addRange($start, $end, depth, target) {
  let node2 = ($end || $start).node(depth);
  let startIndex = 0, endIndex = $end ? $end.index(depth) : node2.childCount;
  if ($start) {
    startIndex = $start.index(depth);
    if ($start.depth > depth) {
      startIndex++;
    } else if ($start.textOffset) {
      addNode($start.nodeAfter, target);
      startIndex++;
    }
  }
  for (let i2 = startIndex; i2 < endIndex; i2++)
    addNode(node2.child(i2), target);
  if ($end && $end.depth == depth && $end.textOffset)
    addNode($end.nodeBefore, target);
}
function close(node2, content) {
  node2.type.checkContent(content);
  return node2.copy(content);
}
function replaceThreeWay($from, $start, $end, $to, depth) {
  let openStart = $from.depth > depth && joinable$1($from, $start, depth + 1);
  let openEnd = $to.depth > depth && joinable$1($end, $to, depth + 1);
  let content = [];
  addRange(null, $from, depth, content);
  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
    checkJoin(openStart, openEnd);
    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
  } else {
    if (openStart)
      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
    addRange($start, $end, depth, content);
    if (openEnd)
      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
  }
  addRange($to, null, depth, content);
  return new Fragment(content);
}
function replaceTwoWay($from, $to, depth) {
  let content = [];
  addRange(null, $from, depth, content);
  if ($from.depth > depth) {
    let type = joinable$1($from, $to, depth + 1);
    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
  }
  addRange($to, null, depth, content);
  return new Fragment(content);
}
function prepareSliceForReplace(slice3, $along) {
  let extra = $along.depth - slice3.openStart, parent = $along.node(extra);
  let node2 = parent.copy(slice3.content);
  for (let i2 = extra - 1; i2 >= 0; i2--)
    node2 = $along.node(i2).copy(Fragment.from(node2));
  return {
    start: node2.resolveNoCache(slice3.openStart + extra),
    end: node2.resolveNoCache(node2.content.size - slice3.openEnd - extra)
  };
}
class ResolvedPos {
  /**
  @internal
  */
  constructor(pos, path, parentOffset) {
    this.pos = pos;
    this.path = path;
    this.parentOffset = parentOffset;
    this.depth = path.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(val) {
    if (val == null)
      return this.depth;
    if (val < 0)
      return this.depth + val;
    return val;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(depth) {
    return this.path[this.resolveDepth(depth) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(depth) {
    return this.path[this.resolveDepth(depth) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(depth) {
    depth = this.resolveDepth(depth);
    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(depth) {
    depth = this.resolveDepth(depth);
    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(depth) {
    depth = this.resolveDepth(depth);
    return this.start(depth) + this.node(depth).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(depth) {
    depth = this.resolveDepth(depth);
    if (!depth)
      throw new RangeError("There is no position before the top-level node");
    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(depth) {
    depth = this.resolveDepth(depth);
    if (!depth)
      throw new RangeError("There is no position after the top-level node");
    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let parent = this.parent, index2 = this.index(this.depth);
    if (index2 == parent.childCount)
      return null;
    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index2);
    return dOff ? parent.child(index2).cut(dOff) : child;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let index2 = this.index(this.depth);
    let dOff = this.pos - this.path[this.path.length - 1];
    if (dOff)
      return this.parent.child(index2).cut(0, dOff);
    return index2 == 0 ? null : this.parent.child(index2 - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(index2, depth) {
    depth = this.resolveDepth(depth);
    let node2 = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    for (let i2 = 0; i2 < index2; i2++)
      pos += node2.child(i2).nodeSize;
    return pos;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let parent = this.parent, index2 = this.index();
    if (parent.content.size == 0)
      return Mark$1.none;
    if (this.textOffset)
      return parent.child(index2).marks;
    let main2 = parent.maybeChild(index2 - 1), other = parent.maybeChild(index2);
    if (!main2) {
      let tmp = main2;
      main2 = other;
      other = tmp;
    }
    let marks = main2.marks;
    for (var i2 = 0; i2 < marks.length; i2++)
      if (marks[i2].type.spec.inclusive === false && (!other || !marks[i2].isInSet(other.marks)))
        marks = marks[i2--].removeFromSet(marks);
    return marks;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross($end) {
    let after = this.parent.maybeChild(this.index());
    if (!after || !after.isInline)
      return null;
    let marks = after.marks, next2 = $end.parent.maybeChild($end.index());
    for (var i2 = 0; i2 < marks.length; i2++)
      if (marks[i2].type.spec.inclusive === false && (!next2 || !marks[i2].isInSet(next2.marks)))
        marks = marks[i2--].removeFromSet(marks);
    return marks;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(pos) {
    for (let depth = this.depth; depth > 0; depth--)
      if (this.start(depth) <= pos && this.end(depth) >= pos)
        return depth;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(other = this, pred) {
    if (other.pos < this.pos)
      return other.blockRange(this);
    for (let d4 = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d4 >= 0; d4--)
      if (other.pos <= this.end(d4) && (!pred || pred(this.node(d4))))
        return new NodeRange(this, other, d4);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(other) {
    return this.pos - this.parentOffset == other.pos - other.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(other) {
    return other.pos > this.pos ? other : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(other) {
    return other.pos < this.pos ? other : this;
  }
  /**
  @internal
  */
  toString() {
    let str = "";
    for (let i2 = 1; i2 <= this.depth; i2++)
      str += (str ? "/" : "") + this.node(i2).type.name + "_" + this.index(i2 - 1);
    return str + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(doc2, pos) {
    if (!(pos >= 0 && pos <= doc2.content.size))
      throw new RangeError("Position " + pos + " out of range");
    let path = [];
    let start2 = 0, parentOffset = pos;
    for (let node2 = doc2; ; ) {
      let { index: index2, offset: offset2 } = node2.content.findIndex(parentOffset);
      let rem = parentOffset - offset2;
      path.push(node2, index2, start2 + offset2);
      if (!rem)
        break;
      node2 = node2.child(index2);
      if (node2.isText)
        break;
      parentOffset = rem - 1;
      start2 += offset2 + 1;
    }
    return new ResolvedPos(pos, path, parentOffset);
  }
  /**
  @internal
  */
  static resolveCached(doc2, pos) {
    for (let i2 = 0; i2 < resolveCache.length; i2++) {
      let cached = resolveCache[i2];
      if (cached.pos == pos && cached.doc == doc2)
        return cached;
    }
    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc2, pos);
    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
    return result;
  }
}
let resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;
class NodeRange {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor($from, $to, depth) {
    this.$from = $from;
    this.$to = $to;
    this.depth = depth;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
}
const emptyAttrs = /* @__PURE__ */ Object.create(null);
let Node$2 = class Node2 {
  /**
  @internal
  */
  constructor(type, attrs, content, marks = Mark$1.none) {
    this.type = type;
    this.attrs = attrs;
    this.marks = marks;
    this.content = content || Fragment.empty;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(index2) {
    return this.content.child(index2);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(index2) {
    return this.content.maybeChild(index2);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(f2) {
    this.content.forEach(f2);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(from3, to, f2, startPos = 0) {
    this.content.nodesBetween(from3, to, f2, startPos, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(f2) {
    this.nodesBetween(0, this.content.size, f2);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(from3, to, blockSeparator, leafText) {
    return this.content.textBetween(from3, to, blockSeparator, leafText);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(other) {
    return this == other || this.sameMarkup(other) && this.content.eq(other.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(other) {
    return this.hasMarkup(other.type, other.attrs, other.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(type, attrs, marks) {
    return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark$1.sameSet(this.marks, marks || Mark$1.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(content = null) {
    if (content == this.content)
      return this;
    return new Node2(this.type, this.attrs, content, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(marks) {
    return marks == this.marks ? this : new Node2(this.type, this.attrs, this.content, marks);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(from3, to = this.content.size) {
    if (from3 == 0 && to == this.content.size)
      return this;
    return this.copy(this.content.cut(from3, to));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(from3, to = this.content.size, includeParents = false) {
    if (from3 == to)
      return Slice.empty;
    let $from = this.resolve(from3), $to = this.resolve(to);
    let depth = includeParents ? 0 : $from.sharedDepth(to);
    let start2 = $from.start(depth), node2 = $from.node(depth);
    let content = node2.content.cut($from.pos - start2, $to.pos - start2);
    return new Slice(content, $from.depth - depth, $to.depth - depth);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(from3, to, slice3) {
    return replace(this.resolve(from3), this.resolve(to), slice3);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(pos) {
    for (let node2 = this; ; ) {
      let { index: index2, offset: offset2 } = node2.content.findIndex(pos);
      node2 = node2.maybeChild(index2);
      if (!node2)
        return null;
      if (offset2 == pos || node2.isText)
        return node2;
      pos -= offset2 + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(pos) {
    let { index: index2, offset: offset2 } = this.content.findIndex(pos);
    return { node: this.content.maybeChild(index2), index: index2, offset: offset2 };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(pos) {
    if (pos == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: index2, offset: offset2 } = this.content.findIndex(pos);
    if (offset2 < pos)
      return { node: this.content.child(index2), index: index2, offset: offset2 };
    let node2 = this.content.child(index2 - 1);
    return { node: node2, index: index2 - 1, offset: offset2 - node2.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(pos) {
    return ResolvedPos.resolveCached(this, pos);
  }
  /**
  @internal
  */
  resolveNoCache(pos) {
    return ResolvedPos.resolve(this, pos);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(from3, to, type) {
    let found2 = false;
    if (to > from3)
      this.nodesBetween(from3, to, (node2) => {
        if (type.isInSet(node2.marks))
          found2 = true;
        return !found2;
      });
    return found2;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let name = this.type.name;
    if (this.content.size)
      name += "(" + this.content.toStringInner() + ")";
    return wrapMarks(this.marks, name);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(index2) {
    let match2 = this.type.contentMatch.matchFragment(this.content, 0, index2);
    if (!match2)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return match2;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(from3, to, replacement = Fragment.empty, start2 = 0, end2 = replacement.childCount) {
    let one = this.contentMatchAt(from3).matchFragment(replacement, start2, end2);
    let two = one && one.matchFragment(this.content, to);
    if (!two || !two.validEnd)
      return false;
    for (let i2 = start2; i2 < end2; i2++)
      if (!this.type.allowsMarks(replacement.child(i2).marks))
        return false;
    return true;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(from3, to, type, marks) {
    if (marks && !this.type.allowsMarks(marks))
      return false;
    let start2 = this.contentMatchAt(from3).matchType(type);
    let end2 = start2 && start2.matchFragment(this.content, to);
    return end2 ? end2.validEnd : false;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(other) {
    if (other.content.size)
      return this.canReplace(this.childCount, this.childCount, other.content);
    else
      return this.type.compatibleContent(other.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise error when they do not.
  */
  check() {
    this.type.checkContent(this.content);
    let copy2 = Mark$1.none;
    for (let i2 = 0; i2 < this.marks.length; i2++)
      copy2 = this.marks[i2].addToSet(copy2);
    if (!Mark$1.sameSet(copy2, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((m4) => m4.type.name)}`);
    this.content.forEach((node2) => node2.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let obj = { type: this.type.name };
    for (let _2 in this.attrs) {
      obj.attrs = this.attrs;
      break;
    }
    if (this.content.size)
      obj.content = this.content.toJSON();
    if (this.marks.length)
      obj.marks = this.marks.map((n2) => n2.toJSON());
    return obj;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(schema, json) {
    if (!json)
      throw new RangeError("Invalid input for Node.fromJSON");
    let marks = null;
    if (json.marks) {
      if (!Array.isArray(json.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      marks = json.marks.map(schema.markFromJSON);
    }
    if (json.type == "text") {
      if (typeof json.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return schema.text(json.text, marks);
    }
    let content = Fragment.fromJSON(schema, json.content);
    return schema.nodeType(json.type).create(json.attrs, content, marks);
  }
};
Node$2.prototype.text = void 0;
class TextNode extends Node$2 {
  /**
  @internal
  */
  constructor(type, attrs, content, marks) {
    super(type, attrs, null, marks);
    if (!content)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = content;
  }
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    return wrapMarks(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(from3, to) {
    return this.text.slice(from3, to);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(marks) {
    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
  }
  withText(text) {
    if (text == this.text)
      return this;
    return new TextNode(this.type, this.attrs, text, this.marks);
  }
  cut(from3 = 0, to = this.text.length) {
    if (from3 == 0 && to == this.text.length)
      return this;
    return this.withText(this.text.slice(from3, to));
  }
  eq(other) {
    return this.sameMarkup(other) && this.text == other.text;
  }
  toJSON() {
    let base2 = super.toJSON();
    base2.text = this.text;
    return base2;
  }
}
function wrapMarks(marks, str) {
  for (let i2 = marks.length - 1; i2 >= 0; i2--)
    str = marks[i2].type.name + "(" + str + ")";
  return str;
}
class ContentMatch {
  /**
  @internal
  */
  constructor(validEnd) {
    this.validEnd = validEnd;
    this.next = [];
    this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(string, nodeTypes) {
    let stream = new TokenStream(string, nodeTypes);
    if (stream.next == null)
      return ContentMatch.empty;
    let expr = parseExpr(stream);
    if (stream.next)
      stream.err("Unexpected trailing text");
    let match2 = dfa(nfa(expr));
    checkForDeadEnds(match2, stream);
    return match2;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(type) {
    for (let i2 = 0; i2 < this.next.length; i2++)
      if (this.next[i2].type == type)
        return this.next[i2].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(frag, start2 = 0, end2 = frag.childCount) {
    let cur = this;
    for (let i2 = start2; cur && i2 < end2; i2++)
      cur = cur.matchType(frag.child(i2).type);
    return cur;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let i2 = 0; i2 < this.next.length; i2++) {
      let { type } = this.next[i2];
      if (!(type.isText || type.hasRequiredAttrs()))
        return type;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(other) {
    for (let i2 = 0; i2 < this.next.length; i2++)
      for (let j2 = 0; j2 < other.next.length; j2++)
        if (this.next[i2].type == other.next[j2].type)
          return true;
    return false;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(after, toEnd = false, startIndex = 0) {
    let seen = [this];
    function search(match2, types) {
      let finished = match2.matchFragment(after, startIndex);
      if (finished && (!toEnd || finished.validEnd))
        return Fragment.from(types.map((tp) => tp.createAndFill()));
      for (let i2 = 0; i2 < match2.next.length; i2++) {
        let { type, next: next2 } = match2.next[i2];
        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next2) == -1) {
          seen.push(next2);
          let found2 = search(next2, types.concat(type));
          if (found2)
            return found2;
        }
      }
      return null;
    }
    return search(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(target) {
    for (let i2 = 0; i2 < this.wrapCache.length; i2 += 2)
      if (this.wrapCache[i2] == target)
        return this.wrapCache[i2 + 1];
    let computed = this.computeWrapping(target);
    this.wrapCache.push(target, computed);
    return computed;
  }
  /**
  @internal
  */
  computeWrapping(target) {
    let seen = /* @__PURE__ */ Object.create(null), active = [{ match: this, type: null, via: null }];
    while (active.length) {
      let current = active.shift(), match2 = current.match;
      if (match2.matchType(target)) {
        let result = [];
        for (let obj = current; obj.type; obj = obj.via)
          result.push(obj.type);
        return result.reverse();
      }
      for (let i2 = 0; i2 < match2.next.length; i2++) {
        let { type, next: next2 } = match2.next[i2];
        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next2.validEnd)) {
          active.push({ match: type.contentMatch, type, via: current });
          seen[type.name] = true;
        }
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(n2) {
    if (n2 >= this.next.length)
      throw new RangeError(`There's no ${n2}th edge in this content match`);
    return this.next[n2];
  }
  /**
  @internal
  */
  toString() {
    let seen = [];
    function scan(m4) {
      seen.push(m4);
      for (let i2 = 0; i2 < m4.next.length; i2++)
        if (seen.indexOf(m4.next[i2].next) == -1)
          scan(m4.next[i2].next);
    }
    scan(this);
    return seen.map((m4, i2) => {
      let out = i2 + (m4.validEnd ? "*" : " ") + " ";
      for (let i3 = 0; i3 < m4.next.length; i3++)
        out += (i3 ? ", " : "") + m4.next[i3].type.name + "->" + seen.indexOf(m4.next[i3].next);
      return out;
    }).join("\n");
  }
}
ContentMatch.empty = new ContentMatch(true);
class TokenStream {
  constructor(string, nodeTypes) {
    this.string = string;
    this.nodeTypes = nodeTypes;
    this.inline = null;
    this.pos = 0;
    this.tokens = string.split(/\s*(?=\b|\W|$)/);
    if (this.tokens[this.tokens.length - 1] == "")
      this.tokens.pop();
    if (this.tokens[0] == "")
      this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(tok) {
    return this.next == tok && (this.pos++ || true);
  }
  err(str) {
    throw new SyntaxError(str + " (in content expression '" + this.string + "')");
  }
}
function parseExpr(stream) {
  let exprs = [];
  do {
    exprs.push(parseExprSeq(stream));
  } while (stream.eat("|"));
  return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
}
function parseExprSeq(stream) {
  let exprs = [];
  do {
    exprs.push(parseExprSubscript(stream));
  } while (stream.next && stream.next != ")" && stream.next != "|");
  return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
}
function parseExprSubscript(stream) {
  let expr = parseExprAtom(stream);
  for (; ; ) {
    if (stream.eat("+"))
      expr = { type: "plus", expr };
    else if (stream.eat("*"))
      expr = { type: "star", expr };
    else if (stream.eat("?"))
      expr = { type: "opt", expr };
    else if (stream.eat("{"))
      expr = parseExprRange(stream, expr);
    else
      break;
  }
  return expr;
}
function parseNum(stream) {
  if (/\D/.test(stream.next))
    stream.err("Expected number, got '" + stream.next + "'");
  let result = Number(stream.next);
  stream.pos++;
  return result;
}
function parseExprRange(stream, expr) {
  let min2 = parseNum(stream), max2 = min2;
  if (stream.eat(",")) {
    if (stream.next != "}")
      max2 = parseNum(stream);
    else
      max2 = -1;
  }
  if (!stream.eat("}"))
    stream.err("Unclosed braced range");
  return { type: "range", min: min2, max: max2, expr };
}
function resolveName(stream, name) {
  let types = stream.nodeTypes, type = types[name];
  if (type)
    return [type];
  let result = [];
  for (let typeName in types) {
    let type2 = types[typeName];
    if (type2.groups.indexOf(name) > -1)
      result.push(type2);
  }
  if (result.length == 0)
    stream.err("No node type or group '" + name + "' found");
  return result;
}
function parseExprAtom(stream) {
  if (stream.eat("(")) {
    let expr = parseExpr(stream);
    if (!stream.eat(")"))
      stream.err("Missing closing paren");
    return expr;
  } else if (!/\W/.test(stream.next)) {
    let exprs = resolveName(stream, stream.next).map((type) => {
      if (stream.inline == null)
        stream.inline = type.isInline;
      else if (stream.inline != type.isInline)
        stream.err("Mixing inline and block content");
      return { type: "name", value: type };
    });
    stream.pos++;
    return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
  } else {
    stream.err("Unexpected token '" + stream.next + "'");
  }
}
function nfa(expr) {
  let nfa2 = [[]];
  connect(compile2(expr, 0), node2());
  return nfa2;
  function node2() {
    return nfa2.push([]) - 1;
  }
  function edge(from3, to, term) {
    let edge2 = { term, to };
    nfa2[from3].push(edge2);
    return edge2;
  }
  function connect(edges, to) {
    edges.forEach((edge2) => edge2.to = to);
  }
  function compile2(expr2, from3) {
    if (expr2.type == "choice") {
      return expr2.exprs.reduce((out, expr3) => out.concat(compile2(expr3, from3)), []);
    } else if (expr2.type == "seq") {
      for (let i2 = 0; ; i2++) {
        let next2 = compile2(expr2.exprs[i2], from3);
        if (i2 == expr2.exprs.length - 1)
          return next2;
        connect(next2, from3 = node2());
      }
    } else if (expr2.type == "star") {
      let loop = node2();
      edge(from3, loop);
      connect(compile2(expr2.expr, loop), loop);
      return [edge(loop)];
    } else if (expr2.type == "plus") {
      let loop = node2();
      connect(compile2(expr2.expr, from3), loop);
      connect(compile2(expr2.expr, loop), loop);
      return [edge(loop)];
    } else if (expr2.type == "opt") {
      return [edge(from3)].concat(compile2(expr2.expr, from3));
    } else if (expr2.type == "range") {
      let cur = from3;
      for (let i2 = 0; i2 < expr2.min; i2++) {
        let next2 = node2();
        connect(compile2(expr2.expr, cur), next2);
        cur = next2;
      }
      if (expr2.max == -1) {
        connect(compile2(expr2.expr, cur), cur);
      } else {
        for (let i2 = expr2.min; i2 < expr2.max; i2++) {
          let next2 = node2();
          edge(cur, next2);
          connect(compile2(expr2.expr, cur), next2);
          cur = next2;
        }
      }
      return [edge(cur)];
    } else if (expr2.type == "name") {
      return [edge(from3, void 0, expr2.value)];
    } else {
      throw new Error("Unknown expr type");
    }
  }
}
function cmp(a4, b3) {
  return b3 - a4;
}
function nullFrom(nfa2, node2) {
  let result = [];
  scan(node2);
  return result.sort(cmp);
  function scan(node3) {
    let edges = nfa2[node3];
    if (edges.length == 1 && !edges[0].term)
      return scan(edges[0].to);
    result.push(node3);
    for (let i2 = 0; i2 < edges.length; i2++) {
      let { term, to } = edges[i2];
      if (!term && result.indexOf(to) == -1)
        scan(to);
    }
  }
}
function dfa(nfa2) {
  let labeled = /* @__PURE__ */ Object.create(null);
  return explore(nullFrom(nfa2, 0));
  function explore(states) {
    let out = [];
    states.forEach((node2) => {
      nfa2[node2].forEach(({ term, to }) => {
        if (!term)
          return;
        let set2;
        for (let i2 = 0; i2 < out.length; i2++)
          if (out[i2][0] == term)
            set2 = out[i2][1];
        nullFrom(nfa2, to).forEach((node3) => {
          if (!set2)
            out.push([term, set2 = []]);
          if (set2.indexOf(node3) == -1)
            set2.push(node3);
        });
      });
    });
    let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa2.length - 1) > -1);
    for (let i2 = 0; i2 < out.length; i2++) {
      let states2 = out[i2][1].sort(cmp);
      state.next.push({ type: out[i2][0], next: labeled[states2.join(",")] || explore(states2) });
    }
    return state;
  }
}
function checkForDeadEnds(match2, stream) {
  for (let i2 = 0, work = [match2]; i2 < work.length; i2++) {
    let state = work[i2], dead = !state.validEnd, nodes = [];
    for (let j2 = 0; j2 < state.next.length; j2++) {
      let { type, next: next2 } = state.next[j2];
      nodes.push(type.name);
      if (dead && !(type.isText || type.hasRequiredAttrs()))
        dead = false;
      if (work.indexOf(next2) == -1)
        work.push(next2);
    }
    if (dead)
      stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function defaultAttrs(attrs) {
  let defaults2 = /* @__PURE__ */ Object.create(null);
  for (let attrName in attrs) {
    let attr = attrs[attrName];
    if (!attr.hasDefault)
      return null;
    defaults2[attrName] = attr.default;
  }
  return defaults2;
}
function computeAttrs(attrs, value) {
  let built = /* @__PURE__ */ Object.create(null);
  for (let name in attrs) {
    let given = value && value[name];
    if (given === void 0) {
      let attr = attrs[name];
      if (attr.hasDefault)
        given = attr.default;
      else
        throw new RangeError("No value supplied for attribute " + name);
    }
    built[name] = given;
  }
  return built;
}
function initAttrs(attrs) {
  let result = /* @__PURE__ */ Object.create(null);
  if (attrs)
    for (let name in attrs)
      result[name] = new Attribute(attrs[name]);
  return result;
}
let NodeType$1 = class NodeType {
  /**
  @internal
  */
  constructor(name, schema, spec) {
    this.name = name;
    this.schema = schema;
    this.spec = spec;
    this.markSet = null;
    this.groups = spec.group ? spec.group.split(" ") : [];
    this.attrs = initAttrs(spec.attrs);
    this.defaultAttrs = defaultAttrs(this.attrs);
    this.contentMatch = null;
    this.inlineContent = null;
    this.isBlock = !(spec.inline || name == "text");
    this.isText = name == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == ContentMatch.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let n2 in this.attrs)
      if (this.attrs[n2].isRequired)
        return true;
    return false;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(other) {
    return this == other || this.contentMatch.compatible(other.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(attrs) {
    if (!attrs && this.defaultAttrs)
      return this.defaultAttrs;
    else
      return computeAttrs(this.attrs, attrs);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(attrs = null, content, marks) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new Node$2(this, this.computeAttrs(attrs), Fragment.from(content), Mark$1.setFrom(marks));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(attrs = null, content, marks) {
    content = Fragment.from(content);
    this.checkContent(content);
    return new Node$2(this, this.computeAttrs(attrs), content, Mark$1.setFrom(marks));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(attrs = null, content, marks) {
    attrs = this.computeAttrs(attrs);
    content = Fragment.from(content);
    if (content.size) {
      let before = this.contentMatch.fillBefore(content);
      if (!before)
        return null;
      content = before.append(content);
    }
    let matched = this.contentMatch.matchFragment(content);
    let after = matched && matched.fillBefore(Fragment.empty, true);
    if (!after)
      return null;
    return new Node$2(this, attrs, content.append(after), Mark$1.setFrom(marks));
  }
  /**
  Returns true if the given fragment is valid content for this node
  type with the given attributes.
  */
  validContent(content) {
    let result = this.contentMatch.matchFragment(content);
    if (!result || !result.validEnd)
      return false;
    for (let i2 = 0; i2 < content.childCount; i2++)
      if (!this.allowsMarks(content.child(i2).marks))
        return false;
    return true;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(content) {
    if (!this.validContent(content))
      throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(markType) {
    return this.markSet == null || this.markSet.indexOf(markType) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(marks) {
    if (this.markSet == null)
      return true;
    for (let i2 = 0; i2 < marks.length; i2++)
      if (!this.allowsMarkType(marks[i2].type))
        return false;
    return true;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(marks) {
    if (this.markSet == null)
      return marks;
    let copy2;
    for (let i2 = 0; i2 < marks.length; i2++) {
      if (!this.allowsMarkType(marks[i2].type)) {
        if (!copy2)
          copy2 = marks.slice(0, i2);
      } else if (copy2) {
        copy2.push(marks[i2]);
      }
    }
    return !copy2 ? marks : copy2.length ? copy2 : Mark$1.none;
  }
  /**
  @internal
  */
  static compile(nodes, schema) {
    let result = /* @__PURE__ */ Object.create(null);
    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
    let topType = schema.spec.topNode || "doc";
    if (!result[topType])
      throw new RangeError("Schema is missing its top node type ('" + topType + "')");
    if (!result.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let _2 in result.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return result;
  }
};
class Attribute {
  constructor(options) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
    this.default = options.default;
  }
  get isRequired() {
    return !this.hasDefault;
  }
}
class MarkType {
  /**
  @internal
  */
  constructor(name, rank, schema, spec) {
    this.name = name;
    this.rank = rank;
    this.schema = schema;
    this.spec = spec;
    this.attrs = initAttrs(spec.attrs);
    this.excluded = null;
    let defaults2 = defaultAttrs(this.attrs);
    this.instance = defaults2 ? new Mark$1(this, defaults2) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(attrs = null) {
    if (!attrs && this.instance)
      return this.instance;
    return new Mark$1(this, computeAttrs(this.attrs, attrs));
  }
  /**
  @internal
  */
  static compile(marks, schema) {
    let result = /* @__PURE__ */ Object.create(null), rank = 0;
    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
    return result;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(set2) {
    for (var i2 = 0; i2 < set2.length; i2++)
      if (set2[i2].type == this) {
        set2 = set2.slice(0, i2).concat(set2.slice(i2 + 1));
        i2--;
      }
    return set2;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(set2) {
    for (let i2 = 0; i2 < set2.length; i2++)
      if (set2[i2].type == this)
        return set2[i2];
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(other) {
    return this.excluded.indexOf(other) > -1;
  }
}
class Schema {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(spec) {
    this.cached = /* @__PURE__ */ Object.create(null);
    let instanceSpec = this.spec = {};
    for (let prop in spec)
      instanceSpec[prop] = spec[prop];
    instanceSpec.nodes = OrderedMap.from(spec.nodes), instanceSpec.marks = OrderedMap.from(spec.marks || {}), this.nodes = NodeType$1.compile(this.spec.nodes, this);
    this.marks = MarkType.compile(this.spec.marks, this);
    let contentExprCache = /* @__PURE__ */ Object.create(null);
    for (let prop in this.nodes) {
      if (prop in this.marks)
        throw new RangeError(prop + " can not be both a node and a mark");
      let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
      type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
      type.inlineContent = type.contentMatch.inlineContent;
      type.markSet = markExpr == "_" ? null : markExpr ? gatherMarks(this, markExpr.split(" ")) : markExpr == "" || !type.inlineContent ? [] : null;
    }
    for (let prop in this.marks) {
      let type = this.marks[prop], excl = type.spec.excludes;
      type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this);
    this.markFromJSON = this.markFromJSON.bind(this);
    this.topNodeType = this.nodes[this.spec.topNode || "doc"];
    this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(type, attrs = null, content, marks) {
    if (typeof type == "string")
      type = this.nodeType(type);
    else if (!(type instanceof NodeType$1))
      throw new RangeError("Invalid node type: " + type);
    else if (type.schema != this)
      throw new RangeError("Node type from different schema used (" + type.name + ")");
    return type.createChecked(attrs, content, marks);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(text, marks) {
    let type = this.nodes.text;
    return new TextNode(type, type.defaultAttrs, text, Mark$1.setFrom(marks));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(type, attrs) {
    if (typeof type == "string")
      type = this.marks[type];
    return type.create(attrs);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(json) {
    return Node$2.fromJSON(this, json);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(json) {
    return Mark$1.fromJSON(this, json);
  }
  /**
  @internal
  */
  nodeType(name) {
    let found2 = this.nodes[name];
    if (!found2)
      throw new RangeError("Unknown node type: " + name);
    return found2;
  }
}
function gatherMarks(schema, marks) {
  let found2 = [];
  for (let i2 = 0; i2 < marks.length; i2++) {
    let name = marks[i2], mark = schema.marks[name], ok = mark;
    if (mark) {
      found2.push(mark);
    } else {
      for (let prop in schema.marks) {
        let mark2 = schema.marks[prop];
        if (name == "_" || mark2.spec.group && mark2.spec.group.split(" ").indexOf(name) > -1)
          found2.push(ok = mark2);
      }
    }
    if (!ok)
      throw new SyntaxError("Unknown mark type: '" + marks[i2] + "'");
  }
  return found2;
}
let DOMParser$1 = class DOMParser2 {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(schema, rules) {
    this.schema = schema;
    this.rules = rules;
    this.tags = [];
    this.styles = [];
    rules.forEach((rule) => {
      if (rule.tag)
        this.tags.push(rule);
      else if (rule.style)
        this.styles.push(rule);
    });
    this.normalizeLists = !this.tags.some((r2) => {
      if (!/^(ul|ol)\b/.test(r2.tag) || !r2.node)
        return false;
      let node2 = schema.nodes[r2.node];
      return node2.contentMatch.matchType(node2);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(dom, options = {}) {
    let context = new ParseContext(this, options, false);
    context.addAll(dom, options.from, options.to);
    return context.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(dom, options = {}) {
    let context = new ParseContext(this, options, true);
    context.addAll(dom, options.from, options.to);
    return Slice.maxOpen(context.finish());
  }
  /**
  @internal
  */
  matchTag(dom, context, after) {
    for (let i2 = after ? this.tags.indexOf(after) + 1 : 0; i2 < this.tags.length; i2++) {
      let rule = this.tags[i2];
      if (matches(dom, rule.tag) && (rule.namespace === void 0 || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {
        if (rule.getAttrs) {
          let result = rule.getAttrs(dom);
          if (result === false)
            continue;
          rule.attrs = result || void 0;
        }
        return rule;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(prop, value, context, after) {
    for (let i2 = after ? this.styles.indexOf(after) + 1 : 0; i2 < this.styles.length; i2++) {
      let rule = this.styles[i2], style2 = rule.style;
      if (style2.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      style2.length > prop.length && (style2.charCodeAt(prop.length) != 61 || style2.slice(prop.length + 1) != value))
        continue;
      if (rule.getAttrs) {
        let result = rule.getAttrs(value);
        if (result === false)
          continue;
        rule.attrs = result || void 0;
      }
      return rule;
    }
  }
  /**
  @internal
  */
  static schemaRules(schema) {
    let result = [];
    function insert(rule) {
      let priority = rule.priority == null ? 50 : rule.priority, i2 = 0;
      for (; i2 < result.length; i2++) {
        let next2 = result[i2], nextPriority = next2.priority == null ? 50 : next2.priority;
        if (nextPriority < priority)
          break;
      }
      result.splice(i2, 0, rule);
    }
    for (let name in schema.marks) {
      let rules = schema.marks[name].spec.parseDOM;
      if (rules)
        rules.forEach((rule) => {
          insert(rule = copy(rule));
          if (!(rule.mark || rule.ignore || rule.clearMark))
            rule.mark = name;
        });
    }
    for (let name in schema.nodes) {
      let rules = schema.nodes[name].spec.parseDOM;
      if (rules)
        rules.forEach((rule) => {
          insert(rule = copy(rule));
          if (!(rule.node || rule.ignore || rule.mark))
            rule.node = name;
        });
    }
    return result;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(schema) {
    return schema.cached.domParser || (schema.cached.domParser = new DOMParser2(schema, DOMParser2.schemaRules(schema)));
  }
};
const blockTags = {
  address: true,
  article: true,
  aside: true,
  blockquote: true,
  canvas: true,
  dd: true,
  div: true,
  dl: true,
  fieldset: true,
  figcaption: true,
  figure: true,
  footer: true,
  form: true,
  h1: true,
  h2: true,
  h3: true,
  h4: true,
  h5: true,
  h6: true,
  header: true,
  hgroup: true,
  hr: true,
  li: true,
  noscript: true,
  ol: true,
  output: true,
  p: true,
  pre: true,
  section: true,
  table: true,
  tfoot: true,
  ul: true
};
const ignoreTags = {
  head: true,
  noscript: true,
  object: true,
  script: true,
  style: true,
  title: true
};
const listTags = { ol: true, ul: true };
const OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;
function wsOptionsFor(type, preserveWhitespace, base2) {
  if (preserveWhitespace != null)
    return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
  return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base2 & ~OPT_OPEN_LEFT;
}
class NodeContext {
  constructor(type, attrs, marks, pendingMarks, solid, match2, options) {
    this.type = type;
    this.attrs = attrs;
    this.marks = marks;
    this.pendingMarks = pendingMarks;
    this.solid = solid;
    this.options = options;
    this.content = [];
    this.activeMarks = Mark$1.none;
    this.stashMarks = [];
    this.match = match2 || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
  }
  findWrapping(node2) {
    if (!this.match) {
      if (!this.type)
        return [];
      let fill = this.type.contentMatch.fillBefore(Fragment.from(node2));
      if (fill) {
        this.match = this.type.contentMatch.matchFragment(fill);
      } else {
        let start2 = this.type.contentMatch, wrap2;
        if (wrap2 = start2.findWrapping(node2.type)) {
          this.match = start2;
          return wrap2;
        } else {
          return null;
        }
      }
    }
    return this.match.findWrapping(node2.type);
  }
  finish(openEnd) {
    if (!(this.options & OPT_PRESERVE_WS)) {
      let last = this.content[this.content.length - 1], m4;
      if (last && last.isText && (m4 = /[ \t\r\n\u000c]+$/.exec(last.text))) {
        let text = last;
        if (last.text.length == m4[0].length)
          this.content.pop();
        else
          this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m4[0].length));
      }
    }
    let content = Fragment.from(this.content);
    if (!openEnd && this.match)
      content = content.append(this.match.fillBefore(Fragment.empty, true));
    return this.type ? this.type.create(this.attrs, content, this.marks) : content;
  }
  popFromStashMark(mark) {
    for (let i2 = this.stashMarks.length - 1; i2 >= 0; i2--)
      if (mark.eq(this.stashMarks[i2]))
        return this.stashMarks.splice(i2, 1)[0];
  }
  applyPending(nextType) {
    for (let i2 = 0, pending = this.pendingMarks; i2 < pending.length; i2++) {
      let mark = pending[i2];
      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) && !mark.isInSet(this.activeMarks)) {
        this.activeMarks = mark.addToSet(this.activeMarks);
        this.pendingMarks = mark.removeFromSet(this.pendingMarks);
      }
    }
  }
  inlineContext(node2) {
    if (this.type)
      return this.type.inlineContent;
    if (this.content.length)
      return this.content[0].isInline;
    return node2.parentNode && !blockTags.hasOwnProperty(node2.parentNode.nodeName.toLowerCase());
  }
}
class ParseContext {
  constructor(parser, options, isOpen) {
    this.parser = parser;
    this.options = options;
    this.isOpen = isOpen;
    this.open = 0;
    let topNode = options.topNode, topContext;
    let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
    if (topNode)
      topContext = new NodeContext(topNode.type, topNode.attrs, Mark$1.none, Mark$1.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
    else if (isOpen)
      topContext = new NodeContext(null, null, Mark$1.none, Mark$1.none, true, null, topOptions);
    else
      topContext = new NodeContext(parser.schema.topNodeType, null, Mark$1.none, Mark$1.none, true, null, topOptions);
    this.nodes = [topContext];
    this.find = options.findPositions;
    this.needsBlock = false;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(dom) {
    if (dom.nodeType == 3)
      this.addTextNode(dom);
    else if (dom.nodeType == 1)
      this.addElement(dom);
  }
  withStyleRules(dom, f2) {
    let style2 = dom.getAttribute("style");
    if (!style2)
      return f2();
    let marks = this.readStyles(parseStyles(style2));
    if (!marks)
      return;
    let [addMarks, removeMarks] = marks, top2 = this.top;
    for (let i2 = 0; i2 < removeMarks.length; i2++)
      this.removePendingMark(removeMarks[i2], top2);
    for (let i2 = 0; i2 < addMarks.length; i2++)
      this.addPendingMark(addMarks[i2]);
    f2();
    for (let i2 = 0; i2 < addMarks.length; i2++)
      this.removePendingMark(addMarks[i2], top2);
    for (let i2 = 0; i2 < removeMarks.length; i2++)
      this.addPendingMark(removeMarks[i2]);
  }
  addTextNode(dom) {
    let value = dom.nodeValue;
    let top2 = this.top;
    if (top2.options & OPT_PRESERVE_WS_FULL || top2.inlineContext(dom) || /[^ \t\r\n\u000c]/.test(value)) {
      if (!(top2.options & OPT_PRESERVE_WS)) {
        value = value.replace(/[ \t\r\n\u000c]+/g, " ");
        if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
          let nodeBefore = top2.content[top2.content.length - 1];
          let domNodeBefore = dom.previousSibling;
          if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == "BR" || nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text))
            value = value.slice(1);
        }
      } else if (!(top2.options & OPT_PRESERVE_WS_FULL)) {
        value = value.replace(/\r?\n|\r/g, " ");
      } else {
        value = value.replace(/\r\n?/g, "\n");
      }
      if (value)
        this.insertNode(this.parser.schema.text(value));
      this.findInText(dom);
    } else {
      this.findInside(dom);
    }
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(dom, matchAfter) {
    let name = dom.nodeName.toLowerCase(), ruleID;
    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
      normalizeList(dom);
    let rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || (ruleID = this.parser.matchTag(dom, this, matchAfter));
    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
      this.findInside(dom);
      this.ignoreFallback(dom);
    } else if (!rule || rule.skip || rule.closeParent) {
      if (rule && rule.closeParent)
        this.open = Math.max(0, this.open - 1);
      else if (rule && rule.skip.nodeType)
        dom = rule.skip;
      let sync2, top2 = this.top, oldNeedsBlock = this.needsBlock;
      if (blockTags.hasOwnProperty(name)) {
        if (top2.content.length && top2.content[0].isInline && this.open) {
          this.open--;
          top2 = this.top;
        }
        sync2 = true;
        if (!top2.type)
          this.needsBlock = true;
      } else if (!dom.firstChild) {
        this.leafFallback(dom);
        return;
      }
      if (rule && rule.skip)
        this.addAll(dom);
      else
        this.withStyleRules(dom, () => this.addAll(dom));
      if (sync2)
        this.sync(top2);
      this.needsBlock = oldNeedsBlock;
    } else {
      this.withStyleRules(dom, () => {
        this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : void 0);
      });
    }
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(dom) {
    if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
      this.addTextNode(dom.ownerDocument.createTextNode("\n"));
  }
  // Called for ignored nodes
  ignoreFallback(dom) {
    if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
      this.findPlace(this.parser.schema.text("-"));
  }
  // Run any style parser associated with the node's styles. Either
  // return an array of marks, or null to indicate some of the styles
  // had a rule with `ignore` set.
  readStyles(styles) {
    let add2 = Mark$1.none, remove = Mark$1.none;
    for (let i2 = 0; i2 < styles.length; i2 += 2) {
      for (let after = void 0; ; ) {
        let rule = this.parser.matchStyle(styles[i2], styles[i2 + 1], this, after);
        if (!rule)
          break;
        if (rule.ignore)
          return null;
        if (rule.clearMark) {
          this.top.pendingMarks.concat(this.top.activeMarks).forEach((m4) => {
            if (rule.clearMark(m4))
              remove = m4.addToSet(remove);
          });
        } else {
          add2 = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add2);
        }
        if (rule.consuming === false)
          after = rule;
        else
          break;
      }
    }
    return [add2, remove];
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(dom, rule, continueAfter) {
    let sync2, nodeType, mark;
    if (rule.node) {
      nodeType = this.parser.schema.nodes[rule.node];
      if (!nodeType.isLeaf) {
        sync2 = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
      } else if (!this.insertNode(nodeType.create(rule.attrs))) {
        this.leafFallback(dom);
      }
    } else {
      let markType = this.parser.schema.marks[rule.mark];
      mark = markType.create(rule.attrs);
      this.addPendingMark(mark);
    }
    let startIn = this.top;
    if (nodeType && nodeType.isLeaf) {
      this.findInside(dom);
    } else if (continueAfter) {
      this.addElement(dom, continueAfter);
    } else if (rule.getContent) {
      this.findInside(dom);
      rule.getContent(dom, this.parser.schema).forEach((node2) => this.insertNode(node2));
    } else {
      let contentDOM = dom;
      if (typeof rule.contentElement == "string")
        contentDOM = dom.querySelector(rule.contentElement);
      else if (typeof rule.contentElement == "function")
        contentDOM = rule.contentElement(dom);
      else if (rule.contentElement)
        contentDOM = rule.contentElement;
      this.findAround(dom, contentDOM, true);
      this.addAll(contentDOM);
    }
    if (sync2 && this.sync(startIn))
      this.open--;
    if (mark)
      this.removePendingMark(mark, startIn);
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(parent, startIndex, endIndex) {
    let index2 = startIndex || 0;
    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end2 = endIndex == null ? null : parent.childNodes[endIndex]; dom != end2; dom = dom.nextSibling, ++index2) {
      this.findAtPoint(parent, index2);
      this.addDOM(dom);
    }
    this.findAtPoint(parent, index2);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(node2) {
    let route, sync2;
    for (let depth = this.open; depth >= 0; depth--) {
      let cx = this.nodes[depth];
      let found2 = cx.findWrapping(node2);
      if (found2 && (!route || route.length > found2.length)) {
        route = found2;
        sync2 = cx;
        if (!found2.length)
          break;
      }
      if (cx.solid)
        break;
    }
    if (!route)
      return false;
    this.sync(sync2);
    for (let i2 = 0; i2 < route.length; i2++)
      this.enterInner(route[i2], null, false);
    return true;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(node2) {
    if (node2.isInline && this.needsBlock && !this.top.type) {
      let block = this.textblockFromContext();
      if (block)
        this.enterInner(block);
    }
    if (this.findPlace(node2)) {
      this.closeExtra();
      let top2 = this.top;
      top2.applyPending(node2.type);
      if (top2.match)
        top2.match = top2.match.matchType(node2.type);
      let marks = top2.activeMarks;
      for (let i2 = 0; i2 < node2.marks.length; i2++)
        if (!top2.type || top2.type.allowsMarkType(node2.marks[i2].type))
          marks = node2.marks[i2].addToSet(marks);
      top2.content.push(node2.mark(marks));
      return true;
    }
    return false;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(type, attrs, preserveWS) {
    let ok = this.findPlace(type.create(attrs));
    if (ok)
      this.enterInner(type, attrs, true, preserveWS);
    return ok;
  }
  // Open a node of the given type
  enterInner(type, attrs = null, solid = false, preserveWS) {
    this.closeExtra();
    let top2 = this.top;
    top2.applyPending(type);
    top2.match = top2.match && top2.match.matchType(type);
    let options = wsOptionsFor(type, preserveWS, top2.options);
    if (top2.options & OPT_OPEN_LEFT && top2.content.length == 0)
      options |= OPT_OPEN_LEFT;
    this.nodes.push(new NodeContext(type, attrs, top2.activeMarks, top2.pendingMarks, solid, null, options));
    this.open++;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(openEnd = false) {
    let i2 = this.nodes.length - 1;
    if (i2 > this.open) {
      for (; i2 > this.open; i2--)
        this.nodes[i2 - 1].content.push(this.nodes[i2].finish(openEnd));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    this.open = 0;
    this.closeExtra(this.isOpen);
    return this.nodes[0].finish(this.isOpen || this.options.topOpen);
  }
  sync(to) {
    for (let i2 = this.open; i2 >= 0; i2--)
      if (this.nodes[i2] == to) {
        this.open = i2;
        return true;
      }
    return false;
  }
  get currentPos() {
    this.closeExtra();
    let pos = 0;
    for (let i2 = this.open; i2 >= 0; i2--) {
      let content = this.nodes[i2].content;
      for (let j2 = content.length - 1; j2 >= 0; j2--)
        pos += content[j2].nodeSize;
      if (i2)
        pos++;
    }
    return pos;
  }
  findAtPoint(parent, offset2) {
    if (this.find)
      for (let i2 = 0; i2 < this.find.length; i2++) {
        if (this.find[i2].node == parent && this.find[i2].offset == offset2)
          this.find[i2].pos = this.currentPos;
      }
  }
  findInside(parent) {
    if (this.find)
      for (let i2 = 0; i2 < this.find.length; i2++) {
        if (this.find[i2].pos == null && parent.nodeType == 1 && parent.contains(this.find[i2].node))
          this.find[i2].pos = this.currentPos;
      }
  }
  findAround(parent, content, before) {
    if (parent != content && this.find)
      for (let i2 = 0; i2 < this.find.length; i2++) {
        if (this.find[i2].pos == null && parent.nodeType == 1 && parent.contains(this.find[i2].node)) {
          let pos = content.compareDocumentPosition(this.find[i2].node);
          if (pos & (before ? 2 : 4))
            this.find[i2].pos = this.currentPos;
        }
      }
  }
  findInText(textNode) {
    if (this.find)
      for (let i2 = 0; i2 < this.find.length; i2++) {
        if (this.find[i2].node == textNode)
          this.find[i2].pos = this.currentPos - (textNode.nodeValue.length - this.find[i2].offset);
      }
  }
  // Determines whether the given context string matches this context.
  matchesContext(context) {
    if (context.indexOf("|") > -1)
      return context.split(/\s*\|\s*/).some(this.matchesContext, this);
    let parts = context.split("/");
    let option = this.options.context;
    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
    let match2 = (i2, depth) => {
      for (; i2 >= 0; i2--) {
        let part = parts[i2];
        if (part == "") {
          if (i2 == parts.length - 1 || i2 == 0)
            continue;
          for (; depth >= minDepth; depth--)
            if (match2(i2 - 1, depth))
              return true;
          return false;
        } else {
          let next2 = depth > 0 || depth == 0 && useRoot ? this.nodes[depth].type : option && depth >= minDepth ? option.node(depth - minDepth).type : null;
          if (!next2 || next2.name != part && next2.groups.indexOf(part) == -1)
            return false;
          depth--;
        }
      }
      return true;
    };
    return match2(parts.length - 1, this.open);
  }
  textblockFromContext() {
    let $context = this.options.context;
    if ($context)
      for (let d4 = $context.depth; d4 >= 0; d4--) {
        let deflt = $context.node(d4).contentMatchAt($context.indexAfter(d4)).defaultType;
        if (deflt && deflt.isTextblock && deflt.defaultAttrs)
          return deflt;
      }
    for (let name in this.parser.schema.nodes) {
      let type = this.parser.schema.nodes[name];
      if (type.isTextblock && type.defaultAttrs)
        return type;
    }
  }
  addPendingMark(mark) {
    let found2 = findSameMarkInSet(mark, this.top.pendingMarks);
    if (found2)
      this.top.stashMarks.push(found2);
    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
  }
  removePendingMark(mark, upto) {
    for (let depth = this.open; depth >= 0; depth--) {
      let level = this.nodes[depth];
      let found2 = level.pendingMarks.lastIndexOf(mark);
      if (found2 > -1) {
        level.pendingMarks = mark.removeFromSet(level.pendingMarks);
      } else {
        level.activeMarks = mark.removeFromSet(level.activeMarks);
        let stashMark = level.popFromStashMark(mark);
        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
          level.activeMarks = stashMark.addToSet(level.activeMarks);
      }
      if (level == upto)
        break;
    }
  }
}
function normalizeList(dom) {
  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
    if (name && listTags.hasOwnProperty(name) && prevItem) {
      prevItem.appendChild(child);
      child = prevItem;
    } else if (name == "li") {
      prevItem = child;
    } else if (name) {
      prevItem = null;
    }
  }
}
function matches(dom, selector) {
  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
}
function parseStyles(style2) {
  let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m4, result = [];
  while (m4 = re.exec(style2))
    result.push(m4[1], m4[2].trim());
  return result;
}
function copy(obj) {
  let copy2 = {};
  for (let prop in obj)
    copy2[prop] = obj[prop];
  return copy2;
}
function markMayApply(markType, nodeType) {
  let nodes = nodeType.schema.nodes;
  for (let name in nodes) {
    let parent = nodes[name];
    if (!parent.allowsMarkType(markType))
      continue;
    let seen = [], scan = (match2) => {
      seen.push(match2);
      for (let i2 = 0; i2 < match2.edgeCount; i2++) {
        let { type, next: next2 } = match2.edge(i2);
        if (type == nodeType)
          return true;
        if (seen.indexOf(next2) < 0 && scan(next2))
          return true;
      }
    };
    if (scan(parent.contentMatch))
      return true;
  }
}
function findSameMarkInSet(mark, set2) {
  for (let i2 = 0; i2 < set2.length; i2++) {
    if (mark.eq(set2[i2]))
      return set2[i2];
  }
}
class DOMSerializer {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(nodes, marks) {
    this.nodes = nodes;
    this.marks = marks;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(fragment, options = {}, target) {
    if (!target)
      target = doc$1(options).createDocumentFragment();
    let top2 = target, active = [];
    fragment.forEach((node2) => {
      if (active.length || node2.marks.length) {
        let keep = 0, rendered = 0;
        while (keep < active.length && rendered < node2.marks.length) {
          let next2 = node2.marks[rendered];
          if (!this.marks[next2.type.name]) {
            rendered++;
            continue;
          }
          if (!next2.eq(active[keep][0]) || next2.type.spec.spanning === false)
            break;
          keep++;
          rendered++;
        }
        while (keep < active.length)
          top2 = active.pop()[1];
        while (rendered < node2.marks.length) {
          let add2 = node2.marks[rendered++];
          let markDOM = this.serializeMark(add2, node2.isInline, options);
          if (markDOM) {
            active.push([add2, top2]);
            top2.appendChild(markDOM.dom);
            top2 = markDOM.contentDOM || markDOM.dom;
          }
        }
      }
      top2.appendChild(this.serializeNodeInner(node2, options));
    });
    return target;
  }
  /**
  @internal
  */
  serializeNodeInner(node2, options) {
    let { dom, contentDOM } = DOMSerializer.renderSpec(doc$1(options), this.nodes[node2.type.name](node2));
    if (contentDOM) {
      if (node2.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(node2.content, options, contentDOM);
    }
    return dom;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(node2, options = {}) {
    let dom = this.serializeNodeInner(node2, options);
    for (let i2 = node2.marks.length - 1; i2 >= 0; i2--) {
      let wrap2 = this.serializeMark(node2.marks[i2], node2.isInline, options);
      if (wrap2) {
        (wrap2.contentDOM || wrap2.dom).appendChild(dom);
        dom = wrap2.dom;
      }
    }
    return dom;
  }
  /**
  @internal
  */
  serializeMark(mark, inline, options = {}) {
    let toDOM = this.marks[mark.type.name];
    return toDOM && DOMSerializer.renderSpec(doc$1(options), toDOM(mark, inline));
  }
  /**
  Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
  the spec has a hole (zero) in it, `contentDOM` will point at the
  node with the hole.
  */
  static renderSpec(doc2, structure, xmlNS = null) {
    if (typeof structure == "string")
      return { dom: doc2.createTextNode(structure) };
    if (structure.nodeType != null)
      return { dom: structure };
    if (structure.dom && structure.dom.nodeType != null)
      return structure;
    let tagName = structure[0], space = tagName.indexOf(" ");
    if (space > 0) {
      xmlNS = tagName.slice(0, space);
      tagName = tagName.slice(space + 1);
    }
    let contentDOM;
    let dom = xmlNS ? doc2.createElementNS(xmlNS, tagName) : doc2.createElement(tagName);
    let attrs = structure[1], start2 = 1;
    if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
      start2 = 2;
      for (let name in attrs)
        if (attrs[name] != null) {
          let space2 = name.indexOf(" ");
          if (space2 > 0)
            dom.setAttributeNS(name.slice(0, space2), name.slice(space2 + 1), attrs[name]);
          else
            dom.setAttribute(name, attrs[name]);
        }
    }
    for (let i2 = start2; i2 < structure.length; i2++) {
      let child = structure[i2];
      if (child === 0) {
        if (i2 < structure.length - 1 || i2 > start2)
          throw new RangeError("Content hole must be the only child of its parent node");
        return { dom, contentDOM: dom };
      } else {
        let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc2, child, xmlNS);
        dom.appendChild(inner);
        if (innerContent) {
          if (contentDOM)
            throw new RangeError("Multiple content holes");
          contentDOM = innerContent;
        }
      }
    }
    return { dom, contentDOM };
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(schema) {
    return schema.cached.domSerializer || (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(schema) {
    let result = gatherToDOM(schema.nodes);
    if (!result.text)
      result.text = (node2) => node2.text;
    return result;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(schema) {
    return gatherToDOM(schema.marks);
  }
}
function gatherToDOM(obj) {
  let result = {};
  for (let name in obj) {
    let toDOM = obj[name].spec.toDOM;
    if (toDOM)
      result[name] = toDOM;
  }
  return result;
}
function doc$1(options) {
  return options.document || window.document;
}
const lower16 = 65535;
const factor16 = Math.pow(2, 16);
function makeRecover(index2, offset2) {
  return index2 + offset2 * factor16;
}
function recoverIndex(value) {
  return value & lower16;
}
function recoverOffset(value) {
  return (value - (value & lower16)) / factor16;
}
const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
class MapResult {
  /**
  @internal
  */
  constructor(pos, delInfo, recover) {
    this.pos = pos;
    this.delInfo = delInfo;
    this.recover = recover;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & DEL_SIDE) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & DEL_ACROSS) > 0;
  }
}
class StepMap {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(ranges, inverted = false) {
    this.ranges = ranges;
    this.inverted = inverted;
    if (!ranges.length && StepMap.empty)
      return StepMap.empty;
  }
  /**
  @internal
  */
  recover(value) {
    let diff = 0, index2 = recoverIndex(value);
    if (!this.inverted)
      for (let i2 = 0; i2 < index2; i2++)
        diff += this.ranges[i2 * 3 + 2] - this.ranges[i2 * 3 + 1];
    return this.ranges[index2 * 3] + diff + recoverOffset(value);
  }
  mapResult(pos, assoc = 1) {
    return this._map(pos, assoc, false);
  }
  map(pos, assoc = 1) {
    return this._map(pos, assoc, true);
  }
  /**
  @internal
  */
  _map(pos, assoc, simple) {
    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i2 = 0; i2 < this.ranges.length; i2 += 3) {
      let start2 = this.ranges[i2] - (this.inverted ? diff : 0);
      if (start2 > pos)
        break;
      let oldSize = this.ranges[i2 + oldIndex], newSize = this.ranges[i2 + newIndex], end2 = start2 + oldSize;
      if (pos <= end2) {
        let side = !oldSize ? assoc : pos == start2 ? -1 : pos == end2 ? 1 : assoc;
        let result = start2 + diff + (side < 0 ? 0 : newSize);
        if (simple)
          return result;
        let recover = pos == (assoc < 0 ? start2 : end2) ? null : makeRecover(i2 / 3, pos - start2);
        let del = pos == start2 ? DEL_AFTER : pos == end2 ? DEL_BEFORE : DEL_ACROSS;
        if (assoc < 0 ? pos != start2 : pos != end2)
          del |= DEL_SIDE;
        return new MapResult(result, del, recover);
      }
      diff += newSize - oldSize;
    }
    return simple ? pos + diff : new MapResult(pos + diff, 0, null);
  }
  /**
  @internal
  */
  touches(pos, recover) {
    let diff = 0, index2 = recoverIndex(recover);
    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i2 = 0; i2 < this.ranges.length; i2 += 3) {
      let start2 = this.ranges[i2] - (this.inverted ? diff : 0);
      if (start2 > pos)
        break;
      let oldSize = this.ranges[i2 + oldIndex], end2 = start2 + oldSize;
      if (pos <= end2 && i2 == index2 * 3)
        return true;
      diff += this.ranges[i2 + newIndex] - oldSize;
    }
    return false;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(f2) {
    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i2 = 0, diff = 0; i2 < this.ranges.length; i2 += 3) {
      let start2 = this.ranges[i2], oldStart = start2 - (this.inverted ? diff : 0), newStart = start2 + (this.inverted ? 0 : diff);
      let oldSize = this.ranges[i2 + oldIndex], newSize = this.ranges[i2 + newIndex];
      f2(oldStart, oldStart + oldSize, newStart, newStart + newSize);
      diff += newSize - oldSize;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new StepMap(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(n2) {
    return n2 == 0 ? StepMap.empty : new StepMap(n2 < 0 ? [0, -n2, 0] : [0, 0, n2]);
  }
}
StepMap.empty = new StepMap([]);
class Mapping {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(maps = [], mirror, from3 = 0, to = maps.length) {
    this.maps = maps;
    this.mirror = mirror;
    this.from = from3;
    this.to = to;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(from3 = 0, to = this.maps.length) {
    return new Mapping(this.maps, this.mirror, from3, to);
  }
  /**
  @internal
  */
  copy() {
    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(map2, mirrors) {
    this.to = this.maps.push(map2);
    if (mirrors != null)
      this.setMirror(this.maps.length - 1, mirrors);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(mapping) {
    for (let i2 = 0, startSize = this.maps.length; i2 < mapping.maps.length; i2++) {
      let mirr = mapping.getMirror(i2);
      this.appendMap(mapping.maps[i2], mirr != null && mirr < i2 ? startSize + mirr : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(n2) {
    if (this.mirror) {
      for (let i2 = 0; i2 < this.mirror.length; i2++)
        if (this.mirror[i2] == n2)
          return this.mirror[i2 + (i2 % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(n2, m4) {
    if (!this.mirror)
      this.mirror = [];
    this.mirror.push(n2, m4);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(mapping) {
    for (let i2 = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i2 >= 0; i2--) {
      let mirr = mapping.getMirror(i2);
      this.appendMap(mapping.maps[i2].invert(), mirr != null && mirr > i2 ? totalSize - mirr - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let inverse = new Mapping();
    inverse.appendMappingInverted(this);
    return inverse;
  }
  /**
  Map a position through this mapping.
  */
  map(pos, assoc = 1) {
    if (this.mirror)
      return this._map(pos, assoc, true);
    for (let i2 = this.from; i2 < this.to; i2++)
      pos = this.maps[i2].map(pos, assoc);
    return pos;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(pos, assoc = 1) {
    return this._map(pos, assoc, false);
  }
  /**
  @internal
  */
  _map(pos, assoc, simple) {
    let delInfo = 0;
    for (let i2 = this.from; i2 < this.to; i2++) {
      let map2 = this.maps[i2], result = map2.mapResult(pos, assoc);
      if (result.recover != null) {
        let corr = this.getMirror(i2);
        if (corr != null && corr > i2 && corr < this.to) {
          i2 = corr;
          pos = this.maps[corr].recover(result.recover);
          continue;
        }
      }
      delInfo |= result.delInfo;
      pos = result.pos;
    }
    return simple ? pos : new MapResult(pos, delInfo, null);
  }
}
const stepsByID = /* @__PURE__ */ Object.create(null);
class Step {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return StepMap.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(other) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(schema, json) {
    if (!json || !json.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let type = stepsByID[json.stepType];
    if (!type)
      throw new RangeError(`No step type ${json.stepType} defined`);
    return type.fromJSON(schema, json);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(id, stepClass) {
    if (id in stepsByID)
      throw new RangeError("Duplicate use of step JSON ID " + id);
    stepsByID[id] = stepClass;
    stepClass.prototype.jsonID = id;
    return stepClass;
  }
}
class StepResult {
  /**
  @internal
  */
  constructor(doc2, failed) {
    this.doc = doc2;
    this.failed = failed;
  }
  /**
  Create a successful step result.
  */
  static ok(doc2) {
    return new StepResult(doc2, null);
  }
  /**
  Create a failed step result.
  */
  static fail(message) {
    return new StepResult(null, message);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(doc2, from3, to, slice3) {
    try {
      return StepResult.ok(doc2.replace(from3, to, slice3));
    } catch (e3) {
      if (e3 instanceof ReplaceError)
        return StepResult.fail(e3.message);
      throw e3;
    }
  }
}
function mapFragment(fragment, f2, parent) {
  let mapped = [];
  for (let i2 = 0; i2 < fragment.childCount; i2++) {
    let child = fragment.child(i2);
    if (child.content.size)
      child = child.copy(mapFragment(child.content, f2, child));
    if (child.isInline)
      child = f2(child, parent, i2);
    mapped.push(child);
  }
  return Fragment.fromArray(mapped);
}
class AddMarkStep extends Step {
  /**
  Create a mark step.
  */
  constructor(from3, to, mark) {
    super();
    this.from = from3;
    this.to = to;
    this.mark = mark;
  }
  apply(doc2) {
    let oldSlice = doc2.slice(this.from, this.to), $from = doc2.resolve(this.from);
    let parent = $from.node($from.sharedDepth(this.to));
    let slice3 = new Slice(mapFragment(oldSlice.content, (node2, parent2) => {
      if (!node2.isAtom || !parent2.type.allowsMarkType(this.mark.type))
        return node2;
      return node2.mark(this.mark.addToSet(node2.marks));
    }, parent), oldSlice.openStart, oldSlice.openEnd);
    return StepResult.fromReplace(doc2, this.from, this.to, slice3);
  }
  invert() {
    return new RemoveMarkStep(this.from, this.to, this.mark);
  }
  map(mapping) {
    let from3 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    if (from3.deleted && to.deleted || from3.pos >= to.pos)
      return null;
    return new AddMarkStep(from3.pos, to.pos, this.mark);
  }
  merge(other) {
    if (other instanceof AddMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
      return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
    return null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
  }
}
Step.jsonID("addMark", AddMarkStep);
class RemoveMarkStep extends Step {
  /**
  Create a mark-removing step.
  */
  constructor(from3, to, mark) {
    super();
    this.from = from3;
    this.to = to;
    this.mark = mark;
  }
  apply(doc2) {
    let oldSlice = doc2.slice(this.from, this.to);
    let slice3 = new Slice(mapFragment(oldSlice.content, (node2) => {
      return node2.mark(this.mark.removeFromSet(node2.marks));
    }, doc2), oldSlice.openStart, oldSlice.openEnd);
    return StepResult.fromReplace(doc2, this.from, this.to, slice3);
  }
  invert() {
    return new AddMarkStep(this.from, this.to, this.mark);
  }
  map(mapping) {
    let from3 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    if (from3.deleted && to.deleted || from3.pos >= to.pos)
      return null;
    return new RemoveMarkStep(from3.pos, to.pos, this.mark);
  }
  merge(other) {
    if (other instanceof RemoveMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
      return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
    return null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
  }
}
Step.jsonID("removeMark", RemoveMarkStep);
class AddNodeMarkStep extends Step {
  /**
  Create a node mark step.
  */
  constructor(pos, mark) {
    super();
    this.pos = pos;
    this.mark = mark;
  }
  apply(doc2) {
    let node2 = doc2.nodeAt(this.pos);
    if (!node2)
      return StepResult.fail("No node at mark step's position");
    let updated = node2.type.create(node2.attrs, null, this.mark.addToSet(node2.marks));
    return StepResult.fromReplace(doc2, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node2.isLeaf ? 0 : 1));
  }
  invert(doc2) {
    let node2 = doc2.nodeAt(this.pos);
    if (node2) {
      let newSet = this.mark.addToSet(node2.marks);
      if (newSet.length == node2.marks.length) {
        for (let i2 = 0; i2 < node2.marks.length; i2++)
          if (!node2.marks[i2].isInSet(newSet))
            return new AddNodeMarkStep(this.pos, node2.marks[i2]);
        return new AddNodeMarkStep(this.pos, this.mark);
      }
    }
    return new RemoveNodeMarkStep(this.pos, this.mark);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
  }
}
Step.jsonID("addNodeMark", AddNodeMarkStep);
class RemoveNodeMarkStep extends Step {
  /**
  Create a mark-removing step.
  */
  constructor(pos, mark) {
    super();
    this.pos = pos;
    this.mark = mark;
  }
  apply(doc2) {
    let node2 = doc2.nodeAt(this.pos);
    if (!node2)
      return StepResult.fail("No node at mark step's position");
    let updated = node2.type.create(node2.attrs, null, this.mark.removeFromSet(node2.marks));
    return StepResult.fromReplace(doc2, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node2.isLeaf ? 0 : 1));
  }
  invert(doc2) {
    let node2 = doc2.nodeAt(this.pos);
    if (!node2 || !this.mark.isInSet(node2.marks))
      return this;
    return new AddNodeMarkStep(this.pos, this.mark);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
  }
}
Step.jsonID("removeNodeMark", RemoveNodeMarkStep);
class ReplaceStep extends Step {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(from3, to, slice3, structure = false) {
    super();
    this.from = from3;
    this.to = to;
    this.slice = slice3;
    this.structure = structure;
  }
  apply(doc2) {
    if (this.structure && contentBetween(doc2, this.from, this.to))
      return StepResult.fail("Structure replace would overwrite content");
    return StepResult.fromReplace(doc2, this.from, this.to, this.slice);
  }
  getMap() {
    return new StepMap([this.from, this.to - this.from, this.slice.size]);
  }
  invert(doc2) {
    return new ReplaceStep(this.from, this.from + this.slice.size, doc2.slice(this.from, this.to));
  }
  map(mapping) {
    let from3 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    if (from3.deletedAcross && to.deletedAcross)
      return null;
    return new ReplaceStep(from3.pos, Math.max(from3.pos, to.pos), this.slice);
  }
  merge(other) {
    if (!(other instanceof ReplaceStep) || other.structure || this.structure)
      return null;
    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
      let slice3 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice3, this.structure);
    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
      let slice3 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
      return new ReplaceStep(other.from, this.to, slice3, this.structure);
    } else {
      return null;
    }
  }
  toJSON() {
    let json = { stepType: "replace", from: this.from, to: this.to };
    if (this.slice.size)
      json.slice = this.slice.toJSON();
    if (this.structure)
      json.structure = true;
    return json;
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
  }
}
Step.jsonID("replace", ReplaceStep);
class ReplaceAroundStep extends Step {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(from3, to, gapFrom, gapTo, slice3, insert, structure = false) {
    super();
    this.from = from3;
    this.to = to;
    this.gapFrom = gapFrom;
    this.gapTo = gapTo;
    this.slice = slice3;
    this.insert = insert;
    this.structure = structure;
  }
  apply(doc2) {
    if (this.structure && (contentBetween(doc2, this.from, this.gapFrom) || contentBetween(doc2, this.gapTo, this.to)))
      return StepResult.fail("Structure gap-replace would overwrite content");
    let gap = doc2.slice(this.gapFrom, this.gapTo);
    if (gap.openStart || gap.openEnd)
      return StepResult.fail("Gap is not a flat range");
    let inserted = this.slice.insertAt(this.insert, gap.content);
    if (!inserted)
      return StepResult.fail("Content does not fit in gap");
    return StepResult.fromReplace(doc2, this.from, this.to, inserted);
  }
  getMap() {
    return new StepMap([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(doc2) {
    let gap = this.gapTo - this.gapFrom;
    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc2.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(mapping) {
    let from3 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
    if (from3.deletedAcross && to.deletedAcross || gapFrom < from3.pos || gapTo > to.pos)
      return null;
    return new ReplaceAroundStep(from3.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let json = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    if (this.slice.size)
      json.slice = this.slice.toJSON();
    if (this.structure)
      json.structure = true;
    return json;
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number" || typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
  }
}
Step.jsonID("replaceAround", ReplaceAroundStep);
function contentBetween(doc2, from3, to) {
  let $from = doc2.resolve(from3), dist = to - from3, depth = $from.depth;
  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
    depth--;
    dist--;
  }
  if (dist > 0) {
    let next2 = $from.node(depth).maybeChild($from.indexAfter(depth));
    while (dist > 0) {
      if (!next2 || next2.isLeaf)
        return true;
      next2 = next2.firstChild;
      dist--;
    }
  }
  return false;
}
function addMark(tr2, from3, to, mark) {
  let removed = [], added = [];
  let removing, adding;
  tr2.doc.nodesBetween(from3, to, (node2, pos, parent) => {
    if (!node2.isInline)
      return;
    let marks = node2.marks;
    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
      let start2 = Math.max(pos, from3), end2 = Math.min(pos + node2.nodeSize, to);
      let newSet = mark.addToSet(marks);
      for (let i2 = 0; i2 < marks.length; i2++) {
        if (!marks[i2].isInSet(newSet)) {
          if (removing && removing.to == start2 && removing.mark.eq(marks[i2]))
            removing.to = end2;
          else
            removed.push(removing = new RemoveMarkStep(start2, end2, marks[i2]));
        }
      }
      if (adding && adding.to == start2)
        adding.to = end2;
      else
        added.push(adding = new AddMarkStep(start2, end2, mark));
    }
  });
  removed.forEach((s4) => tr2.step(s4));
  added.forEach((s4) => tr2.step(s4));
}
function removeMark(tr2, from3, to, mark) {
  let matched = [], step = 0;
  tr2.doc.nodesBetween(from3, to, (node2, pos) => {
    if (!node2.isInline)
      return;
    step++;
    let toRemove = null;
    if (mark instanceof MarkType) {
      let set2 = node2.marks, found2;
      while (found2 = mark.isInSet(set2)) {
        (toRemove || (toRemove = [])).push(found2);
        set2 = found2.removeFromSet(set2);
      }
    } else if (mark) {
      if (mark.isInSet(node2.marks))
        toRemove = [mark];
    } else {
      toRemove = node2.marks;
    }
    if (toRemove && toRemove.length) {
      let end2 = Math.min(pos + node2.nodeSize, to);
      for (let i2 = 0; i2 < toRemove.length; i2++) {
        let style2 = toRemove[i2], found2;
        for (let j2 = 0; j2 < matched.length; j2++) {
          let m4 = matched[j2];
          if (m4.step == step - 1 && style2.eq(matched[j2].style))
            found2 = m4;
        }
        if (found2) {
          found2.to = end2;
          found2.step = step;
        } else {
          matched.push({ style: style2, from: Math.max(pos, from3), to: end2, step });
        }
      }
    }
  });
  matched.forEach((m4) => tr2.step(new RemoveMarkStep(m4.from, m4.to, m4.style)));
}
function clearIncompatible(tr2, pos, parentType, match2 = parentType.contentMatch) {
  let node2 = tr2.doc.nodeAt(pos);
  let replSteps = [], cur = pos + 1;
  for (let i2 = 0; i2 < node2.childCount; i2++) {
    let child = node2.child(i2), end2 = cur + child.nodeSize;
    let allowed = match2.matchType(child.type);
    if (!allowed) {
      replSteps.push(new ReplaceStep(cur, end2, Slice.empty));
    } else {
      match2 = allowed;
      for (let j2 = 0; j2 < child.marks.length; j2++)
        if (!parentType.allowsMarkType(child.marks[j2].type))
          tr2.step(new RemoveMarkStep(cur, end2, child.marks[j2]));
      if (child.isText && !parentType.spec.code) {
        let m4, newline = /\r?\n|\r/g, slice3;
        while (m4 = newline.exec(child.text)) {
          if (!slice3)
            slice3 = new Slice(Fragment.from(parentType.schema.text(" ", parentType.allowedMarks(child.marks))), 0, 0);
          replSteps.push(new ReplaceStep(cur + m4.index, cur + m4.index + m4[0].length, slice3));
        }
      }
    }
    cur = end2;
  }
  if (!match2.validEnd) {
    let fill = match2.fillBefore(Fragment.empty, true);
    tr2.replace(cur, cur, new Slice(fill, 0, 0));
  }
  for (let i2 = replSteps.length - 1; i2 >= 0; i2--)
    tr2.step(replSteps[i2]);
}
function canCut(node2, start2, end2) {
  return (start2 == 0 || node2.canReplace(start2, node2.childCount)) && (end2 == node2.childCount || node2.canReplace(0, end2));
}
function liftTarget(range) {
  let parent = range.parent;
  let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
  for (let depth = range.depth; ; --depth) {
    let node2 = range.$from.node(depth);
    let index2 = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
    if (depth < range.depth && node2.canReplace(index2, endIndex, content))
      return depth;
    if (depth == 0 || node2.type.spec.isolating || !canCut(node2, index2, endIndex))
      break;
  }
  return null;
}
function lift$2(tr2, range, target) {
  let { $from, $to, depth } = range;
  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
  let start2 = gapStart, end2 = gapEnd;
  let before = Fragment.empty, openStart = 0;
  for (let d4 = depth, splitting = false; d4 > target; d4--)
    if (splitting || $from.index(d4) > 0) {
      splitting = true;
      before = Fragment.from($from.node(d4).copy(before));
      openStart++;
    } else {
      start2--;
    }
  let after = Fragment.empty, openEnd = 0;
  for (let d4 = depth, splitting = false; d4 > target; d4--)
    if (splitting || $to.after(d4 + 1) < $to.end(d4)) {
      splitting = true;
      after = Fragment.from($to.node(d4).copy(after));
      openEnd++;
    } else {
      end2++;
    }
  tr2.step(new ReplaceAroundStep(start2, end2, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
}
function findWrapping(range, nodeType, attrs = null, innerRange = range) {
  let around = findWrappingOutside(range, nodeType);
  let inner = around && findWrappingInside(innerRange, nodeType);
  if (!inner)
    return null;
  return around.map(withAttrs).concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
}
function withAttrs(type) {
  return { type, attrs: null };
}
function findWrappingOutside(range, type) {
  let { parent, startIndex, endIndex } = range;
  let around = parent.contentMatchAt(startIndex).findWrapping(type);
  if (!around)
    return null;
  let outer = around.length ? around[0] : type;
  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
}
function findWrappingInside(range, type) {
  let { parent, startIndex, endIndex } = range;
  let inner = parent.child(startIndex);
  let inside = type.contentMatch.findWrapping(inner.type);
  if (!inside)
    return null;
  let lastType = inside.length ? inside[inside.length - 1] : type;
  let innerMatch = lastType.contentMatch;
  for (let i2 = startIndex; innerMatch && i2 < endIndex; i2++)
    innerMatch = innerMatch.matchType(parent.child(i2).type);
  if (!innerMatch || !innerMatch.validEnd)
    return null;
  return inside;
}
function wrap(tr2, range, wrappers) {
  let content = Fragment.empty;
  for (let i2 = wrappers.length - 1; i2 >= 0; i2--) {
    if (content.size) {
      let match2 = wrappers[i2].type.contentMatch.matchFragment(content);
      if (!match2 || !match2.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    content = Fragment.from(wrappers[i2].type.create(wrappers[i2].attrs, content));
  }
  let start2 = range.start, end2 = range.end;
  tr2.step(new ReplaceAroundStep(start2, end2, start2, end2, new Slice(content, 0, 0), wrappers.length, true));
}
function setBlockType$1(tr2, from3, to, type, attrs) {
  if (!type.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let mapFrom = tr2.steps.length;
  tr2.doc.nodesBetween(from3, to, (node2, pos) => {
    if (node2.isTextblock && !node2.hasMarkup(type, attrs) && canChangeType(tr2.doc, tr2.mapping.slice(mapFrom).map(pos), type)) {
      tr2.clearIncompatible(tr2.mapping.slice(mapFrom).map(pos, 1), type);
      let mapping = tr2.mapping.slice(mapFrom);
      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node2.nodeSize, 1);
      tr2.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node2.marks)), 0, 0), 1, true));
      return false;
    }
  });
}
function canChangeType(doc2, pos, type) {
  let $pos = doc2.resolve(pos), index2 = $pos.index();
  return $pos.parent.canReplaceWith(index2, index2 + 1, type);
}
function setNodeMarkup(tr2, pos, type, attrs, marks) {
  let node2 = tr2.doc.nodeAt(pos);
  if (!node2)
    throw new RangeError("No node at given position");
  if (!type)
    type = node2.type;
  let newNode = type.create(attrs, null, marks || node2.marks);
  if (node2.isLeaf)
    return tr2.replaceWith(pos, pos + node2.nodeSize, newNode);
  if (!type.validContent(node2.content))
    throw new RangeError("Invalid content for node type " + type.name);
  tr2.step(new ReplaceAroundStep(pos, pos + node2.nodeSize, pos + 1, pos + node2.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
}
function canSplit(doc2, pos, depth = 1, typesAfter) {
  let $pos = doc2.resolve(pos), base2 = $pos.depth - depth;
  let innerType = typesAfter && typesAfter[typesAfter.length - 1] || $pos.parent;
  if (base2 < 0 || $pos.parent.type.spec.isolating || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
    return false;
  for (let d4 = $pos.depth - 1, i2 = depth - 2; d4 > base2; d4--, i2--) {
    let node2 = $pos.node(d4), index3 = $pos.index(d4);
    if (node2.type.spec.isolating)
      return false;
    let rest = node2.content.cutByIndex(index3, node2.childCount);
    let overrideChild = typesAfter && typesAfter[i2 + 1];
    if (overrideChild)
      rest = rest.replaceChild(0, overrideChild.type.create(overrideChild.attrs));
    let after = typesAfter && typesAfter[i2] || node2;
    if (!node2.canReplace(index3 + 1, node2.childCount) || !after.type.validContent(rest))
      return false;
  }
  let index2 = $pos.indexAfter(base2);
  let baseType = typesAfter && typesAfter[0];
  return $pos.node(base2).canReplaceWith(index2, index2, baseType ? baseType.type : $pos.node(base2 + 1).type);
}
function split(tr2, pos, depth = 1, typesAfter) {
  let $pos = tr2.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
  for (let d4 = $pos.depth, e3 = $pos.depth - depth, i2 = depth - 1; d4 > e3; d4--, i2--) {
    before = Fragment.from($pos.node(d4).copy(before));
    let typeAfter = typesAfter && typesAfter[i2];
    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d4).copy(after));
  }
  tr2.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
}
function canJoin(doc2, pos) {
  let $pos = doc2.resolve(pos), index2 = $pos.index();
  return joinable($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index2, index2 + 1);
}
function joinable(a4, b3) {
  return !!(a4 && b3 && !a4.isLeaf && a4.canAppend(b3));
}
function joinPoint(doc2, pos, dir = -1) {
  let $pos = doc2.resolve(pos);
  for (let d4 = $pos.depth; ; d4--) {
    let before, after, index2 = $pos.index(d4);
    if (d4 == $pos.depth) {
      before = $pos.nodeBefore;
      after = $pos.nodeAfter;
    } else if (dir > 0) {
      before = $pos.node(d4 + 1);
      index2++;
      after = $pos.node(d4).maybeChild(index2);
    } else {
      before = $pos.node(d4).maybeChild(index2 - 1);
      after = $pos.node(d4 + 1);
    }
    if (before && !before.isTextblock && joinable(before, after) && $pos.node(d4).canReplace(index2, index2 + 1))
      return pos;
    if (d4 == 0)
      break;
    pos = dir < 0 ? $pos.before(d4) : $pos.after(d4);
  }
}
function join(tr2, pos, depth) {
  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
  tr2.step(step);
}
function insertPoint(doc2, pos, nodeType) {
  let $pos = doc2.resolve(pos);
  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
    return pos;
  if ($pos.parentOffset == 0)
    for (let d4 = $pos.depth - 1; d4 >= 0; d4--) {
      let index2 = $pos.index(d4);
      if ($pos.node(d4).canReplaceWith(index2, index2, nodeType))
        return $pos.before(d4 + 1);
      if (index2 > 0)
        return null;
    }
  if ($pos.parentOffset == $pos.parent.content.size)
    for (let d4 = $pos.depth - 1; d4 >= 0; d4--) {
      let index2 = $pos.indexAfter(d4);
      if ($pos.node(d4).canReplaceWith(index2, index2, nodeType))
        return $pos.after(d4 + 1);
      if (index2 < $pos.node(d4).childCount)
        return null;
    }
  return null;
}
function dropPoint(doc2, pos, slice3) {
  let $pos = doc2.resolve(pos);
  if (!slice3.content.size)
    return pos;
  let content = slice3.content;
  for (let i2 = 0; i2 < slice3.openStart; i2++)
    content = content.firstChild.content;
  for (let pass = 1; pass <= (slice3.openStart == 0 && slice3.size ? 2 : 1); pass++) {
    for (let d4 = $pos.depth; d4 >= 0; d4--) {
      let bias = d4 == $pos.depth ? 0 : $pos.pos <= ($pos.start(d4 + 1) + $pos.end(d4 + 1)) / 2 ? -1 : 1;
      let insertPos = $pos.index(d4) + (bias > 0 ? 1 : 0);
      let parent = $pos.node(d4), fits = false;
      if (pass == 1) {
        fits = parent.canReplace(insertPos, insertPos, content);
      } else {
        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
      }
      if (fits)
        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d4 + 1) : $pos.after(d4 + 1);
    }
  }
  return null;
}
function replaceStep(doc2, from3, to = from3, slice3 = Slice.empty) {
  if (from3 == to && !slice3.size)
    return null;
  let $from = doc2.resolve(from3), $to = doc2.resolve(to);
  if (fitsTrivially($from, $to, slice3))
    return new ReplaceStep(from3, to, slice3);
  return new Fitter($from, $to, slice3).fit();
}
function fitsTrivially($from, $to, slice3) {
  return !slice3.openStart && !slice3.openEnd && $from.start() == $to.start() && $from.parent.canReplace($from.index(), $to.index(), slice3.content);
}
class Fitter {
  constructor($from, $to, unplaced) {
    this.$from = $from;
    this.$to = $to;
    this.unplaced = unplaced;
    this.frontier = [];
    this.placed = Fragment.empty;
    for (let i2 = 0; i2 <= $from.depth; i2++) {
      let node2 = $from.node(i2);
      this.frontier.push({
        type: node2.type,
        match: node2.contentMatchAt($from.indexAfter(i2))
      });
    }
    for (let i2 = $from.depth; i2 > 0; i2--)
      this.placed = Fragment.from($from.node(i2).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    while (this.unplaced.size) {
      let fit = this.findFittable();
      if (fit)
        this.placeNodes(fit);
      else
        this.openMore() || this.dropNode();
    }
    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
    if (!$to)
      return null;
    let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
    while (openStart && openEnd && content.childCount == 1) {
      content = content.firstChild.content;
      openStart--;
      openEnd--;
    }
    let slice3 = new Slice(content, openStart, openEnd);
    if (moveInline > -1)
      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice3, placedSize);
    if (slice3.size || $from.pos != this.$to.pos)
      return new ReplaceStep($from.pos, $to.pos, slice3);
    return null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let startDepth = this.unplaced.openStart;
    for (let cur = this.unplaced.content, d4 = 0, openEnd = this.unplaced.openEnd; d4 < startDepth; d4++) {
      let node2 = cur.firstChild;
      if (cur.childCount > 1)
        openEnd = 0;
      if (node2.type.spec.isolating && openEnd <= d4) {
        startDepth = d4;
        break;
      }
      cur = node2.content;
    }
    for (let pass = 1; pass <= 2; pass++) {
      for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
        let fragment, parent = null;
        if (sliceDepth) {
          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
          fragment = parent.content;
        } else {
          fragment = this.unplaced.content;
        }
        let first2 = fragment.firstChild;
        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
          let { type, match: match2 } = this.frontier[frontierDepth], wrap2, inject = null;
          if (pass == 1 && (first2 ? match2.matchType(first2.type) || (inject = match2.fillBefore(Fragment.from(first2), false)) : parent && type.compatibleContent(parent.type)))
            return { sliceDepth, frontierDepth, parent, inject };
          else if (pass == 2 && first2 && (wrap2 = match2.findWrapping(first2.type)))
            return { sliceDepth, frontierDepth, parent, wrap: wrap2 };
          if (parent && match2.matchType(parent.type))
            break;
        }
      }
    }
  }
  openMore() {
    let { content, openStart, openEnd } = this.unplaced;
    let inner = contentAt(content, openStart);
    if (!inner.childCount || inner.firstChild.isLeaf)
      return false;
    this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
    return true;
  }
  dropNode() {
    let { content, openStart, openEnd } = this.unplaced;
    let inner = contentAt(content, openStart);
    if (inner.childCount <= 1 && openStart > 0) {
      let openAtEnd = content.size - openStart <= openStart + inner.size;
      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
    } else {
      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
    }
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap: wrap2 }) {
    while (this.depth > frontierDepth)
      this.closeFrontierNode();
    if (wrap2)
      for (let i2 = 0; i2 < wrap2.length; i2++)
        this.openFrontierNode(wrap2[i2]);
    let slice3 = this.unplaced, fragment = parent ? parent.content : slice3.content;
    let openStart = slice3.openStart - sliceDepth;
    let taken = 0, add2 = [];
    let { match: match2, type } = this.frontier[frontierDepth];
    if (inject) {
      for (let i2 = 0; i2 < inject.childCount; i2++)
        add2.push(inject.child(i2));
      match2 = match2.matchFragment(inject);
    }
    let openEndCount = fragment.size + sliceDepth - (slice3.content.size - slice3.openEnd);
    while (taken < fragment.childCount) {
      let next2 = fragment.child(taken), matches2 = match2.matchType(next2.type);
      if (!matches2)
        break;
      taken++;
      if (taken > 1 || openStart == 0 || next2.content.size) {
        match2 = matches2;
        add2.push(closeNodeStart(next2.mark(type.allowedMarks(next2.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
      }
    }
    let toEnd = taken == fragment.childCount;
    if (!toEnd)
      openEndCount = -1;
    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add2));
    this.frontier[frontierDepth].match = match2;
    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
      this.closeFrontierNode();
    for (let i2 = 0, cur = fragment; i2 < openEndCount; i2++) {
      let node2 = cur.lastChild;
      this.frontier.push({ type: node2.type, match: node2.contentMatchAt(node2.childCount) });
      cur = node2.content;
    }
    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice3.content, sliceDepth, taken), slice3.openStart, slice3.openEnd) : sliceDepth == 0 ? Slice.empty : new Slice(dropFromFragment(slice3.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice3.openEnd : sliceDepth - 1);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let top2 = this.frontier[this.depth], level;
    if (!top2.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top2.type, top2.match, false) || this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)
      return -1;
    let { depth } = this.$to, after = this.$to.after(depth);
    while (depth > 1 && after == this.$to.end(--depth))
      ++after;
    return after;
  }
  findCloseLevel($to) {
    scan:
      for (let i2 = Math.min(this.depth, $to.depth); i2 >= 0; i2--) {
        let { match: match2, type } = this.frontier[i2];
        let dropInner = i2 < $to.depth && $to.end(i2 + 1) == $to.pos + ($to.depth - (i2 + 1));
        let fit = contentAfterFits($to, i2, type, match2, dropInner);
        if (!fit)
          continue;
        for (let d4 = i2 - 1; d4 >= 0; d4--) {
          let { match: match3, type: type2 } = this.frontier[d4];
          let matches2 = contentAfterFits($to, d4, type2, match3, true);
          if (!matches2 || matches2.childCount)
            continue scan;
        }
        return { depth: i2, fit, move: dropInner ? $to.doc.resolve($to.after(i2 + 1)) : $to };
      }
  }
  close($to) {
    let close2 = this.findCloseLevel($to);
    if (!close2)
      return null;
    while (this.depth > close2.depth)
      this.closeFrontierNode();
    if (close2.fit.childCount)
      this.placed = addToFragment(this.placed, close2.depth, close2.fit);
    $to = close2.move;
    for (let d4 = close2.depth + 1; d4 <= $to.depth; d4++) {
      let node2 = $to.node(d4), add2 = node2.type.contentMatch.fillBefore(node2.content, true, $to.index(d4));
      this.openFrontierNode(node2.type, node2.attrs, add2);
    }
    return $to;
  }
  openFrontierNode(type, attrs = null, content) {
    let top2 = this.frontier[this.depth];
    top2.match = top2.match.matchType(type);
    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
    this.frontier.push({ type, match: type.contentMatch });
  }
  closeFrontierNode() {
    let open = this.frontier.pop();
    let add2 = open.match.fillBefore(Fragment.empty, true);
    if (add2.childCount)
      this.placed = addToFragment(this.placed, this.frontier.length, add2);
  }
}
function dropFromFragment(fragment, depth, count) {
  if (depth == 0)
    return fragment.cutByIndex(count, fragment.childCount);
  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
}
function addToFragment(fragment, depth, content) {
  if (depth == 0)
    return fragment.append(content);
  return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
}
function contentAt(fragment, depth) {
  for (let i2 = 0; i2 < depth; i2++)
    fragment = fragment.firstChild.content;
  return fragment;
}
function closeNodeStart(node2, openStart, openEnd) {
  if (openStart <= 0)
    return node2;
  let frag = node2.content;
  if (openStart > 1)
    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
  if (openStart > 0) {
    frag = node2.type.contentMatch.fillBefore(frag).append(frag);
    if (openEnd <= 0)
      frag = frag.append(node2.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
  }
  return node2.copy(frag);
}
function contentAfterFits($to, depth, type, match2, open) {
  let node2 = $to.node(depth), index2 = open ? $to.indexAfter(depth) : $to.index(depth);
  if (index2 == node2.childCount && !type.compatibleContent(node2.type))
    return null;
  let fit = match2.fillBefore(node2.content, true, index2);
  return fit && !invalidMarks(type, node2.content, index2) ? fit : null;
}
function invalidMarks(type, fragment, start2) {
  for (let i2 = start2; i2 < fragment.childCount; i2++)
    if (!type.allowsMarks(fragment.child(i2).marks))
      return true;
  return false;
}
function definesContent(type) {
  return type.spec.defining || type.spec.definingForContent;
}
function replaceRange(tr2, from3, to, slice3) {
  if (!slice3.size)
    return tr2.deleteRange(from3, to);
  let $from = tr2.doc.resolve(from3), $to = tr2.doc.resolve(to);
  if (fitsTrivially($from, $to, slice3))
    return tr2.step(new ReplaceStep(from3, to, slice3));
  let targetDepths = coveredDepths($from, tr2.doc.resolve(to));
  if (targetDepths[targetDepths.length - 1] == 0)
    targetDepths.pop();
  let preferredTarget = -($from.depth + 1);
  targetDepths.unshift(preferredTarget);
  for (let d4 = $from.depth, pos = $from.pos - 1; d4 > 0; d4--, pos--) {
    let spec = $from.node(d4).type.spec;
    if (spec.defining || spec.definingAsContext || spec.isolating)
      break;
    if (targetDepths.indexOf(d4) > -1)
      preferredTarget = d4;
    else if ($from.before(d4) == pos)
      targetDepths.splice(1, 0, -d4);
  }
  let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
  let leftNodes = [], preferredDepth = slice3.openStart;
  for (let content = slice3.content, i2 = 0; ; i2++) {
    let node2 = content.firstChild;
    leftNodes.push(node2);
    if (i2 == slice3.openStart)
      break;
    content = node2.content;
  }
  for (let d4 = preferredDepth - 1; d4 >= 0; d4--) {
    let leftNode = leftNodes[d4], def = definesContent(leftNode.type);
    if (def && !leftNode.sameMarkup($from.node(Math.abs(preferredTarget) - 1)))
      preferredDepth = d4;
    else if (def || !leftNode.type.isTextblock)
      break;
  }
  for (let j2 = slice3.openStart; j2 >= 0; j2--) {
    let openDepth = (j2 + preferredDepth + 1) % (slice3.openStart + 1);
    let insert = leftNodes[openDepth];
    if (!insert)
      continue;
    for (let i2 = 0; i2 < targetDepths.length; i2++) {
      let targetDepth = targetDepths[(i2 + preferredTargetIndex) % targetDepths.length], expand = true;
      if (targetDepth < 0) {
        expand = false;
        targetDepth = -targetDepth;
      }
      let parent = $from.node(targetDepth - 1), index2 = $from.index(targetDepth - 1);
      if (parent.canReplaceWith(index2, index2, insert.type, insert.marks))
        return tr2.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice3.content, 0, slice3.openStart, openDepth), openDepth, slice3.openEnd));
    }
  }
  let startSteps = tr2.steps.length;
  for (let i2 = targetDepths.length - 1; i2 >= 0; i2--) {
    tr2.replace(from3, to, slice3);
    if (tr2.steps.length > startSteps)
      break;
    let depth = targetDepths[i2];
    if (depth < 0)
      continue;
    from3 = $from.before(depth);
    to = $to.after(depth);
  }
}
function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
  if (depth < oldOpen) {
    let first2 = fragment.firstChild;
    fragment = fragment.replaceChild(0, first2.copy(closeFragment(first2.content, depth + 1, oldOpen, newOpen, first2)));
  }
  if (depth > newOpen) {
    let match2 = parent.contentMatchAt(0);
    let start2 = match2.fillBefore(fragment).append(fragment);
    fragment = start2.append(match2.matchFragment(start2).fillBefore(Fragment.empty, true));
  }
  return fragment;
}
function replaceRangeWith(tr2, from3, to, node2) {
  if (!node2.isInline && from3 == to && tr2.doc.resolve(from3).parent.content.size) {
    let point = insertPoint(tr2.doc, from3, node2.type);
    if (point != null)
      from3 = to = point;
  }
  tr2.replaceRange(from3, to, new Slice(Fragment.from(node2), 0, 0));
}
function deleteRange$1(tr2, from3, to) {
  let $from = tr2.doc.resolve(from3), $to = tr2.doc.resolve(to);
  let covered = coveredDepths($from, $to);
  for (let i2 = 0; i2 < covered.length; i2++) {
    let depth = covered[i2], last = i2 == covered.length - 1;
    if (last && depth == 0 || $from.node(depth).type.contentMatch.validEnd)
      return tr2.delete($from.start(depth), $to.end(depth));
    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
      return tr2.delete($from.before(depth), $to.after(depth));
  }
  for (let d4 = 1; d4 <= $from.depth && d4 <= $to.depth; d4++) {
    if (from3 - $from.start(d4) == $from.depth - d4 && to > $from.end(d4) && $to.end(d4) - to != $to.depth - d4)
      return tr2.delete($from.before(d4), to);
  }
  tr2.delete(from3, to);
}
function coveredDepths($from, $to) {
  let result = [], minDepth = Math.min($from.depth, $to.depth);
  for (let d4 = minDepth; d4 >= 0; d4--) {
    let start2 = $from.start(d4);
    if (start2 < $from.pos - ($from.depth - d4) || $to.end(d4) > $to.pos + ($to.depth - d4) || $from.node(d4).type.spec.isolating || $to.node(d4).type.spec.isolating)
      break;
    if (start2 == $to.start(d4) || d4 == $from.depth && d4 == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent && d4 && $to.start(d4 - 1) == start2 - 1)
      result.push(d4);
  }
  return result;
}
class AttrStep extends Step {
  /**
  Construct an attribute step.
  */
  constructor(pos, attr, value) {
    super();
    this.pos = pos;
    this.attr = attr;
    this.value = value;
  }
  apply(doc2) {
    let node2 = doc2.nodeAt(this.pos);
    if (!node2)
      return StepResult.fail("No node at attribute step's position");
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let name in node2.attrs)
      attrs[name] = node2.attrs[name];
    attrs[this.attr] = this.value;
    let updated = node2.type.create(attrs, null, node2.marks);
    return StepResult.fromReplace(doc2, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node2.isLeaf ? 0 : 1));
  }
  getMap() {
    return StepMap.empty;
  }
  invert(doc2) {
    return new AttrStep(this.pos, this.attr, doc2.nodeAt(this.pos).attrs[this.attr]);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(schema, json) {
    if (typeof json.pos != "number" || typeof json.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new AttrStep(json.pos, json.attr, json.value);
  }
}
Step.jsonID("attr", AttrStep);
class DocAttrStep extends Step {
  /**
  Construct an attribute step.
  */
  constructor(attr, value) {
    super();
    this.attr = attr;
    this.value = value;
  }
  apply(doc2) {
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let name in doc2.attrs)
      attrs[name] = doc2.attrs[name];
    attrs[this.attr] = this.value;
    let updated = doc2.type.create(attrs, doc2.content, doc2.marks);
    return StepResult.ok(updated);
  }
  getMap() {
    return StepMap.empty;
  }
  invert(doc2) {
    return new DocAttrStep(this.attr, doc2.attrs[this.attr]);
  }
  map(mapping) {
    return this;
  }
  toJSON() {
    return { stepType: "docAttr", attr: this.attr, value: this.value };
  }
  static fromJSON(schema, json) {
    if (typeof json.attr != "string")
      throw new RangeError("Invalid input for DocAttrStep.fromJSON");
    return new DocAttrStep(json.attr, json.value);
  }
}
Step.jsonID("docAttr", DocAttrStep);
let TransformError = class extends Error {
};
TransformError = function TransformError2(message) {
  let err = Error.call(this, message);
  err.__proto__ = TransformError2.prototype;
  return err;
};
TransformError.prototype = Object.create(Error.prototype);
TransformError.prototype.constructor = TransformError;
TransformError.prototype.name = "TransformError";
class Transform {
  /**
  Create a transform that starts with the given document.
  */
  constructor(doc2) {
    this.doc = doc2;
    this.steps = [];
    this.docs = [];
    this.mapping = new Mapping();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(step) {
    let result = this.maybeStep(step);
    if (result.failed)
      throw new TransformError(result.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(step) {
    let result = step.apply(this.doc);
    if (!result.failed)
      this.addStep(step, result.doc);
    return result;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(step, doc2) {
    this.docs.push(this.doc);
    this.steps.push(step);
    this.mapping.appendMap(step.getMap());
    this.doc = doc2;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(from3, to = from3, slice3 = Slice.empty) {
    let step = replaceStep(this.doc, from3, to, slice3);
    if (step)
      this.step(step);
    return this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(from3, to, content) {
    return this.replace(from3, to, new Slice(Fragment.from(content), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(from3, to) {
    return this.replace(from3, to, Slice.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(pos, content) {
    return this.replaceWith(pos, pos, content);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(from3, to, slice3) {
    replaceRange(this, from3, to, slice3);
    return this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(from3, to, node2) {
    replaceRangeWith(this, from3, to, node2);
    return this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(from3, to) {
    deleteRange$1(this, from3, to);
    return this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(range, target) {
    lift$2(this, range, target);
    return this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(pos, depth = 1) {
    join(this, pos, depth);
    return this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(range, wrappers) {
    wrap(this, range, wrappers);
    return this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(from3, to = from3, type, attrs = null) {
    setBlockType$1(this, from3, to, type, attrs);
    return this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(pos, type, attrs = null, marks) {
    setNodeMarkup(this, pos, type, attrs, marks);
    return this;
  }
  /**
  Set a single attribute on a given node to a new value.
  The `pos` addresses the document content. Use `setDocAttribute`
  to set attributes on the document itself.
  */
  setNodeAttribute(pos, attr, value) {
    this.step(new AttrStep(pos, attr, value));
    return this;
  }
  /**
  Set a single attribute on the document to a new value.
  */
  setDocAttribute(attr, value) {
    this.step(new DocAttrStep(attr, value));
    return this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(pos, mark) {
    this.step(new AddNodeMarkStep(pos, mark));
    return this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(pos, mark) {
    if (!(mark instanceof Mark$1)) {
      let node2 = this.doc.nodeAt(pos);
      if (!node2)
        throw new RangeError("No node at position " + pos);
      mark = mark.isInSet(node2.marks);
      if (!mark)
        return this;
    }
    this.step(new RemoveNodeMarkStep(pos, mark));
    return this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(pos, depth = 1, typesAfter) {
    split(this, pos, depth, typesAfter);
    return this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(from3, to, mark) {
    addMark(this, from3, to, mark);
    return this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(from3, to, mark) {
    removeMark(this, from3, to, mark);
    return this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(pos, parentType, match2) {
    clearIncompatible(this, pos, parentType, match2);
    return this;
  }
}
const classesById = /* @__PURE__ */ Object.create(null);
class Selection {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor($anchor, $head, ranges) {
    this.$anchor = $anchor;
    this.$head = $head;
    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let ranges = this.ranges;
    for (let i2 = 0; i2 < ranges.length; i2++)
      if (ranges[i2].$from.pos != ranges[i2].$to.pos)
        return false;
    return true;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, true);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(tr2, content = Slice.empty) {
    let lastNode = content.content.lastChild, lastParent = null;
    for (let i2 = 0; i2 < content.openEnd; i2++) {
      lastParent = lastNode;
      lastNode = lastNode.lastChild;
    }
    let mapFrom = tr2.steps.length, ranges = this.ranges;
    for (let i2 = 0; i2 < ranges.length; i2++) {
      let { $from, $to } = ranges[i2], mapping = tr2.mapping.slice(mapFrom);
      tr2.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i2 ? Slice.empty : content);
      if (i2 == 0)
        selectionToInsertionEnd$1(tr2, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(tr2, node2) {
    let mapFrom = tr2.steps.length, ranges = this.ranges;
    for (let i2 = 0; i2 < ranges.length; i2++) {
      let { $from, $to } = ranges[i2], mapping = tr2.mapping.slice(mapFrom);
      let from3 = mapping.map($from.pos), to = mapping.map($to.pos);
      if (i2) {
        tr2.deleteRange(from3, to);
      } else {
        tr2.replaceRangeWith(from3, to, node2);
        selectionToInsertionEnd$1(tr2, mapFrom, node2.isInline ? -1 : 1);
      }
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom($pos, dir, textOnly = false) {
    let inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
    if (inner)
      return inner;
    for (let depth = $pos.depth - 1; depth >= 0; depth--) {
      let found2 = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
      if (found2)
        return found2;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near($pos, bias = 1) {
    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(doc2) {
    return findSelectionIn(doc2, doc2, 0, 0, 1) || new AllSelection(doc2);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(doc2) {
    return findSelectionIn(doc2, doc2, doc2.content.size, doc2.childCount, -1) || new AllSelection(doc2);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(doc2, json) {
    if (!json || !json.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let cls = classesById[json.type];
    if (!cls)
      throw new RangeError(`No selection type ${json.type} defined`);
    return cls.fromJSON(doc2, json);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(id, selectionClass) {
    if (id in classesById)
      throw new RangeError("Duplicate use of selection JSON ID " + id);
    classesById[id] = selectionClass;
    selectionClass.prototype.jsonID = id;
    return selectionClass;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return TextSelection.between(this.$anchor, this.$head).getBookmark();
  }
}
Selection.prototype.visible = true;
class SelectionRange {
  /**
  Create a range.
  */
  constructor($from, $to) {
    this.$from = $from;
    this.$to = $to;
  }
}
let warnedAboutTextSelection = false;
function checkTextSelection($pos) {
  if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
    warnedAboutTextSelection = true;
    console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
  }
}
class TextSelection extends Selection {
  /**
  Construct a text selection between the given points.
  */
  constructor($anchor, $head = $anchor) {
    checkTextSelection($anchor);
    checkTextSelection($head);
    super($anchor, $head);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(doc2, mapping) {
    let $head = doc2.resolve(mapping.map(this.head));
    if (!$head.parent.inlineContent)
      return Selection.near($head);
    let $anchor = doc2.resolve(mapping.map(this.anchor));
    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
  }
  replace(tr2, content = Slice.empty) {
    super.replace(tr2, content);
    if (content == Slice.empty) {
      let marks = this.$from.marksAcross(this.$to);
      if (marks)
        tr2.ensureMarks(marks);
    }
  }
  eq(other) {
    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
  }
  getBookmark() {
    return new TextBookmark(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(doc2, json) {
    if (typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new TextSelection(doc2.resolve(json.anchor), doc2.resolve(json.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(doc2, anchor, head = anchor) {
    let $anchor = doc2.resolve(anchor);
    return new this($anchor, head == anchor ? $anchor : doc2.resolve(head));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between($anchor, $head, bias) {
    let dPos = $anchor.pos - $head.pos;
    if (!bias || dPos)
      bias = dPos >= 0 ? 1 : -1;
    if (!$head.parent.inlineContent) {
      let found2 = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
      if (found2)
        $head = found2.$head;
      else
        return Selection.near($head, bias);
    }
    if (!$anchor.parent.inlineContent) {
      if (dPos == 0) {
        $anchor = $head;
      } else {
        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
        if ($anchor.pos < $head.pos != dPos < 0)
          $anchor = $head;
      }
    }
    return new TextSelection($anchor, $head);
  }
}
Selection.jsonID("text", TextSelection);
class TextBookmark {
  constructor(anchor, head) {
    this.anchor = anchor;
    this.head = head;
  }
  map(mapping) {
    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
  }
  resolve(doc2) {
    return TextSelection.between(doc2.resolve(this.anchor), doc2.resolve(this.head));
  }
}
class NodeSelection extends Selection {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor($pos) {
    let node2 = $pos.nodeAfter;
    let $end = $pos.node(0).resolve($pos.pos + node2.nodeSize);
    super($pos, $end);
    this.node = node2;
  }
  map(doc2, mapping) {
    let { deleted, pos } = mapping.mapResult(this.anchor);
    let $pos = doc2.resolve(pos);
    if (deleted)
      return Selection.near($pos);
    return new NodeSelection($pos);
  }
  content() {
    return new Slice(Fragment.from(this.node), 0, 0);
  }
  eq(other) {
    return other instanceof NodeSelection && other.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new NodeBookmark(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(doc2, json) {
    if (typeof json.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new NodeSelection(doc2.resolve(json.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(doc2, from3) {
    return new NodeSelection(doc2.resolve(from3));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(node2) {
    return !node2.isText && node2.type.spec.selectable !== false;
  }
}
NodeSelection.prototype.visible = false;
Selection.jsonID("node", NodeSelection);
class NodeBookmark {
  constructor(anchor) {
    this.anchor = anchor;
  }
  map(mapping) {
    let { deleted, pos } = mapping.mapResult(this.anchor);
    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
  }
  resolve(doc2) {
    let $pos = doc2.resolve(this.anchor), node2 = $pos.nodeAfter;
    if (node2 && NodeSelection.isSelectable(node2))
      return new NodeSelection($pos);
    return Selection.near($pos);
  }
}
class AllSelection extends Selection {
  /**
  Create an all-selection over the given document.
  */
  constructor(doc2) {
    super(doc2.resolve(0), doc2.resolve(doc2.content.size));
  }
  replace(tr2, content = Slice.empty) {
    if (content == Slice.empty) {
      tr2.delete(0, tr2.doc.content.size);
      let sel = Selection.atStart(tr2.doc);
      if (!sel.eq(tr2.selection))
        tr2.setSelection(sel);
    } else {
      super.replace(tr2, content);
    }
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(doc2) {
    return new AllSelection(doc2);
  }
  map(doc2) {
    return new AllSelection(doc2);
  }
  eq(other) {
    return other instanceof AllSelection;
  }
  getBookmark() {
    return AllBookmark;
  }
}
Selection.jsonID("all", AllSelection);
const AllBookmark = {
  map() {
    return this;
  },
  resolve(doc2) {
    return new AllSelection(doc2);
  }
};
function findSelectionIn(doc2, node2, pos, index2, dir, text = false) {
  if (node2.inlineContent)
    return TextSelection.create(doc2, pos);
  for (let i2 = index2 - (dir > 0 ? 0 : 1); dir > 0 ? i2 < node2.childCount : i2 >= 0; i2 += dir) {
    let child = node2.child(i2);
    if (!child.isAtom) {
      let inner = findSelectionIn(doc2, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
      if (inner)
        return inner;
    } else if (!text && NodeSelection.isSelectable(child)) {
      return NodeSelection.create(doc2, pos - (dir < 0 ? child.nodeSize : 0));
    }
    pos += child.nodeSize * dir;
  }
  return null;
}
function selectionToInsertionEnd$1(tr2, startLen, bias) {
  let last = tr2.steps.length - 1;
  if (last < startLen)
    return;
  let step = tr2.steps[last];
  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
    return;
  let map2 = tr2.mapping.maps[last], end2;
  map2.forEach((_from, _to, _newFrom, newTo) => {
    if (end2 == null)
      end2 = newTo;
  });
  tr2.setSelection(Selection.near(tr2.doc.resolve(end2), bias));
}
const UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;
class Transaction extends Transform {
  /**
  @internal
  */
  constructor(state) {
    super(state.doc);
    this.curSelectionFor = 0;
    this.updated = 0;
    this.meta = /* @__PURE__ */ Object.create(null);
    this.time = Date.now();
    this.curSelection = state.selection;
    this.storedMarks = state.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    if (this.curSelectionFor < this.steps.length) {
      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
      this.curSelectionFor = this.steps.length;
    }
    return this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(selection) {
    if (selection.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    this.curSelection = selection;
    this.curSelectionFor = this.steps.length;
    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
    this.storedMarks = null;
    return this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & UPDATED_SEL) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(marks) {
    this.storedMarks = marks;
    this.updated |= UPDATED_MARKS;
    return this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(marks) {
    if (!Mark$1.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
      this.setStoredMarks(marks);
    return this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(mark) {
    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(mark) {
    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & UPDATED_MARKS) > 0;
  }
  /**
  @internal
  */
  addStep(step, doc2) {
    super.addStep(step, doc2);
    this.updated = this.updated & ~UPDATED_MARKS;
    this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(time) {
    this.time = time;
    return this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(slice3) {
    this.selection.replace(this, slice3);
    return this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(node2, inheritMarks = true) {
    let selection = this.selection;
    if (inheritMarks)
      node2 = node2.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || Mark$1.none));
    selection.replaceWith(this, node2);
    return this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    this.selection.replace(this);
    return this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(text, from3, to) {
    let schema = this.doc.type.schema;
    if (from3 == null) {
      if (!text)
        return this.deleteSelection();
      return this.replaceSelectionWith(schema.text(text), true);
    } else {
      if (to == null)
        to = from3;
      to = to == null ? from3 : to;
      if (!text)
        return this.deleteRange(from3, to);
      let marks = this.storedMarks;
      if (!marks) {
        let $from = this.doc.resolve(from3);
        marks = to == from3 ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
      }
      this.replaceRangeWith(from3, to, schema.text(text, marks));
      if (!this.selection.empty)
        this.setSelection(Selection.near(this.selection.$to));
      return this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(key, value) {
    this.meta[typeof key == "string" ? key : key.key] = value;
    return this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(key) {
    return this.meta[typeof key == "string" ? key : key.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let _2 in this.meta)
      return false;
    return true;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    this.updated |= UPDATED_SCROLL;
    return this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & UPDATED_SCROLL) > 0;
  }
}
function bind(f2, self) {
  return !self || !f2 ? f2 : f2.bind(self);
}
class FieldDesc {
  constructor(name, desc, self) {
    this.name = name;
    this.init = bind(desc.init, self);
    this.apply = bind(desc.apply, self);
  }
}
const baseFields = [
  new FieldDesc("doc", {
    init(config) {
      return config.doc || config.schema.topNodeType.createAndFill();
    },
    apply(tr2) {
      return tr2.doc;
    }
  }),
  new FieldDesc("selection", {
    init(config, instance) {
      return config.selection || Selection.atStart(instance.doc);
    },
    apply(tr2) {
      return tr2.selection;
    }
  }),
  new FieldDesc("storedMarks", {
    init(config) {
      return config.storedMarks || null;
    },
    apply(tr2, _marks, _old, state) {
      return state.selection.$cursor ? tr2.storedMarks : null;
    }
  }),
  new FieldDesc("scrollToSelection", {
    init() {
      return 0;
    },
    apply(tr2, prev2) {
      return tr2.scrolledIntoView ? prev2 + 1 : prev2;
    }
  })
];
class Configuration {
  constructor(schema, plugins) {
    this.schema = schema;
    this.plugins = [];
    this.pluginsByKey = /* @__PURE__ */ Object.create(null);
    this.fields = baseFields.slice();
    if (plugins)
      plugins.forEach((plugin) => {
        if (this.pluginsByKey[plugin.key])
          throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
        this.plugins.push(plugin);
        this.pluginsByKey[plugin.key] = plugin;
        if (plugin.spec.state)
          this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
      });
  }
}
class EditorState {
  /**
  @internal
  */
  constructor(config) {
    this.config = config;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(tr2) {
    return this.applyTransaction(tr2).state;
  }
  /**
  @internal
  */
  filterTransaction(tr2, ignore = -1) {
    for (let i2 = 0; i2 < this.config.plugins.length; i2++)
      if (i2 != ignore) {
        let plugin = this.config.plugins[i2];
        if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr2, this))
          return false;
      }
    return true;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(rootTr) {
    if (!this.filterTransaction(rootTr))
      return { state: this, transactions: [] };
    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
    for (; ; ) {
      let haveNew = false;
      for (let i2 = 0; i2 < this.config.plugins.length; i2++) {
        let plugin = this.config.plugins[i2];
        if (plugin.spec.appendTransaction) {
          let n2 = seen ? seen[i2].n : 0, oldState = seen ? seen[i2].state : this;
          let tr2 = n2 < trs.length && plugin.spec.appendTransaction.call(plugin, n2 ? trs.slice(n2) : trs, oldState, newState);
          if (tr2 && newState.filterTransaction(tr2, i2)) {
            tr2.setMeta("appendedTransaction", rootTr);
            if (!seen) {
              seen = [];
              for (let j2 = 0; j2 < this.config.plugins.length; j2++)
                seen.push(j2 < i2 ? { state: newState, n: trs.length } : { state: this, n: 0 });
            }
            trs.push(tr2);
            newState = newState.applyInner(tr2);
            haveNew = true;
          }
          if (seen)
            seen[i2] = { state: newState, n: trs.length };
        }
      }
      if (!haveNew)
        return { state: newState, transactions: trs };
    }
  }
  /**
  @internal
  */
  applyInner(tr2) {
    if (!tr2.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let newInstance = new EditorState(this.config), fields = this.config.fields;
    for (let i2 = 0; i2 < fields.length; i2++) {
      let field = fields[i2];
      newInstance[field.name] = field.apply(tr2, this[field.name], this, newInstance);
    }
    return newInstance;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new Transaction(this);
  }
  /**
  Create a new state.
  */
  static create(config) {
    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
    let instance = new EditorState($config);
    for (let i2 = 0; i2 < $config.fields.length; i2++)
      instance[$config.fields[i2].name] = $config.fields[i2].init(config, instance);
    return instance;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(config) {
    let $config = new Configuration(this.schema, config.plugins);
    let fields = $config.fields, instance = new EditorState($config);
    for (let i2 = 0; i2 < fields.length; i2++) {
      let name = fields[i2].name;
      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i2].init(config, instance);
    }
    return instance;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(pluginFields) {
    let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks)
      result.storedMarks = this.storedMarks.map((m4) => m4.toJSON());
    if (pluginFields && typeof pluginFields == "object")
      for (let prop in pluginFields) {
        if (prop == "doc" || prop == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let plugin = pluginFields[prop], state = plugin.spec.state;
        if (state && state.toJSON)
          result[prop] = state.toJSON.call(plugin, this[plugin.key]);
      }
    return result;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(config, json, pluginFields) {
    if (!json)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!config.schema)
      throw new RangeError("Required config field 'schema' missing");
    let $config = new Configuration(config.schema, config.plugins);
    let instance = new EditorState($config);
    $config.fields.forEach((field) => {
      if (field.name == "doc") {
        instance.doc = Node$2.fromJSON(config.schema, json.doc);
      } else if (field.name == "selection") {
        instance.selection = Selection.fromJSON(instance.doc, json.selection);
      } else if (field.name == "storedMarks") {
        if (json.storedMarks)
          instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
      } else {
        if (pluginFields)
          for (let prop in pluginFields) {
            let plugin = pluginFields[prop], state = plugin.spec.state;
            if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {
              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
              return;
            }
          }
        instance[field.name] = field.init(config, instance);
      }
    });
    return instance;
  }
}
function bindProps(obj, self, target) {
  for (let prop in obj) {
    let val = obj[prop];
    if (val instanceof Function)
      val = val.bind(self);
    else if (prop == "handleDOMEvents")
      val = bindProps(val, self, {});
    target[prop] = val;
  }
  return target;
}
class Plugin {
  /**
  Create a plugin.
  */
  constructor(spec) {
    this.spec = spec;
    this.props = {};
    if (spec.props)
      bindProps(spec.props, this, this.props);
    this.key = spec.key ? spec.key.key : createKey("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(state) {
    return state[this.key];
  }
}
const keys = /* @__PURE__ */ Object.create(null);
function createKey(name) {
  if (name in keys)
    return name + "$" + ++keys[name];
  keys[name] = 0;
  return name + "$";
}
class PluginKey {
  /**
  Create a plugin key.
  */
  constructor(name = "key") {
    this.key = createKey(name);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(state) {
    return state.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(state) {
    return state[this.key];
  }
}
const domIndex = function(node2) {
  for (var index2 = 0; ; index2++) {
    node2 = node2.previousSibling;
    if (!node2)
      return index2;
  }
};
const parentNode = function(node2) {
  let parent = node2.assignedSlot || node2.parentNode;
  return parent && parent.nodeType == 11 ? parent.host : parent;
};
let reusedRange = null;
const textRange = function(node2, from3, to) {
  let range = reusedRange || (reusedRange = document.createRange());
  range.setEnd(node2, to == null ? node2.nodeValue.length : to);
  range.setStart(node2, from3 || 0);
  return range;
};
const isEquivalentPosition = function(node2, off2, targetNode, targetOff) {
  return targetNode && (scanFor(node2, off2, targetNode, targetOff, -1) || scanFor(node2, off2, targetNode, targetOff, 1));
};
const atomElements = /^(img|br|input|textarea|hr)$/i;
function scanFor(node2, off2, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node2 == targetNode && off2 == targetOff)
      return true;
    if (off2 == (dir < 0 ? 0 : nodeSize(node2))) {
      let parent = node2.parentNode;
      if (!parent || parent.nodeType != 1 || hasBlockDesc(node2) || atomElements.test(node2.nodeName) || node2.contentEditable == "false")
        return false;
      off2 = domIndex(node2) + (dir < 0 ? 0 : 1);
      node2 = parent;
    } else if (node2.nodeType == 1) {
      node2 = node2.childNodes[off2 + (dir < 0 ? -1 : 0)];
      if (node2.contentEditable == "false")
        return false;
      off2 = dir < 0 ? nodeSize(node2) : 0;
    } else {
      return false;
    }
  }
}
function nodeSize(node2) {
  return node2.nodeType == 3 ? node2.nodeValue.length : node2.childNodes.length;
}
function isOnEdge(node2, offset2, parent) {
  for (let atStart = offset2 == 0, atEnd = offset2 == nodeSize(node2); atStart || atEnd; ) {
    if (node2 == parent)
      return true;
    let index2 = domIndex(node2);
    node2 = node2.parentNode;
    if (!node2)
      return false;
    atStart = atStart && index2 == 0;
    atEnd = atEnd && index2 == nodeSize(node2);
  }
}
function hasBlockDesc(dom) {
  let desc;
  for (let cur = dom; cur; cur = cur.parentNode)
    if (desc = cur.pmViewDesc)
      break;
  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
}
const selectionCollapsed = function(domSel) {
  return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
};
function keyEvent(keyCode, key) {
  let event = document.createEvent("Event");
  event.initEvent("keydown", true, true);
  event.keyCode = keyCode;
  event.key = event.code = key;
  return event;
}
function deepActiveElement(doc2) {
  let elt = doc2.activeElement;
  while (elt && elt.shadowRoot)
    elt = elt.shadowRoot.activeElement;
  return elt;
}
function caretFromPoint(doc2, x3, y4) {
  if (doc2.caretPositionFromPoint) {
    try {
      let pos = doc2.caretPositionFromPoint(x3, y4);
      if (pos)
        return { node: pos.offsetNode, offset: pos.offset };
    } catch (_2) {
    }
  }
  if (doc2.caretRangeFromPoint) {
    let range = doc2.caretRangeFromPoint(x3, y4);
    if (range)
      return { node: range.startContainer, offset: range.startOffset };
  }
}
const nav = typeof navigator != "undefined" ? navigator : null;
const doc = typeof document != "undefined" ? document : null;
const agent = nav && nav.userAgent || "";
const ie_edge = /Edge\/(\d+)/.exec(agent);
const ie_upto10 = /MSIE \d/.exec(agent);
const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
const ie$1 = !!(ie_upto10 || ie_11up || ie_edge);
const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
const gecko = !ie$1 && /gecko\/(\d+)/i.test(agent);
gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
const _chrome = !ie$1 && /Chrome\/(\d+)/.exec(agent);
const chrome = !!_chrome;
const chrome_version = _chrome ? +_chrome[1] : 0;
const safari = !ie$1 && !!nav && /Apple Computer/.test(nav.vendor);
const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
const mac$2 = ios || (nav ? /Mac/.test(nav.platform) : false);
const windows = nav ? /Win/.test(nav.platform) : false;
const android = /Android \d/.test(agent);
const webkit = !!doc && "webkitFontSmoothing" in doc.documentElement.style;
const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function windowRect(doc2) {
  return {
    left: 0,
    right: doc2.documentElement.clientWidth,
    top: 0,
    bottom: doc2.documentElement.clientHeight
  };
}
function getSide$1(value, side) {
  return typeof value == "number" ? value : value[side];
}
function clientRect(node2) {
  let rect = node2.getBoundingClientRect();
  let scaleX2 = rect.width / node2.offsetWidth || 1;
  let scaleY2 = rect.height / node2.offsetHeight || 1;
  return {
    left: rect.left,
    right: rect.left + node2.clientWidth * scaleX2,
    top: rect.top,
    bottom: rect.top + node2.clientHeight * scaleY2
  };
}
function scrollRectIntoView(view, rect, startDOM) {
  let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
  let doc2 = view.dom.ownerDocument;
  for (let parent = startDOM || view.dom; ; parent = parentNode(parent)) {
    if (!parent)
      break;
    if (parent.nodeType != 1)
      continue;
    let elt = parent;
    let atTop = elt == doc2.body;
    let bounding = atTop ? windowRect(doc2) : clientRect(elt);
    let moveX = 0, moveY = 0;
    if (rect.top < bounding.top + getSide$1(scrollThreshold, "top"))
      moveY = -(bounding.top - rect.top + getSide$1(scrollMargin, "top"));
    else if (rect.bottom > bounding.bottom - getSide$1(scrollThreshold, "bottom"))
      moveY = rect.bottom - rect.top > bounding.bottom - bounding.top ? rect.top + getSide$1(scrollMargin, "top") - bounding.top : rect.bottom - bounding.bottom + getSide$1(scrollMargin, "bottom");
    if (rect.left < bounding.left + getSide$1(scrollThreshold, "left"))
      moveX = -(bounding.left - rect.left + getSide$1(scrollMargin, "left"));
    else if (rect.right > bounding.right - getSide$1(scrollThreshold, "right"))
      moveX = rect.right - bounding.right + getSide$1(scrollMargin, "right");
    if (moveX || moveY) {
      if (atTop) {
        doc2.defaultView.scrollBy(moveX, moveY);
      } else {
        let startX = elt.scrollLeft, startY = elt.scrollTop;
        if (moveY)
          elt.scrollTop += moveY;
        if (moveX)
          elt.scrollLeft += moveX;
        let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
        rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
      }
    }
    if (atTop || /^(fixed|sticky)$/.test(getComputedStyle(parent).position))
      break;
  }
}
function storeScrollPos(view) {
  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
  let refDOM, refTop;
  for (let x3 = (rect.left + rect.right) / 2, y4 = startY + 1; y4 < Math.min(innerHeight, rect.bottom); y4 += 5) {
    let dom = view.root.elementFromPoint(x3, y4);
    if (!dom || dom == view.dom || !view.dom.contains(dom))
      continue;
    let localRect = dom.getBoundingClientRect();
    if (localRect.top >= startY - 20) {
      refDOM = dom;
      refTop = localRect.top;
      break;
    }
  }
  return { refDOM, refTop, stack: scrollStack(view.dom) };
}
function scrollStack(dom) {
  let stack = [], doc2 = dom.ownerDocument;
  for (let cur = dom; cur; cur = parentNode(cur)) {
    stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
    if (dom == doc2)
      break;
  }
  return stack;
}
function resetScrollPos({ refDOM, refTop, stack }) {
  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
}
function restoreScrollStack(stack, dTop) {
  for (let i2 = 0; i2 < stack.length; i2++) {
    let { dom, top: top2, left: left2 } = stack[i2];
    if (dom.scrollTop != top2 + dTop)
      dom.scrollTop = top2 + dTop;
    if (dom.scrollLeft != left2)
      dom.scrollLeft = left2;
  }
}
let preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stored = scrollStack(dom);
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    restoreScrollStack(stored, 0);
  }
}
function findOffsetInNode(node2, coords) {
  let closest, dxClosest = 2e8, coordsClosest, offset2 = 0;
  let rowBot = coords.top, rowTop = coords.top;
  let firstBelow, coordsBelow;
  for (let child = node2.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
    let rects;
    if (child.nodeType == 1)
      rects = child.getClientRects();
    else if (child.nodeType == 3)
      rects = textRange(child).getClientRects();
    else
      continue;
    for (let i2 = 0; i2 < rects.length; i2++) {
      let rect = rects[i2];
      if (rect.top <= rowBot && rect.bottom >= rowTop) {
        rowBot = Math.max(rect.bottom, rowBot);
        rowTop = Math.min(rect.top, rowTop);
        let dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;
        if (dx < dxClosest) {
          closest = child;
          dxClosest = dx;
          coordsClosest = dx && closest.nodeType == 3 ? {
            left: rect.right < coords.left ? rect.right : rect.left,
            top: coords.top
          } : coords;
          if (child.nodeType == 1 && dx)
            offset2 = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
          continue;
        }
      } else if (rect.top > coords.top && !firstBelow && rect.left <= coords.left && rect.right >= coords.left) {
        firstBelow = child;
        coordsBelow = { left: Math.max(rect.left, Math.min(rect.right, coords.left)), top: rect.top };
      }
      if (!closest && (coords.left >= rect.right && coords.top >= rect.top || coords.left >= rect.left && coords.top >= rect.bottom))
        offset2 = childIndex + 1;
    }
  }
  if (!closest && firstBelow) {
    closest = firstBelow;
    coordsClosest = coordsBelow;
    dxClosest = 0;
  }
  if (closest && closest.nodeType == 3)
    return findOffsetInText(closest, coordsClosest);
  if (!closest || dxClosest && closest.nodeType == 1)
    return { node: node2, offset: offset2 };
  return findOffsetInNode(closest, coordsClosest);
}
function findOffsetInText(node2, coords) {
  let len = node2.nodeValue.length;
  let range = document.createRange();
  for (let i2 = 0; i2 < len; i2++) {
    range.setEnd(node2, i2 + 1);
    range.setStart(node2, i2);
    let rect = singleRect(range, 1);
    if (rect.top == rect.bottom)
      continue;
    if (inRect(coords, rect))
      return { node: node2, offset: i2 + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
  }
  return { node: node2, offset: 0 };
}
function inRect(coords, rect) {
  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 && coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
}
function targetKludge(dom, coords) {
  let parent = dom.parentNode;
  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
    return parent;
  return dom;
}
function posFromElement(view, elt, coords) {
  let { node: node2, offset: offset2 } = findOffsetInNode(elt, coords), bias = -1;
  if (node2.nodeType == 1 && !node2.firstChild) {
    let rect = node2.getBoundingClientRect();
    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
  }
  return view.docView.posFromDOM(node2, offset2, bias);
}
function posFromCaret(view, node2, offset2, coords) {
  let outsideBlock = -1;
  for (let cur = node2, sawBlock = false; ; ) {
    if (cur == view.dom)
      break;
    let desc = view.docView.nearestDesc(cur, true);
    if (!desc)
      return null;
    if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent && !sawBlock || !desc.contentDOM)) {
      let rect = desc.dom.getBoundingClientRect();
      if (desc.node.isBlock && desc.parent && !sawBlock) {
        sawBlock = true;
        if (rect.left > coords.left || rect.top > coords.top)
          outsideBlock = desc.posBefore;
        else if (rect.right < coords.left || rect.bottom < coords.top)
          outsideBlock = desc.posAfter;
      }
      if (!desc.contentDOM && outsideBlock < 0 && !desc.node.isText) {
        let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2 : coords.left < (rect.left + rect.right) / 2;
        return before ? desc.posBefore : desc.posAfter;
      }
    }
    cur = desc.dom.parentNode;
  }
  return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node2, offset2, -1);
}
function elementFromPoint(element, coords, box) {
  let len = element.childNodes.length;
  if (len && box.top < box.bottom) {
    for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i2 = startI; ; ) {
      let child = element.childNodes[i2];
      if (child.nodeType == 1) {
        let rects = child.getClientRects();
        for (let j2 = 0; j2 < rects.length; j2++) {
          let rect = rects[j2];
          if (inRect(coords, rect))
            return elementFromPoint(child, coords, rect);
        }
      }
      if ((i2 = (i2 + 1) % len) == startI)
        break;
    }
  }
  return element;
}
function posAtCoords(view, coords) {
  let doc2 = view.dom.ownerDocument, node2, offset2 = 0;
  let caret2 = caretFromPoint(doc2, coords.left, coords.top);
  if (caret2)
    ({ node: node2, offset: offset2 } = caret2);
  let elt = (view.root.elementFromPoint ? view.root : doc2).elementFromPoint(coords.left, coords.top);
  let pos;
  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
    let box = view.dom.getBoundingClientRect();
    if (!inRect(coords, box))
      return null;
    elt = elementFromPoint(view.dom, coords, box);
    if (!elt)
      return null;
  }
  if (safari) {
    for (let p2 = elt; node2 && p2; p2 = parentNode(p2))
      if (p2.draggable)
        node2 = void 0;
  }
  elt = targetKludge(elt, coords);
  if (node2) {
    if (gecko && node2.nodeType == 1) {
      offset2 = Math.min(offset2, node2.childNodes.length);
      if (offset2 < node2.childNodes.length) {
        let next2 = node2.childNodes[offset2], box;
        if (next2.nodeName == "IMG" && (box = next2.getBoundingClientRect()).right <= coords.left && box.bottom > coords.top)
          offset2++;
      }
    }
    let prev2;
    if (webkit && offset2 && node2.nodeType == 1 && (prev2 = node2.childNodes[offset2 - 1]).nodeType == 1 && prev2.contentEditable == "false" && prev2.getBoundingClientRect().top >= coords.top)
      offset2--;
    if (node2 == view.dom && offset2 == node2.childNodes.length - 1 && node2.lastChild.nodeType == 1 && coords.top > node2.lastChild.getBoundingClientRect().bottom)
      pos = view.state.doc.content.size;
    else if (offset2 == 0 || node2.nodeType != 1 || node2.childNodes[offset2 - 1].nodeName != "BR")
      pos = posFromCaret(view, node2, offset2, coords);
  }
  if (pos == null)
    pos = posFromElement(view, elt, coords);
  let desc = view.docView.nearestDesc(elt, true);
  return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
}
function nonZero(rect) {
  return rect.top < rect.bottom || rect.left < rect.right;
}
function singleRect(target, bias) {
  let rects = target.getClientRects();
  if (rects.length) {
    let first2 = rects[bias < 0 ? 0 : rects.length - 1];
    if (nonZero(first2))
      return first2;
  }
  return Array.prototype.find.call(rects, nonZero) || target.getBoundingClientRect();
}
const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function coordsAtPos(view, pos, side) {
  let { node: node2, offset: offset2, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
  let supportEmptyRange = webkit || gecko;
  if (node2.nodeType == 3) {
    if (supportEmptyRange && (BIDI.test(node2.nodeValue) || (side < 0 ? !offset2 : offset2 == node2.nodeValue.length))) {
      let rect = singleRect(textRange(node2, offset2, offset2), side);
      if (gecko && offset2 && /\s/.test(node2.nodeValue[offset2 - 1]) && offset2 < node2.nodeValue.length) {
        let rectBefore = singleRect(textRange(node2, offset2 - 1, offset2 - 1), -1);
        if (rectBefore.top == rect.top) {
          let rectAfter = singleRect(textRange(node2, offset2, offset2 + 1), -1);
          if (rectAfter.top != rect.top)
            return flattenV(rectAfter, rectAfter.left < rectBefore.left);
        }
      }
      return rect;
    } else {
      let from3 = offset2, to = offset2, takeSide = side < 0 ? 1 : -1;
      if (side < 0 && !offset2) {
        to++;
        takeSide = -1;
      } else if (side >= 0 && offset2 == node2.nodeValue.length) {
        from3--;
        takeSide = 1;
      } else if (side < 0) {
        from3--;
      } else {
        to++;
      }
      return flattenV(singleRect(textRange(node2, from3, to), takeSide), takeSide < 0);
    }
  }
  let $dom = view.state.doc.resolve(pos - (atom || 0));
  if (!$dom.parent.inlineContent) {
    if (atom == null && offset2 && (side < 0 || offset2 == nodeSize(node2))) {
      let before = node2.childNodes[offset2 - 1];
      if (before.nodeType == 1)
        return flattenH(before.getBoundingClientRect(), false);
    }
    if (atom == null && offset2 < nodeSize(node2)) {
      let after = node2.childNodes[offset2];
      if (after.nodeType == 1)
        return flattenH(after.getBoundingClientRect(), true);
    }
    return flattenH(node2.getBoundingClientRect(), side >= 0);
  }
  if (atom == null && offset2 && (side < 0 || offset2 == nodeSize(node2))) {
    let before = node2.childNodes[offset2 - 1];
    let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1)) : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
    if (target)
      return flattenV(singleRect(target, 1), false);
  }
  if (atom == null && offset2 < nodeSize(node2)) {
    let after = node2.childNodes[offset2];
    while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
      after = after.nextSibling;
    let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, supportEmptyRange ? 0 : 1) : after.nodeType == 1 ? after : null;
    if (target)
      return flattenV(singleRect(target, -1), true);
  }
  return flattenV(singleRect(node2.nodeType == 3 ? textRange(node2) : node2, -side), side >= 0);
}
function flattenV(rect, left2) {
  if (rect.width == 0)
    return rect;
  let x3 = left2 ? rect.left : rect.right;
  return { top: rect.top, bottom: rect.bottom, left: x3, right: x3 };
}
function flattenH(rect, top2) {
  if (rect.height == 0)
    return rect;
  let y4 = top2 ? rect.top : rect.bottom;
  return { top: y4, bottom: y4, left: rect.left, right: rect.right };
}
function withFlushedState(view, state, f2) {
  let viewState = view.state, active = view.root.activeElement;
  if (viewState != state)
    view.updateState(state);
  if (active != view.dom)
    view.focus();
  try {
    return f2();
  } finally {
    if (viewState != state)
      view.updateState(viewState);
    if (active != view.dom && active)
      active.focus();
  }
}
function endOfTextblockVertical(view, state, dir) {
  let sel = state.selection;
  let $pos = dir == "up" ? sel.$from : sel.$to;
  return withFlushedState(view, state, () => {
    let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
    for (; ; ) {
      let nearest = view.docView.nearestDesc(dom, true);
      if (!nearest)
        break;
      if (nearest.node.isBlock) {
        dom = nearest.contentDOM || nearest.dom;
        break;
      }
      dom = nearest.dom.parentNode;
    }
    let coords = coordsAtPos(view, $pos.pos, 1);
    for (let child = dom.firstChild; child; child = child.nextSibling) {
      let boxes;
      if (child.nodeType == 1)
        boxes = child.getClientRects();
      else if (child.nodeType == 3)
        boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
      else
        continue;
      for (let i2 = 0; i2 < boxes.length; i2++) {
        let box = boxes[i2];
        if (box.bottom > box.top + 1 && (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2 : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
          return false;
      }
    }
    return true;
  });
}
const maybeRTL = /[\u0590-\u08ac]/;
function endOfTextblockHorizontal(view, state, dir) {
  let { $head } = state.selection;
  if (!$head.parent.isTextblock)
    return false;
  let offset2 = $head.parentOffset, atStart = !offset2, atEnd = offset2 == $head.parent.content.size;
  let sel = view.domSelection();
  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
    return dir == "left" || dir == "backward" ? atStart : atEnd;
  return withFlushedState(view, state, () => {
    let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
    let oldBidiLevel = sel.caretBidiLevel;
    sel.modify("move", dir, "character");
    let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
    let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
    let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) || oldNode == newNode && oldOff == newOff;
    try {
      sel.collapse(anchorNode, anchorOffset);
      if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
        sel.extend(oldNode, oldOff);
    } catch (_2) {
    }
    if (oldBidiLevel != null)
      sel.caretBidiLevel = oldBidiLevel;
    return result;
  });
}
let cachedState = null;
let cachedDir = null;
let cachedResult = false;
function endOfTextblock(view, state, dir) {
  if (cachedState == state && cachedDir == dir)
    return cachedResult;
  cachedState = state;
  cachedDir = dir;
  return cachedResult = dir == "up" || dir == "down" ? endOfTextblockVertical(view, state, dir) : endOfTextblockHorizontal(view, state, dir);
}
const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
class ViewDesc {
  constructor(parent, children, dom, contentDOM) {
    this.parent = parent;
    this.children = children;
    this.dom = dom;
    this.contentDOM = contentDOM;
    this.dirty = NOT_DIRTY;
    dom.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(widget) {
    return false;
  }
  matchesMark(mark) {
    return false;
  }
  matchesNode(node2, outerDeco, innerDeco) {
    return false;
  }
  matchesHack(nodeName) {
    return false;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(event) {
    return false;
  }
  // The size of the content represented by this desc.
  get size() {
    let size2 = 0;
    for (let i2 = 0; i2 < this.children.length; i2++)
      size2 += this.children[i2].size;
    return size2;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0;
    if (this.dom.pmViewDesc == this)
      this.dom.pmViewDesc = void 0;
    for (let i2 = 0; i2 < this.children.length; i2++)
      this.children[i2].destroy();
  }
  posBeforeChild(child) {
    for (let i2 = 0, pos = this.posAtStart; ; i2++) {
      let cur = this.children[i2];
      if (cur == child)
        return pos;
      pos += cur.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(dom, offset2, bias) {
    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
      if (bias < 0) {
        let domBefore, desc;
        if (dom == this.contentDOM) {
          domBefore = dom.childNodes[offset2 - 1];
        } else {
          while (dom.parentNode != this.contentDOM)
            dom = dom.parentNode;
          domBefore = dom.previousSibling;
        }
        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
          domBefore = domBefore.previousSibling;
        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
      } else {
        let domAfter, desc;
        if (dom == this.contentDOM) {
          domAfter = dom.childNodes[offset2];
        } else {
          while (dom.parentNode != this.contentDOM)
            dom = dom.parentNode;
          domAfter = dom.nextSibling;
        }
        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
          domAfter = domAfter.nextSibling;
        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
      }
    }
    let atEnd;
    if (dom == this.dom && this.contentDOM) {
      atEnd = offset2 > domIndex(this.contentDOM);
    } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
    } else if (this.dom.firstChild) {
      if (offset2 == 0)
        for (let search = dom; ; search = search.parentNode) {
          if (search == this.dom) {
            atEnd = false;
            break;
          }
          if (search.previousSibling)
            break;
        }
      if (atEnd == null && offset2 == dom.childNodes.length)
        for (let search = dom; ; search = search.parentNode) {
          if (search == this.dom) {
            atEnd = true;
            break;
          }
          if (search.nextSibling)
            break;
        }
    }
    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(dom, onlyNodes = false) {
    for (let first2 = true, cur = dom; cur; cur = cur.parentNode) {
      let desc = this.getDesc(cur), nodeDOM;
      if (desc && (!onlyNodes || desc.node)) {
        if (first2 && (nodeDOM = desc.nodeDOM) && !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
          first2 = false;
        else
          return desc;
      }
    }
  }
  getDesc(dom) {
    let desc = dom.pmViewDesc;
    for (let cur = desc; cur; cur = cur.parent)
      if (cur == this)
        return desc;
  }
  posFromDOM(dom, offset2, bias) {
    for (let scan = dom; scan; scan = scan.parentNode) {
      let desc = this.getDesc(scan);
      if (desc)
        return desc.localPosFromDOM(dom, offset2, bias);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(pos) {
    for (let i2 = 0, offset2 = 0; i2 < this.children.length; i2++) {
      let child = this.children[i2], end2 = offset2 + child.size;
      if (offset2 == pos && end2 != offset2) {
        while (!child.border && child.children.length)
          child = child.children[0];
        return child;
      }
      if (pos < end2)
        return child.descAt(pos - offset2 - child.border);
      offset2 = end2;
    }
  }
  domFromPos(pos, side) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: pos + 1 };
    let i2 = 0, offset2 = 0;
    for (let curPos = 0; i2 < this.children.length; i2++) {
      let child = this.children[i2], end2 = curPos + child.size;
      if (end2 > pos || child instanceof TrailingHackViewDesc) {
        offset2 = pos - curPos;
        break;
      }
      curPos = end2;
    }
    if (offset2)
      return this.children[i2].domFromPos(offset2 - this.children[i2].border, side);
    for (let prev2; i2 && !(prev2 = this.children[i2 - 1]).size && prev2 instanceof WidgetViewDesc && prev2.side >= 0; i2--) {
    }
    if (side <= 0) {
      let prev2, enter2 = true;
      for (; ; i2--, enter2 = false) {
        prev2 = i2 ? this.children[i2 - 1] : null;
        if (!prev2 || prev2.dom.parentNode == this.contentDOM)
          break;
      }
      if (prev2 && side && enter2 && !prev2.border && !prev2.domAtom)
        return prev2.domFromPos(prev2.size, side);
      return { node: this.contentDOM, offset: prev2 ? domIndex(prev2.dom) + 1 : 0 };
    } else {
      let next2, enter2 = true;
      for (; ; i2++, enter2 = false) {
        next2 = i2 < this.children.length ? this.children[i2] : null;
        if (!next2 || next2.dom.parentNode == this.contentDOM)
          break;
      }
      if (next2 && enter2 && !next2.border && !next2.domAtom)
        return next2.domFromPos(0, side);
      return { node: this.contentDOM, offset: next2 ? domIndex(next2.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(from3, to, base2 = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: from3, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let fromOffset = -1, toOffset = -1;
    for (let offset2 = base2, i2 = 0; ; i2++) {
      let child = this.children[i2], end2 = offset2 + child.size;
      if (fromOffset == -1 && from3 <= end2) {
        let childBase = offset2 + child.border;
        if (from3 >= childBase && to <= end2 - child.border && child.node && child.contentDOM && this.contentDOM.contains(child.contentDOM))
          return child.parseRange(from3, to, childBase);
        from3 = offset2;
        for (let j2 = i2; j2 > 0; j2--) {
          let prev2 = this.children[j2 - 1];
          if (prev2.size && prev2.dom.parentNode == this.contentDOM && !prev2.emptyChildAt(1)) {
            fromOffset = domIndex(prev2.dom) + 1;
            break;
          }
          from3 -= prev2.size;
        }
        if (fromOffset == -1)
          fromOffset = 0;
      }
      if (fromOffset > -1 && (end2 > to || i2 == this.children.length - 1)) {
        to = end2;
        for (let j2 = i2 + 1; j2 < this.children.length; j2++) {
          let next2 = this.children[j2];
          if (next2.size && next2.dom.parentNode == this.contentDOM && !next2.emptyChildAt(-1)) {
            toOffset = domIndex(next2.dom);
            break;
          }
          to += next2.size;
        }
        if (toOffset == -1)
          toOffset = this.contentDOM.childNodes.length;
        break;
      }
      offset2 = end2;
    }
    return { node: this.contentDOM, from: from3, to, fromOffset, toOffset };
  }
  emptyChildAt(side) {
    if (this.border || !this.contentDOM || !this.children.length)
      return false;
    let child = this.children[side < 0 ? 0 : this.children.length - 1];
    return child.size == 0 || child.emptyChildAt(side);
  }
  domAfterPos(pos) {
    let { node: node2, offset: offset2 } = this.domFromPos(pos, 0);
    if (node2.nodeType != 1 || offset2 == node2.childNodes.length)
      throw new RangeError("No node after pos " + pos);
    return node2.childNodes[offset2];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(anchor, head, root, force = false) {
    let from3 = Math.min(anchor, head), to = Math.max(anchor, head);
    for (let i2 = 0, offset2 = 0; i2 < this.children.length; i2++) {
      let child = this.children[i2], end2 = offset2 + child.size;
      if (from3 > offset2 && to < end2)
        return child.setSelection(anchor - offset2 - child.border, head - offset2 - child.border, root, force);
      offset2 = end2;
    }
    let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
    let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
    let domSel = root.getSelection();
    let brKludge = false;
    if ((gecko || safari) && anchor == head) {
      let { node: node2, offset: offset2 } = anchorDOM;
      if (node2.nodeType == 3) {
        brKludge = !!(offset2 && node2.nodeValue[offset2 - 1] == "\n");
        if (brKludge && offset2 == node2.nodeValue.length) {
          for (let scan = node2, after; scan; scan = scan.parentNode) {
            if (after = scan.nextSibling) {
              if (after.nodeName == "BR")
                anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
              break;
            }
            let desc = scan.pmViewDesc;
            if (desc && desc.node && desc.node.isBlock)
              break;
          }
        }
      } else {
        let prev2 = node2.childNodes[offset2 - 1];
        brKludge = prev2 && (prev2.nodeName == "BR" || prev2.contentEditable == "false");
      }
    }
    if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
      let after = domSel.focusNode.childNodes[domSel.focusOffset];
      if (after && after.contentEditable == "false")
        force = true;
    }
    if (!(force || brKludge && safari) && isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) && isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
      return;
    let domSelExtended = false;
    if ((domSel.extend || anchor == head) && !brKludge) {
      domSel.collapse(anchorDOM.node, anchorDOM.offset);
      try {
        if (anchor != head)
          domSel.extend(headDOM.node, headDOM.offset);
        domSelExtended = true;
      } catch (_2) {
      }
    }
    if (!domSelExtended) {
      if (anchor > head) {
        let tmp = anchorDOM;
        anchorDOM = headDOM;
        headDOM = tmp;
      }
      let range = document.createRange();
      range.setEnd(headDOM.node, headDOM.offset);
      range.setStart(anchorDOM.node, anchorDOM.offset);
      domSel.removeAllRanges();
      domSel.addRange(range);
    }
  }
  ignoreMutation(mutation) {
    return !this.contentDOM && mutation.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(from3, to) {
    for (let offset2 = 0, i2 = 0; i2 < this.children.length; i2++) {
      let child = this.children[i2], end2 = offset2 + child.size;
      if (offset2 == end2 ? from3 <= end2 && to >= offset2 : from3 < end2 && to > offset2) {
        let startInside = offset2 + child.border, endInside = end2 - child.border;
        if (from3 >= startInside && to <= endInside) {
          this.dirty = from3 == offset2 || to == end2 ? CONTENT_DIRTY : CHILD_DIRTY;
          if (from3 == startInside && to == endInside && (child.contentLost || child.dom.parentNode != this.contentDOM))
            child.dirty = NODE_DIRTY;
          else
            child.markDirty(from3 - startInside, to - startInside);
          return;
        } else {
          child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length ? CONTENT_DIRTY : NODE_DIRTY;
        }
      }
      offset2 = end2;
    }
    this.dirty = CONTENT_DIRTY;
  }
  markParentsDirty() {
    let level = 1;
    for (let node2 = this.parent; node2; node2 = node2.parent, level++) {
      let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
      if (node2.dirty < dirty)
        node2.dirty = dirty;
    }
  }
  get domAtom() {
    return false;
  }
  get ignoreForCoords() {
    return false;
  }
}
class WidgetViewDesc extends ViewDesc {
  constructor(parent, widget, view, pos) {
    let self, dom = widget.type.toDOM;
    if (typeof dom == "function")
      dom = dom(view, () => {
        if (!self)
          return pos;
        if (self.parent)
          return self.parent.posBeforeChild(self);
      });
    if (!widget.type.spec.raw) {
      if (dom.nodeType != 1) {
        let wrap2 = document.createElement("span");
        wrap2.appendChild(dom);
        dom = wrap2;
      }
      dom.contentEditable = "false";
      dom.classList.add("ProseMirror-widget");
    }
    super(parent, [], dom, null);
    this.widget = widget;
    this.widget = widget;
    self = this;
  }
  matchesWidget(widget) {
    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: true };
  }
  stopEvent(event) {
    let stop = this.widget.spec.stopEvent;
    return stop ? stop(event) : false;
  }
  ignoreMutation(mutation) {
    return mutation.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom);
    super.destroy();
  }
  get domAtom() {
    return true;
  }
  get side() {
    return this.widget.type.side;
  }
}
class CompositionViewDesc extends ViewDesc {
  constructor(parent, dom, textDOM, text) {
    super(parent, [], dom, null);
    this.textDOM = textDOM;
    this.text = text;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(dom, offset2) {
    if (dom != this.textDOM)
      return this.posAtStart + (offset2 ? this.size : 0);
    return this.posAtStart + offset2;
  }
  domFromPos(pos) {
    return { node: this.textDOM, offset: pos };
  }
  ignoreMutation(mut) {
    return mut.type === "characterData" && mut.target.nodeValue == mut.oldValue;
  }
}
class MarkViewDesc extends ViewDesc {
  constructor(parent, mark, dom, contentDOM) {
    super(parent, [], dom, contentDOM);
    this.mark = mark;
  }
  static create(parent, mark, inline, view) {
    let custom = view.nodeViews[mark.type.name];
    let spec = custom && custom(mark, view, inline);
    if (!spec || !spec.dom)
      spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
    return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
  }
  parseRule() {
    if (this.dirty & NODE_DIRTY || this.mark.type.spec.reparseInView)
      return null;
    return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
  }
  matchesMark(mark) {
    return this.dirty != NODE_DIRTY && this.mark.eq(mark);
  }
  markDirty(from3, to) {
    super.markDirty(from3, to);
    if (this.dirty != NOT_DIRTY) {
      let parent = this.parent;
      while (!parent.node)
        parent = parent.parent;
      if (parent.dirty < this.dirty)
        parent.dirty = this.dirty;
      this.dirty = NOT_DIRTY;
    }
  }
  slice(from3, to, view) {
    let copy2 = MarkViewDesc.create(this.parent, this.mark, true, view);
    let nodes = this.children, size2 = this.size;
    if (to < size2)
      nodes = replaceNodes(nodes, to, size2, view);
    if (from3 > 0)
      nodes = replaceNodes(nodes, 0, from3, view);
    for (let i2 = 0; i2 < nodes.length; i2++)
      nodes[i2].parent = copy2;
    copy2.children = nodes;
    return copy2;
  }
}
class NodeViewDesc extends ViewDesc {
  constructor(parent, node2, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
    super(parent, [], dom, contentDOM);
    this.node = node2;
    this.outerDeco = outerDeco;
    this.innerDeco = innerDeco;
    this.nodeDOM = nodeDOM;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(parent, node2, outerDeco, innerDeco, view, pos) {
    let custom = view.nodeViews[node2.type.name], descObj;
    let spec = custom && custom(node2, view, () => {
      if (!descObj)
        return pos;
      if (descObj.parent)
        return descObj.parent.posBeforeChild(descObj);
    }, outerDeco, innerDeco);
    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
    if (node2.isText) {
      if (!dom)
        dom = document.createTextNode(node2.text);
      else if (dom.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else if (!dom) {
      ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node2.type.spec.toDOM(node2)));
    }
    if (!contentDOM && !node2.isText && dom.nodeName != "BR") {
      if (!dom.hasAttribute("contenteditable"))
        dom.contentEditable = "false";
      if (node2.type.spec.draggable)
        dom.draggable = true;
    }
    let nodeDOM = dom;
    dom = applyOuterDeco(dom, outerDeco, node2);
    if (spec)
      return descObj = new CustomNodeViewDesc(parent, node2, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
    else if (node2.isText)
      return new TextViewDesc(parent, node2, outerDeco, innerDeco, dom, nodeDOM, view);
    else
      return new NodeViewDesc(parent, node2, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let rule = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre")
      rule.preserveWhitespace = "full";
    if (!this.contentDOM) {
      rule.getContent = () => this.node.content;
    } else if (!this.contentLost) {
      rule.contentElement = this.contentDOM;
    } else {
      for (let i2 = this.children.length - 1; i2 >= 0; i2--) {
        let child = this.children[i2];
        if (this.dom.contains(child.dom.parentNode)) {
          rule.contentElement = child.dom.parentNode;
          break;
        }
      }
      if (!rule.contentElement)
        rule.getContent = () => Fragment.empty;
    }
    return rule;
  }
  matchesNode(node2, outerDeco, innerDeco) {
    return this.dirty == NOT_DIRTY && node2.eq(this.node) && sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(view, pos) {
    let inline = this.node.inlineContent, off2 = pos;
    let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
    let localComposition = composition && composition.pos > -1 ? composition : null;
    let compositionInChild = composition && composition.pos < 0;
    let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
    iterDeco(this.node, this.innerDeco, (widget, i2, insideNode) => {
      if (widget.spec.marks)
        updater.syncToMarks(widget.spec.marks, inline, view);
      else if (widget.type.side >= 0 && !insideNode)
        updater.syncToMarks(i2 == this.node.childCount ? Mark$1.none : this.node.child(i2).marks, inline, view);
      updater.placeWidget(widget, view, off2);
    }, (child, outerDeco, innerDeco, i2) => {
      updater.syncToMarks(child.marks, inline, view);
      let compIndex;
      if (updater.findNodeMatch(child, outerDeco, innerDeco, i2))
        ;
      else if (compositionInChild && view.state.selection.from > off2 && view.state.selection.to < off2 + child.nodeSize && (compIndex = updater.findIndexWithChild(composition.node)) > -1 && updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view))
        ;
      else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i2, off2))
        ;
      else {
        updater.addNode(child, outerDeco, innerDeco, view, off2);
      }
      off2 += child.nodeSize;
    });
    updater.syncToMarks([], inline, view);
    if (this.node.isTextblock)
      updater.addTextblockHacks();
    updater.destroyRest();
    if (updater.changed || this.dirty == CONTENT_DIRTY) {
      if (localComposition)
        this.protectLocalComposition(view, localComposition);
      renderDescs(this.contentDOM, this.children, view);
      if (ios)
        iosHacks(this.dom);
    }
  }
  localCompositionInfo(view, pos) {
    let { from: from3, to } = view.state.selection;
    if (!(view.state.selection instanceof TextSelection) || from3 < pos || to > pos + this.node.content.size)
      return null;
    let sel = view.domSelectionRange();
    let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
    if (!textNode || !this.dom.contains(textNode.parentNode))
      return null;
    if (this.node.inlineContent) {
      let text = textNode.nodeValue;
      let textPos = findTextInFragment(this.node.content, text, from3 - pos, to - pos);
      return textPos < 0 ? null : { node: textNode, pos: textPos, text };
    } else {
      return { node: textNode, pos: -1, text: "" };
    }
  }
  protectLocalComposition(view, { node: node2, pos, text }) {
    if (this.getDesc(node2))
      return;
    let topNode = node2;
    for (; ; topNode = topNode.parentNode) {
      if (topNode.parentNode == this.contentDOM)
        break;
      while (topNode.previousSibling)
        topNode.parentNode.removeChild(topNode.previousSibling);
      while (topNode.nextSibling)
        topNode.parentNode.removeChild(topNode.nextSibling);
      if (topNode.pmViewDesc)
        topNode.pmViewDesc = void 0;
    }
    let desc = new CompositionViewDesc(this, topNode, node2, text);
    view.input.compositionNodes.push(desc);
    this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(node2, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY || !node2.sameMarkup(this.node))
      return false;
    this.updateInner(node2, outerDeco, innerDeco, view);
    return true;
  }
  updateInner(node2, outerDeco, innerDeco, view) {
    this.updateOuterDeco(outerDeco);
    this.node = node2;
    this.innerDeco = innerDeco;
    if (this.contentDOM)
      this.updateChildren(view, this.posAtStart);
    this.dirty = NOT_DIRTY;
  }
  updateOuterDeco(outerDeco) {
    if (sameOuterDeco(outerDeco, this.outerDeco))
      return;
    let needsWrap = this.nodeDOM.nodeType != 1;
    let oldDOM = this.dom;
    this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
    if (this.dom != oldDOM) {
      oldDOM.pmViewDesc = void 0;
      this.dom.pmViewDesc = this;
    }
    this.outerDeco = outerDeco;
  }
  // Mark this node as being the selected node.
  selectNode() {
    if (this.nodeDOM.nodeType == 1)
      this.nodeDOM.classList.add("ProseMirror-selectednode");
    if (this.contentDOM || !this.node.type.spec.draggable)
      this.dom.draggable = true;
  }
  // Remove selected node marking from this node.
  deselectNode() {
    if (this.nodeDOM.nodeType == 1)
      this.nodeDOM.classList.remove("ProseMirror-selectednode");
    if (this.contentDOM || !this.node.type.spec.draggable)
      this.dom.removeAttribute("draggable");
  }
  get domAtom() {
    return this.node.isAtom;
  }
}
function docViewDesc(doc2, outerDeco, innerDeco, dom, view) {
  applyOuterDeco(dom, outerDeco, doc2);
  let docView = new NodeViewDesc(void 0, doc2, outerDeco, innerDeco, dom, dom, dom, view, 0);
  if (docView.contentDOM)
    docView.updateChildren(view, 0);
  return docView;
}
class TextViewDesc extends NodeViewDesc {
  constructor(parent, node2, outerDeco, innerDeco, dom, nodeDOM, view) {
    super(parent, node2, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
  }
  parseRule() {
    let skip = this.nodeDOM.parentNode;
    while (skip && skip != this.dom && !skip.pmIsDeco)
      skip = skip.parentNode;
    return { skip: skip || true };
  }
  update(node2, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY || this.dirty != NOT_DIRTY && !this.inParent() || !node2.sameMarkup(this.node))
      return false;
    this.updateOuterDeco(outerDeco);
    if ((this.dirty != NOT_DIRTY || node2.text != this.node.text) && node2.text != this.nodeDOM.nodeValue) {
      this.nodeDOM.nodeValue = node2.text;
      if (view.trackWrites == this.nodeDOM)
        view.trackWrites = null;
    }
    this.node = node2;
    this.dirty = NOT_DIRTY;
    return true;
  }
  inParent() {
    let parentDOM = this.parent.contentDOM;
    for (let n2 = this.nodeDOM; n2; n2 = n2.parentNode)
      if (n2 == parentDOM)
        return true;
    return false;
  }
  domFromPos(pos) {
    return { node: this.nodeDOM, offset: pos };
  }
  localPosFromDOM(dom, offset2, bias) {
    if (dom == this.nodeDOM)
      return this.posAtStart + Math.min(offset2, this.node.text.length);
    return super.localPosFromDOM(dom, offset2, bias);
  }
  ignoreMutation(mutation) {
    return mutation.type != "characterData" && mutation.type != "selection";
  }
  slice(from3, to, view) {
    let node2 = this.node.cut(from3, to), dom = document.createTextNode(node2.text);
    return new TextViewDesc(this.parent, node2, this.outerDeco, this.innerDeco, dom, dom, view);
  }
  markDirty(from3, to) {
    super.markDirty(from3, to);
    if (this.dom != this.nodeDOM && (from3 == 0 || to == this.nodeDOM.nodeValue.length))
      this.dirty = NODE_DIRTY;
  }
  get domAtom() {
    return false;
  }
}
class TrailingHackViewDesc extends ViewDesc {
  parseRule() {
    return { ignore: true };
  }
  matchesHack(nodeName) {
    return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName;
  }
  get domAtom() {
    return true;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
}
class CustomNodeViewDesc extends NodeViewDesc {
  constructor(parent, node2, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
    super(parent, node2, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
    this.spec = spec;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(node2, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY)
      return false;
    if (this.spec.update) {
      let result = this.spec.update(node2, outerDeco, innerDeco);
      if (result)
        this.updateInner(node2, outerDeco, innerDeco, view);
      return result;
    } else if (!this.contentDOM && !node2.isLeaf) {
      return false;
    } else {
      return super.update(node2, outerDeco, innerDeco, view);
    }
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(anchor, head, root, force) {
    this.spec.setSelection ? this.spec.setSelection(anchor, head, root) : super.setSelection(anchor, head, root, force);
  }
  destroy() {
    if (this.spec.destroy)
      this.spec.destroy();
    super.destroy();
  }
  stopEvent(event) {
    return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
  }
  ignoreMutation(mutation) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
  }
}
function renderDescs(parentDOM, descs, view) {
  let dom = parentDOM.firstChild, written = false;
  for (let i2 = 0; i2 < descs.length; i2++) {
    let desc = descs[i2], childDOM = desc.dom;
    if (childDOM.parentNode == parentDOM) {
      while (childDOM != dom) {
        dom = rm(dom);
        written = true;
      }
      dom = dom.nextSibling;
    } else {
      written = true;
      parentDOM.insertBefore(childDOM, dom);
    }
    if (desc instanceof MarkViewDesc) {
      let pos = dom ? dom.previousSibling : parentDOM.lastChild;
      renderDescs(desc.contentDOM, desc.children, view);
      dom = pos ? pos.nextSibling : parentDOM.firstChild;
    }
  }
  while (dom) {
    dom = rm(dom);
    written = true;
  }
  if (written && view.trackWrites == parentDOM)
    view.trackWrites = null;
}
const OuterDecoLevel = function(nodeName) {
  if (nodeName)
    this.nodeName = nodeName;
};
OuterDecoLevel.prototype = /* @__PURE__ */ Object.create(null);
const noDeco = [new OuterDecoLevel()];
function computeOuterDeco(outerDeco, node2, needsWrap) {
  if (outerDeco.length == 0)
    return noDeco;
  let top2 = needsWrap ? noDeco[0] : new OuterDecoLevel(), result = [top2];
  for (let i2 = 0; i2 < outerDeco.length; i2++) {
    let attrs = outerDeco[i2].type.attrs;
    if (!attrs)
      continue;
    if (attrs.nodeName)
      result.push(top2 = new OuterDecoLevel(attrs.nodeName));
    for (let name in attrs) {
      let val = attrs[name];
      if (val == null)
        continue;
      if (needsWrap && result.length == 1)
        result.push(top2 = new OuterDecoLevel(node2.isInline ? "span" : "div"));
      if (name == "class")
        top2.class = (top2.class ? top2.class + " " : "") + val;
      else if (name == "style")
        top2.style = (top2.style ? top2.style + ";" : "") + val;
      else if (name != "nodeName")
        top2[name] = val;
    }
  }
  return result;
}
function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
  if (prevComputed == noDeco && curComputed == noDeco)
    return nodeDOM;
  let curDOM = nodeDOM;
  for (let i2 = 0; i2 < curComputed.length; i2++) {
    let deco = curComputed[i2], prev2 = prevComputed[i2];
    if (i2) {
      let parent;
      if (prev2 && prev2.nodeName == deco.nodeName && curDOM != outerDOM && (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
        curDOM = parent;
      } else {
        parent = document.createElement(deco.nodeName);
        parent.pmIsDeco = true;
        parent.appendChild(curDOM);
        prev2 = noDeco[0];
        curDOM = parent;
      }
    }
    patchAttributes(curDOM, prev2 || noDeco[0], deco);
  }
  return curDOM;
}
function patchAttributes(dom, prev2, cur) {
  for (let name in prev2)
    if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
      dom.removeAttribute(name);
  for (let name in cur)
    if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev2[name])
      dom.setAttribute(name, cur[name]);
  if (prev2.class != cur.class) {
    let prevList = prev2.class ? prev2.class.split(" ").filter(Boolean) : [];
    let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
    for (let i2 = 0; i2 < prevList.length; i2++)
      if (curList.indexOf(prevList[i2]) == -1)
        dom.classList.remove(prevList[i2]);
    for (let i2 = 0; i2 < curList.length; i2++)
      if (prevList.indexOf(curList[i2]) == -1)
        dom.classList.add(curList[i2]);
    if (dom.classList.length == 0)
      dom.removeAttribute("class");
  }
  if (prev2.style != cur.style) {
    if (prev2.style) {
      let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m4;
      while (m4 = prop.exec(prev2.style))
        dom.style.removeProperty(m4[1]);
    }
    if (cur.style)
      dom.style.cssText += cur.style;
  }
}
function applyOuterDeco(dom, deco, node2) {
  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node2, dom.nodeType != 1));
}
function sameOuterDeco(a4, b3) {
  if (a4.length != b3.length)
    return false;
  for (let i2 = 0; i2 < a4.length; i2++)
    if (!a4[i2].type.eq(b3[i2].type))
      return false;
  return true;
}
function rm(dom) {
  let next2 = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next2;
}
class ViewTreeUpdater {
  constructor(top2, lock, view) {
    this.lock = lock;
    this.view = view;
    this.index = 0;
    this.stack = [];
    this.changed = false;
    this.top = top2;
    this.preMatch = preMatch(top2.node.content, top2);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(start2, end2) {
    if (start2 == end2)
      return;
    for (let i2 = start2; i2 < end2; i2++)
      this.top.children[i2].destroy();
    this.top.children.splice(start2, end2 - start2);
    this.changed = true;
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(marks, inline, view) {
    let keep = 0, depth = this.stack.length >> 1;
    let maxKeep = Math.min(depth, marks.length);
    while (keep < maxKeep && (keep == depth - 1 ? this.top : this.stack[keep + 1 << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
      keep++;
    while (keep < depth) {
      this.destroyRest();
      this.top.dirty = NOT_DIRTY;
      this.index = this.stack.pop();
      this.top = this.stack.pop();
      depth--;
    }
    while (depth < marks.length) {
      this.stack.push(this.top, this.index + 1);
      let found2 = -1;
      for (let i2 = this.index; i2 < Math.min(this.index + 3, this.top.children.length); i2++) {
        let next2 = this.top.children[i2];
        if (next2.matchesMark(marks[depth]) && !this.isLocked(next2.dom)) {
          found2 = i2;
          break;
        }
      }
      if (found2 > -1) {
        if (found2 > this.index) {
          this.changed = true;
          this.destroyBetween(this.index, found2);
        }
        this.top = this.top.children[this.index];
      } else {
        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
        this.top.children.splice(this.index, 0, markDesc);
        this.top = markDesc;
        this.changed = true;
      }
      this.index = 0;
      depth++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(node2, outerDeco, innerDeco, index2) {
    let found2 = -1, targetDesc;
    if (index2 >= this.preMatch.index && (targetDesc = this.preMatch.matches[index2 - this.preMatch.index]).parent == this.top && targetDesc.matchesNode(node2, outerDeco, innerDeco)) {
      found2 = this.top.children.indexOf(targetDesc, this.index);
    } else {
      for (let i2 = this.index, e3 = Math.min(this.top.children.length, i2 + 5); i2 < e3; i2++) {
        let child = this.top.children[i2];
        if (child.matchesNode(node2, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
          found2 = i2;
          break;
        }
      }
    }
    if (found2 < 0)
      return false;
    this.destroyBetween(this.index, found2);
    this.index++;
    return true;
  }
  updateNodeAt(node2, outerDeco, innerDeco, index2, view) {
    let child = this.top.children[index2];
    if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
      child.dirty = CONTENT_DIRTY;
    if (!child.update(node2, outerDeco, innerDeco, view))
      return false;
    this.destroyBetween(this.index, index2);
    this.index++;
    return true;
  }
  findIndexWithChild(domNode) {
    for (; ; ) {
      let parent = domNode.parentNode;
      if (!parent)
        return -1;
      if (parent == this.top.contentDOM) {
        let desc = domNode.pmViewDesc;
        if (desc)
          for (let i2 = this.index; i2 < this.top.children.length; i2++) {
            if (this.top.children[i2] == desc)
              return i2;
          }
        return -1;
      }
      domNode = parent;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(node2, outerDeco, innerDeco, view, index2, pos) {
    for (let i2 = this.index; i2 < this.top.children.length; i2++) {
      let next2 = this.top.children[i2];
      if (next2 instanceof NodeViewDesc) {
        let preMatch2 = this.preMatch.matched.get(next2);
        if (preMatch2 != null && preMatch2 != index2)
          return false;
        let nextDOM = next2.dom, updated;
        let locked = this.isLocked(nextDOM) && !(node2.isText && next2.node && next2.node.isText && next2.nodeDOM.nodeValue == node2.text && next2.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next2.outerDeco));
        if (!locked && next2.update(node2, outerDeco, innerDeco, view)) {
          this.destroyBetween(this.index, i2);
          if (next2.dom != nextDOM)
            this.changed = true;
          this.index++;
          return true;
        } else if (!locked && (updated = this.recreateWrapper(next2, node2, outerDeco, innerDeco, view, pos))) {
          this.top.children[this.index] = updated;
          if (updated.contentDOM) {
            updated.dirty = CONTENT_DIRTY;
            updated.updateChildren(view, pos + 1);
            updated.dirty = NOT_DIRTY;
          }
          this.changed = true;
          this.index++;
          return true;
        }
        break;
      }
    }
    return false;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(next2, node2, outerDeco, innerDeco, view, pos) {
    if (next2.dirty || node2.isAtom || !next2.children.length || !next2.node.content.eq(node2.content))
      return null;
    let wrapper = NodeViewDesc.create(this.top, node2, outerDeco, innerDeco, view, pos);
    if (wrapper.contentDOM) {
      wrapper.children = next2.children;
      next2.children = [];
      for (let ch of wrapper.children)
        ch.parent = wrapper;
    }
    next2.destroy();
    return wrapper;
  }
  // Insert the node as a newly created node desc.
  addNode(node2, outerDeco, innerDeco, view, pos) {
    let desc = NodeViewDesc.create(this.top, node2, outerDeco, innerDeco, view, pos);
    if (desc.contentDOM)
      desc.updateChildren(view, pos + 1);
    this.top.children.splice(this.index++, 0, desc);
    this.changed = true;
  }
  placeWidget(widget, view, pos) {
    let next2 = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (next2 && next2.matchesWidget(widget) && (widget == next2.widget || !next2.widget.type.toDOM.parentNode)) {
      this.index++;
    } else {
      let desc = new WidgetViewDesc(this.top, widget, view, pos);
      this.top.children.splice(this.index++, 0, desc);
      this.changed = true;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let lastChild = this.top.children[this.index - 1], parent = this.top;
    while (lastChild instanceof MarkViewDesc) {
      parent = lastChild;
      lastChild = parent.children[parent.children.length - 1];
    }
    if (!lastChild || // Empty textblock
    !(lastChild instanceof TextViewDesc) || /\n$/.test(lastChild.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text)) {
      if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
        this.addHackNode("IMG", parent);
      this.addHackNode("BR", this.top);
    }
  }
  addHackNode(nodeName, parent) {
    if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
      this.index++;
    } else {
      let dom = document.createElement(nodeName);
      if (nodeName == "IMG") {
        dom.className = "ProseMirror-separator";
        dom.alt = "";
      }
      if (nodeName == "BR")
        dom.className = "ProseMirror-trailingBreak";
      let hack = new TrailingHackViewDesc(this.top, [], dom, null);
      if (parent != this.top)
        parent.children.push(hack);
      else
        parent.children.splice(this.index++, 0, hack);
      this.changed = true;
    }
  }
  isLocked(node2) {
    return this.lock && (node2 == this.lock || node2.nodeType == 1 && node2.contains(this.lock.parentNode));
  }
}
function preMatch(frag, parentDesc) {
  let curDesc = parentDesc, descI = curDesc.children.length;
  let fI = frag.childCount, matched = /* @__PURE__ */ new Map(), matches2 = [];
  outer:
    while (fI > 0) {
      let desc;
      for (; ; ) {
        if (descI) {
          let next2 = curDesc.children[descI - 1];
          if (next2 instanceof MarkViewDesc) {
            curDesc = next2;
            descI = next2.children.length;
          } else {
            desc = next2;
            descI--;
            break;
          }
        } else if (curDesc == parentDesc) {
          break outer;
        } else {
          descI = curDesc.parent.children.indexOf(curDesc);
          curDesc = curDesc.parent;
        }
      }
      let node2 = desc.node;
      if (!node2)
        continue;
      if (node2 != frag.child(fI - 1))
        break;
      --fI;
      matched.set(desc, fI);
      matches2.push(desc);
    }
  return { index: fI, matched, matches: matches2.reverse() };
}
function compareSide(a4, b3) {
  return a4.type.side - b3.type.side;
}
function iterDeco(parent, deco, onWidget, onNode) {
  let locals = deco.locals(parent), offset2 = 0;
  if (locals.length == 0) {
    for (let i2 = 0; i2 < parent.childCount; i2++) {
      let child = parent.child(i2);
      onNode(child, locals, deco.forChild(offset2, child), i2);
      offset2 += child.nodeSize;
    }
    return;
  }
  let decoIndex = 0, active = [], restNode = null;
  for (let parentIndex = 0; ; ) {
    let widget, widgets;
    while (decoIndex < locals.length && locals[decoIndex].to == offset2) {
      let next2 = locals[decoIndex++];
      if (next2.widget) {
        if (!widget)
          widget = next2;
        else
          (widgets || (widgets = [widget])).push(next2);
      }
    }
    if (widget) {
      if (widgets) {
        widgets.sort(compareSide);
        for (let i2 = 0; i2 < widgets.length; i2++)
          onWidget(widgets[i2], parentIndex, !!restNode);
      } else {
        onWidget(widget, parentIndex, !!restNode);
      }
    }
    let child, index2;
    if (restNode) {
      index2 = -1;
      child = restNode;
      restNode = null;
    } else if (parentIndex < parent.childCount) {
      index2 = parentIndex;
      child = parent.child(parentIndex++);
    } else {
      break;
    }
    for (let i2 = 0; i2 < active.length; i2++)
      if (active[i2].to <= offset2)
        active.splice(i2--, 1);
    while (decoIndex < locals.length && locals[decoIndex].from <= offset2 && locals[decoIndex].to > offset2)
      active.push(locals[decoIndex++]);
    let end2 = offset2 + child.nodeSize;
    if (child.isText) {
      let cutAt = end2;
      if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
        cutAt = locals[decoIndex].from;
      for (let i2 = 0; i2 < active.length; i2++)
        if (active[i2].to < cutAt)
          cutAt = active[i2].to;
      if (cutAt < end2) {
        restNode = child.cut(cutAt - offset2);
        child = child.cut(0, cutAt - offset2);
        end2 = cutAt;
        index2 = -1;
      }
    } else {
      while (decoIndex < locals.length && locals[decoIndex].to < end2)
        decoIndex++;
    }
    let outerDeco = child.isInline && !child.isLeaf ? active.filter((d4) => !d4.inline) : active.slice();
    onNode(child, outerDeco, deco.forChild(offset2, child), index2);
    offset2 = end2;
  }
}
function iosHacks(dom) {
  if (dom.nodeName == "UL" || dom.nodeName == "OL") {
    let oldCSS = dom.style.cssText;
    dom.style.cssText = oldCSS + "; list-style: square !important";
    window.getComputedStyle(dom).listStyle;
    dom.style.cssText = oldCSS;
  }
}
function nearbyTextNode(node2, offset2) {
  for (; ; ) {
    if (node2.nodeType == 3)
      return node2;
    if (node2.nodeType == 1 && offset2 > 0) {
      if (node2.childNodes.length > offset2 && node2.childNodes[offset2].nodeType == 3)
        return node2.childNodes[offset2];
      node2 = node2.childNodes[offset2 - 1];
      offset2 = nodeSize(node2);
    } else if (node2.nodeType == 1 && offset2 < node2.childNodes.length) {
      node2 = node2.childNodes[offset2];
      offset2 = 0;
    } else {
      return null;
    }
  }
}
function findTextInFragment(frag, text, from3, to) {
  for (let i2 = 0, pos = 0; i2 < frag.childCount && pos <= to; ) {
    let child = frag.child(i2++), childStart = pos;
    pos += child.nodeSize;
    if (!child.isText)
      continue;
    let str = child.text;
    while (i2 < frag.childCount) {
      let next2 = frag.child(i2++);
      pos += next2.nodeSize;
      if (!next2.isText)
        break;
      str += next2.text;
    }
    if (pos >= from3) {
      if (pos >= to && str.slice(to - text.length - childStart, to - childStart) == text)
        return to - text.length;
      let found2 = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
      if (found2 >= 0 && found2 + text.length + childStart >= from3)
        return childStart + found2;
      if (from3 == to && str.length >= to + text.length - childStart && str.slice(to - childStart, to - childStart + text.length) == text)
        return to;
    }
  }
  return -1;
}
function replaceNodes(nodes, from3, to, view, replacement) {
  let result = [];
  for (let i2 = 0, off2 = 0; i2 < nodes.length; i2++) {
    let child = nodes[i2], start2 = off2, end2 = off2 += child.size;
    if (start2 >= to || end2 <= from3) {
      result.push(child);
    } else {
      if (start2 < from3)
        result.push(child.slice(0, from3 - start2, view));
      if (replacement) {
        result.push(replacement);
        replacement = void 0;
      }
      if (end2 > to)
        result.push(child.slice(to - start2, child.size, view));
    }
  }
  return result;
}
function selectionFromDOM(view, origin = null) {
  let domSel = view.domSelectionRange(), doc2 = view.state.doc;
  if (!domSel.focusNode)
    return null;
  let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
  let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
  if (head < 0)
    return null;
  let $head = doc2.resolve(head), $anchor, selection;
  if (selectionCollapsed(domSel)) {
    $anchor = $head;
    while (nearestDesc && !nearestDesc.node)
      nearestDesc = nearestDesc.parent;
    let nearestDescNode = nearestDesc.node;
    if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
      let pos = nearestDesc.posBefore;
      selection = new NodeSelection(head == pos ? $head : doc2.resolve(pos));
    }
  } else {
    let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
    if (anchor < 0)
      return null;
    $anchor = doc2.resolve(anchor);
  }
  if (!selection) {
    let bias = origin == "pointer" || view.state.selection.head < $head.pos && !inWidget ? 1 : -1;
    selection = selectionBetween(view, $anchor, $head, bias);
  }
  return selection;
}
function editorOwnsSelection(view) {
  return view.editable ? view.hasFocus() : hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
}
function selectionToDOM(view, force = false) {
  let sel = view.state.selection;
  syncNodeSelection(view, sel);
  if (!editorOwnsSelection(view))
    return;
  if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
    let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
    if (domSel.anchorNode && curSel.anchorNode && isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
      view.input.mouseDown.delayedSelectionSync = true;
      view.domObserver.setCurSelection();
      return;
    }
  }
  view.domObserver.disconnectSelection();
  if (view.cursorWrapper) {
    selectCursorWrapper(view);
  } else {
    let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
    if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
      if (!sel.$from.parent.inlineContent)
        resetEditableFrom = temporarilyEditableNear(view, sel.from);
      if (!sel.empty && !sel.$from.parent.inlineContent)
        resetEditableTo = temporarilyEditableNear(view, sel.to);
    }
    view.docView.setSelection(anchor, head, view.root, force);
    if (brokenSelectBetweenUneditable) {
      if (resetEditableFrom)
        resetEditable(resetEditableFrom);
      if (resetEditableTo)
        resetEditable(resetEditableTo);
    }
    if (sel.visible) {
      view.dom.classList.remove("ProseMirror-hideselection");
    } else {
      view.dom.classList.add("ProseMirror-hideselection");
      if ("onselectionchange" in document)
        removeClassOnSelectionChange(view);
    }
  }
  view.domObserver.setCurSelection();
  view.domObserver.connectSelection();
}
const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
function temporarilyEditableNear(view, pos) {
  let { node: node2, offset: offset2 } = view.docView.domFromPos(pos, 0);
  let after = offset2 < node2.childNodes.length ? node2.childNodes[offset2] : null;
  let before = offset2 ? node2.childNodes[offset2 - 1] : null;
  if (safari && after && after.contentEditable == "false")
    return setEditable(after);
  if ((!after || after.contentEditable == "false") && (!before || before.contentEditable == "false")) {
    if (after)
      return setEditable(after);
    else if (before)
      return setEditable(before);
  }
}
function setEditable(element) {
  element.contentEditable = "true";
  if (safari && element.draggable) {
    element.draggable = false;
    element.wasDraggable = true;
  }
  return element;
}
function resetEditable(element) {
  element.contentEditable = "false";
  if (element.wasDraggable) {
    element.draggable = true;
    element.wasDraggable = null;
  }
}
function removeClassOnSelectionChange(view) {
  let doc2 = view.dom.ownerDocument;
  doc2.removeEventListener("selectionchange", view.input.hideSelectionGuard);
  let domSel = view.domSelectionRange();
  let node2 = domSel.anchorNode, offset2 = domSel.anchorOffset;
  doc2.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
    if (domSel.anchorNode != node2 || domSel.anchorOffset != offset2) {
      doc2.removeEventListener("selectionchange", view.input.hideSelectionGuard);
      setTimeout(() => {
        if (!editorOwnsSelection(view) || view.state.selection.visible)
          view.dom.classList.remove("ProseMirror-hideselection");
      }, 20);
    }
  });
}
function selectCursorWrapper(view) {
  let domSel = view.domSelection(), range = document.createRange();
  let node2 = view.cursorWrapper.dom, img = node2.nodeName == "IMG";
  if (img)
    range.setEnd(node2.parentNode, domIndex(node2) + 1);
  else
    range.setEnd(node2, 0);
  range.collapse(false);
  domSel.removeAllRanges();
  domSel.addRange(range);
  if (!img && !view.state.selection.visible && ie$1 && ie_version <= 11) {
    node2.disabled = true;
    node2.disabled = false;
  }
}
function syncNodeSelection(view, sel) {
  if (sel instanceof NodeSelection) {
    let desc = view.docView.descAt(sel.from);
    if (desc != view.lastSelectedViewDesc) {
      clearNodeSelection(view);
      if (desc)
        desc.selectNode();
      view.lastSelectedViewDesc = desc;
    }
  } else {
    clearNodeSelection(view);
  }
}
function clearNodeSelection(view) {
  if (view.lastSelectedViewDesc) {
    if (view.lastSelectedViewDesc.parent)
      view.lastSelectedViewDesc.deselectNode();
    view.lastSelectedViewDesc = void 0;
  }
}
function selectionBetween(view, $anchor, $head, bias) {
  return view.someProp("createSelectionBetween", (f2) => f2(view, $anchor, $head)) || TextSelection.between($anchor, $head, bias);
}
function hasFocusAndSelection(view) {
  if (view.editable && !view.hasFocus())
    return false;
  return hasSelection(view);
}
function hasSelection(view) {
  let sel = view.domSelectionRange();
  if (!sel.anchorNode)
    return false;
  try {
    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) && (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
  } catch (_2) {
    return false;
  }
}
function anchorInRightPlace(view) {
  let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
  let domSel = view.domSelectionRange();
  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
}
function moveSelectionBlock(state, dir) {
  let { $anchor, $head } = state.selection;
  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
  return $start && Selection.findFrom($start, dir);
}
function apply(view, sel) {
  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
  return true;
}
function selectHorizontally(view, dir, mods) {
  let sel = view.state.selection;
  if (sel instanceof TextSelection) {
    if (mods.indexOf("s") > -1) {
      let { $head } = sel, node2 = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter;
      if (!node2 || node2.isText || !node2.isLeaf)
        return false;
      let $newHead = view.state.doc.resolve($head.pos + node2.nodeSize * (dir < 0 ? -1 : 1));
      return apply(view, new TextSelection(sel.$anchor, $newHead));
    } else if (!sel.empty) {
      return false;
    } else if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) {
      let next2 = moveSelectionBlock(view.state, dir);
      if (next2 && next2 instanceof NodeSelection)
        return apply(view, next2);
      return false;
    } else if (!(mac$2 && mods.indexOf("m") > -1)) {
      let $head = sel.$head, node2 = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
      if (!node2 || node2.isText)
        return false;
      let nodePos = dir < 0 ? $head.pos - node2.nodeSize : $head.pos;
      if (!(node2.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
        return false;
      if (NodeSelection.isSelectable(node2)) {
        return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node2.nodeSize) : $head));
      } else if (webkit) {
        return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node2.nodeSize)));
      } else {
        return false;
      }
    }
  } else if (sel instanceof NodeSelection && sel.node.isInline) {
    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
  } else {
    let next2 = moveSelectionBlock(view.state, dir);
    if (next2)
      return apply(view, next2);
    return false;
  }
}
function nodeLen(node2) {
  return node2.nodeType == 3 ? node2.nodeValue.length : node2.childNodes.length;
}
function isIgnorable(dom, dir) {
  let desc = dom.pmViewDesc;
  return desc && desc.size == 0 && (dir < 0 || dom.nextSibling || dom.nodeName != "BR");
}
function skipIgnoredNodes(view, dir) {
  return dir < 0 ? skipIgnoredNodesBefore(view) : skipIgnoredNodesAfter(view);
}
function skipIgnoredNodesBefore(view) {
  let sel = view.domSelectionRange();
  let node2 = sel.focusNode, offset2 = sel.focusOffset;
  if (!node2)
    return;
  let moveNode, moveOffset, force = false;
  if (gecko && node2.nodeType == 1 && offset2 < nodeLen(node2) && isIgnorable(node2.childNodes[offset2], -1))
    force = true;
  for (; ; ) {
    if (offset2 > 0) {
      if (node2.nodeType != 1) {
        break;
      } else {
        let before = node2.childNodes[offset2 - 1];
        if (isIgnorable(before, -1)) {
          moveNode = node2;
          moveOffset = --offset2;
        } else if (before.nodeType == 3) {
          node2 = before;
          offset2 = node2.nodeValue.length;
        } else
          break;
      }
    } else if (isBlockNode(node2)) {
      break;
    } else {
      let prev2 = node2.previousSibling;
      while (prev2 && isIgnorable(prev2, -1)) {
        moveNode = node2.parentNode;
        moveOffset = domIndex(prev2);
        prev2 = prev2.previousSibling;
      }
      if (!prev2) {
        node2 = node2.parentNode;
        if (node2 == view.dom)
          break;
        offset2 = 0;
      } else {
        node2 = prev2;
        offset2 = nodeLen(node2);
      }
    }
  }
  if (force)
    setSelFocus(view, node2, offset2);
  else if (moveNode)
    setSelFocus(view, moveNode, moveOffset);
}
function skipIgnoredNodesAfter(view) {
  let sel = view.domSelectionRange();
  let node2 = sel.focusNode, offset2 = sel.focusOffset;
  if (!node2)
    return;
  let len = nodeLen(node2);
  let moveNode, moveOffset;
  for (; ; ) {
    if (offset2 < len) {
      if (node2.nodeType != 1)
        break;
      let after = node2.childNodes[offset2];
      if (isIgnorable(after, 1)) {
        moveNode = node2;
        moveOffset = ++offset2;
      } else
        break;
    } else if (isBlockNode(node2)) {
      break;
    } else {
      let next2 = node2.nextSibling;
      while (next2 && isIgnorable(next2, 1)) {
        moveNode = next2.parentNode;
        moveOffset = domIndex(next2) + 1;
        next2 = next2.nextSibling;
      }
      if (!next2) {
        node2 = node2.parentNode;
        if (node2 == view.dom)
          break;
        offset2 = len = 0;
      } else {
        node2 = next2;
        offset2 = 0;
        len = nodeLen(node2);
      }
    }
  }
  if (moveNode)
    setSelFocus(view, moveNode, moveOffset);
}
function isBlockNode(dom) {
  let desc = dom.pmViewDesc;
  return desc && desc.node && desc.node.isBlock;
}
function textNodeAfter(node2, offset2) {
  while (node2 && offset2 == node2.childNodes.length && !hasBlockDesc(node2)) {
    offset2 = domIndex(node2) + 1;
    node2 = node2.parentNode;
  }
  while (node2 && offset2 < node2.childNodes.length) {
    let next2 = node2.childNodes[offset2];
    if (next2.nodeType == 3)
      return next2;
    if (next2.nodeType == 1 && next2.contentEditable == "false")
      break;
    node2 = next2;
    offset2 = 0;
  }
}
function textNodeBefore(node2, offset2) {
  while (node2 && !offset2 && !hasBlockDesc(node2)) {
    offset2 = domIndex(node2);
    node2 = node2.parentNode;
  }
  while (node2 && offset2) {
    let next2 = node2.childNodes[offset2 - 1];
    if (next2.nodeType == 3)
      return next2;
    if (next2.nodeType == 1 && next2.contentEditable == "false")
      break;
    node2 = next2;
    offset2 = node2.childNodes.length;
  }
}
function setSelFocus(view, node2, offset2) {
  if (node2.nodeType != 3) {
    let before, after;
    if (after = textNodeAfter(node2, offset2)) {
      node2 = after;
      offset2 = 0;
    } else if (before = textNodeBefore(node2, offset2)) {
      node2 = before;
      offset2 = before.nodeValue.length;
    }
  }
  let sel = view.domSelection();
  if (selectionCollapsed(sel)) {
    let range = document.createRange();
    range.setEnd(node2, offset2);
    range.setStart(node2, offset2);
    sel.removeAllRanges();
    sel.addRange(range);
  } else if (sel.extend) {
    sel.extend(node2, offset2);
  }
  view.domObserver.setCurSelection();
  let { state } = view;
  setTimeout(() => {
    if (view.state == state)
      selectionToDOM(view);
  }, 50);
}
function findDirection(view, pos) {
  let $pos = view.state.doc.resolve(pos);
  if (!(chrome || windows) && $pos.parent.inlineContent) {
    let coords = view.coordsAtPos(pos);
    if (pos > $pos.start()) {
      let before = view.coordsAtPos(pos - 1);
      let mid = (before.top + before.bottom) / 2;
      if (mid > coords.top && mid < coords.bottom && Math.abs(before.left - coords.left) > 1)
        return before.left < coords.left ? "ltr" : "rtl";
    }
    if (pos < $pos.end()) {
      let after = view.coordsAtPos(pos + 1);
      let mid = (after.top + after.bottom) / 2;
      if (mid > coords.top && mid < coords.bottom && Math.abs(after.left - coords.left) > 1)
        return after.left > coords.left ? "ltr" : "rtl";
    }
  }
  let computed = getComputedStyle(view.dom).direction;
  return computed == "rtl" ? "rtl" : "ltr";
}
function selectVertically(view, dir, mods) {
  let sel = view.state.selection;
  if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
    return false;
  if (mac$2 && mods.indexOf("m") > -1)
    return false;
  let { $from, $to } = sel;
  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
    let next2 = moveSelectionBlock(view.state, dir);
    if (next2 && next2 instanceof NodeSelection)
      return apply(view, next2);
  }
  if (!$from.parent.inlineContent) {
    let side = dir < 0 ? $from : $to;
    let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
    return beyond ? apply(view, beyond) : false;
  }
  return false;
}
function stopNativeHorizontalDelete(view, dir) {
  if (!(view.state.selection instanceof TextSelection))
    return true;
  let { $head, $anchor, empty: empty2 } = view.state.selection;
  if (!$head.sameParent($anchor))
    return true;
  if (!empty2)
    return false;
  if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
    return true;
  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
  if (nextNode && !nextNode.isText) {
    let tr2 = view.state.tr;
    if (dir < 0)
      tr2.delete($head.pos - nextNode.nodeSize, $head.pos);
    else
      tr2.delete($head.pos, $head.pos + nextNode.nodeSize);
    view.dispatch(tr2);
    return true;
  }
  return false;
}
function switchEditable(view, node2, state) {
  view.domObserver.stop();
  node2.contentEditable = state;
  view.domObserver.start();
}
function safariDownArrowBug(view) {
  if (!safari || view.state.selection.$head.parentOffset > 0)
    return false;
  let { focusNode, focusOffset } = view.domSelectionRange();
  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 && focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
    let child = focusNode.firstChild;
    switchEditable(view, child, "true");
    setTimeout(() => switchEditable(view, child, "false"), 20);
  }
  return false;
}
function getMods(event) {
  let result = "";
  if (event.ctrlKey)
    result += "c";
  if (event.metaKey)
    result += "m";
  if (event.altKey)
    result += "a";
  if (event.shiftKey)
    result += "s";
  return result;
}
function captureKeyDown(view, event) {
  let code = event.keyCode, mods = getMods(event);
  if (code == 8 || mac$2 && code == 72 && mods == "c") {
    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodes(view, -1);
  } else if (code == 46 && !event.shiftKey || mac$2 && code == 68 && mods == "c") {
    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodes(view, 1);
  } else if (code == 13 || code == 27) {
    return true;
  } else if (code == 37 || mac$2 && code == 66 && mods == "c") {
    let dir = code == 37 ? findDirection(view, view.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
  } else if (code == 39 || mac$2 && code == 70 && mods == "c") {
    let dir = code == 39 ? findDirection(view, view.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
  } else if (code == 38 || mac$2 && code == 80 && mods == "c") {
    return selectVertically(view, -1, mods) || skipIgnoredNodes(view, -1);
  } else if (code == 40 || mac$2 && code == 78 && mods == "c") {
    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodes(view, 1);
  } else if (mods == (mac$2 ? "m" : "c") && (code == 66 || code == 73 || code == 89 || code == 90)) {
    return true;
  }
  return false;
}
function serializeForClipboard(view, slice3) {
  view.someProp("transformCopied", (f2) => {
    slice3 = f2(slice3, view);
  });
  let context = [], { content, openStart, openEnd } = slice3;
  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
    openStart--;
    openEnd--;
    let node2 = content.firstChild;
    context.push(node2.type.name, node2.attrs != node2.type.defaultAttrs ? node2.attrs : null);
    content = node2.content;
  }
  let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
  let doc2 = detachedDoc(), wrap2 = doc2.createElement("div");
  wrap2.appendChild(serializer.serializeFragment(content, { document: doc2 }));
  let firstChild = wrap2.firstChild, needsWrap, wrappers = 0;
  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
    for (let i2 = needsWrap.length - 1; i2 >= 0; i2--) {
      let wrapper = doc2.createElement(needsWrap[i2]);
      while (wrap2.firstChild)
        wrapper.appendChild(wrap2.firstChild);
      wrap2.appendChild(wrapper);
      wrappers++;
    }
    firstChild = wrap2.firstChild;
  }
  if (firstChild && firstChild.nodeType == 1)
    firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
  let text = view.someProp("clipboardTextSerializer", (f2) => f2(slice3, view)) || slice3.content.textBetween(0, slice3.content.size, "\n\n");
  return { dom: wrap2, text };
}
function parseFromClipboard(view, text, html, plainText, $context) {
  let inCode = $context.parent.type.spec.code;
  let dom, slice3;
  if (!html && !text)
    return null;
  let asText = text && (plainText || inCode || !html);
  if (asText) {
    view.someProp("transformPastedText", (f2) => {
      text = f2(text, inCode || plainText, view);
    });
    if (inCode)
      return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
    let parsed = view.someProp("clipboardTextParser", (f2) => f2(text, $context, plainText, view));
    if (parsed) {
      slice3 = parsed;
    } else {
      let marks = $context.marks();
      let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
      dom = document.createElement("div");
      text.split(/(?:\r\n?|\n)+/).forEach((block) => {
        let p2 = dom.appendChild(document.createElement("p"));
        if (block)
          p2.appendChild(serializer.serializeNode(schema.text(block, marks)));
      });
    }
  } else {
    view.someProp("transformPastedHTML", (f2) => {
      html = f2(html, view);
    });
    dom = readHTML(html);
    if (webkit)
      restoreReplacedSpaces(dom);
  }
  let contextNode = dom && dom.querySelector("[data-pm-slice]");
  let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
  if (sliceData && sliceData[3])
    for (let i2 = +sliceData[3]; i2 > 0; i2--) {
      let child = dom.firstChild;
      while (child && child.nodeType != 1)
        child = child.nextSibling;
      if (!child)
        break;
      dom = child;
    }
  if (!slice3) {
    let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser$1.fromSchema(view.state.schema);
    slice3 = parser.parseSlice(dom, {
      preserveWhitespace: !!(asText || sliceData),
      context: $context,
      ruleFromNode(dom2) {
        if (dom2.nodeName == "BR" && !dom2.nextSibling && dom2.parentNode && !inlineParents.test(dom2.parentNode.nodeName))
          return { ignore: true };
        return null;
      }
    });
  }
  if (sliceData) {
    slice3 = addContext(closeSlice(slice3, +sliceData[1], +sliceData[2]), sliceData[4]);
  } else {
    slice3 = Slice.maxOpen(normalizeSiblings(slice3.content, $context), true);
    if (slice3.openStart || slice3.openEnd) {
      let openStart = 0, openEnd = 0;
      for (let node2 = slice3.content.firstChild; openStart < slice3.openStart && !node2.type.spec.isolating; openStart++, node2 = node2.firstChild) {
      }
      for (let node2 = slice3.content.lastChild; openEnd < slice3.openEnd && !node2.type.spec.isolating; openEnd++, node2 = node2.lastChild) {
      }
      slice3 = closeSlice(slice3, openStart, openEnd);
    }
  }
  view.someProp("transformPasted", (f2) => {
    slice3 = f2(slice3, view);
  });
  return slice3;
}
const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function normalizeSiblings(fragment, $context) {
  if (fragment.childCount < 2)
    return fragment;
  for (let d4 = $context.depth; d4 >= 0; d4--) {
    let parent = $context.node(d4);
    let match2 = parent.contentMatchAt($context.index(d4));
    let lastWrap, result = [];
    fragment.forEach((node2) => {
      if (!result)
        return;
      let wrap2 = match2.findWrapping(node2.type), inLast;
      if (!wrap2)
        return result = null;
      if (inLast = result.length && lastWrap.length && addToSibling(wrap2, lastWrap, node2, result[result.length - 1], 0)) {
        result[result.length - 1] = inLast;
      } else {
        if (result.length)
          result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
        let wrapped = withWrappers(node2, wrap2);
        result.push(wrapped);
        match2 = match2.matchType(wrapped.type);
        lastWrap = wrap2;
      }
    });
    if (result)
      return Fragment.from(result);
  }
  return fragment;
}
function withWrappers(node2, wrap2, from3 = 0) {
  for (let i2 = wrap2.length - 1; i2 >= from3; i2--)
    node2 = wrap2[i2].create(null, Fragment.from(node2));
  return node2;
}
function addToSibling(wrap2, lastWrap, node2, sibling, depth) {
  if (depth < wrap2.length && depth < lastWrap.length && wrap2[depth] == lastWrap[depth]) {
    let inner = addToSibling(wrap2, lastWrap, node2, sibling.lastChild, depth + 1);
    if (inner)
      return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
    let match2 = sibling.contentMatchAt(sibling.childCount);
    if (match2.matchType(depth == wrap2.length - 1 ? node2.type : wrap2[depth + 1]))
      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node2, wrap2, depth + 1))));
  }
}
function closeRight(node2, depth) {
  if (depth == 0)
    return node2;
  let fragment = node2.content.replaceChild(node2.childCount - 1, closeRight(node2.lastChild, depth - 1));
  let fill = node2.contentMatchAt(node2.childCount).fillBefore(Fragment.empty, true);
  return node2.copy(fragment.append(fill));
}
function closeRange(fragment, side, from3, to, depth, openEnd) {
  let node2 = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node2.content;
  if (fragment.childCount > 1)
    openEnd = 0;
  if (depth < to - 1)
    inner = closeRange(inner, side, from3, to, depth + 1, openEnd);
  if (depth >= from3)
    inner = side < 0 ? node2.contentMatchAt(0).fillBefore(inner, openEnd <= depth).append(inner) : inner.append(node2.contentMatchAt(node2.childCount).fillBefore(Fragment.empty, true));
  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node2.copy(inner));
}
function closeSlice(slice3, openStart, openEnd) {
  if (openStart < slice3.openStart)
    slice3 = new Slice(closeRange(slice3.content, -1, openStart, slice3.openStart, 0, slice3.openEnd), openStart, slice3.openEnd);
  if (openEnd < slice3.openEnd)
    slice3 = new Slice(closeRange(slice3.content, 1, openEnd, slice3.openEnd, 0, 0), slice3.openStart, openEnd);
  return slice3;
}
const wrapMap = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
let _detachedDoc = null;
function detachedDoc() {
  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
}
function readHTML(html) {
  let metas = /^(\s*<meta [^>]*>)*/.exec(html);
  if (metas)
    html = html.slice(metas[0].length);
  let elt = detachedDoc().createElement("div");
  let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap2;
  if (wrap2 = firstTag && wrapMap[firstTag[1].toLowerCase()])
    html = wrap2.map((n2) => "<" + n2 + ">").join("") + html + wrap2.map((n2) => "</" + n2 + ">").reverse().join("");
  elt.innerHTML = html;
  if (wrap2)
    for (let i2 = 0; i2 < wrap2.length; i2++)
      elt = elt.querySelector(wrap2[i2]) || elt;
  return elt;
}
function restoreReplacedSpaces(dom) {
  let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let i2 = 0; i2 < nodes.length; i2++) {
    let node2 = nodes[i2];
    if (node2.childNodes.length == 1 && node2.textContent == " " && node2.parentNode)
      node2.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node2);
  }
}
function addContext(slice3, context) {
  if (!slice3.size)
    return slice3;
  let schema = slice3.content.firstChild.type.schema, array;
  try {
    array = JSON.parse(context);
  } catch (e3) {
    return slice3;
  }
  let { content, openStart, openEnd } = slice3;
  for (let i2 = array.length - 2; i2 >= 0; i2 -= 2) {
    let type = schema.nodes[array[i2]];
    if (!type || type.hasRequiredAttrs())
      break;
    content = Fragment.from(type.create(array[i2 + 1], content));
    openStart++;
    openEnd++;
  }
  return new Slice(content, openStart, openEnd);
}
const handlers = {};
const editHandlers = {};
const passiveHandlers = { touchstart: true, touchmove: true };
class InputState {
  constructor() {
    this.shiftKey = false;
    this.mouseDown = null;
    this.lastKeyCode = null;
    this.lastKeyCodeTime = 0;
    this.lastClick = { time: 0, x: 0, y: 0, type: "" };
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastIOSEnter = 0;
    this.lastIOSEnterFallbackTimeout = -1;
    this.lastFocus = 0;
    this.lastTouch = 0;
    this.lastAndroidDelete = 0;
    this.composing = false;
    this.composingTimeout = -1;
    this.compositionNodes = [];
    this.compositionEndedAt = -2e8;
    this.compositionID = 1;
    this.compositionPendingChanges = 0;
    this.domChangeCount = 0;
    this.eventHandlers = /* @__PURE__ */ Object.create(null);
    this.hideSelectionGuard = null;
  }
}
function initInput(view) {
  for (let event in handlers) {
    let handler = handlers[event];
    view.dom.addEventListener(event, view.input.eventHandlers[event] = (event2) => {
      if (eventBelongsToView(view, event2) && !runCustomHandler(view, event2) && (view.editable || !(event2.type in editHandlers)))
        handler(view, event2);
    }, passiveHandlers[event] ? { passive: true } : void 0);
  }
  if (safari)
    view.dom.addEventListener("input", () => null);
  ensureListeners(view);
}
function setSelectionOrigin(view, origin) {
  view.input.lastSelectionOrigin = origin;
  view.input.lastSelectionTime = Date.now();
}
function destroyInput(view) {
  view.domObserver.stop();
  for (let type in view.input.eventHandlers)
    view.dom.removeEventListener(type, view.input.eventHandlers[type]);
  clearTimeout(view.input.composingTimeout);
  clearTimeout(view.input.lastIOSEnterFallbackTimeout);
}
function ensureListeners(view) {
  view.someProp("handleDOMEvents", (currentHandlers) => {
    for (let type in currentHandlers)
      if (!view.input.eventHandlers[type])
        view.dom.addEventListener(type, view.input.eventHandlers[type] = (event) => runCustomHandler(view, event));
  });
}
function runCustomHandler(view, event) {
  return view.someProp("handleDOMEvents", (handlers2) => {
    let handler = handlers2[event.type];
    return handler ? handler(view, event) || event.defaultPrevented : false;
  });
}
function eventBelongsToView(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node2 = event.target; node2 != view.dom; node2 = node2.parentNode)
    if (!node2 || node2.nodeType == 11 || node2.pmViewDesc && node2.pmViewDesc.stopEvent(event))
      return false;
  return true;
}
function dispatchEvent(view, event) {
  if (!runCustomHandler(view, event) && handlers[event.type] && (view.editable || !(event.type in editHandlers)))
    handlers[event.type](view, event);
}
editHandlers.keydown = (view, _event) => {
  let event = _event;
  view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
  if (inOrNearComposition(view, event))
    return;
  view.input.lastKeyCode = event.keyCode;
  view.input.lastKeyCodeTime = Date.now();
  if (android && chrome && event.keyCode == 13)
    return;
  if (event.keyCode != 229)
    view.domObserver.forceFlush();
  if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
    let now = Date.now();
    view.input.lastIOSEnter = now;
    view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
      if (view.input.lastIOSEnter == now) {
        view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter")));
        view.input.lastIOSEnter = 0;
      }
    }, 200);
  } else if (view.someProp("handleKeyDown", (f2) => f2(view, event)) || captureKeyDown(view, event)) {
    event.preventDefault();
  } else {
    setSelectionOrigin(view, "key");
  }
};
editHandlers.keyup = (view, event) => {
  if (event.keyCode == 16)
    view.input.shiftKey = false;
};
editHandlers.keypress = (view, _event) => {
  let event = _event;
  if (inOrNearComposition(view, event) || !event.charCode || event.ctrlKey && !event.altKey || mac$2 && event.metaKey)
    return;
  if (view.someProp("handleKeyPress", (f2) => f2(view, event))) {
    event.preventDefault();
    return;
  }
  let sel = view.state.selection;
  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
    let text = String.fromCharCode(event.charCode);
    if (!/[\r\n]/.test(text) && !view.someProp("handleTextInput", (f2) => f2(view, sel.$from.pos, sel.$to.pos, text)))
      view.dispatch(view.state.tr.insertText(text).scrollIntoView());
    event.preventDefault();
  }
};
function eventCoords(event) {
  return { left: event.clientX, top: event.clientY };
}
function isNear(event, click) {
  let dx = click.x - event.clientX, dy = click.y - event.clientY;
  return dx * dx + dy * dy < 100;
}
function runHandlerOnContext(view, propName, pos, inside, event) {
  if (inside == -1)
    return false;
  let $pos = view.state.doc.resolve(inside);
  for (let i2 = $pos.depth + 1; i2 > 0; i2--) {
    if (view.someProp(propName, (f2) => i2 > $pos.depth ? f2(view, pos, $pos.nodeAfter, $pos.before(i2), event, true) : f2(view, pos, $pos.node(i2), $pos.before(i2), event, false)))
      return true;
  }
  return false;
}
function updateSelection(view, selection, origin) {
  if (!view.focused)
    view.focus();
  let tr2 = view.state.tr.setSelection(selection);
  if (origin == "pointer")
    tr2.setMeta("pointer", true);
  view.dispatch(tr2);
}
function selectClickedLeaf(view, inside) {
  if (inside == -1)
    return false;
  let $pos = view.state.doc.resolve(inside), node2 = $pos.nodeAfter;
  if (node2 && node2.isAtom && NodeSelection.isSelectable(node2)) {
    updateSelection(view, new NodeSelection($pos), "pointer");
    return true;
  }
  return false;
}
function selectClickedNode(view, inside) {
  if (inside == -1)
    return false;
  let sel = view.state.selection, selectedNode, selectAt;
  if (sel instanceof NodeSelection)
    selectedNode = sel.node;
  let $pos = view.state.doc.resolve(inside);
  for (let i2 = $pos.depth + 1; i2 > 0; i2--) {
    let node2 = i2 > $pos.depth ? $pos.nodeAfter : $pos.node(i2);
    if (NodeSelection.isSelectable(node2)) {
      if (selectedNode && sel.$from.depth > 0 && i2 >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
        selectAt = $pos.before(sel.$from.depth);
      else
        selectAt = $pos.before(i2);
      break;
    }
  }
  if (selectAt != null) {
    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
    return true;
  } else {
    return false;
  }
}
function handleSingleClick(view, pos, inside, event, selectNode) {
  return runHandlerOnContext(view, "handleClickOn", pos, inside, event) || view.someProp("handleClick", (f2) => f2(view, pos, event)) || (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
}
function handleDoubleClick(view, pos, inside, event) {
  return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) || view.someProp("handleDoubleClick", (f2) => f2(view, pos, event));
}
function handleTripleClick(view, pos, inside, event) {
  return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) || view.someProp("handleTripleClick", (f2) => f2(view, pos, event)) || defaultTripleClick(view, inside, event);
}
function defaultTripleClick(view, inside, event) {
  if (event.button != 0)
    return false;
  let doc2 = view.state.doc;
  if (inside == -1) {
    if (doc2.inlineContent) {
      updateSelection(view, TextSelection.create(doc2, 0, doc2.content.size), "pointer");
      return true;
    }
    return false;
  }
  let $pos = doc2.resolve(inside);
  for (let i2 = $pos.depth + 1; i2 > 0; i2--) {
    let node2 = i2 > $pos.depth ? $pos.nodeAfter : $pos.node(i2);
    let nodePos = $pos.before(i2);
    if (node2.inlineContent)
      updateSelection(view, TextSelection.create(doc2, nodePos + 1, nodePos + 1 + node2.content.size), "pointer");
    else if (NodeSelection.isSelectable(node2))
      updateSelection(view, NodeSelection.create(doc2, nodePos), "pointer");
    else
      continue;
    return true;
  }
}
function forceDOMFlush(view) {
  return endComposition(view);
}
const selectNodeModifier = mac$2 ? "metaKey" : "ctrlKey";
handlers.mousedown = (view, _event) => {
  let event = _event;
  view.input.shiftKey = event.shiftKey;
  let flushed = forceDOMFlush(view);
  let now = Date.now(), type = "singleClick";
  if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
    if (view.input.lastClick.type == "singleClick")
      type = "doubleClick";
    else if (view.input.lastClick.type == "doubleClick")
      type = "tripleClick";
  }
  view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
  let pos = view.posAtCoords(eventCoords(event));
  if (!pos)
    return;
  if (type == "singleClick") {
    if (view.input.mouseDown)
      view.input.mouseDown.done();
    view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
  } else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
    event.preventDefault();
  } else {
    setSelectionOrigin(view, "pointer");
  }
};
class MouseDown {
  constructor(view, pos, event, flushed) {
    this.view = view;
    this.pos = pos;
    this.event = event;
    this.flushed = flushed;
    this.delayedSelectionSync = false;
    this.mightDrag = null;
    this.startDoc = view.state.doc;
    this.selectNode = !!event[selectNodeModifier];
    this.allowDefault = event.shiftKey;
    let targetNode, targetPos;
    if (pos.inside > -1) {
      targetNode = view.state.doc.nodeAt(pos.inside);
      targetPos = pos.inside;
    } else {
      let $pos = view.state.doc.resolve(pos.pos);
      targetNode = $pos.parent;
      targetPos = $pos.depth ? $pos.before() : 0;
    }
    const target = flushed ? null : event.target;
    const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
    this.target = targetDesc ? targetDesc.dom : null;
    let { selection } = view.state;
    if (event.button == 0 && targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false || selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
      this.mightDrag = {
        node: targetNode,
        pos: targetPos,
        addAttr: !!(this.target && !this.target.draggable),
        setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
      };
    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
      this.view.domObserver.stop();
      if (this.mightDrag.addAttr)
        this.target.draggable = true;
      if (this.mightDrag.setUneditable)
        setTimeout(() => {
          if (this.view.input.mouseDown == this)
            this.target.setAttribute("contentEditable", "false");
        }, 20);
      this.view.domObserver.start();
    }
    view.root.addEventListener("mouseup", this.up = this.up.bind(this));
    view.root.addEventListener("mousemove", this.move = this.move.bind(this));
    setSelectionOrigin(view, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up);
    this.view.root.removeEventListener("mousemove", this.move);
    if (this.mightDrag && this.target) {
      this.view.domObserver.stop();
      if (this.mightDrag.addAttr)
        this.target.removeAttribute("draggable");
      if (this.mightDrag.setUneditable)
        this.target.removeAttribute("contentEditable");
      this.view.domObserver.start();
    }
    if (this.delayedSelectionSync)
      setTimeout(() => selectionToDOM(this.view));
    this.view.input.mouseDown = null;
  }
  up(event) {
    this.done();
    if (!this.view.dom.contains(event.target))
      return;
    let pos = this.pos;
    if (this.view.state.doc != this.startDoc)
      pos = this.view.posAtCoords(eventCoords(event));
    this.updateAllowDefault(event);
    if (this.allowDefault || !pos) {
      setSelectionOrigin(this.view, "pointer");
    } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
      event.preventDefault();
    } else if (event.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    safari && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    chrome && !this.view.state.selection.visible && Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2)) {
      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
      event.preventDefault();
    } else {
      setSelectionOrigin(this.view, "pointer");
    }
  }
  move(event) {
    this.updateAllowDefault(event);
    setSelectionOrigin(this.view, "pointer");
    if (event.buttons == 0)
      this.done();
  }
  updateAllowDefault(event) {
    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 || Math.abs(this.event.y - event.clientY) > 4))
      this.allowDefault = true;
  }
}
handlers.touchstart = (view) => {
  view.input.lastTouch = Date.now();
  forceDOMFlush(view);
  setSelectionOrigin(view, "pointer");
};
handlers.touchmove = (view) => {
  view.input.lastTouch = Date.now();
  setSelectionOrigin(view, "pointer");
};
handlers.contextmenu = (view) => forceDOMFlush(view);
function inOrNearComposition(view, event) {
  if (view.composing)
    return true;
  if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
    view.input.compositionEndedAt = -2e8;
    return true;
  }
  return false;
}
const timeoutComposition = android ? 5e3 : -1;
editHandlers.compositionstart = editHandlers.compositionupdate = (view) => {
  if (!view.composing) {
    view.domObserver.flush();
    let { state } = view, $pos = state.selection.$from;
    if (state.selection.empty && (state.storedMarks || !$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some((m4) => m4.type.spec.inclusive === false))) {
      view.markCursor = view.state.storedMarks || $pos.marks();
      endComposition(view, true);
      view.markCursor = null;
    } else {
      endComposition(view);
      if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
        let sel = view.domSelectionRange();
        for (let node2 = sel.focusNode, offset2 = sel.focusOffset; node2 && node2.nodeType == 1 && offset2 != 0; ) {
          let before = offset2 < 0 ? node2.lastChild : node2.childNodes[offset2 - 1];
          if (!before)
            break;
          if (before.nodeType == 3) {
            view.domSelection().collapse(before, before.nodeValue.length);
            break;
          } else {
            node2 = before;
            offset2 = -1;
          }
        }
      }
    }
    view.input.composing = true;
  }
  scheduleComposeEnd(view, timeoutComposition);
};
editHandlers.compositionend = (view, event) => {
  if (view.composing) {
    view.input.composing = false;
    view.input.compositionEndedAt = event.timeStamp;
    view.input.compositionPendingChanges = view.domObserver.pendingRecords().length ? view.input.compositionID : 0;
    if (view.input.compositionPendingChanges)
      Promise.resolve().then(() => view.domObserver.flush());
    view.input.compositionID++;
    scheduleComposeEnd(view, 20);
  }
};
function scheduleComposeEnd(view, delay) {
  clearTimeout(view.input.composingTimeout);
  if (delay > -1)
    view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
}
function clearComposition(view) {
  if (view.composing) {
    view.input.composing = false;
    view.input.compositionEndedAt = timestampFromCustomEvent();
  }
  while (view.input.compositionNodes.length > 0)
    view.input.compositionNodes.pop().markParentsDirty();
}
function timestampFromCustomEvent() {
  let event = document.createEvent("Event");
  event.initEvent("event", true, true);
  return event.timeStamp;
}
function endComposition(view, forceUpdate = false) {
  if (android && view.domObserver.flushingSoon >= 0)
    return;
  view.domObserver.forceFlush();
  clearComposition(view);
  if (forceUpdate || view.docView && view.docView.dirty) {
    let sel = selectionFromDOM(view);
    if (sel && !sel.eq(view.state.selection))
      view.dispatch(view.state.tr.setSelection(sel));
    else
      view.updateState(view.state);
    return true;
  }
  return false;
}
function captureCopy(view, dom) {
  if (!view.dom.parentNode)
    return;
  let wrap2 = view.dom.parentNode.appendChild(document.createElement("div"));
  wrap2.appendChild(dom);
  wrap2.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let sel = getSelection(), range = document.createRange();
  range.selectNodeContents(dom);
  view.dom.blur();
  sel.removeAllRanges();
  sel.addRange(range);
  setTimeout(() => {
    if (wrap2.parentNode)
      wrap2.parentNode.removeChild(wrap2);
    view.focus();
  }, 50);
}
const brokenClipboardAPI = ie$1 && ie_version < 15 || ios && webkit_version < 604;
handlers.copy = editHandlers.cut = (view, _event) => {
  let event = _event;
  let sel = view.state.selection, cut2 = event.type == "cut";
  if (sel.empty)
    return;
  let data = brokenClipboardAPI ? null : event.clipboardData;
  let slice3 = sel.content(), { dom, text } = serializeForClipboard(view, slice3);
  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/html", dom.innerHTML);
    data.setData("text/plain", text);
  } else {
    captureCopy(view, dom);
  }
  if (cut2)
    view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function sliceSingleNode(slice3) {
  return slice3.openStart == 0 && slice3.openEnd == 0 && slice3.content.childCount == 1 ? slice3.content.firstChild : null;
}
function capturePaste(view, event) {
  if (!view.dom.parentNode)
    return;
  let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
  let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
  if (!plainText)
    target.contentEditable = "true";
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
  setTimeout(() => {
    view.focus();
    if (target.parentNode)
      target.parentNode.removeChild(target);
    if (plainText)
      doPaste(view, target.value, null, plain, event);
    else
      doPaste(view, target.textContent, target.innerHTML, plain, event);
  }, 50);
}
function doPaste(view, text, html, preferPlain, event) {
  let slice3 = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);
  if (view.someProp("handlePaste", (f2) => f2(view, event, slice3 || Slice.empty)))
    return true;
  if (!slice3)
    return false;
  let singleNode = sliceSingleNode(slice3);
  let tr2 = singleNode ? view.state.tr.replaceSelectionWith(singleNode, preferPlain) : view.state.tr.replaceSelection(slice3);
  view.dispatch(tr2.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
  return true;
}
function getText$1(clipboardData) {
  let text = clipboardData.getData("text/plain") || clipboardData.getData("Text");
  if (text)
    return text;
  let uris = clipboardData.getData("text/uri-list");
  return uris ? uris.replace(/\r?\n/g, " ") : "";
}
editHandlers.paste = (view, _event) => {
  let event = _event;
  if (view.composing && !android)
    return;
  let data = brokenClipboardAPI ? null : event.clipboardData;
  let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
  if (data && doPaste(view, getText$1(data), data.getData("text/html"), plain, event))
    event.preventDefault();
  else
    capturePaste(view, event);
};
class Dragging {
  constructor(slice3, move, node2) {
    this.slice = slice3;
    this.move = move;
    this.node = node2;
  }
}
const dragCopyModifier = mac$2 ? "altKey" : "ctrlKey";
handlers.dragstart = (view, _event) => {
  let event = _event;
  let mouseDown = view.input.mouseDown;
  if (mouseDown)
    mouseDown.done();
  if (!event.dataTransfer)
    return;
  let sel = view.state.selection;
  let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
  let node2;
  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to))
    ;
  else if (mouseDown && mouseDown.mightDrag) {
    node2 = NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos);
  } else if (event.target && event.target.nodeType == 1) {
    let desc = view.docView.nearestDesc(event.target, true);
    if (desc && desc.node.type.spec.draggable && desc != view.docView)
      node2 = NodeSelection.create(view.state.doc, desc.posBefore);
  }
  let slice3 = (node2 || view.state.selection).content(), { dom, text } = serializeForClipboard(view, slice3);
  event.dataTransfer.clearData();
  event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
  event.dataTransfer.effectAllowed = "copyMove";
  if (!brokenClipboardAPI)
    event.dataTransfer.setData("text/plain", text);
  view.dragging = new Dragging(slice3, !event[dragCopyModifier], node2);
};
handlers.dragend = (view) => {
  let dragging = view.dragging;
  window.setTimeout(() => {
    if (view.dragging == dragging)
      view.dragging = null;
  }, 50);
};
editHandlers.dragover = editHandlers.dragenter = (_2, e3) => e3.preventDefault();
editHandlers.drop = (view, _event) => {
  let event = _event;
  let dragging = view.dragging;
  view.dragging = null;
  if (!event.dataTransfer)
    return;
  let eventPos = view.posAtCoords(eventCoords(event));
  if (!eventPos)
    return;
  let $mouse = view.state.doc.resolve(eventPos.pos);
  let slice3 = dragging && dragging.slice;
  if (slice3) {
    view.someProp("transformPasted", (f2) => {
      slice3 = f2(slice3, view);
    });
  } else {
    slice3 = parseFromClipboard(view, getText$1(event.dataTransfer), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
  }
  let move = !!(dragging && !event[dragCopyModifier]);
  if (view.someProp("handleDrop", (f2) => f2(view, event, slice3 || Slice.empty, move))) {
    event.preventDefault();
    return;
  }
  if (!slice3)
    return;
  event.preventDefault();
  let insertPos = slice3 ? dropPoint(view.state.doc, $mouse.pos, slice3) : $mouse.pos;
  if (insertPos == null)
    insertPos = $mouse.pos;
  let tr2 = view.state.tr;
  if (move) {
    let { node: node2 } = dragging;
    if (node2)
      node2.replace(tr2);
    else
      tr2.deleteSelection();
  }
  let pos = tr2.mapping.map(insertPos);
  let isNode2 = slice3.openStart == 0 && slice3.openEnd == 0 && slice3.content.childCount == 1;
  let beforeInsert = tr2.doc;
  if (isNode2)
    tr2.replaceRangeWith(pos, pos, slice3.content.firstChild);
  else
    tr2.replaceRange(pos, pos, slice3);
  if (tr2.doc.eq(beforeInsert))
    return;
  let $pos = tr2.doc.resolve(pos);
  if (isNode2 && NodeSelection.isSelectable(slice3.content.firstChild) && $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice3.content.firstChild)) {
    tr2.setSelection(new NodeSelection($pos));
  } else {
    let end2 = tr2.mapping.map(insertPos);
    tr2.mapping.maps[tr2.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end2 = newTo);
    tr2.setSelection(selectionBetween(view, $pos, tr2.doc.resolve(end2)));
  }
  view.focus();
  view.dispatch(tr2.setMeta("uiEvent", "drop"));
};
handlers.focus = (view) => {
  view.input.lastFocus = Date.now();
  if (!view.focused) {
    view.domObserver.stop();
    view.dom.classList.add("ProseMirror-focused");
    view.domObserver.start();
    view.focused = true;
    setTimeout(() => {
      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
        selectionToDOM(view);
    }, 20);
  }
};
handlers.blur = (view, _event) => {
  let event = _event;
  if (view.focused) {
    view.domObserver.stop();
    view.dom.classList.remove("ProseMirror-focused");
    view.domObserver.start();
    if (event.relatedTarget && view.dom.contains(event.relatedTarget))
      view.domObserver.currentSelection.clear();
    view.focused = false;
  }
};
handlers.beforeinput = (view, _event) => {
  let event = _event;
  if (chrome && android && event.inputType == "deleteContentBackward") {
    view.domObserver.flushSoon();
    let { domChangeCount } = view.input;
    setTimeout(() => {
      if (view.input.domChangeCount != domChangeCount)
        return;
      view.dom.blur();
      view.focus();
      if (view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(8, "Backspace"))))
        return;
      let { $cursor } = view.state.selection;
      if ($cursor && $cursor.pos > 0)
        view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
    }, 50);
  }
};
for (let prop in editHandlers)
  handlers[prop] = editHandlers[prop];
function compareObjs(a4, b3) {
  if (a4 == b3)
    return true;
  for (let p2 in a4)
    if (a4[p2] !== b3[p2])
      return false;
  for (let p2 in b3)
    if (!(p2 in a4))
      return false;
  return true;
}
class WidgetType {
  constructor(toDOM, spec) {
    this.toDOM = toDOM;
    this.spec = spec || noSpec;
    this.side = this.spec.side || 0;
  }
  map(mapping, span, offset2, oldOffset) {
    let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
    return deleted ? null : new Decoration(pos - offset2, pos - offset2, this);
  }
  valid() {
    return true;
  }
  eq(other) {
    return this == other || other instanceof WidgetType && (this.spec.key && this.spec.key == other.spec.key || this.toDOM == other.toDOM && compareObjs(this.spec, other.spec));
  }
  destroy(node2) {
    if (this.spec.destroy)
      this.spec.destroy(node2);
  }
}
class InlineType {
  constructor(attrs, spec) {
    this.attrs = attrs;
    this.spec = spec || noSpec;
  }
  map(mapping, span, offset2, oldOffset) {
    let from3 = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset2;
    let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset2;
    return from3 >= to ? null : new Decoration(from3, to, this);
  }
  valid(_2, span) {
    return span.from < span.to;
  }
  eq(other) {
    return this == other || other instanceof InlineType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
  }
  static is(span) {
    return span.type instanceof InlineType;
  }
  destroy() {
  }
}
class NodeType2 {
  constructor(attrs, spec) {
    this.attrs = attrs;
    this.spec = spec || noSpec;
  }
  map(mapping, span, offset2, oldOffset) {
    let from3 = mapping.mapResult(span.from + oldOffset, 1);
    if (from3.deleted)
      return null;
    let to = mapping.mapResult(span.to + oldOffset, -1);
    if (to.deleted || to.pos <= from3.pos)
      return null;
    return new Decoration(from3.pos - offset2, to.pos - offset2, this);
  }
  valid(node2, span) {
    let { index: index2, offset: offset2 } = node2.content.findIndex(span.from), child;
    return offset2 == span.from && !(child = node2.child(index2)).isText && offset2 + child.nodeSize == span.to;
  }
  eq(other) {
    return this == other || other instanceof NodeType2 && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
  }
  destroy() {
  }
}
class Decoration {
  /**
  @internal
  */
  constructor(from3, to, type) {
    this.from = from3;
    this.to = to;
    this.type = type;
  }
  /**
  @internal
  */
  copy(from3, to) {
    return new Decoration(from3, to, this.type);
  }
  /**
  @internal
  */
  eq(other, offset2 = 0) {
    return this.type.eq(other.type) && this.from + offset2 == other.from && this.to + offset2 == other.to;
  }
  /**
  @internal
  */
  map(mapping, offset2, oldOffset) {
    return this.type.map(mapping, this, offset2, oldOffset);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(pos, toDOM, spec) {
    return new Decoration(pos, pos, new WidgetType(toDOM, spec));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(from3, to, attrs, spec) {
    return new Decoration(from3, to, new InlineType(attrs, spec));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(from3, to, attrs, spec) {
    return new Decoration(from3, to, new NodeType2(attrs, spec));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof InlineType;
  }
  /**
  @internal
  */
  get widget() {
    return this.type instanceof WidgetType;
  }
}
const none = [], noSpec = {};
class DecorationSet {
  /**
  @internal
  */
  constructor(local, children) {
    this.local = local.length ? local : none;
    this.children = children.length ? children : none;
  }
  /**
  Create a set of decorations, using the structure of the given
  document. This will consume (modify) the `decorations` array, so
  you must make a copy if you want need to preserve that.
  */
  static create(doc2, decorations) {
    return decorations.length ? buildTree(decorations, doc2, 0, noSpec) : empty;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(start2, end2, predicate) {
    let result = [];
    this.findInner(start2 == null ? 0 : start2, end2 == null ? 1e9 : end2, result, 0, predicate);
    return result;
  }
  findInner(start2, end2, result, offset2, predicate) {
    for (let i2 = 0; i2 < this.local.length; i2++) {
      let span = this.local[i2];
      if (span.from <= end2 && span.to >= start2 && (!predicate || predicate(span.spec)))
        result.push(span.copy(span.from + offset2, span.to + offset2));
    }
    for (let i2 = 0; i2 < this.children.length; i2 += 3) {
      if (this.children[i2] < end2 && this.children[i2 + 1] > start2) {
        let childOff = this.children[i2] + 1;
        this.children[i2 + 2].findInner(start2 - childOff, end2 - childOff, result, offset2 + childOff, predicate);
      }
    }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(mapping, doc2, options) {
    if (this == empty || mapping.maps.length == 0)
      return this;
    return this.mapInner(mapping, doc2, 0, 0, options || noSpec);
  }
  /**
  @internal
  */
  mapInner(mapping, node2, offset2, oldOffset, options) {
    let newLocal;
    for (let i2 = 0; i2 < this.local.length; i2++) {
      let mapped = this.local[i2].map(mapping, offset2, oldOffset);
      if (mapped && mapped.type.valid(node2, mapped))
        (newLocal || (newLocal = [])).push(mapped);
      else if (options.onRemove)
        options.onRemove(this.local[i2].spec);
    }
    if (this.children.length)
      return mapChildren(this.children, newLocal || [], mapping, node2, offset2, oldOffset, options);
    else
      return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Consumes the `decorations` array. Needs
  access to the current document to create the appropriate tree
  structure.
  */
  add(doc2, decorations) {
    if (!decorations.length)
      return this;
    if (this == empty)
      return DecorationSet.create(doc2, decorations);
    return this.addInner(doc2, decorations, 0);
  }
  addInner(doc2, decorations, offset2) {
    let children, childIndex = 0;
    doc2.forEach((childNode, childOffset) => {
      let baseOffset = childOffset + offset2, found2;
      if (!(found2 = takeSpansForNode(decorations, childNode, baseOffset)))
        return;
      if (!children)
        children = this.children.slice();
      while (childIndex < children.length && children[childIndex] < childOffset)
        childIndex += 3;
      if (children[childIndex] == childOffset)
        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found2, baseOffset + 1);
      else
        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found2, childNode, baseOffset + 1, noSpec));
      childIndex += 3;
    });
    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset2);
    for (let i2 = 0; i2 < local.length; i2++)
      if (!local[i2].type.valid(doc2, local[i2]))
        local.splice(i2--, 1);
    return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(decorations) {
    if (decorations.length == 0 || this == empty)
      return this;
    return this.removeInner(decorations, 0);
  }
  removeInner(decorations, offset2) {
    let children = this.children, local = this.local;
    for (let i2 = 0; i2 < children.length; i2 += 3) {
      let found2;
      let from3 = children[i2] + offset2, to = children[i2 + 1] + offset2;
      for (let j2 = 0, span; j2 < decorations.length; j2++)
        if (span = decorations[j2]) {
          if (span.from > from3 && span.to < to) {
            decorations[j2] = null;
            (found2 || (found2 = [])).push(span);
          }
        }
      if (!found2)
        continue;
      if (children == this.children)
        children = this.children.slice();
      let removed = children[i2 + 2].removeInner(found2, from3 + 1);
      if (removed != empty) {
        children[i2 + 2] = removed;
      } else {
        children.splice(i2, 3);
        i2 -= 3;
      }
    }
    if (local.length) {
      for (let i2 = 0, span; i2 < decorations.length; i2++)
        if (span = decorations[i2]) {
          for (let j2 = 0; j2 < local.length; j2++)
            if (local[j2].eq(span, offset2)) {
              if (local == this.local)
                local = this.local.slice();
              local.splice(j2--, 1);
            }
        }
    }
    if (children == this.children && local == this.local)
      return this;
    return local.length || children.length ? new DecorationSet(local, children) : empty;
  }
  /**
  @internal
  */
  forChild(offset2, node2) {
    if (this == empty)
      return this;
    if (node2.isLeaf)
      return DecorationSet.empty;
    let child, local;
    for (let i2 = 0; i2 < this.children.length; i2 += 3)
      if (this.children[i2] >= offset2) {
        if (this.children[i2] == offset2)
          child = this.children[i2 + 2];
        break;
      }
    let start2 = offset2 + 1, end2 = start2 + node2.content.size;
    for (let i2 = 0; i2 < this.local.length; i2++) {
      let dec = this.local[i2];
      if (dec.from < end2 && dec.to > start2 && dec.type instanceof InlineType) {
        let from3 = Math.max(start2, dec.from) - start2, to = Math.min(end2, dec.to) - start2;
        if (from3 < to)
          (local || (local = [])).push(dec.copy(from3, to));
      }
    }
    if (local) {
      let localSet = new DecorationSet(local.sort(byPos), none);
      return child ? new DecorationGroup([localSet, child]) : localSet;
    }
    return child || empty;
  }
  /**
  @internal
  */
  eq(other) {
    if (this == other)
      return true;
    if (!(other instanceof DecorationSet) || this.local.length != other.local.length || this.children.length != other.children.length)
      return false;
    for (let i2 = 0; i2 < this.local.length; i2++)
      if (!this.local[i2].eq(other.local[i2]))
        return false;
    for (let i2 = 0; i2 < this.children.length; i2 += 3)
      if (this.children[i2] != other.children[i2] || this.children[i2 + 1] != other.children[i2 + 1] || !this.children[i2 + 2].eq(other.children[i2 + 2]))
        return false;
    return true;
  }
  /**
  @internal
  */
  locals(node2) {
    return removeOverlap(this.localsInner(node2));
  }
  /**
  @internal
  */
  localsInner(node2) {
    if (this == empty)
      return none;
    if (node2.inlineContent || !this.local.some(InlineType.is))
      return this.local;
    let result = [];
    for (let i2 = 0; i2 < this.local.length; i2++) {
      if (!(this.local[i2].type instanceof InlineType))
        result.push(this.local[i2]);
    }
    return result;
  }
}
DecorationSet.empty = new DecorationSet([], []);
DecorationSet.removeOverlap = removeOverlap;
const empty = DecorationSet.empty;
class DecorationGroup {
  constructor(members) {
    this.members = members;
  }
  map(mapping, doc2) {
    const mappedDecos = this.members.map((member) => member.map(mapping, doc2, noSpec));
    return DecorationGroup.from(mappedDecos);
  }
  forChild(offset2, child) {
    if (child.isLeaf)
      return DecorationSet.empty;
    let found2 = [];
    for (let i2 = 0; i2 < this.members.length; i2++) {
      let result = this.members[i2].forChild(offset2, child);
      if (result == empty)
        continue;
      if (result instanceof DecorationGroup)
        found2 = found2.concat(result.members);
      else
        found2.push(result);
    }
    return DecorationGroup.from(found2);
  }
  eq(other) {
    if (!(other instanceof DecorationGroup) || other.members.length != this.members.length)
      return false;
    for (let i2 = 0; i2 < this.members.length; i2++)
      if (!this.members[i2].eq(other.members[i2]))
        return false;
    return true;
  }
  locals(node2) {
    let result, sorted = true;
    for (let i2 = 0; i2 < this.members.length; i2++) {
      let locals = this.members[i2].localsInner(node2);
      if (!locals.length)
        continue;
      if (!result) {
        result = locals;
      } else {
        if (sorted) {
          result = result.slice();
          sorted = false;
        }
        for (let j2 = 0; j2 < locals.length; j2++)
          result.push(locals[j2]);
      }
    }
    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(members) {
    switch (members.length) {
      case 0:
        return empty;
      case 1:
        return members[0];
      default:
        return new DecorationGroup(members.every((m4) => m4 instanceof DecorationSet) ? members : members.reduce((r2, m4) => r2.concat(m4 instanceof DecorationSet ? m4 : m4.members), []));
    }
  }
}
function mapChildren(oldChildren, newLocal, mapping, node2, offset2, oldOffset, options) {
  let children = oldChildren.slice();
  for (let i2 = 0, baseOffset = oldOffset; i2 < mapping.maps.length; i2++) {
    let moved = 0;
    mapping.maps[i2].forEach((oldStart, oldEnd, newStart, newEnd) => {
      let dSize = newEnd - newStart - (oldEnd - oldStart);
      for (let i3 = 0; i3 < children.length; i3 += 3) {
        let end2 = children[i3 + 1];
        if (end2 < 0 || oldStart > end2 + baseOffset - moved)
          continue;
        let start2 = children[i3] + baseOffset - moved;
        if (oldEnd >= start2) {
          children[i3 + 1] = oldStart <= start2 ? -2 : -1;
        } else if (oldStart >= baseOffset && dSize) {
          children[i3] += dSize;
          children[i3 + 1] += dSize;
        }
      }
      moved += dSize;
    });
    baseOffset = mapping.maps[i2].map(baseOffset, -1);
  }
  let mustRebuild = false;
  for (let i2 = 0; i2 < children.length; i2 += 3)
    if (children[i2 + 1] < 0) {
      if (children[i2 + 1] == -2) {
        mustRebuild = true;
        children[i2 + 1] = -1;
        continue;
      }
      let from3 = mapping.map(oldChildren[i2] + oldOffset), fromLocal = from3 - offset2;
      if (fromLocal < 0 || fromLocal >= node2.content.size) {
        mustRebuild = true;
        continue;
      }
      let to = mapping.map(oldChildren[i2 + 1] + oldOffset, -1), toLocal = to - offset2;
      let { index: index2, offset: childOffset } = node2.content.findIndex(fromLocal);
      let childNode = node2.maybeChild(index2);
      if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
        let mapped = children[i2 + 2].mapInner(mapping, childNode, from3 + 1, oldChildren[i2] + oldOffset + 1, options);
        if (mapped != empty) {
          children[i2] = fromLocal;
          children[i2 + 1] = toLocal;
          children[i2 + 2] = mapped;
        } else {
          children[i2 + 1] = -2;
          mustRebuild = true;
        }
      } else {
        mustRebuild = true;
      }
    }
  if (mustRebuild) {
    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset2, oldOffset, options);
    let built = buildTree(decorations, node2, 0, options);
    newLocal = built.local;
    for (let i2 = 0; i2 < children.length; i2 += 3)
      if (children[i2 + 1] < 0) {
        children.splice(i2, 3);
        i2 -= 3;
      }
    for (let i2 = 0, j2 = 0; i2 < built.children.length; i2 += 3) {
      let from3 = built.children[i2];
      while (j2 < children.length && children[j2] < from3)
        j2 += 3;
      children.splice(j2, 0, built.children[i2], built.children[i2 + 1], built.children[i2 + 2]);
    }
  }
  return new DecorationSet(newLocal.sort(byPos), children);
}
function moveSpans(spans, offset2) {
  if (!offset2 || !spans.length)
    return spans;
  let result = [];
  for (let i2 = 0; i2 < spans.length; i2++) {
    let span = spans[i2];
    result.push(new Decoration(span.from + offset2, span.to + offset2, span.type));
  }
  return result;
}
function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset2, oldOffset, options) {
  function gather(set2, oldOffset2) {
    for (let i2 = 0; i2 < set2.local.length; i2++) {
      let mapped = set2.local[i2].map(mapping, offset2, oldOffset2);
      if (mapped)
        decorations.push(mapped);
      else if (options.onRemove)
        options.onRemove(set2.local[i2].spec);
    }
    for (let i2 = 0; i2 < set2.children.length; i2 += 3)
      gather(set2.children[i2 + 2], set2.children[i2] + oldOffset2 + 1);
  }
  for (let i2 = 0; i2 < children.length; i2 += 3)
    if (children[i2 + 1] == -1)
      gather(children[i2 + 2], oldChildren[i2] + oldOffset + 1);
  return decorations;
}
function takeSpansForNode(spans, node2, offset2) {
  if (node2.isLeaf)
    return null;
  let end2 = offset2 + node2.nodeSize, found2 = null;
  for (let i2 = 0, span; i2 < spans.length; i2++) {
    if ((span = spans[i2]) && span.from > offset2 && span.to < end2) {
      (found2 || (found2 = [])).push(span);
      spans[i2] = null;
    }
  }
  return found2;
}
function withoutNulls(array) {
  let result = [];
  for (let i2 = 0; i2 < array.length; i2++)
    if (array[i2] != null)
      result.push(array[i2]);
  return result;
}
function buildTree(spans, node2, offset2, options) {
  let children = [], hasNulls = false;
  node2.forEach((childNode, localStart) => {
    let found2 = takeSpansForNode(spans, childNode, localStart + offset2);
    if (found2) {
      hasNulls = true;
      let subtree = buildTree(found2, childNode, offset2 + localStart + 1, options);
      if (subtree != empty)
        children.push(localStart, localStart + childNode.nodeSize, subtree);
    }
  });
  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset2).sort(byPos);
  for (let i2 = 0; i2 < locals.length; i2++)
    if (!locals[i2].type.valid(node2, locals[i2])) {
      if (options.onRemove)
        options.onRemove(locals[i2].spec);
      locals.splice(i2--, 1);
    }
  return locals.length || children.length ? new DecorationSet(locals, children) : empty;
}
function byPos(a4, b3) {
  return a4.from - b3.from || a4.to - b3.to;
}
function removeOverlap(spans) {
  let working = spans;
  for (let i2 = 0; i2 < working.length - 1; i2++) {
    let span = working[i2];
    if (span.from != span.to)
      for (let j2 = i2 + 1; j2 < working.length; j2++) {
        let next2 = working[j2];
        if (next2.from == span.from) {
          if (next2.to != span.to) {
            if (working == spans)
              working = spans.slice();
            working[j2] = next2.copy(next2.from, span.to);
            insertAhead(working, j2 + 1, next2.copy(span.to, next2.to));
          }
          continue;
        } else {
          if (next2.from < span.to) {
            if (working == spans)
              working = spans.slice();
            working[i2] = span.copy(span.from, next2.from);
            insertAhead(working, j2, span.copy(next2.from, span.to));
          }
          break;
        }
      }
  }
  return working;
}
function insertAhead(array, i2, deco) {
  while (i2 < array.length && byPos(deco, array[i2]) > 0)
    i2++;
  array.splice(i2, 0, deco);
}
function viewDecorations(view) {
  let found2 = [];
  view.someProp("decorations", (f2) => {
    let result = f2(view.state);
    if (result && result != empty)
      found2.push(result);
  });
  if (view.cursorWrapper)
    found2.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
  return DecorationGroup.from(found2);
}
const observeOptions = {
  childList: true,
  characterData: true,
  characterDataOldValue: true,
  attributes: true,
  attributeOldValue: true,
  subtree: true
};
const useCharData = ie$1 && ie_version <= 11;
class SelectionState {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  set(sel) {
    this.anchorNode = sel.anchorNode;
    this.anchorOffset = sel.anchorOffset;
    this.focusNode = sel.focusNode;
    this.focusOffset = sel.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(sel) {
    return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset && sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
  }
}
class DOMObserver {
  constructor(view, handleDOMChange) {
    this.view = view;
    this.handleDOMChange = handleDOMChange;
    this.queue = [];
    this.flushingSoon = -1;
    this.observer = null;
    this.currentSelection = new SelectionState();
    this.onCharData = null;
    this.suppressingSelectionUpdates = false;
    this.observer = window.MutationObserver && new window.MutationObserver((mutations) => {
      for (let i2 = 0; i2 < mutations.length; i2++)
        this.queue.push(mutations[i2]);
      if (ie$1 && ie_version <= 11 && mutations.some((m4) => m4.type == "childList" && m4.removedNodes.length || m4.type == "characterData" && m4.oldValue.length > m4.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (useCharData) {
      this.onCharData = (e3) => {
        this.queue.push({ target: e3.target, type: "characterData", oldValue: e3.prevValue });
        this.flushSoon();
      };
    }
    this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    if (this.flushingSoon < 0)
      this.flushingSoon = window.setTimeout(() => {
        this.flushingSoon = -1;
        this.flush();
      }, 20);
  }
  forceFlush() {
    if (this.flushingSoon > -1) {
      window.clearTimeout(this.flushingSoon);
      this.flushingSoon = -1;
      this.flush();
    }
  }
  start() {
    if (this.observer) {
      this.observer.takeRecords();
      this.observer.observe(this.view.dom, observeOptions);
    }
    if (this.onCharData)
      this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let take = this.observer.takeRecords();
      if (take.length) {
        for (let i2 = 0; i2 < take.length; i2++)
          this.queue.push(take[i2]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    if (this.onCharData)
      this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = true;
    setTimeout(() => this.suppressingSelectionUpdates = false, 50);
  }
  onSelectionChange() {
    if (!hasFocusAndSelection(this.view))
      return;
    if (this.suppressingSelectionUpdates)
      return selectionToDOM(this.view);
    if (ie$1 && ie_version <= 11 && !this.view.state.selection.empty) {
      let sel = this.view.domSelectionRange();
      if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
        return this.flushSoon();
    }
    this.flush();
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(sel) {
    if (!sel.focusNode)
      return true;
    let ancestors = /* @__PURE__ */ new Set(), container;
    for (let scan = sel.focusNode; scan; scan = parentNode(scan))
      ancestors.add(scan);
    for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
      if (ancestors.has(scan)) {
        container = scan;
        break;
      }
    let desc = container && this.view.docView.nearestDesc(container);
    if (desc && desc.ignoreMutation({
      type: "selection",
      target: container.nodeType == 3 ? container.parentNode : container
    })) {
      this.setCurSelection();
      return true;
    }
  }
  pendingRecords() {
    if (this.observer)
      for (let mut of this.observer.takeRecords())
        this.queue.push(mut);
    return this.queue;
  }
  flush() {
    let { view } = this;
    if (!view.docView || this.flushingSoon > -1)
      return;
    let mutations = this.pendingRecords();
    if (mutations.length)
      this.queue = [];
    let sel = view.domSelectionRange();
    let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
    let from3 = -1, to = -1, typeOver = false, added = [];
    if (view.editable) {
      for (let i2 = 0; i2 < mutations.length; i2++) {
        let result = this.registerMutation(mutations[i2], added);
        if (result) {
          from3 = from3 < 0 ? result.from : Math.min(result.from, from3);
          to = to < 0 ? result.to : Math.max(result.to, to);
          if (result.typeOver)
            typeOver = true;
        }
      }
    }
    if (gecko && added.length > 1) {
      let brs = added.filter((n2) => n2.nodeName == "BR");
      if (brs.length == 2) {
        let a4 = brs[0], b3 = brs[1];
        if (a4.parentNode && a4.parentNode.parentNode == b3.parentNode)
          b3.remove();
        else
          a4.remove();
      }
    }
    let readSel = null;
    if (from3 < 0 && newSel && view.input.lastFocus > Date.now() - 200 && Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 && selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) && readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
      view.input.lastFocus = 0;
      selectionToDOM(view);
      this.currentSelection.set(sel);
      view.scrollToSelection();
    } else if (from3 > -1 || newSel) {
      if (from3 > -1) {
        view.docView.markDirty(from3, to);
        checkCSS(view);
      }
      this.handleDOMChange(from3, to, typeOver, added);
      if (view.docView && view.docView.dirty)
        view.updateState(view.state);
      else if (!this.currentSelection.eq(sel))
        selectionToDOM(view);
      this.currentSelection.set(sel);
    }
  }
  registerMutation(mut, added) {
    if (added.indexOf(mut.target) > -1)
      return null;
    let desc = this.view.docView.nearestDesc(mut.target);
    if (mut.type == "attributes" && (desc == this.view.docView || mut.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style")))
      return null;
    if (!desc || desc.ignoreMutation(mut))
      return null;
    if (mut.type == "childList") {
      for (let i2 = 0; i2 < mut.addedNodes.length; i2++)
        added.push(mut.addedNodes[i2]);
      if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
        return { from: desc.posBefore, to: desc.posAfter };
      let prev2 = mut.previousSibling, next2 = mut.nextSibling;
      if (ie$1 && ie_version <= 11 && mut.addedNodes.length) {
        for (let i2 = 0; i2 < mut.addedNodes.length; i2++) {
          let { previousSibling, nextSibling } = mut.addedNodes[i2];
          if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
            prev2 = previousSibling;
          if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
            next2 = nextSibling;
        }
      }
      let fromOffset = prev2 && prev2.parentNode == mut.target ? domIndex(prev2) + 1 : 0;
      let from3 = desc.localPosFromDOM(mut.target, fromOffset, -1);
      let toOffset = next2 && next2.parentNode == mut.target ? domIndex(next2) : mut.target.childNodes.length;
      let to = desc.localPosFromDOM(mut.target, toOffset, 1);
      return { from: from3, to };
    } else if (mut.type == "attributes") {
      return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
    } else {
      return {
        from: desc.posAtStart,
        to: desc.posAtEnd,
        // An event was generated for a text change that didn't change
        // any text. Mark the dom change to fall back to assuming the
        // selection was typed over with an identical value if it can't
        // find another change.
        typeOver: mut.target.nodeValue == mut.oldValue
      };
    }
  }
}
let cssChecked = /* @__PURE__ */ new WeakMap();
let cssCheckWarned = false;
function checkCSS(view) {
  if (cssChecked.has(view))
    return;
  cssChecked.set(view, null);
  if (["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
    view.requiresGeckoHackNode = gecko;
    if (cssCheckWarned)
      return;
    console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
    cssCheckWarned = true;
  }
}
function safariShadowSelectionRange(view) {
  let found2;
  function read2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found2 = event.getTargetRanges()[0];
  }
  view.dom.addEventListener("beforeinput", read2, true);
  document.execCommand("indent");
  view.dom.removeEventListener("beforeinput", read2, true);
  let anchorNode = found2.startContainer, anchorOffset = found2.startOffset;
  let focusNode = found2.endContainer, focusOffset = found2.endOffset;
  let currentAnchor = view.domAtPos(view.state.selection.anchor);
  if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function parseBetween(view, from_, to_) {
  let { node: parent, fromOffset, toOffset, from: from3, to } = view.docView.parseRange(from_, to_);
  let domSel = view.domSelectionRange();
  let find2;
  let anchor = domSel.anchorNode;
  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
    find2 = [{ node: anchor, offset: domSel.anchorOffset }];
    if (!selectionCollapsed(domSel))
      find2.push({ node: domSel.focusNode, offset: domSel.focusOffset });
  }
  if (chrome && view.input.lastKeyCode === 8) {
    for (let off2 = toOffset; off2 > fromOffset; off2--) {
      let node2 = parent.childNodes[off2 - 1], desc = node2.pmViewDesc;
      if (node2.nodeName == "BR" && !desc) {
        toOffset = off2;
        break;
      }
      if (!desc || desc.size)
        break;
    }
  }
  let startDoc = view.state.doc;
  let parser = view.someProp("domParser") || DOMParser$1.fromSchema(view.state.schema);
  let $from = startDoc.resolve(from3);
  let sel = null, doc2 = parser.parse(parent, {
    topNode: $from.parent,
    topMatch: $from.parent.contentMatchAt($from.index()),
    topOpen: true,
    from: fromOffset,
    to: toOffset,
    preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
    findPositions: find2,
    ruleFromNode,
    context: $from
  });
  if (find2 && find2[0].pos != null) {
    let anchor2 = find2[0].pos, head = find2[1] && find2[1].pos;
    if (head == null)
      head = anchor2;
    sel = { anchor: anchor2 + from3, head: head + from3 };
  }
  return { doc: doc2, sel, from: from3, to };
}
function ruleFromNode(dom) {
  let desc = dom.pmViewDesc;
  if (desc) {
    return desc.parseRule();
  } else if (dom.nodeName == "BR" && dom.parentNode) {
    if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
      let skip = document.createElement("div");
      skip.appendChild(document.createElement("li"));
      return { skip };
    } else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
      return { ignore: true };
    }
  } else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
    return { ignore: true };
  }
  return null;
}
const isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function readDOMChange(view, from3, to, typeOver, addedNodes) {
  let compositionID = view.input.compositionPendingChanges || (view.composing ? view.input.compositionID : 0);
  view.input.compositionPendingChanges = 0;
  if (from3 < 0) {
    let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
    let newSel = selectionFromDOM(view, origin);
    if (newSel && !view.state.selection.eq(newSel)) {
      if (chrome && android && view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter"))))
        return;
      let tr3 = view.state.tr.setSelection(newSel);
      if (origin == "pointer")
        tr3.setMeta("pointer", true);
      else if (origin == "key")
        tr3.scrollIntoView();
      if (compositionID)
        tr3.setMeta("composition", compositionID);
      view.dispatch(tr3);
    }
    return;
  }
  let $before = view.state.doc.resolve(from3);
  let shared = $before.sharedDepth(to);
  from3 = $before.before(shared + 1);
  to = view.state.doc.resolve(to).after(shared + 1);
  let sel = view.state.selection;
  let parse2 = parseBetween(view, from3, to);
  let doc2 = view.state.doc, compare = doc2.slice(parse2.from, parse2.to);
  let preferredPos, preferredSide;
  if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
    preferredPos = view.state.selection.to;
    preferredSide = "end";
  } else {
    preferredPos = view.state.selection.from;
    preferredSide = "start";
  }
  view.input.lastKeyCode = null;
  let change = findDiff(compare.content, parse2.doc.content, parse2.from, preferredPos, preferredSide);
  if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) && addedNodes.some((n2) => n2.nodeType == 1 && !isInline.test(n2.nodeName)) && (!change || change.endA >= change.endB) && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter")))) {
    view.input.lastIOSEnter = 0;
    return;
  }
  if (!change) {
    if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) && !view.composing && !(parse2.sel && parse2.sel.anchor != parse2.sel.head)) {
      change = { start: sel.from, endA: sel.to, endB: sel.to };
    } else {
      if (parse2.sel) {
        let sel2 = resolveSelection(view, view.state.doc, parse2.sel);
        if (sel2 && !sel2.eq(view.state.selection)) {
          let tr3 = view.state.tr.setSelection(sel2);
          if (compositionID)
            tr3.setMeta("composition", compositionID);
          view.dispatch(tr3);
        }
      }
      return;
    }
  }
  if (chrome && view.cursorWrapper && parse2.sel && parse2.sel.anchor == view.cursorWrapper.deco.from && parse2.sel.head == parse2.sel.anchor) {
    let size2 = change.endB - change.start;
    parse2.sel = { anchor: parse2.sel.anchor + size2, head: parse2.sel.anchor + size2 };
  }
  view.input.domChangeCount++;
  if (view.state.selection.from < view.state.selection.to && change.start == change.endB && view.state.selection instanceof TextSelection) {
    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 && view.state.selection.from >= parse2.from) {
      change.start = view.state.selection.from;
    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 && view.state.selection.to <= parse2.to) {
      change.endB += view.state.selection.to - change.endA;
      change.endA = view.state.selection.to;
    }
  }
  if (ie$1 && ie_version <= 11 && change.endB == change.start + 1 && change.endA == change.start && change.start > parse2.from && parse2.doc.textBetween(change.start - parse2.from - 1, change.start - parse2.from + 1) == "  ") {
    change.start--;
    change.endA--;
    change.endB--;
  }
  let $from = parse2.doc.resolveNoCache(change.start - parse2.from);
  let $to = parse2.doc.resolveNoCache(change.endB - parse2.from);
  let $fromA = doc2.resolve(change.start);
  let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
  let nextSel;
  if ((ios && view.input.lastIOSEnter > Date.now() - 225 && (!inlineChange || addedNodes.some((n2) => n2.nodeName == "DIV" || n2.nodeName == "P")) || !inlineChange && $from.pos < parse2.doc.content.size && !$from.sameParent($to) && (nextSel = Selection.findFrom(parse2.doc.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos) && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter")))) {
    view.input.lastIOSEnter = 0;
    return;
  }
  if (view.state.selection.anchor > change.start && looksLikeJoin(doc2, change.start, change.endA, $from, $to) && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(8, "Backspace")))) {
    if (android && chrome)
      view.domObserver.suppressSelectionUpdates();
    return;
  }
  if (chrome && android && change.endB == change.start)
    view.input.lastAndroidDelete = Date.now();
  if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth && parse2.sel && parse2.sel.anchor == parse2.sel.head && parse2.sel.head == change.endA) {
    change.endB -= 2;
    $to = parse2.doc.resolveNoCache(change.endB - parse2.from);
    setTimeout(() => {
      view.someProp("handleKeyDown", function(f2) {
        return f2(view, keyEvent(13, "Enter"));
      });
    }, 20);
  }
  let chFrom = change.start, chTo = change.endA;
  let tr2, storedMarks, markChange;
  if (inlineChange) {
    if ($from.pos == $to.pos) {
      if (ie$1 && ie_version <= 11 && $from.parentOffset == 0) {
        view.domObserver.suppressSelectionUpdates();
        setTimeout(() => selectionToDOM(view), 20);
      }
      tr2 = view.state.tr.delete(chFrom, chTo);
      storedMarks = doc2.resolve(change.start).marksAcross(doc2.resolve(change.endA));
    } else if (
      // Adding or removing a mark
      change.endA == change.endB && (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))
    ) {
      tr2 = view.state.tr;
      if (markChange.type == "add")
        tr2.addMark(chFrom, chTo, markChange.mark);
      else
        tr2.removeMark(chFrom, chTo, markChange.mark);
    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
      let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
      if (view.someProp("handleTextInput", (f2) => f2(view, chFrom, chTo, text)))
        return;
      tr2 = view.state.tr.insertText(text, chFrom, chTo);
    }
  }
  if (!tr2)
    tr2 = view.state.tr.replace(chFrom, chTo, parse2.doc.slice(change.start - parse2.from, change.endB - parse2.from));
  if (parse2.sel) {
    let sel2 = resolveSelection(view, tr2.doc, parse2.sel);
    if (sel2 && !(chrome && android && view.composing && sel2.empty && (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) && (sel2.head == chFrom || sel2.head == tr2.mapping.map(chTo) - 1) || ie$1 && sel2.empty && sel2.head == chFrom))
      tr2.setSelection(sel2);
  }
  if (storedMarks)
    tr2.ensureMarks(storedMarks);
  if (compositionID)
    tr2.setMeta("composition", compositionID);
  view.dispatch(tr2.scrollIntoView());
}
function resolveSelection(view, doc2, parsedSel) {
  if (Math.max(parsedSel.anchor, parsedSel.head) > doc2.content.size)
    return null;
  return selectionBetween(view, doc2.resolve(parsedSel.anchor), doc2.resolve(parsedSel.head));
}
function isMarkChange(cur, prev2) {
  let curMarks = cur.firstChild.marks, prevMarks = prev2.firstChild.marks;
  let added = curMarks, removed = prevMarks, type, mark, update;
  for (let i2 = 0; i2 < prevMarks.length; i2++)
    added = prevMarks[i2].removeFromSet(added);
  for (let i2 = 0; i2 < curMarks.length; i2++)
    removed = curMarks[i2].removeFromSet(removed);
  if (added.length == 1 && removed.length == 0) {
    mark = added[0];
    type = "add";
    update = (node2) => node2.mark(mark.addToSet(node2.marks));
  } else if (added.length == 0 && removed.length == 1) {
    mark = removed[0];
    type = "remove";
    update = (node2) => node2.mark(mark.removeFromSet(node2.marks));
  } else {
    return null;
  }
  let updated = [];
  for (let i2 = 0; i2 < prev2.childCount; i2++)
    updated.push(update(prev2.child(i2)));
  if (Fragment.from(updated).eq(cur))
    return { mark, type };
}
function looksLikeJoin(old, start2, end2, $newStart, $newEnd) {
  if (!$newStart.parent.isTextblock || // The content must have shrunk
  end2 - start2 <= $newEnd.pos - $newStart.pos || // newEnd must point directly at or after the end of the block that newStart points into
  skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
    return false;
  let $start = old.resolve(start2);
  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
    return false;
  let $next = old.resolve(skipClosingAndOpening($start, true, true));
  if (!$next.parent.isTextblock || $next.pos > end2 || skipClosingAndOpening($next, true, false) < end2)
    return false;
  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
}
function skipClosingAndOpening($pos, fromEnd, mayOpen) {
  let depth = $pos.depth, end2 = fromEnd ? $pos.end() : $pos.pos;
  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
    depth--;
    end2++;
    fromEnd = false;
  }
  if (mayOpen) {
    let next2 = $pos.node(depth).maybeChild($pos.indexAfter(depth));
    while (next2 && !next2.isLeaf) {
      next2 = next2.firstChild;
      end2++;
    }
  }
  return end2;
}
function findDiff(a4, b3, pos, preferredPos, preferredSide) {
  let start2 = a4.findDiffStart(b3, pos);
  if (start2 == null)
    return null;
  let { a: endA, b: endB } = a4.findDiffEnd(b3, pos + a4.size, pos + b3.size);
  if (preferredSide == "end") {
    let adjust = Math.max(0, start2 - Math.min(endA, endB));
    preferredPos -= endA + adjust - start2;
  }
  if (endA < start2 && a4.size < b3.size) {
    let move = preferredPos <= start2 && preferredPos >= endA ? start2 - preferredPos : 0;
    start2 -= move;
    if (start2 && start2 < b3.size && isSurrogatePair(b3.textBetween(start2 - 1, start2 + 1)))
      start2 += move ? 1 : -1;
    endB = start2 + (endB - endA);
    endA = start2;
  } else if (endB < start2) {
    let move = preferredPos <= start2 && preferredPos >= endB ? start2 - preferredPos : 0;
    start2 -= move;
    if (start2 && start2 < a4.size && isSurrogatePair(a4.textBetween(start2 - 1, start2 + 1)))
      start2 += move ? 1 : -1;
    endA = start2 + (endA - endB);
    endB = start2;
  }
  return { start: start2, endA, endB };
}
function isSurrogatePair(str) {
  if (str.length != 2)
    return false;
  let a4 = str.charCodeAt(0), b3 = str.charCodeAt(1);
  return a4 >= 56320 && a4 <= 57343 && b3 >= 55296 && b3 <= 56319;
}
class EditorView {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(place, props) {
    this._root = null;
    this.focused = false;
    this.trackWrites = null;
    this.mounted = false;
    this.markCursor = null;
    this.cursorWrapper = null;
    this.lastSelectedViewDesc = void 0;
    this.input = new InputState();
    this.prevDirectPlugins = [];
    this.pluginViews = [];
    this.requiresGeckoHackNode = false;
    this.dragging = null;
    this._props = props;
    this.state = props.state;
    this.directPlugins = props.plugins || [];
    this.directPlugins.forEach(checkStateComponent);
    this.dispatch = this.dispatch.bind(this);
    this.dom = place && place.mount || document.createElement("div");
    if (place) {
      if (place.appendChild)
        place.appendChild(this.dom);
      else if (typeof place == "function")
        place(this.dom);
      else if (place.mount)
        this.mounted = true;
    }
    this.editable = getEditable(this);
    updateCursorWrapper(this);
    this.nodeViews = buildNodeViews(this);
    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
    this.domObserver = new DOMObserver(this, (from3, to, typeOver, added) => readDOMChange(this, from3, to, typeOver, added));
    this.domObserver.start();
    initInput(this);
    this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let prev2 = this._props;
      this._props = {};
      for (let name in prev2)
        this._props[name] = prev2[name];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(props) {
    if (props.handleDOMEvents != this._props.handleDOMEvents)
      ensureListeners(this);
    let prevProps = this._props;
    this._props = props;
    if (props.plugins) {
      props.plugins.forEach(checkStateComponent);
      this.directPlugins = props.plugins;
    }
    this.updateStateInner(props.state, prevProps);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(props) {
    let updated = {};
    for (let name in this._props)
      updated[name] = this._props[name];
    updated.state = this.state;
    for (let name in props)
      updated[name] = props[name];
    this.update(updated);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(state) {
    this.updateStateInner(state, this._props);
  }
  updateStateInner(state, prevProps) {
    var _a;
    let prev2 = this.state, redraw = false, updateSel = false;
    if (state.storedMarks && this.composing) {
      clearComposition(this);
      updateSel = true;
    }
    this.state = state;
    let pluginsChanged = prev2.plugins != state.plugins || this._props.plugins != prevProps.plugins;
    if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
      let nodeViews = buildNodeViews(this);
      if (changedNodeViews(nodeViews, this.nodeViews)) {
        this.nodeViews = nodeViews;
        redraw = true;
      }
    }
    if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
      ensureListeners(this);
    }
    this.editable = getEditable(this);
    updateCursorWrapper(this);
    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
    let scroll = prev2.plugins != state.plugins && !prev2.doc.eq(state.doc) ? "reset" : state.scrollToSelection > prev2.scrollToSelection ? "to selection" : "preserve";
    let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
    if (updateDoc || !state.selection.eq(prev2.selection))
      updateSel = true;
    let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
    if (updateSel) {
      this.domObserver.stop();
      let forceSelUpdate = updateDoc && (ie$1 || chrome) && !this.composing && !prev2.selection.empty && !state.selection.empty && selectionContextChanged(prev2.selection, state.selection);
      if (updateDoc) {
        let chromeKludge = chrome ? this.trackWrites = this.domSelectionRange().focusNode : null;
        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
          this.docView.updateOuterDeco([]);
          this.docView.destroy();
          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
        }
        if (chromeKludge && !this.trackWrites)
          forceSelUpdate = true;
      }
      if (forceSelUpdate || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && anchorInRightPlace(this))) {
        selectionToDOM(this, forceSelUpdate);
      } else {
        syncNodeSelection(this, state.selection);
        this.domObserver.setCurSelection();
      }
      this.domObserver.start();
    }
    this.updatePluginViews(prev2);
    if (((_a = this.dragging) === null || _a === void 0 ? void 0 : _a.node) && !prev2.doc.eq(state.doc))
      this.updateDraggedNode(this.dragging, prev2);
    if (scroll == "reset") {
      this.dom.scrollTop = 0;
    } else if (scroll == "to selection") {
      this.scrollToSelection();
    } else if (oldScrollPos) {
      resetScrollPos(oldScrollPos);
    }
  }
  /**
  @internal
  */
  scrollToSelection() {
    let startDOM = this.domSelectionRange().focusNode;
    if (this.someProp("handleScrollToSelection", (f2) => f2(this)))
      ;
    else if (this.state.selection instanceof NodeSelection) {
      let target = this.docView.domAfterPos(this.state.selection.from);
      if (target.nodeType == 1)
        scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
    } else {
      scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
    }
  }
  destroyPluginViews() {
    let view;
    while (view = this.pluginViews.pop())
      if (view.destroy)
        view.destroy();
  }
  updatePluginViews(prevState) {
    if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins;
      this.destroyPluginViews();
      for (let i2 = 0; i2 < this.directPlugins.length; i2++) {
        let plugin = this.directPlugins[i2];
        if (plugin.spec.view)
          this.pluginViews.push(plugin.spec.view(this));
      }
      for (let i2 = 0; i2 < this.state.plugins.length; i2++) {
        let plugin = this.state.plugins[i2];
        if (plugin.spec.view)
          this.pluginViews.push(plugin.spec.view(this));
      }
    } else {
      for (let i2 = 0; i2 < this.pluginViews.length; i2++) {
        let pluginView = this.pluginViews[i2];
        if (pluginView.update)
          pluginView.update(this, prevState);
      }
    }
  }
  updateDraggedNode(dragging, prev2) {
    let sel = dragging.node, found2 = -1;
    if (this.state.doc.nodeAt(sel.from) == sel.node) {
      found2 = sel.from;
    } else {
      let movedPos = sel.from + (this.state.doc.content.size - prev2.doc.content.size);
      let moved = movedPos > 0 && this.state.doc.nodeAt(movedPos);
      if (moved == sel.node)
        found2 = movedPos;
    }
    this.dragging = new Dragging(dragging.slice, dragging.move, found2 < 0 ? void 0 : NodeSelection.create(this.state.doc, found2));
  }
  someProp(propName, f2) {
    let prop = this._props && this._props[propName], value;
    if (prop != null && (value = f2 ? f2(prop) : prop))
      return value;
    for (let i2 = 0; i2 < this.directPlugins.length; i2++) {
      let prop2 = this.directPlugins[i2].props[propName];
      if (prop2 != null && (value = f2 ? f2(prop2) : prop2))
        return value;
    }
    let plugins = this.state.plugins;
    if (plugins)
      for (let i2 = 0; i2 < plugins.length; i2++) {
        let prop2 = plugins[i2].props[propName];
        if (prop2 != null && (value = f2 ? f2(prop2) : prop2))
          return value;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (ie$1) {
      let node2 = this.root.activeElement;
      if (node2 == this.dom)
        return true;
      if (!node2 || !this.dom.contains(node2))
        return false;
      while (node2 && this.dom != node2 && this.dom.contains(node2)) {
        if (node2.contentEditable == "false")
          return false;
        node2 = node2.parentElement;
      }
      return true;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop();
    if (this.editable)
      focusPreventScroll(this.dom);
    selectionToDOM(this);
    this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let cached = this._root;
    if (cached == null)
      for (let search = this.dom.parentNode; search; search = search.parentNode) {
        if (search.nodeType == 9 || search.nodeType == 11 && search.host) {
          if (!search.getSelection)
            Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
          return this._root = search;
        }
      }
    return cached || document;
  }
  /**
  When an existing editor view is moved to a new document or
  shadow tree, call this to make it recompute its root.
  */
  updateRoot() {
    this._root = null;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(coords) {
    return posAtCoords(this, coords);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(pos, side = 1) {
    return coordsAtPos(this, pos, side);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(pos, side = 0) {
    return this.docView.domFromPos(pos, side);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(pos) {
    let desc = this.docView.descAt(pos);
    return desc ? desc.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(node2, offset2, bias = -1) {
    let pos = this.docView.posFromDOM(node2, offset2, bias);
    if (pos == null)
      throw new RangeError("DOM position not inside the editor");
    return pos;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(dir, state) {
    return endOfTextblock(this, state || this.state, dir);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(html, event) {
    return doPaste(this, "", html, false, event || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(text, event) {
    return doPaste(this, text, null, true, event || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    if (!this.docView)
      return;
    destroyInput(this);
    this.destroyPluginViews();
    if (this.mounted) {
      this.docView.update(this.state.doc, [], viewDecorations(this), this);
      this.dom.textContent = "";
    } else if (this.dom.parentNode) {
      this.dom.parentNode.removeChild(this.dom);
    }
    this.docView.destroy();
    this.docView = null;
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(event) {
    return dispatchEvent(this, event);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(tr2) {
    let dispatchTransaction = this._props.dispatchTransaction;
    if (dispatchTransaction)
      dispatchTransaction.call(this, tr2);
    else
      this.updateState(this.state.apply(tr2));
  }
  /**
  @internal
  */
  domSelectionRange() {
    return safari && this.root.nodeType === 11 && deepActiveElement(this.dom.ownerDocument) == this.dom ? safariShadowSelectionRange(this) : this.domSelection();
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
}
function computeDocDeco(view) {
  let attrs = /* @__PURE__ */ Object.create(null);
  attrs.class = "ProseMirror";
  attrs.contenteditable = String(view.editable);
  view.someProp("attributes", (value) => {
    if (typeof value == "function")
      value = value(view.state);
    if (value)
      for (let attr in value) {
        if (attr == "class")
          attrs.class += " " + value[attr];
        else if (attr == "style")
          attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
        else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
          attrs[attr] = String(value[attr]);
      }
  });
  if (!attrs.translate)
    attrs.translate = "no";
  return [Decoration.node(0, view.state.doc.content.size, attrs)];
}
function updateCursorWrapper(view) {
  if (view.markCursor) {
    let dom = document.createElement("img");
    dom.className = "ProseMirror-separator";
    dom.setAttribute("mark-placeholder", "true");
    dom.setAttribute("alt", "");
    view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
  } else {
    view.cursorWrapper = null;
  }
}
function getEditable(view) {
  return !view.someProp("editable", (value) => value(view.state) === false);
}
function selectionContextChanged(sel1, sel2) {
  let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
}
function buildNodeViews(view) {
  let result = /* @__PURE__ */ Object.create(null);
  function add2(obj) {
    for (let prop in obj)
      if (!Object.prototype.hasOwnProperty.call(result, prop))
        result[prop] = obj[prop];
  }
  view.someProp("nodeViews", add2);
  view.someProp("markViews", add2);
  return result;
}
function changedNodeViews(a4, b3) {
  let nA = 0, nB = 0;
  for (let prop in a4) {
    if (a4[prop] != b3[prop])
      return true;
    nA++;
  }
  for (let _2 in b3)
    nB++;
  return nA != nB;
}
function checkStateComponent(plugin) {
  if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift$2 = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac$1 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var i2 = 0; i2 < 10; i2++)
  base[48 + i2] = base[96 + i2] = String(i2);
for (var i2 = 1; i2 <= 24; i2++)
  base[i2 + 111] = "F" + i2;
for (var i2 = 65; i2 <= 90; i2++) {
  base[i2] = String.fromCharCode(i2 + 32);
  shift$2[i2] = String.fromCharCode(i2);
}
for (var code in base)
  if (!shift$2.hasOwnProperty(code))
    shift$2[code] = base[code];
function keyName(event) {
  var ignoreKey = mac$1 && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift$2 : base)[event.keyCode] || event.key || "Unidentified";
  if (name == "Esc")
    name = "Escape";
  if (name == "Del")
    name = "Delete";
  if (name == "Left")
    name = "ArrowLeft";
  if (name == "Up")
    name = "ArrowUp";
  if (name == "Right")
    name = "ArrowRight";
  if (name == "Down")
    name = "ArrowDown";
  return name;
}
const mac = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
function normalizeKeyName$1(name) {
  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift2, meta;
  for (let i2 = 0; i2 < parts.length - 1; i2++) {
    let mod = parts[i2];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (mac)
        meta = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function normalize(map2) {
  let copy2 = /* @__PURE__ */ Object.create(null);
  for (let prop in map2)
    copy2[normalizeKeyName$1(prop)] = map2[prop];
  return copy2;
}
function modifiers(name, event, shift2 = true) {
  if (event.altKey)
    name = "Alt-" + name;
  if (event.ctrlKey)
    name = "Ctrl-" + name;
  if (event.metaKey)
    name = "Meta-" + name;
  if (shift2 && event.shiftKey)
    name = "Shift-" + name;
  return name;
}
function keymap(bindings) {
  return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
}
function keydownHandler(bindings) {
  let map2 = normalize(bindings);
  return function(view, event) {
    let name = keyName(event), baseName, direct = map2[modifiers(name, event)];
    if (direct && direct(view.state, view.dispatch, view))
      return true;
    if (name.length == 1 && name != " ") {
      if (event.shiftKey) {
        let noShift = map2[modifiers(name, event, false)];
        if (noShift && noShift(view.state, view.dispatch, view))
          return true;
      }
      if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) && (baseName = base[event.keyCode]) && baseName != name) {
        let fromCode = map2[modifiers(baseName, event)];
        if (fromCode && fromCode(view.state, view.dispatch, view))
          return true;
      }
    }
    return false;
  };
}
const deleteSelection$1 = (state, dispatch) => {
  if (state.selection.empty)
    return false;
  if (dispatch)
    dispatch(state.tr.deleteSelection().scrollIntoView());
  return true;
};
function atBlockStart(state, view) {
  let { $cursor } = state.selection;
  if (!$cursor || (view ? !view.endOfTextblock("backward", state) : $cursor.parentOffset > 0))
    return null;
  return $cursor;
}
const joinBackward$1 = (state, dispatch, view) => {
  let $cursor = atBlockStart(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutBefore($cursor);
  if (!$cut) {
    let range = $cursor.blockRange(), target = range && liftTarget(range);
    if (target == null)
      return false;
    if (dispatch)
      dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  }
  let before = $cut.nodeBefore;
  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
    return true;
  if ($cursor.parent.content.size == 0 && (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
    if (delStep && delStep.slice.size < delStep.to - delStep.from) {
      if (dispatch) {
        let tr2 = state.tr.step(delStep);
        tr2.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr2.doc.resolve(tr2.mapping.map($cut.pos, -1)), -1) : NodeSelection.create(tr2.doc, $cut.pos - before.nodeSize));
        dispatch(tr2.scrollIntoView());
      }
      return true;
    }
  }
  if (before.isAtom && $cut.depth == $cursor.depth - 1) {
    if (dispatch)
      dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
    return true;
  }
  return false;
};
const joinTextblockBackward$1 = (state, dispatch, view) => {
  let $cursor = atBlockStart(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutBefore($cursor);
  return $cut ? joinTextblocksAround(state, $cut, dispatch) : false;
};
const joinTextblockForward$1 = (state, dispatch, view) => {
  let $cursor = atBlockEnd(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutAfter($cursor);
  return $cut ? joinTextblocksAround(state, $cut, dispatch) : false;
};
function joinTextblocksAround(state, $cut, dispatch) {
  let before = $cut.nodeBefore, beforeText = before, beforePos = $cut.pos - 1;
  for (; !beforeText.isTextblock; beforePos--) {
    if (beforeText.type.spec.isolating)
      return false;
    let child = beforeText.lastChild;
    if (!child)
      return false;
    beforeText = child;
  }
  let after = $cut.nodeAfter, afterText = after, afterPos = $cut.pos + 1;
  for (; !afterText.isTextblock; afterPos++) {
    if (afterText.type.spec.isolating)
      return false;
    let child = afterText.firstChild;
    if (!child)
      return false;
    afterText = child;
  }
  let step = replaceStep(state.doc, beforePos, afterPos, Slice.empty);
  if (!step || step.from != beforePos || step instanceof ReplaceStep && step.slice.size >= afterPos - beforePos)
    return false;
  if (dispatch) {
    let tr2 = state.tr.step(step);
    tr2.setSelection(TextSelection.create(tr2.doc, beforePos));
    dispatch(tr2.scrollIntoView());
  }
  return true;
}
function textblockAt(node2, side, only = false) {
  for (let scan = node2; scan; scan = side == "start" ? scan.firstChild : scan.lastChild) {
    if (scan.isTextblock)
      return true;
    if (only && scan.childCount != 1)
      return false;
  }
  return false;
}
const selectNodeBackward$1 = (state, dispatch, view) => {
  let { $head, empty: empty2 } = state.selection, $cut = $head;
  if (!empty2)
    return false;
  if ($head.parent.isTextblock) {
    if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
      return false;
    $cut = findCutBefore($head);
  }
  let node2 = $cut && $cut.nodeBefore;
  if (!node2 || !NodeSelection.isSelectable(node2))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node2.nodeSize)).scrollIntoView());
  return true;
};
function findCutBefore($pos) {
  if (!$pos.parent.type.spec.isolating)
    for (let i2 = $pos.depth - 1; i2 >= 0; i2--) {
      if ($pos.index(i2) > 0)
        return $pos.doc.resolve($pos.before(i2 + 1));
      if ($pos.node(i2).type.spec.isolating)
        break;
    }
  return null;
}
function atBlockEnd(state, view) {
  let { $cursor } = state.selection;
  if (!$cursor || (view ? !view.endOfTextblock("forward", state) : $cursor.parentOffset < $cursor.parent.content.size))
    return null;
  return $cursor;
}
const joinForward$1 = (state, dispatch, view) => {
  let $cursor = atBlockEnd(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutAfter($cursor);
  if (!$cut)
    return false;
  let after = $cut.nodeAfter;
  if (deleteBarrier(state, $cut, dispatch))
    return true;
  if ($cursor.parent.content.size == 0 && (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
    if (delStep && delStep.slice.size < delStep.to - delStep.from) {
      if (dispatch) {
        let tr2 = state.tr.step(delStep);
        tr2.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr2.doc.resolve(tr2.mapping.map($cut.pos)), 1) : NodeSelection.create(tr2.doc, tr2.mapping.map($cut.pos)));
        dispatch(tr2.scrollIntoView());
      }
      return true;
    }
  }
  if (after.isAtom && $cut.depth == $cursor.depth - 1) {
    if (dispatch)
      dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
    return true;
  }
  return false;
};
const selectNodeForward$1 = (state, dispatch, view) => {
  let { $head, empty: empty2 } = state.selection, $cut = $head;
  if (!empty2)
    return false;
  if ($head.parent.isTextblock) {
    if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
      return false;
    $cut = findCutAfter($head);
  }
  let node2 = $cut && $cut.nodeAfter;
  if (!node2 || !NodeSelection.isSelectable(node2))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
  return true;
};
function findCutAfter($pos) {
  if (!$pos.parent.type.spec.isolating)
    for (let i2 = $pos.depth - 1; i2 >= 0; i2--) {
      let parent = $pos.node(i2);
      if ($pos.index(i2) + 1 < parent.childCount)
        return $pos.doc.resolve($pos.after(i2 + 1));
      if (parent.type.spec.isolating)
        break;
    }
  return null;
}
const joinUp$1 = (state, dispatch) => {
  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;
  if (nodeSel) {
    if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
      return false;
    point = sel.from;
  } else {
    point = joinPoint(state.doc, sel.from, -1);
    if (point == null)
      return false;
  }
  if (dispatch) {
    let tr2 = state.tr.join(point);
    if (nodeSel)
      tr2.setSelection(NodeSelection.create(tr2.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
    dispatch(tr2.scrollIntoView());
  }
  return true;
};
const joinDown$1 = (state, dispatch) => {
  let sel = state.selection, point;
  if (sel instanceof NodeSelection) {
    if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
      return false;
    point = sel.to;
  } else {
    point = joinPoint(state.doc, sel.to, 1);
    if (point == null)
      return false;
  }
  if (dispatch)
    dispatch(state.tr.join(point).scrollIntoView());
  return true;
};
const lift$1 = (state, dispatch) => {
  let { $from, $to } = state.selection;
  let range = $from.blockRange($to), target = range && liftTarget(range);
  if (target == null)
    return false;
  if (dispatch)
    dispatch(state.tr.lift(range, target).scrollIntoView());
  return true;
};
const newlineInCode$1 = (state, dispatch) => {
  let { $head, $anchor } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
    return false;
  if (dispatch)
    dispatch(state.tr.insertText("\n").scrollIntoView());
  return true;
};
function defaultBlockAt$1(match2) {
  for (let i2 = 0; i2 < match2.edgeCount; i2++) {
    let { type } = match2.edge(i2);
    if (type.isTextblock && !type.hasRequiredAttrs())
      return type;
  }
  return null;
}
const exitCode$1 = (state, dispatch) => {
  let { $head, $anchor } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
    return false;
  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt$1(above.contentMatchAt(after));
  if (!type || !above.canReplaceWith(after, after, type))
    return false;
  if (dispatch) {
    let pos = $head.after(), tr2 = state.tr.replaceWith(pos, pos, type.createAndFill());
    tr2.setSelection(Selection.near(tr2.doc.resolve(pos), 1));
    dispatch(tr2.scrollIntoView());
  }
  return true;
};
const createParagraphNear$1 = (state, dispatch) => {
  let sel = state.selection, { $from, $to } = sel;
  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
    return false;
  let type = defaultBlockAt$1($to.parent.contentMatchAt($to.indexAfter()));
  if (!type || !type.isTextblock)
    return false;
  if (dispatch) {
    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
    let tr2 = state.tr.insert(side, type.createAndFill());
    tr2.setSelection(TextSelection.create(tr2.doc, side + 1));
    dispatch(tr2.scrollIntoView());
  }
  return true;
};
const liftEmptyBlock$1 = (state, dispatch) => {
  let { $cursor } = state.selection;
  if (!$cursor || $cursor.parent.content.size)
    return false;
  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
    let before = $cursor.before();
    if (canSplit(state.doc, before)) {
      if (dispatch)
        dispatch(state.tr.split(before).scrollIntoView());
      return true;
    }
  }
  let range = $cursor.blockRange(), target = range && liftTarget(range);
  if (target == null)
    return false;
  if (dispatch)
    dispatch(state.tr.lift(range, target).scrollIntoView());
  return true;
};
const selectParentNode$1 = (state, dispatch) => {
  let { $from, to } = state.selection, pos;
  let same = $from.sharedDepth(to);
  if (same == 0)
    return false;
  pos = $from.before(same);
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
  return true;
};
function joinMaybeClear(state, $pos, dispatch) {
  let before = $pos.nodeBefore, after = $pos.nodeAfter, index2 = $pos.index();
  if (!before || !after || !before.type.compatibleContent(after.type))
    return false;
  if (!before.content.size && $pos.parent.canReplace(index2 - 1, index2)) {
    if (dispatch)
      dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
    return true;
  }
  if (!$pos.parent.canReplace(index2, index2 + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
    return false;
  if (dispatch)
    dispatch(state.tr.clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount)).join($pos.pos).scrollIntoView());
  return true;
}
function deleteBarrier(state, $cut, dispatch) {
  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match2;
  if (before.type.spec.isolating || after.type.spec.isolating)
    return false;
  if (joinMaybeClear(state, $cut, dispatch))
    return true;
  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
  if (canDelAfter && (conn = (match2 = before.contentMatchAt(before.childCount)).findWrapping(after.type)) && match2.matchType(conn[0] || after.type).validEnd) {
    if (dispatch) {
      let end2 = $cut.pos + after.nodeSize, wrap2 = Fragment.empty;
      for (let i2 = conn.length - 1; i2 >= 0; i2--)
        wrap2 = Fragment.from(conn[i2].create(null, wrap2));
      wrap2 = Fragment.from(before.copy(wrap2));
      let tr2 = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end2, $cut.pos, end2, new Slice(wrap2, 1, 0), conn.length, true));
      let joinAt = end2 + 2 * conn.length;
      if (canJoin(tr2.doc, joinAt))
        tr2.join(joinAt);
      dispatch(tr2.scrollIntoView());
    }
    return true;
  }
  let selAfter = Selection.findFrom($cut, 1);
  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
  if (target != null && target >= $cut.depth) {
    if (dispatch)
      dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  }
  if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
    let at2 = before, wrap2 = [];
    for (; ; ) {
      wrap2.push(at2);
      if (at2.isTextblock)
        break;
      at2 = at2.lastChild;
    }
    let afterText = after, afterDepth = 1;
    for (; !afterText.isTextblock; afterText = afterText.firstChild)
      afterDepth++;
    if (at2.canReplace(at2.childCount, at2.childCount, afterText.content)) {
      if (dispatch) {
        let end2 = Fragment.empty;
        for (let i2 = wrap2.length - 1; i2 >= 0; i2--)
          end2 = Fragment.from(wrap2[i2].copy(end2));
        let tr2 = state.tr.step(new ReplaceAroundStep($cut.pos - wrap2.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end2, wrap2.length, 0), 0, true));
        dispatch(tr2.scrollIntoView());
      }
      return true;
    }
  }
  return false;
}
function selectTextblockSide(side) {
  return function(state, dispatch) {
    let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
    let depth = $pos.depth;
    while ($pos.node(depth).isInline) {
      if (!depth)
        return false;
      depth--;
    }
    if (!$pos.node(depth).isTextblock)
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
    return true;
  };
}
const selectTextblockStart$1 = selectTextblockSide(-1);
const selectTextblockEnd$1 = selectTextblockSide(1);
function wrapIn$1(nodeType, attrs = null) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
    if (!wrapping)
      return false;
    if (dispatch)
      dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
    return true;
  };
}
function setBlockType(nodeType, attrs = null) {
  return function(state, dispatch) {
    let applicable = false;
    for (let i2 = 0; i2 < state.selection.ranges.length && !applicable; i2++) {
      let { $from: { pos: from3 }, $to: { pos: to } } = state.selection.ranges[i2];
      state.doc.nodesBetween(from3, to, (node2, pos) => {
        if (applicable)
          return false;
        if (!node2.isTextblock || node2.hasMarkup(nodeType, attrs))
          return;
        if (node2.type == nodeType) {
          applicable = true;
        } else {
          let $pos = state.doc.resolve(pos), index2 = $pos.index();
          applicable = $pos.parent.canReplaceWith(index2, index2 + 1, nodeType);
        }
      });
    }
    if (!applicable)
      return false;
    if (dispatch) {
      let tr2 = state.tr;
      for (let i2 = 0; i2 < state.selection.ranges.length; i2++) {
        let { $from: { pos: from3 }, $to: { pos: to } } = state.selection.ranges[i2];
        tr2.setBlockType(from3, to, nodeType, attrs);
      }
      dispatch(tr2.scrollIntoView());
    }
    return true;
  };
}
typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
function wrapInList$1(listType, attrs = null) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to), doJoin = false, outerRange = range;
    if (!range)
      return false;
    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
      if ($from.index(range.depth - 1) == 0)
        return false;
      let $insert = state.doc.resolve(range.start - 2);
      outerRange = new NodeRange($insert, $insert, range.depth);
      if (range.endIndex < range.parent.childCount)
        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
      doJoin = true;
    }
    let wrap2 = findWrapping(outerRange, listType, attrs, range);
    if (!wrap2)
      return false;
    if (dispatch)
      dispatch(doWrapInList(state.tr, range, wrap2, doJoin, listType).scrollIntoView());
    return true;
  };
}
function doWrapInList(tr2, range, wrappers, joinBefore, listType) {
  let content = Fragment.empty;
  for (let i2 = wrappers.length - 1; i2 >= 0; i2--)
    content = Fragment.from(wrappers[i2].type.create(wrappers[i2].attrs, content));
  tr2.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
  let found2 = 0;
  for (let i2 = 0; i2 < wrappers.length; i2++)
    if (wrappers[i2].type == listType)
      found2 = i2 + 1;
  let splitDepth = wrappers.length - found2;
  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
  for (let i2 = range.startIndex, e3 = range.endIndex, first2 = true; i2 < e3; i2++, first2 = false) {
    if (!first2 && canSplit(tr2.doc, splitPos, splitDepth)) {
      tr2.split(splitPos, splitDepth);
      splitPos += 2 * splitDepth;
    }
    splitPos += parent.child(i2).nodeSize;
  }
  return tr2;
}
function liftListItem$1(itemType) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to, (node2) => node2.childCount > 0 && node2.firstChild.type == itemType);
    if (!range)
      return false;
    if (!dispatch)
      return true;
    if ($from.node(range.depth - 1).type == itemType)
      return liftToOuterList(state, dispatch, itemType, range);
    else
      return liftOutOfList(state, dispatch, range);
  };
}
function liftToOuterList(state, dispatch, itemType, range) {
  let tr2 = state.tr, end2 = range.end, endOfList = range.$to.end(range.depth);
  if (end2 < endOfList) {
    tr2.step(new ReplaceAroundStep(end2 - 1, endOfList, end2, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
    range = new NodeRange(tr2.doc.resolve(range.$from.pos), tr2.doc.resolve(endOfList), range.depth);
  }
  const target = liftTarget(range);
  if (target == null)
    return false;
  tr2.lift(range, target);
  let after = tr2.mapping.map(end2, -1) - 1;
  if (canJoin(tr2.doc, after))
    tr2.join(after);
  dispatch(tr2.scrollIntoView());
  return true;
}
function liftOutOfList(state, dispatch, range) {
  let tr2 = state.tr, list = range.parent;
  for (let pos = range.end, i2 = range.endIndex - 1, e3 = range.startIndex; i2 > e3; i2--) {
    pos -= list.child(i2).nodeSize;
    tr2.delete(pos - 1, pos + 1);
  }
  let $start = tr2.doc.resolve(range.start), item = $start.nodeAfter;
  if (tr2.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
    return false;
  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
  let parent = $start.node(-1), indexBefore = $start.index(-1);
  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
    return false;
  let start2 = $start.pos, end2 = start2 + item.nodeSize;
  tr2.step(new ReplaceAroundStep(start2 - (atStart ? 1 : 0), end2 + (atEnd ? 1 : 0), start2 + 1, end2 - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))).append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
  dispatch(tr2.scrollIntoView());
  return true;
}
function sinkListItem$1(itemType) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to, (node2) => node2.childCount > 0 && node2.firstChild.type == itemType);
    if (!range)
      return false;
    let startIndex = range.startIndex;
    if (startIndex == 0)
      return false;
    let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
    if (nodeBefore.type != itemType)
      return false;
    if (dispatch) {
      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
      let inner = Fragment.from(nestedBefore ? itemType.create() : null);
      let slice3 = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
      let before = range.start, after = range.end;
      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice3, 1, true)).scrollIntoView());
    }
    return true;
  };
}
function createChainableState(config) {
  const { state, transaction } = config;
  let { selection } = transaction;
  let { doc: doc2 } = transaction;
  let { storedMarks } = transaction;
  return {
    ...state,
    apply: state.apply.bind(state),
    applyTransaction: state.applyTransaction.bind(state),
    plugins: state.plugins,
    schema: state.schema,
    reconfigure: state.reconfigure.bind(state),
    toJSON: state.toJSON.bind(state),
    get storedMarks() {
      return storedMarks;
    },
    get selection() {
      return selection;
    },
    get doc() {
      return doc2;
    },
    get tr() {
      selection = transaction.selection;
      doc2 = transaction.doc;
      storedMarks = transaction.storedMarks;
      return transaction;
    }
  };
}
class CommandManager {
  constructor(props) {
    this.editor = props.editor;
    this.rawCommands = this.editor.extensionManager.commands;
    this.customState = props.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands, editor, state } = this;
    const { view } = editor;
    const { tr: tr2 } = state;
    const props = this.buildProps(tr2);
    return Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
      const method = (...args) => {
        const callback = command2(...args)(props);
        if (!tr2.getMeta("preventDispatch") && !this.hasCustomState) {
          view.dispatch(tr2);
        }
        return callback;
      };
      return [name, method];
    }));
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(startTr, shouldDispatch = true) {
    const { rawCommands, editor, state } = this;
    const { view } = editor;
    const callbacks = [];
    const hasStartTransaction = !!startTr;
    const tr2 = startTr || state.tr;
    const run2 = () => {
      if (!hasStartTransaction && shouldDispatch && !tr2.getMeta("preventDispatch") && !this.hasCustomState) {
        view.dispatch(tr2);
      }
      return callbacks.every((callback) => callback === true);
    };
    const chain = {
      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
        const chainedCommand = (...args) => {
          const props = this.buildProps(tr2, shouldDispatch);
          const callback = command2(...args)(props);
          callbacks.push(callback);
          return chain;
        };
        return [name, chainedCommand];
      })),
      run: run2
    };
    return chain;
  }
  createCan(startTr) {
    const { rawCommands, state } = this;
    const dispatch = false;
    const tr2 = startTr || state.tr;
    const props = this.buildProps(tr2, dispatch);
    const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
      return [name, (...args) => command2(...args)({ ...props, dispatch: void 0 })];
    }));
    return {
      ...formattedCommands,
      chain: () => this.createChain(tr2, dispatch)
    };
  }
  buildProps(tr2, shouldDispatch = true) {
    const { rawCommands, editor, state } = this;
    const { view } = editor;
    const props = {
      tr: tr2,
      editor,
      view,
      state: createChainableState({
        state,
        transaction: tr2
      }),
      dispatch: shouldDispatch ? () => void 0 : void 0,
      chain: () => this.createChain(tr2, shouldDispatch),
      can: () => this.createCan(tr2),
      get commands() {
        return Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
          return [name, (...args) => command2(...args)(props)];
        }));
      }
    };
    return props;
  }
}
class EventEmitter {
  constructor() {
    this.callbacks = {};
  }
  on(event, fn3) {
    if (!this.callbacks[event]) {
      this.callbacks[event] = [];
    }
    this.callbacks[event].push(fn3);
    return this;
  }
  emit(event, ...args) {
    const callbacks = this.callbacks[event];
    if (callbacks) {
      callbacks.forEach((callback) => callback.apply(this, args));
    }
    return this;
  }
  off(event, fn3) {
    const callbacks = this.callbacks[event];
    if (callbacks) {
      if (fn3) {
        this.callbacks[event] = callbacks.filter((callback) => callback !== fn3);
      } else {
        delete this.callbacks[event];
      }
    }
    return this;
  }
  removeAllListeners() {
    this.callbacks = {};
  }
}
function getExtensionField(extension, field, context) {
  if (extension.config[field] === void 0 && extension.parent) {
    return getExtensionField(extension.parent, field, context);
  }
  if (typeof extension.config[field] === "function") {
    const value = extension.config[field].bind({
      ...context,
      parent: extension.parent ? getExtensionField(extension.parent, field, context) : null
    });
    return value;
  }
  return extension.config[field];
}
function splitExtensions(extensions2) {
  const baseExtensions = extensions2.filter((extension) => extension.type === "extension");
  const nodeExtensions = extensions2.filter((extension) => extension.type === "node");
  const markExtensions = extensions2.filter((extension) => extension.type === "mark");
  return {
    baseExtensions,
    nodeExtensions,
    markExtensions
  };
}
function getAttributesFromExtensions(extensions2) {
  const extensionAttributes = [];
  const { nodeExtensions, markExtensions } = splitExtensions(extensions2);
  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];
  const defaultAttribute = {
    default: null,
    rendered: true,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: true,
    isRequired: false
  };
  extensions2.forEach((extension) => {
    const context = {
      name: extension.name,
      options: extension.options,
      storage: extension.storage
    };
    const addGlobalAttributes = getExtensionField(extension, "addGlobalAttributes", context);
    if (!addGlobalAttributes) {
      return;
    }
    const globalAttributes = addGlobalAttributes();
    globalAttributes.forEach((globalAttribute) => {
      globalAttribute.types.forEach((type) => {
        Object.entries(globalAttribute.attributes).forEach(([name, attribute]) => {
          extensionAttributes.push({
            type,
            name,
            attribute: {
              ...defaultAttribute,
              ...attribute
            }
          });
        });
      });
    });
  });
  nodeAndMarkExtensions.forEach((extension) => {
    const context = {
      name: extension.name,
      options: extension.options,
      storage: extension.storage
    };
    const addAttributes = getExtensionField(extension, "addAttributes", context);
    if (!addAttributes) {
      return;
    }
    const attributes = addAttributes();
    Object.entries(attributes).forEach(([name, attribute]) => {
      const mergedAttr = {
        ...defaultAttribute,
        ...attribute
      };
      if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === "function") {
        mergedAttr.default = mergedAttr.default();
      }
      if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === void 0) {
        delete mergedAttr.default;
      }
      extensionAttributes.push({
        type: extension.name,
        name,
        attribute: mergedAttr
      });
    });
  });
  return extensionAttributes;
}
function getNodeType(nameOrType, schema) {
  if (typeof nameOrType === "string") {
    if (!schema.nodes[nameOrType]) {
      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);
    }
    return schema.nodes[nameOrType];
  }
  return nameOrType;
}
function mergeAttributes(...objects) {
  return objects.filter((item) => !!item).reduce((items, item) => {
    const mergedAttributes = { ...items };
    Object.entries(item).forEach(([key, value]) => {
      const exists = mergedAttributes[key];
      if (!exists) {
        mergedAttributes[key] = value;
        return;
      }
      if (key === "class") {
        const valueClasses = value ? value.split(" ") : [];
        const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(" ") : [];
        const insertClasses = valueClasses.filter((valueClass) => !existingClasses.includes(valueClass));
        mergedAttributes[key] = [...existingClasses, ...insertClasses].join(" ");
      } else if (key === "style") {
        mergedAttributes[key] = [mergedAttributes[key], value].join("; ");
      } else {
        mergedAttributes[key] = value;
      }
    });
    return mergedAttributes;
  }, {});
}
function getRenderedAttributes(nodeOrMark, extensionAttributes) {
  return extensionAttributes.filter((item) => item.attribute.rendered).map((item) => {
    if (!item.attribute.renderHTML) {
      return {
        [item.name]: nodeOrMark.attrs[item.name]
      };
    }
    return item.attribute.renderHTML(nodeOrMark.attrs) || {};
  }).reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});
}
function isFunction(value) {
  return typeof value === "function";
}
function callOrReturn(value, context = void 0, ...props) {
  if (isFunction(value)) {
    if (context) {
      return value.bind(context)(...props);
    }
    return value(...props);
  }
  return value;
}
function isEmptyObject(value = {}) {
  return Object.keys(value).length === 0 && value.constructor === Object;
}
function fromString(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (value.match(/^[+-]?(?:\d*\.)?\d+$/)) {
    return Number(value);
  }
  if (value === "true") {
    return true;
  }
  if (value === "false") {
    return false;
  }
  return value;
}
function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {
  if (parseRule.style) {
    return parseRule;
  }
  return {
    ...parseRule,
    getAttrs: (node2) => {
      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node2) : parseRule.attrs;
      if (oldAttributes === false) {
        return false;
      }
      const newAttributes = extensionAttributes.reduce((items, item) => {
        const value = item.attribute.parseHTML ? item.attribute.parseHTML(node2) : fromString(node2.getAttribute(item.name));
        if (value === null || value === void 0) {
          return items;
        }
        return {
          ...items,
          [item.name]: value
        };
      }, {});
      return { ...oldAttributes, ...newAttributes };
    }
  };
}
function cleanUpSchemaItem(data) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(data).filter(([key, value]) => {
      if (key === "attrs" && isEmptyObject(value)) {
        return false;
      }
      return value !== null && value !== void 0;
    })
  );
}
function getSchemaByResolvedExtensions(extensions2, editor) {
  var _a;
  const allAttributes = getAttributesFromExtensions(extensions2);
  const { nodeExtensions, markExtensions } = splitExtensions(extensions2);
  const topNode = (_a = nodeExtensions.find((extension) => getExtensionField(extension, "topNode"))) === null || _a === void 0 ? void 0 : _a.name;
  const nodes = Object.fromEntries(nodeExtensions.map((extension) => {
    const extensionAttributes = allAttributes.filter((attribute) => attribute.type === extension.name);
    const context = {
      name: extension.name,
      options: extension.options,
      storage: extension.storage,
      editor
    };
    const extraNodeFields = extensions2.reduce((fields, e3) => {
      const extendNodeSchema = getExtensionField(e3, "extendNodeSchema", context);
      return {
        ...fields,
        ...extendNodeSchema ? extendNodeSchema(extension) : {}
      };
    }, {});
    const schema = cleanUpSchemaItem({
      ...extraNodeFields,
      content: callOrReturn(getExtensionField(extension, "content", context)),
      marks: callOrReturn(getExtensionField(extension, "marks", context)),
      group: callOrReturn(getExtensionField(extension, "group", context)),
      inline: callOrReturn(getExtensionField(extension, "inline", context)),
      atom: callOrReturn(getExtensionField(extension, "atom", context)),
      selectable: callOrReturn(getExtensionField(extension, "selectable", context)),
      draggable: callOrReturn(getExtensionField(extension, "draggable", context)),
      code: callOrReturn(getExtensionField(extension, "code", context)),
      defining: callOrReturn(getExtensionField(extension, "defining", context)),
      isolating: callOrReturn(getExtensionField(extension, "isolating", context)),
      attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute) => {
        var _a2;
        return [extensionAttribute.name, { default: (_a2 = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a2 === void 0 ? void 0 : _a2.default }];
      }))
    });
    const parseHTML = callOrReturn(getExtensionField(extension, "parseHTML", context));
    if (parseHTML) {
      schema.parseDOM = parseHTML.map((parseRule) => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
    }
    const renderHTML = getExtensionField(extension, "renderHTML", context);
    if (renderHTML) {
      schema.toDOM = (node2) => renderHTML({
        node: node2,
        HTMLAttributes: getRenderedAttributes(node2, extensionAttributes)
      });
    }
    const renderText = getExtensionField(extension, "renderText", context);
    if (renderText) {
      schema.toText = renderText;
    }
    return [extension.name, schema];
  }));
  const marks = Object.fromEntries(markExtensions.map((extension) => {
    const extensionAttributes = allAttributes.filter((attribute) => attribute.type === extension.name);
    const context = {
      name: extension.name,
      options: extension.options,
      storage: extension.storage,
      editor
    };
    const extraMarkFields = extensions2.reduce((fields, e3) => {
      const extendMarkSchema = getExtensionField(e3, "extendMarkSchema", context);
      return {
        ...fields,
        ...extendMarkSchema ? extendMarkSchema(extension) : {}
      };
    }, {});
    const schema = cleanUpSchemaItem({
      ...extraMarkFields,
      inclusive: callOrReturn(getExtensionField(extension, "inclusive", context)),
      excludes: callOrReturn(getExtensionField(extension, "excludes", context)),
      group: callOrReturn(getExtensionField(extension, "group", context)),
      spanning: callOrReturn(getExtensionField(extension, "spanning", context)),
      code: callOrReturn(getExtensionField(extension, "code", context)),
      attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute) => {
        var _a2;
        return [extensionAttribute.name, { default: (_a2 = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a2 === void 0 ? void 0 : _a2.default }];
      }))
    });
    const parseHTML = callOrReturn(getExtensionField(extension, "parseHTML", context));
    if (parseHTML) {
      schema.parseDOM = parseHTML.map((parseRule) => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
    }
    const renderHTML = getExtensionField(extension, "renderHTML", context);
    if (renderHTML) {
      schema.toDOM = (mark) => renderHTML({
        mark,
        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)
      });
    }
    return [extension.name, schema];
  }));
  return new Schema({
    topNode,
    nodes,
    marks
  });
}
function getSchemaTypeByName(name, schema) {
  return schema.nodes[name] || schema.marks[name] || null;
}
function isExtensionRulesEnabled(extension, enabled) {
  if (Array.isArray(enabled)) {
    return enabled.some((enabledExtension) => {
      const name = typeof enabledExtension === "string" ? enabledExtension : enabledExtension.name;
      return name === extension.name;
    });
  }
  return enabled;
}
const getTextContentFromNodes = ($from, maxMatch = 500) => {
  let textBefore = "";
  const sliceEndPos = $from.parentOffset;
  $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node2, pos, parent, index2) => {
    var _a, _b;
    const chunk = ((_b = (_a = node2.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {
      node: node2,
      pos,
      parent,
      index: index2
    })) || node2.textContent || "%leaf%";
    textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));
  });
  return textBefore;
};
function isRegExp(value) {
  return Object.prototype.toString.call(value) === "[object RegExp]";
}
class InputRule {
  constructor(config) {
    this.find = config.find;
    this.handler = config.handler;
  }
}
const inputRuleMatcherHandler = (text, find2) => {
  if (isRegExp(find2)) {
    return find2.exec(text);
  }
  const inputRuleMatch = find2(text);
  if (!inputRuleMatch) {
    return null;
  }
  const result = [inputRuleMatch.text];
  result.index = inputRuleMatch.index;
  result.input = text;
  result.data = inputRuleMatch.data;
  if (inputRuleMatch.replaceWith) {
    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {
      console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".');
    }
    result.push(inputRuleMatch.replaceWith);
  }
  return result;
};
function run$1$1(config) {
  var _a;
  const { editor, from: from3, to, text, rules, plugin } = config;
  const { view } = editor;
  if (view.composing) {
    return false;
  }
  const $from = view.state.doc.resolve(from3);
  if (
    // check for code node
    $from.parent.type.spec.code || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find((mark) => mark.type.spec.code))
  ) {
    return false;
  }
  let matched = false;
  const textBefore = getTextContentFromNodes($from) + text;
  rules.forEach((rule) => {
    if (matched) {
      return;
    }
    const match2 = inputRuleMatcherHandler(textBefore, rule.find);
    if (!match2) {
      return;
    }
    const tr2 = view.state.tr;
    const state = createChainableState({
      state: view.state,
      transaction: tr2
    });
    const range = {
      from: from3 - (match2[0].length - text.length),
      to
    };
    const { commands: commands2, chain, can } = new CommandManager({
      editor,
      state
    });
    const handler = rule.handler({
      state,
      range,
      match: match2,
      commands: commands2,
      chain,
      can
    });
    if (handler === null || !tr2.steps.length) {
      return;
    }
    tr2.setMeta(plugin, {
      transform: tr2,
      from: from3,
      to,
      text
    });
    view.dispatch(tr2);
    matched = true;
  });
  return matched;
}
function inputRulesPlugin(props) {
  const { editor, rules } = props;
  const plugin = new Plugin({
    state: {
      init() {
        return null;
      },
      apply(tr2, prev2) {
        const stored = tr2.getMeta(plugin);
        if (stored) {
          return stored;
        }
        return tr2.selectionSet || tr2.docChanged ? null : prev2;
      }
    },
    props: {
      handleTextInput(view, from3, to, text) {
        return run$1$1({
          editor,
          from: from3,
          to,
          text,
          rules,
          plugin
        });
      },
      handleDOMEvents: {
        compositionend: (view) => {
          setTimeout(() => {
            const { $cursor } = view.state.selection;
            if ($cursor) {
              run$1$1({
                editor,
                from: $cursor.pos,
                to: $cursor.pos,
                text: "",
                rules,
                plugin
              });
            }
          });
          return false;
        }
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(view, event) {
        if (event.key !== "Enter") {
          return false;
        }
        const { $cursor } = view.state.selection;
        if ($cursor) {
          return run$1$1({
            editor,
            from: $cursor.pos,
            to: $cursor.pos,
            text: "\n",
            rules,
            plugin
          });
        }
        return false;
      }
    },
    // @ts-ignore
    isInputRules: true
  });
  return plugin;
}
function isNumber(value) {
  return typeof value === "number";
}
class PasteRule {
  constructor(config) {
    this.find = config.find;
    this.handler = config.handler;
  }
}
const pasteRuleMatcherHandler = (text, find2, event) => {
  if (isRegExp(find2)) {
    return [...text.matchAll(find2)];
  }
  const matches2 = find2(text, event);
  if (!matches2) {
    return [];
  }
  return matches2.map((pasteRuleMatch) => {
    const result = [pasteRuleMatch.text];
    result.index = pasteRuleMatch.index;
    result.input = text;
    result.data = pasteRuleMatch.data;
    if (pasteRuleMatch.replaceWith) {
      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {
        console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".');
      }
      result.push(pasteRuleMatch.replaceWith);
    }
    return result;
  });
};
function run$2(config) {
  const { editor, state, from: from3, to, rule, pasteEvent, dropEvent } = config;
  const { commands: commands2, chain, can } = new CommandManager({
    editor,
    state
  });
  const handlers2 = [];
  state.doc.nodesBetween(from3, to, (node2, pos) => {
    if (!node2.isTextblock || node2.type.spec.code) {
      return;
    }
    const resolvedFrom = Math.max(from3, pos);
    const resolvedTo = Math.min(to, pos + node2.content.size);
    const textToMatch = node2.textBetween(resolvedFrom - pos, resolvedTo - pos, void 0, "￼");
    const matches2 = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);
    matches2.forEach((match2) => {
      if (match2.index === void 0) {
        return;
      }
      const start2 = resolvedFrom + match2.index + 1;
      const end2 = start2 + match2[0].length;
      const range = {
        from: state.tr.mapping.map(start2),
        to: state.tr.mapping.map(end2)
      };
      const handler = rule.handler({
        state,
        range,
        match: match2,
        commands: commands2,
        chain,
        can,
        pasteEvent,
        dropEvent
      });
      handlers2.push(handler);
    });
  });
  const success = handlers2.every((handler) => handler !== null);
  return success;
}
function pasteRulesPlugin(props) {
  const { editor, rules } = props;
  let dragSourceElement = null;
  let isPastedFromProseMirror = false;
  let isDroppedFromProseMirror = false;
  let pasteEvent = new ClipboardEvent("paste");
  let dropEvent = new DragEvent("drop");
  const plugins = rules.map((rule) => {
    return new Plugin({
      // we register a global drag handler to track the current drag source element
      view(view) {
        const handleDragstart = (event) => {
          var _a;
          dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? view.dom.parentElement : null;
        };
        window.addEventListener("dragstart", handleDragstart);
        return {
          destroy() {
            window.removeEventListener("dragstart", handleDragstart);
          }
        };
      },
      props: {
        handleDOMEvents: {
          drop: (view, event) => {
            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;
            dropEvent = event;
            return false;
          },
          paste: (_view, event) => {
            var _a;
            const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text/html");
            pasteEvent = event;
            isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes("data-pm-slice"));
            return false;
          }
        }
      },
      appendTransaction: (transactions, oldState, state) => {
        const transaction = transactions[0];
        const isPaste = transaction.getMeta("uiEvent") === "paste" && !isPastedFromProseMirror;
        const isDrop = transaction.getMeta("uiEvent") === "drop" && !isDroppedFromProseMirror;
        if (!isPaste && !isDrop) {
          return;
        }
        const from3 = oldState.doc.content.findDiffStart(state.doc.content);
        const to = oldState.doc.content.findDiffEnd(state.doc.content);
        if (!isNumber(from3) || !to || from3 === to.b) {
          return;
        }
        const tr2 = state.tr;
        const chainableState = createChainableState({
          state,
          transaction: tr2
        });
        const handler = run$2({
          editor,
          state: chainableState,
          from: Math.max(from3 - 1, 0),
          to: to.b - 1,
          rule,
          pasteEvent,
          dropEvent
        });
        if (!handler || !tr2.steps.length) {
          return;
        }
        dropEvent = new DragEvent("drop");
        pasteEvent = new ClipboardEvent("paste");
        return tr2;
      }
    });
  });
  return plugins;
}
function findDuplicates(items) {
  const filtered = items.filter((el, index2) => items.indexOf(el) !== index2);
  return [...new Set(filtered)];
}
class ExtensionManager {
  constructor(extensions2, editor) {
    this.splittableMarks = [];
    this.editor = editor;
    this.extensions = ExtensionManager.resolve(extensions2);
    this.schema = getSchemaByResolvedExtensions(this.extensions, editor);
    this.extensions.forEach((extension) => {
      var _a;
      this.editor.extensionStorage[extension.name] = extension.storage;
      const context = {
        name: extension.name,
        options: extension.options,
        storage: extension.storage,
        editor: this.editor,
        type: getSchemaTypeByName(extension.name, this.schema)
      };
      if (extension.type === "mark") {
        const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, "keepOnSplit", context))) !== null && _a !== void 0 ? _a : true;
        if (keepOnSplit) {
          this.splittableMarks.push(extension.name);
        }
      }
      const onBeforeCreate = getExtensionField(extension, "onBeforeCreate", context);
      if (onBeforeCreate) {
        this.editor.on("beforeCreate", onBeforeCreate);
      }
      const onCreate2 = getExtensionField(extension, "onCreate", context);
      if (onCreate2) {
        this.editor.on("create", onCreate2);
      }
      const onUpdate = getExtensionField(extension, "onUpdate", context);
      if (onUpdate) {
        this.editor.on("update", onUpdate);
      }
      const onSelectionUpdate = getExtensionField(extension, "onSelectionUpdate", context);
      if (onSelectionUpdate) {
        this.editor.on("selectionUpdate", onSelectionUpdate);
      }
      const onTransaction = getExtensionField(extension, "onTransaction", context);
      if (onTransaction) {
        this.editor.on("transaction", onTransaction);
      }
      const onFocus = getExtensionField(extension, "onFocus", context);
      if (onFocus) {
        this.editor.on("focus", onFocus);
      }
      const onBlur = getExtensionField(extension, "onBlur", context);
      if (onBlur) {
        this.editor.on("blur", onBlur);
      }
      const onDestroy2 = getExtensionField(extension, "onDestroy", context);
      if (onDestroy2) {
        this.editor.on("destroy", onDestroy2);
      }
    });
  }
  static resolve(extensions2) {
    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions2));
    const duplicatedNames = findDuplicates(resolvedExtensions.map((extension) => extension.name));
    if (duplicatedNames.length) {
      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map((item) => `'${item}'`).join(", ")}]. This can lead to issues.`);
    }
    return resolvedExtensions;
  }
  static flatten(extensions2) {
    return extensions2.map((extension) => {
      const context = {
        name: extension.name,
        options: extension.options,
        storage: extension.storage
      };
      const addExtensions = getExtensionField(extension, "addExtensions", context);
      if (addExtensions) {
        return [extension, ...this.flatten(addExtensions())];
      }
      return extension;
    }).flat(10);
  }
  static sort(extensions2) {
    const defaultPriority = 100;
    return extensions2.sort((a4, b3) => {
      const priorityA = getExtensionField(a4, "priority") || defaultPriority;
      const priorityB = getExtensionField(b3, "priority") || defaultPriority;
      if (priorityA > priorityB) {
        return -1;
      }
      if (priorityA < priorityB) {
        return 1;
      }
      return 0;
    });
  }
  get commands() {
    return this.extensions.reduce((commands2, extension) => {
      const context = {
        name: extension.name,
        options: extension.options,
        storage: extension.storage,
        editor: this.editor,
        type: getSchemaTypeByName(extension.name, this.schema)
      };
      const addCommands = getExtensionField(extension, "addCommands", context);
      if (!addCommands) {
        return commands2;
      }
      return {
        ...commands2,
        ...addCommands()
      };
    }, {});
  }
  get plugins() {
    const { editor } = this;
    const extensions2 = ExtensionManager.sort([...this.extensions].reverse());
    const inputRules = [];
    const pasteRules = [];
    const allPlugins = extensions2.map((extension) => {
      const context = {
        name: extension.name,
        options: extension.options,
        storage: extension.storage,
        editor,
        type: getSchemaTypeByName(extension.name, this.schema)
      };
      const plugins = [];
      const addKeyboardShortcuts = getExtensionField(extension, "addKeyboardShortcuts", context);
      let defaultBindings = {};
      if (extension.type === "mark" && extension.config.exitable) {
        defaultBindings.ArrowRight = () => Mark2.handleExit({ editor, mark: extension });
      }
      if (addKeyboardShortcuts) {
        const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {
          return [shortcut, () => method({ editor })];
        }));
        defaultBindings = { ...defaultBindings, ...bindings };
      }
      const keyMapPlugin = keymap(defaultBindings);
      plugins.push(keyMapPlugin);
      const addInputRules = getExtensionField(extension, "addInputRules", context);
      if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {
        inputRules.push(...addInputRules());
      }
      const addPasteRules = getExtensionField(extension, "addPasteRules", context);
      if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {
        pasteRules.push(...addPasteRules());
      }
      const addProseMirrorPlugins = getExtensionField(extension, "addProseMirrorPlugins", context);
      if (addProseMirrorPlugins) {
        const proseMirrorPlugins = addProseMirrorPlugins();
        plugins.push(...proseMirrorPlugins);
      }
      return plugins;
    }).flat();
    return [
      inputRulesPlugin({
        editor,
        rules: inputRules
      }),
      ...pasteRulesPlugin({
        editor,
        rules: pasteRules
      }),
      ...allPlugins
    ];
  }
  get attributes() {
    return getAttributesFromExtensions(this.extensions);
  }
  get nodeViews() {
    const { editor } = this;
    const { nodeExtensions } = splitExtensions(this.extensions);
    return Object.fromEntries(nodeExtensions.filter((extension) => !!getExtensionField(extension, "addNodeView")).map((extension) => {
      const extensionAttributes = this.attributes.filter((attribute) => attribute.type === extension.name);
      const context = {
        name: extension.name,
        options: extension.options,
        storage: extension.storage,
        editor,
        type: getNodeType(extension.name, this.schema)
      };
      const addNodeView = getExtensionField(extension, "addNodeView", context);
      if (!addNodeView) {
        return [];
      }
      const nodeview = (node2, view, getPos, decorations) => {
        const HTMLAttributes = getRenderedAttributes(node2, extensionAttributes);
        return addNodeView()({
          editor,
          node: node2,
          getPos,
          decorations,
          HTMLAttributes,
          extension
        });
      };
      return [extension.name, nodeview];
    }));
  }
}
function getType(value) {
  return Object.prototype.toString.call(value).slice(8, -1);
}
function isPlainObject(value) {
  if (getType(value) !== "Object") {
    return false;
  }
  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;
}
function mergeDeep(target, source) {
  const output = { ...target };
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isPlainObject(source[key])) {
        if (!(key in target)) {
          Object.assign(output, { [key]: source[key] });
        } else {
          output[key] = mergeDeep(target[key], source[key]);
        }
      } else {
        Object.assign(output, { [key]: source[key] });
      }
    });
  }
  return output;
}
class Extension {
  constructor(config = {}) {
    this.type = "extension";
    this.name = "extension";
    this.parent = null;
    this.child = null;
    this.config = {
      name: this.name,
      defaultOptions: {}
    };
    this.config = {
      ...this.config,
      ...config
    };
    this.name = this.config.name;
    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
    }
    this.options = this.config.defaultOptions;
    if (this.config.addOptions) {
      this.options = callOrReturn(getExtensionField(this, "addOptions", {
        name: this.name
      }));
    }
    this.storage = callOrReturn(getExtensionField(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(config = {}) {
    return new Extension(config);
  }
  configure(options = {}) {
    const extension = this.extend();
    extension.options = mergeDeep(this.options, options);
    extension.storage = callOrReturn(getExtensionField(extension, "addStorage", {
      name: extension.name,
      options: extension.options
    }));
    return extension;
  }
  extend(extendedConfig = {}) {
    const extension = new Extension({ ...this.config, ...extendedConfig });
    extension.parent = this;
    this.child = extension;
    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;
    if (extendedConfig.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
    }
    extension.options = callOrReturn(getExtensionField(extension, "addOptions", {
      name: extension.name
    }));
    extension.storage = callOrReturn(getExtensionField(extension, "addStorage", {
      name: extension.name,
      options: extension.options
    }));
    return extension;
  }
}
function getTextBetween(startNode, range, options) {
  const { from: from3, to } = range;
  const { blockSeparator = "\n\n", textSerializers = {} } = options || {};
  let text = "";
  let separated = true;
  startNode.nodesBetween(from3, to, (node2, pos, parent, index2) => {
    var _a;
    const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node2.type.name];
    if (textSerializer) {
      if (node2.isBlock && !separated) {
        text += blockSeparator;
        separated = true;
      }
      if (parent) {
        text += textSerializer({
          node: node2,
          pos,
          parent,
          index: index2,
          range
        });
      }
    } else if (node2.isText) {
      text += (_a = node2 === null || node2 === void 0 ? void 0 : node2.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from3, pos) - pos, to - pos);
      separated = false;
    } else if (node2.isBlock && !separated) {
      text += blockSeparator;
      separated = true;
    }
  });
  return text;
}
function getTextSerializersFromSchema(schema) {
  return Object.fromEntries(Object.entries(schema.nodes).filter(([, node2]) => node2.spec.toText).map(([name, node2]) => [name, node2.spec.toText]));
}
const ClipboardTextSerializer = Extension.create({
  name: "clipboardTextSerializer",
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor } = this;
            const { state, schema } = editor;
            const { doc: doc2, selection } = state;
            const { ranges } = selection;
            const from3 = Math.min(...ranges.map((range2) => range2.$from.pos));
            const to = Math.max(...ranges.map((range2) => range2.$to.pos));
            const textSerializers = getTextSerializersFromSchema(schema);
            const range = { from: from3, to };
            return getTextBetween(doc2, range, {
              textSerializers
            });
          }
        }
      })
    ];
  }
});
const blur = () => ({ editor, view }) => {
  requestAnimationFrame(() => {
    var _a;
    if (!editor.isDestroyed) {
      view.dom.blur();
      (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
    }
  });
  return true;
};
const clearContent = (emitUpdate = false) => ({ commands: commands2 }) => {
  return commands2.setContent("", emitUpdate);
};
const clearNodes = () => ({ state, tr: tr2, dispatch }) => {
  const { selection } = tr2;
  const { ranges } = selection;
  if (!dispatch) {
    return true;
  }
  ranges.forEach(({ $from, $to }) => {
    state.doc.nodesBetween($from.pos, $to.pos, (node2, pos) => {
      if (node2.type.isText) {
        return;
      }
      const { doc: doc2, mapping } = tr2;
      const $mappedFrom = doc2.resolve(mapping.map(pos));
      const $mappedTo = doc2.resolve(mapping.map(pos + node2.nodeSize));
      const nodeRange = $mappedFrom.blockRange($mappedTo);
      if (!nodeRange) {
        return;
      }
      const targetLiftDepth = liftTarget(nodeRange);
      if (node2.type.isTextblock) {
        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());
        tr2.setNodeMarkup(nodeRange.start, defaultType);
      }
      if (targetLiftDepth || targetLiftDepth === 0) {
        tr2.lift(nodeRange, targetLiftDepth);
      }
    });
  });
  return true;
};
const command = (fn3) => (props) => {
  return fn3(props);
};
const createParagraphNear = () => ({ state, dispatch }) => {
  return createParagraphNear$1(state, dispatch);
};
const cut = (originRange, targetPos) => ({ editor, tr: tr2 }) => {
  const { state } = editor;
  const contentSlice = state.doc.slice(originRange.from, originRange.to);
  tr2.deleteRange(originRange.from, originRange.to);
  const newPos = tr2.mapping.map(targetPos);
  tr2.insert(newPos, contentSlice.content);
  tr2.setSelection(new TextSelection(tr2.doc.resolve(newPos - 1)));
  return true;
};
const deleteCurrentNode = () => ({ tr: tr2, dispatch }) => {
  const { selection } = tr2;
  const currentNode = selection.$anchor.node();
  if (currentNode.content.size > 0) {
    return false;
  }
  const $pos = tr2.selection.$anchor;
  for (let depth = $pos.depth; depth > 0; depth -= 1) {
    const node2 = $pos.node(depth);
    if (node2.type === currentNode.type) {
      if (dispatch) {
        const from3 = $pos.before(depth);
        const to = $pos.after(depth);
        tr2.delete(from3, to).scrollIntoView();
      }
      return true;
    }
  }
  return false;
};
const deleteNode = (typeOrName) => ({ tr: tr2, state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  const $pos = tr2.selection.$anchor;
  for (let depth = $pos.depth; depth > 0; depth -= 1) {
    const node2 = $pos.node(depth);
    if (node2.type === type) {
      if (dispatch) {
        const from3 = $pos.before(depth);
        const to = $pos.after(depth);
        tr2.delete(from3, to).scrollIntoView();
      }
      return true;
    }
  }
  return false;
};
const deleteRange = (range) => ({ tr: tr2, dispatch }) => {
  const { from: from3, to } = range;
  if (dispatch) {
    tr2.delete(from3, to);
  }
  return true;
};
const deleteSelection = () => ({ state, dispatch }) => {
  return deleteSelection$1(state, dispatch);
};
const enter = () => ({ commands: commands2 }) => {
  return commands2.keyboardShortcut("Enter");
};
const exitCode = () => ({ state, dispatch }) => {
  return exitCode$1(state, dispatch);
};
function objectIncludes(object1, object2, options = { strict: true }) {
  const keys2 = Object.keys(object2);
  if (!keys2.length) {
    return true;
  }
  return keys2.every((key) => {
    if (options.strict) {
      return object2[key] === object1[key];
    }
    if (isRegExp(object2[key])) {
      return object2[key].test(object1[key]);
    }
    return object2[key] === object1[key];
  });
}
function findMarkInSet(marks, type, attributes = {}) {
  return marks.find((item) => {
    return item.type === type && objectIncludes(item.attrs, attributes);
  });
}
function isMarkInSet(marks, type, attributes = {}) {
  return !!findMarkInSet(marks, type, attributes);
}
function getMarkRange($pos, type, attributes = {}) {
  if (!$pos || !type) {
    return;
  }
  let start2 = $pos.parent.childAfter($pos.parentOffset);
  if ($pos.parentOffset === start2.offset && start2.offset !== 0) {
    start2 = $pos.parent.childBefore($pos.parentOffset);
  }
  if (!start2.node) {
    return;
  }
  const mark = findMarkInSet([...start2.node.marks], type, attributes);
  if (!mark) {
    return;
  }
  let startIndex = start2.index;
  let startPos = $pos.start() + start2.offset;
  let endIndex = startIndex + 1;
  let endPos = startPos + start2.node.nodeSize;
  findMarkInSet([...start2.node.marks], type, attributes);
  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {
    startIndex -= 1;
    startPos -= $pos.parent.child(startIndex).nodeSize;
  }
  while (endIndex < $pos.parent.childCount && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {
    endPos += $pos.parent.child(endIndex).nodeSize;
    endIndex += 1;
  }
  return {
    from: startPos,
    to: endPos
  };
}
function getMarkType(nameOrType, schema) {
  if (typeof nameOrType === "string") {
    if (!schema.marks[nameOrType]) {
      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);
    }
    return schema.marks[nameOrType];
  }
  return nameOrType;
}
const extendMarkRange = (typeOrName, attributes = {}) => ({ tr: tr2, state, dispatch }) => {
  const type = getMarkType(typeOrName, state.schema);
  const { doc: doc2, selection } = tr2;
  const { $from, from: from3, to } = selection;
  if (dispatch) {
    const range = getMarkRange($from, type, attributes);
    if (range && range.from <= from3 && range.to >= to) {
      const newSelection = TextSelection.create(doc2, range.from, range.to);
      tr2.setSelection(newSelection);
    }
  }
  return true;
};
const first = (commands2) => (props) => {
  const items = typeof commands2 === "function" ? commands2(props) : commands2;
  for (let i2 = 0; i2 < items.length; i2 += 1) {
    if (items[i2](props)) {
      return true;
    }
  }
  return false;
};
function isTextSelection(value) {
  return value instanceof TextSelection;
}
function minMax(value = 0, min2 = 0, max2 = 0) {
  return Math.min(Math.max(value, min2), max2);
}
function resolveFocusPosition(doc2, position2 = null) {
  if (!position2) {
    return null;
  }
  const selectionAtStart = Selection.atStart(doc2);
  const selectionAtEnd = Selection.atEnd(doc2);
  if (position2 === "start" || position2 === true) {
    return selectionAtStart;
  }
  if (position2 === "end") {
    return selectionAtEnd;
  }
  const minPos = selectionAtStart.from;
  const maxPos = selectionAtEnd.to;
  if (position2 === "all") {
    return TextSelection.create(doc2, minMax(0, minPos, maxPos), minMax(doc2.content.size, minPos, maxPos));
  }
  return TextSelection.create(doc2, minMax(position2, minPos, maxPos), minMax(position2, minPos, maxPos));
}
function isiOS() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
const focus = (position2 = null, options = {}) => ({ editor, view, tr: tr2, dispatch }) => {
  options = {
    scrollIntoView: true,
    ...options
  };
  const delayedFocus = () => {
    if (isiOS()) {
      view.dom.focus();
    }
    requestAnimationFrame(() => {
      if (!editor.isDestroyed) {
        view.focus();
        if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {
          editor.commands.scrollIntoView();
        }
      }
    });
  };
  if (view.hasFocus() && position2 === null || position2 === false) {
    return true;
  }
  if (dispatch && position2 === null && !isTextSelection(editor.state.selection)) {
    delayedFocus();
    return true;
  }
  const selection = resolveFocusPosition(tr2.doc, position2) || editor.state.selection;
  const isSameSelection = editor.state.selection.eq(selection);
  if (dispatch) {
    if (!isSameSelection) {
      tr2.setSelection(selection);
    }
    if (isSameSelection && tr2.storedMarks) {
      tr2.setStoredMarks(tr2.storedMarks);
    }
    delayedFocus();
  }
  return true;
};
const forEach = (items, fn3) => (props) => {
  return items.every((item, index2) => fn3(item, { ...props, index: index2 }));
};
const insertContent = (value, options) => ({ tr: tr2, commands: commands2 }) => {
  return commands2.insertContentAt({ from: tr2.selection.from, to: tr2.selection.to }, value, options);
};
const removeWhitespaces = (node2) => {
  const children = node2.childNodes;
  for (let i2 = children.length - 1; i2 >= 0; i2 -= 1) {
    const child = children[i2];
    if (child.nodeType === 3 && child.nodeValue && /^(\n\s\s|\n)$/.test(child.nodeValue)) {
      node2.removeChild(child);
    } else if (child.nodeType === 1) {
      removeWhitespaces(child);
    }
  }
  return node2;
};
function elementFromString(value) {
  const wrappedValue = `<body>${value}</body>`;
  const html = new window.DOMParser().parseFromString(wrappedValue, "text/html").body;
  return removeWhitespaces(html);
}
function createNodeFromContent(content, schema, options) {
  options = {
    slice: true,
    parseOptions: {},
    ...options
  };
  if (typeof content === "object" && content !== null) {
    try {
      if (Array.isArray(content) && content.length > 0) {
        return Fragment.fromArray(content.map((item) => schema.nodeFromJSON(item)));
      }
      return schema.nodeFromJSON(content);
    } catch (error) {
      console.warn("[tiptap warn]: Invalid content.", "Passed value:", content, "Error:", error);
      return createNodeFromContent("", schema, options);
    }
  }
  if (typeof content === "string") {
    const parser = DOMParser$1.fromSchema(schema);
    return options.slice ? parser.parseSlice(elementFromString(content), options.parseOptions).content : parser.parse(elementFromString(content), options.parseOptions);
  }
  return createNodeFromContent("", schema, options);
}
function selectionToInsertionEnd(tr2, startLen, bias) {
  const last = tr2.steps.length - 1;
  if (last < startLen) {
    return;
  }
  const step = tr2.steps[last];
  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {
    return;
  }
  const map2 = tr2.mapping.maps[last];
  let end2 = 0;
  map2.forEach((_from, _to, _newFrom, newTo) => {
    if (end2 === 0) {
      end2 = newTo;
    }
  });
  tr2.setSelection(Selection.near(tr2.doc.resolve(end2), bias));
}
const isFragment = (nodeOrFragment) => {
  return nodeOrFragment.toString().startsWith("<");
};
const insertContentAt = (position2, value, options) => ({ tr: tr2, dispatch, editor }) => {
  if (dispatch) {
    options = {
      parseOptions: {},
      updateSelection: true,
      ...options
    };
    const content = createNodeFromContent(value, editor.schema, {
      parseOptions: {
        preserveWhitespace: "full",
        ...options.parseOptions
      }
    });
    if (content.toString() === "<>") {
      return true;
    }
    let { from: from3, to } = typeof position2 === "number" ? { from: position2, to: position2 } : { from: position2.from, to: position2.to };
    let isOnlyTextContent = true;
    let isOnlyBlockContent = true;
    const nodes = isFragment(content) ? content : [content];
    nodes.forEach((node2) => {
      node2.check();
      isOnlyTextContent = isOnlyTextContent ? node2.isText && node2.marks.length === 0 : false;
      isOnlyBlockContent = isOnlyBlockContent ? node2.isBlock : false;
    });
    if (from3 === to && isOnlyBlockContent) {
      const { parent } = tr2.doc.resolve(from3);
      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;
      if (isEmptyTextBlock) {
        from3 -= 1;
        to += 1;
      }
    }
    if (isOnlyTextContent) {
      if (Array.isArray(value)) {
        tr2.insertText(value.map((v2) => v2.text || "").join(""), from3, to);
      } else if (typeof value === "object" && !!value && !!value.text) {
        tr2.insertText(value.text, from3, to);
      } else {
        tr2.insertText(value, from3, to);
      }
    } else {
      tr2.replaceWith(from3, to, content);
    }
    if (options.updateSelection) {
      selectionToInsertionEnd(tr2, tr2.steps.length - 1, -1);
    }
  }
  return true;
};
const joinUp = () => ({ state, dispatch }) => {
  return joinUp$1(state, dispatch);
};
const joinDown = () => ({ state, dispatch }) => {
  return joinDown$1(state, dispatch);
};
const joinBackward = () => ({ state, dispatch }) => {
  return joinBackward$1(state, dispatch);
};
const joinForward = () => ({ state, dispatch }) => {
  return joinForward$1(state, dispatch);
};
const joinItemBackward = () => ({ tr: tr2, state, dispatch }) => {
  try {
    const point = joinPoint(state.doc, state.selection.$from.pos, -1);
    if (point === null || point === void 0) {
      return false;
    }
    tr2.join(point, 2);
    if (dispatch) {
      dispatch(tr2);
    }
    return true;
  } catch {
    return false;
  }
};
const joinItemForward = () => ({ state, dispatch, tr: tr2 }) => {
  try {
    const point = joinPoint(state.doc, state.selection.$from.pos, 1);
    if (point === null || point === void 0) {
      return false;
    }
    tr2.join(point, 2);
    if (dispatch) {
      dispatch(tr2);
    }
    return true;
  } catch (e3) {
    return false;
  }
};
const joinTextblockBackward = () => ({ state, dispatch }) => {
  return joinTextblockBackward$1(state, dispatch);
};
const joinTextblockForward = () => ({ state, dispatch }) => {
  return joinTextblockForward$1(state, dispatch);
};
function isMacOS() {
  return typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
}
function normalizeKeyName(name) {
  const parts = name.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result === "Space") {
    result = " ";
  }
  let alt;
  let ctrl;
  let shift2;
  let meta;
  for (let i2 = 0; i2 < parts.length - 1; i2 += 1) {
    const mod = parts[i2];
    if (/^(cmd|meta|m)$/i.test(mod)) {
      meta = true;
    } else if (/^a(lt)?$/i.test(mod)) {
      alt = true;
    } else if (/^(c|ctrl|control)$/i.test(mod)) {
      ctrl = true;
    } else if (/^s(hift)?$/i.test(mod)) {
      shift2 = true;
    } else if (/^mod$/i.test(mod)) {
      if (isiOS() || isMacOS()) {
        meta = true;
      } else {
        ctrl = true;
      }
    } else {
      throw new Error(`Unrecognized modifier name: ${mod}`);
    }
  }
  if (alt) {
    result = `Alt-${result}`;
  }
  if (ctrl) {
    result = `Ctrl-${result}`;
  }
  if (meta) {
    result = `Meta-${result}`;
  }
  if (shift2) {
    result = `Shift-${result}`;
  }
  return result;
}
const keyboardShortcut = (name) => ({ editor, view, tr: tr2, dispatch }) => {
  const keys2 = normalizeKeyName(name).split(/-(?!$)/);
  const key = keys2.find((item) => !["Alt", "Ctrl", "Meta", "Shift"].includes(item));
  const event = new KeyboardEvent("keydown", {
    key: key === "Space" ? " " : key,
    altKey: keys2.includes("Alt"),
    ctrlKey: keys2.includes("Ctrl"),
    metaKey: keys2.includes("Meta"),
    shiftKey: keys2.includes("Shift"),
    bubbles: true,
    cancelable: true
  });
  const capturedTransaction = editor.captureTransaction(() => {
    view.someProp("handleKeyDown", (f2) => f2(view, event));
  });
  capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach((step) => {
    const newStep = step.map(tr2.mapping);
    if (newStep && dispatch) {
      tr2.maybeStep(newStep);
    }
  });
  return true;
};
function isNodeActive(state, typeOrName, attributes = {}) {
  const { from: from3, to, empty: empty2 } = state.selection;
  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;
  const nodeRanges = [];
  state.doc.nodesBetween(from3, to, (node2, pos) => {
    if (node2.isText) {
      return;
    }
    const relativeFrom = Math.max(from3, pos);
    const relativeTo = Math.min(to, pos + node2.nodeSize);
    nodeRanges.push({
      node: node2,
      from: relativeFrom,
      to: relativeTo
    });
  });
  const selectionRange = to - from3;
  const matchedNodeRanges = nodeRanges.filter((nodeRange) => {
    if (!type) {
      return true;
    }
    return type.name === nodeRange.node.type.name;
  }).filter((nodeRange) => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));
  if (empty2) {
    return !!matchedNodeRanges.length;
  }
  const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);
  return range >= selectionRange;
}
const lift = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  const isActive2 = isNodeActive(state, type, attributes);
  if (!isActive2) {
    return false;
  }
  return lift$1(state, dispatch);
};
const liftEmptyBlock = () => ({ state, dispatch }) => {
  return liftEmptyBlock$1(state, dispatch);
};
const liftListItem = (typeOrName) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return liftListItem$1(type)(state, dispatch);
};
const newlineInCode = () => ({ state, dispatch }) => {
  return newlineInCode$1(state, dispatch);
};
function getSchemaTypeNameByName(name, schema) {
  if (schema.nodes[name]) {
    return "node";
  }
  if (schema.marks[name]) {
    return "mark";
  }
  return null;
}
function deleteProps(obj, propOrProps) {
  const props = typeof propOrProps === "string" ? [propOrProps] : propOrProps;
  return Object.keys(obj).reduce((newObj, prop) => {
    if (!props.includes(prop)) {
      newObj[prop] = obj[prop];
    }
    return newObj;
  }, {});
}
const resetAttributes = (typeOrName, attributes) => ({ tr: tr2, state, dispatch }) => {
  let nodeType = null;
  let markType = null;
  const schemaType = getSchemaTypeNameByName(typeof typeOrName === "string" ? typeOrName : typeOrName.name, state.schema);
  if (!schemaType) {
    return false;
  }
  if (schemaType === "node") {
    nodeType = getNodeType(typeOrName, state.schema);
  }
  if (schemaType === "mark") {
    markType = getMarkType(typeOrName, state.schema);
  }
  if (dispatch) {
    tr2.selection.ranges.forEach((range) => {
      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node2, pos) => {
        if (nodeType && nodeType === node2.type) {
          tr2.setNodeMarkup(pos, void 0, deleteProps(node2.attrs, attributes));
        }
        if (markType && node2.marks.length) {
          node2.marks.forEach((mark) => {
            if (markType === mark.type) {
              tr2.addMark(pos, pos + node2.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));
            }
          });
        }
      });
    });
  }
  return true;
};
const scrollIntoView = () => ({ tr: tr2, dispatch }) => {
  if (dispatch) {
    tr2.scrollIntoView();
  }
  return true;
};
const selectAll = () => ({ tr: tr2, commands: commands2 }) => {
  return commands2.setTextSelection({
    from: 0,
    to: tr2.doc.content.size
  });
};
const selectNodeBackward = () => ({ state, dispatch }) => {
  return selectNodeBackward$1(state, dispatch);
};
const selectNodeForward = () => ({ state, dispatch }) => {
  return selectNodeForward$1(state, dispatch);
};
const selectParentNode = () => ({ state, dispatch }) => {
  return selectParentNode$1(state, dispatch);
};
const selectTextblockEnd = () => ({ state, dispatch }) => {
  return selectTextblockEnd$1(state, dispatch);
};
const selectTextblockStart = () => ({ state, dispatch }) => {
  return selectTextblockStart$1(state, dispatch);
};
function createDocument(content, schema, parseOptions = {}) {
  return createNodeFromContent(content, schema, { slice: false, parseOptions });
}
const setContent = (content, emitUpdate = false, parseOptions = {}) => ({ tr: tr2, editor, dispatch }) => {
  const { doc: doc2 } = tr2;
  const document2 = createDocument(content, editor.schema, parseOptions);
  if (dispatch) {
    tr2.replaceWith(0, doc2.content.size, document2).setMeta("preventUpdate", !emitUpdate);
  }
  return true;
};
function getMarkAttributes(state, typeOrName) {
  const type = getMarkType(typeOrName, state.schema);
  const { from: from3, to, empty: empty2 } = state.selection;
  const marks = [];
  if (empty2) {
    if (state.storedMarks) {
      marks.push(...state.storedMarks);
    }
    marks.push(...state.selection.$head.marks());
  } else {
    state.doc.nodesBetween(from3, to, (node2) => {
      marks.push(...node2.marks);
    });
  }
  const mark = marks.find((markItem) => markItem.type.name === type.name);
  if (!mark) {
    return {};
  }
  return { ...mark.attrs };
}
function combineTransactionSteps(oldDoc, transactions) {
  const transform = new Transform(oldDoc);
  transactions.forEach((transaction) => {
    transaction.steps.forEach((step) => {
      transform.step(step);
    });
  });
  return transform;
}
function defaultBlockAt(match2) {
  for (let i2 = 0; i2 < match2.edgeCount; i2 += 1) {
    const { type } = match2.edge(i2);
    if (type.isTextblock && !type.hasRequiredAttrs()) {
      return type;
    }
  }
  return null;
}
function findChildrenInRange(node2, range, predicate) {
  const nodesWithPos = [];
  node2.nodesBetween(range.from, range.to, (child, pos) => {
    if (predicate(child)) {
      nodesWithPos.push({
        node: child,
        pos
      });
    }
  });
  return nodesWithPos;
}
function findParentNodeClosestToPos($pos, predicate) {
  for (let i2 = $pos.depth; i2 > 0; i2 -= 1) {
    const node2 = $pos.node(i2);
    if (predicate(node2)) {
      return {
        pos: i2 > 0 ? $pos.before(i2) : 0,
        start: $pos.start(i2),
        depth: i2,
        node: node2
      };
    }
  }
}
function findParentNode(predicate) {
  return (selection) => findParentNodeClosestToPos(selection.$from, predicate);
}
function getHTMLFromFragment(fragment, schema) {
  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);
  const temporaryDocument = document.implementation.createHTMLDocument();
  const container = temporaryDocument.createElement("div");
  container.appendChild(documentFragment);
  return container.innerHTML;
}
function getText(node2, options) {
  const range = {
    from: 0,
    to: node2.content.size
  };
  return getTextBetween(node2, range, options);
}
function getNodeAttributes(state, typeOrName) {
  const type = getNodeType(typeOrName, state.schema);
  const { from: from3, to } = state.selection;
  const nodes = [];
  state.doc.nodesBetween(from3, to, (node3) => {
    nodes.push(node3);
  });
  const node2 = nodes.reverse().find((nodeItem) => nodeItem.type.name === type.name);
  if (!node2) {
    return {};
  }
  return { ...node2.attrs };
}
function getAttributes(state, typeOrName) {
  const schemaType = getSchemaTypeNameByName(typeof typeOrName === "string" ? typeOrName : typeOrName.name, state.schema);
  if (schemaType === "node") {
    return getNodeAttributes(state, typeOrName);
  }
  if (schemaType === "mark") {
    return getMarkAttributes(state, typeOrName);
  }
  return {};
}
function removeDuplicates(array, by = JSON.stringify) {
  const seen = {};
  return array.filter((item) => {
    const key = by(item);
    return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;
  });
}
function simplifyChangedRanges(changes) {
  const uniqueChanges = removeDuplicates(changes);
  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index2) => {
    const rest = uniqueChanges.filter((_2, i2) => i2 !== index2);
    return !rest.some((otherChange) => {
      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;
    });
  });
}
function getChangedRanges(transform) {
  const { mapping, steps: steps2 } = transform;
  const changes = [];
  mapping.maps.forEach((stepMap, index2) => {
    const ranges = [];
    if (!stepMap.ranges.length) {
      const { from: from3, to } = steps2[index2];
      if (from3 === void 0 || to === void 0) {
        return;
      }
      ranges.push({ from: from3, to });
    } else {
      stepMap.forEach((from3, to) => {
        ranges.push({ from: from3, to });
      });
    }
    ranges.forEach(({ from: from3, to }) => {
      const newStart = mapping.slice(index2).map(from3, -1);
      const newEnd = mapping.slice(index2).map(to);
      const oldStart = mapping.invert().map(newStart, -1);
      const oldEnd = mapping.invert().map(newEnd);
      changes.push({
        oldRange: {
          from: oldStart,
          to: oldEnd
        },
        newRange: {
          from: newStart,
          to: newEnd
        }
      });
    });
  });
  return simplifyChangedRanges(changes);
}
function getMarksBetween(from3, to, doc2) {
  const marks = [];
  if (from3 === to) {
    doc2.resolve(from3).marks().forEach((mark) => {
      const $pos = doc2.resolve(from3 - 1);
      const range = getMarkRange($pos, mark.type);
      if (!range) {
        return;
      }
      marks.push({
        mark,
        ...range
      });
    });
  } else {
    doc2.nodesBetween(from3, to, (node2, pos) => {
      if (!node2 || (node2 === null || node2 === void 0 ? void 0 : node2.nodeSize) === void 0) {
        return;
      }
      marks.push(...node2.marks.map((mark) => ({
        from: pos,
        to: pos + node2.nodeSize,
        mark
      })));
    });
  }
  return marks;
}
function getSplittedAttributes(extensionAttributes, typeName, attributes) {
  return Object.fromEntries(Object.entries(attributes).filter(([name]) => {
    const extensionAttribute = extensionAttributes.find((item) => {
      return item.type === typeName && item.name === name;
    });
    if (!extensionAttribute) {
      return false;
    }
    return extensionAttribute.attribute.keepOnSplit;
  }));
}
function isMarkActive(state, typeOrName, attributes = {}) {
  const { empty: empty2, ranges } = state.selection;
  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;
  if (empty2) {
    return !!(state.storedMarks || state.selection.$from.marks()).filter((mark) => {
      if (!type) {
        return true;
      }
      return type.name === mark.type.name;
    }).find((mark) => objectIncludes(mark.attrs, attributes, { strict: false }));
  }
  let selectionRange = 0;
  const markRanges = [];
  ranges.forEach(({ $from, $to }) => {
    const from3 = $from.pos;
    const to = $to.pos;
    state.doc.nodesBetween(from3, to, (node2, pos) => {
      if (!node2.isText && !node2.marks.length) {
        return;
      }
      const relativeFrom = Math.max(from3, pos);
      const relativeTo = Math.min(to, pos + node2.nodeSize);
      const range2 = relativeTo - relativeFrom;
      selectionRange += range2;
      markRanges.push(...node2.marks.map((mark) => ({
        mark,
        from: relativeFrom,
        to: relativeTo
      })));
    });
  });
  if (selectionRange === 0) {
    return false;
  }
  const matchedRange = markRanges.filter((markRange) => {
    if (!type) {
      return true;
    }
    return type.name === markRange.mark.type.name;
  }).filter((markRange) => objectIncludes(markRange.mark.attrs, attributes, { strict: false })).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
  const excludedRange = markRanges.filter((markRange) => {
    if (!type) {
      return true;
    }
    return markRange.mark.type !== type && markRange.mark.type.excludes(type);
  }).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
  const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;
  return range >= selectionRange;
}
function isActive(state, name, attributes = {}) {
  if (!name) {
    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);
  }
  const schemaType = getSchemaTypeNameByName(name, state.schema);
  if (schemaType === "node") {
    return isNodeActive(state, name, attributes);
  }
  if (schemaType === "mark") {
    return isMarkActive(state, name, attributes);
  }
  return false;
}
function isList(name, extensions2) {
  const { nodeExtensions } = splitExtensions(extensions2);
  const extension = nodeExtensions.find((item) => item.name === name);
  if (!extension) {
    return false;
  }
  const context = {
    name: extension.name,
    options: extension.options,
    storage: extension.storage
  };
  const group = callOrReturn(getExtensionField(extension, "group", context));
  if (typeof group !== "string") {
    return false;
  }
  return group.split(" ").includes("list");
}
function isNodeEmpty(node2) {
  var _a;
  const defaultContent = (_a = node2.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();
  const content = node2.toJSON();
  return JSON.stringify(defaultContent) === JSON.stringify(content);
}
function isNodeSelection(value) {
  return value instanceof NodeSelection;
}
function posToDOMRect(view, from3, to) {
  const minPos = 0;
  const maxPos = view.state.doc.content.size;
  const resolvedFrom = minMax(from3, minPos, maxPos);
  const resolvedEnd = minMax(to, minPos, maxPos);
  const start2 = view.coordsAtPos(resolvedFrom);
  const end2 = view.coordsAtPos(resolvedEnd, -1);
  const top2 = Math.min(start2.top, end2.top);
  const bottom2 = Math.max(start2.bottom, end2.bottom);
  const left2 = Math.min(start2.left, end2.left);
  const right2 = Math.max(start2.right, end2.right);
  const width = right2 - left2;
  const height = bottom2 - top2;
  const x3 = left2;
  const y4 = top2;
  const data = {
    top: top2,
    bottom: bottom2,
    left: left2,
    right: right2,
    width,
    height,
    x: x3,
    y: y4
  };
  return {
    ...data,
    toJSON: () => data
  };
}
function canSetMark(state, tr2, newMarkType) {
  var _a;
  const { selection } = tr2;
  let cursor2 = null;
  if (isTextSelection(selection)) {
    cursor2 = selection.$cursor;
  }
  if (cursor2) {
    const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor2.marks();
    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some((mark) => mark.type.excludes(newMarkType));
  }
  const { ranges } = selection;
  return ranges.some(({ $from, $to }) => {
    let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;
    state.doc.nodesBetween($from.pos, $to.pos, (node2, _pos, parent) => {
      if (someNodeSupportsMark) {
        return false;
      }
      if (node2.isInline) {
        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);
        const currentMarksAllowMarkType = !!newMarkType.isInSet(node2.marks) || !node2.marks.some((otherMark) => otherMark.type.excludes(newMarkType));
        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;
      }
      return !someNodeSupportsMark;
    });
    return someNodeSupportsMark;
  });
}
const setMark = (typeOrName, attributes = {}) => ({ tr: tr2, state, dispatch }) => {
  const { selection } = tr2;
  const { empty: empty2, ranges } = selection;
  const type = getMarkType(typeOrName, state.schema);
  if (dispatch) {
    if (empty2) {
      const oldAttributes = getMarkAttributes(state, type);
      tr2.addStoredMark(type.create({
        ...oldAttributes,
        ...attributes
      }));
    } else {
      ranges.forEach((range) => {
        const from3 = range.$from.pos;
        const to = range.$to.pos;
        state.doc.nodesBetween(from3, to, (node2, pos) => {
          const trimmedFrom = Math.max(pos, from3);
          const trimmedTo = Math.min(pos + node2.nodeSize, to);
          const someHasMark = node2.marks.find((mark) => mark.type === type);
          if (someHasMark) {
            node2.marks.forEach((mark) => {
              if (type === mark.type) {
                tr2.addMark(trimmedFrom, trimmedTo, type.create({
                  ...mark.attrs,
                  ...attributes
                }));
              }
            });
          } else {
            tr2.addMark(trimmedFrom, trimmedTo, type.create(attributes));
          }
        });
      });
    }
  }
  return canSetMark(state, tr2, type);
};
const setMeta = (key, value) => ({ tr: tr2 }) => {
  tr2.setMeta(key, value);
  return true;
};
const setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {
  const type = getNodeType(typeOrName, state.schema);
  if (!type.isTextblock) {
    console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.');
    return false;
  }
  return chain().command(({ commands: commands2 }) => {
    const canSetBlock = setBlockType(type, attributes)(state);
    if (canSetBlock) {
      return true;
    }
    return commands2.clearNodes();
  }).command(({ state: updatedState }) => {
    return setBlockType(type, attributes)(updatedState, dispatch);
  }).run();
};
const setNodeSelection = (position2) => ({ tr: tr2, dispatch }) => {
  if (dispatch) {
    const { doc: doc2 } = tr2;
    const from3 = minMax(position2, 0, doc2.content.size);
    const selection = NodeSelection.create(doc2, from3);
    tr2.setSelection(selection);
  }
  return true;
};
const setTextSelection = (position2) => ({ tr: tr2, dispatch }) => {
  if (dispatch) {
    const { doc: doc2 } = tr2;
    const { from: from3, to } = typeof position2 === "number" ? { from: position2, to: position2 } : position2;
    const minPos = TextSelection.atStart(doc2).from;
    const maxPos = TextSelection.atEnd(doc2).to;
    const resolvedFrom = minMax(from3, minPos, maxPos);
    const resolvedEnd = minMax(to, minPos, maxPos);
    const selection = TextSelection.create(doc2, resolvedFrom, resolvedEnd);
    tr2.setSelection(selection);
  }
  return true;
};
const sinkListItem = (typeOrName) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return sinkListItem$1(type)(state, dispatch);
};
function ensureMarks(state, splittableMarks) {
  const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();
  if (marks) {
    const filteredMarks = marks.filter((mark) => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));
    state.tr.ensureMarks(filteredMarks);
  }
}
const splitBlock = ({ keepMarks = true } = {}) => ({ tr: tr2, state, dispatch, editor }) => {
  const { selection, doc: doc2 } = tr2;
  const { $from, $to } = selection;
  const extensionAttributes = editor.extensionManager.attributes;
  const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
  if (selection instanceof NodeSelection && selection.node.isBlock) {
    if (!$from.parentOffset || !canSplit(doc2, $from.pos)) {
      return false;
    }
    if (dispatch) {
      if (keepMarks) {
        ensureMarks(state, editor.extensionManager.splittableMarks);
      }
      tr2.split($from.pos).scrollIntoView();
    }
    return true;
  }
  if (!$from.parent.isBlock) {
    return false;
  }
  if (dispatch) {
    const atEnd = $to.parentOffset === $to.parent.content.size;
    if (selection instanceof TextSelection) {
      tr2.deleteSelection();
    }
    const deflt = $from.depth === 0 ? void 0 : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
    let types = atEnd && deflt ? [
      {
        type: deflt,
        attrs: newAttributes
      }
    ] : void 0;
    let can = canSplit(tr2.doc, tr2.mapping.map($from.pos), 1, types);
    if (!types && !can && canSplit(tr2.doc, tr2.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : void 0)) {
      can = true;
      types = deflt ? [
        {
          type: deflt,
          attrs: newAttributes
        }
      ] : void 0;
    }
    if (can) {
      tr2.split(tr2.mapping.map($from.pos), 1, types);
      if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {
        const first2 = tr2.mapping.map($from.before());
        const $first = tr2.doc.resolve(first2);
        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {
          tr2.setNodeMarkup(tr2.mapping.map($from.before()), deflt);
        }
      }
    }
    if (keepMarks) {
      ensureMarks(state, editor.extensionManager.splittableMarks);
    }
    tr2.scrollIntoView();
  }
  return true;
};
const splitListItem = (typeOrName) => ({ tr: tr2, state, dispatch, editor }) => {
  var _a;
  const type = getNodeType(typeOrName, state.schema);
  const { $from, $to } = state.selection;
  const node2 = state.selection.node;
  if (node2 && node2.isBlock || $from.depth < 2 || !$from.sameParent($to)) {
    return false;
  }
  const grandParent = $from.node(-1);
  if (grandParent.type !== type) {
    return false;
  }
  const extensionAttributes = editor.extensionManager.attributes;
  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {
    if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {
      return false;
    }
    if (dispatch) {
      let wrap2 = Fragment.empty;
      const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
      for (let d4 = $from.depth - depthBefore; d4 >= $from.depth - 3; d4 -= 1) {
        wrap2 = Fragment.from($from.node(d4).copy(wrap2));
      }
      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
      const newNextTypeAttributes2 = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
      const nextType2 = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes2)) || void 0;
      wrap2 = wrap2.append(Fragment.from(type.createAndFill(null, nextType2) || void 0));
      const start2 = $from.before($from.depth - (depthBefore - 1));
      tr2.replace(start2, $from.after(-depthAfter), new Slice(wrap2, 4 - depthBefore, 0));
      let sel = -1;
      tr2.doc.nodesBetween(start2, tr2.doc.content.size, (n2, pos) => {
        if (sel > -1) {
          return false;
        }
        if (n2.isTextblock && n2.content.size === 0) {
          sel = pos + 1;
        }
      });
      if (sel > -1) {
        tr2.setSelection(TextSelection.near(tr2.doc.resolve(sel)));
      }
      tr2.scrollIntoView();
    }
    return true;
  }
  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
  const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);
  const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
  tr2.delete($from.pos, $to.pos);
  const types = nextType ? [
    { type, attrs: newTypeAttributes },
    { type: nextType, attrs: newNextTypeAttributes }
  ] : [{ type, attrs: newTypeAttributes }];
  if (!canSplit(tr2.doc, $from.pos, 2)) {
    return false;
  }
  if (dispatch) {
    const { selection, storedMarks } = state;
    const { splittableMarks } = editor.extensionManager;
    const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
    tr2.split($from.pos, 2, types).scrollIntoView();
    if (!marks || !dispatch) {
      return true;
    }
    const filteredMarks = marks.filter((mark) => splittableMarks.includes(mark.type.name));
    tr2.ensureMarks(filteredMarks);
  }
  return true;
};
const joinListBackwards = (tr2, listType) => {
  const list = findParentNode((node2) => node2.type === listType)(tr2.selection);
  if (!list) {
    return true;
  }
  const before = tr2.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);
  if (before === void 0) {
    return true;
  }
  const nodeBefore = tr2.doc.nodeAt(before);
  const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr2.doc, list.pos);
  if (!canJoinBackwards) {
    return true;
  }
  tr2.join(list.pos);
  return true;
};
const joinListForwards = (tr2, listType) => {
  const list = findParentNode((node2) => node2.type === listType)(tr2.selection);
  if (!list) {
    return true;
  }
  const after = tr2.doc.resolve(list.start).after(list.depth);
  if (after === void 0) {
    return true;
  }
  const nodeAfter = tr2.doc.nodeAt(after);
  const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr2.doc, after);
  if (!canJoinForwards) {
    return true;
  }
  tr2.join(after);
  return true;
};
const toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({ editor, tr: tr2, state, dispatch, chain, commands: commands2, can }) => {
  const { extensions: extensions2, splittableMarks } = editor.extensionManager;
  const listType = getNodeType(listTypeOrName, state.schema);
  const itemType = getNodeType(itemTypeOrName, state.schema);
  const { selection, storedMarks } = state;
  const { $from, $to } = selection;
  const range = $from.blockRange($to);
  const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
  if (!range) {
    return false;
  }
  const parentList = findParentNode((node2) => isList(node2.type.name, extensions2))(selection);
  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {
    if (parentList.node.type === listType) {
      return commands2.liftListItem(itemType);
    }
    if (isList(parentList.node.type.name, extensions2) && listType.validContent(parentList.node.content) && dispatch) {
      return chain().command(() => {
        tr2.setNodeMarkup(parentList.pos, listType);
        return true;
      }).command(() => joinListBackwards(tr2, listType)).command(() => joinListForwards(tr2, listType)).run();
    }
  }
  if (!keepMarks || !marks || !dispatch) {
    return chain().command(() => {
      const canWrapInList = can().wrapInList(listType, attributes);
      if (canWrapInList) {
        return true;
      }
      return commands2.clearNodes();
    }).wrapInList(listType, attributes).command(() => joinListBackwards(tr2, listType)).command(() => joinListForwards(tr2, listType)).run();
  }
  return chain().command(() => {
    const canWrapInList = can().wrapInList(listType, attributes);
    const filteredMarks = marks.filter((mark) => splittableMarks.includes(mark.type.name));
    tr2.ensureMarks(filteredMarks);
    if (canWrapInList) {
      return true;
    }
    return commands2.clearNodes();
  }).wrapInList(listType, attributes).command(() => joinListBackwards(tr2, listType)).command(() => joinListForwards(tr2, listType)).run();
};
const toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands: commands2 }) => {
  const { extendEmptyMarkRange = false } = options;
  const type = getMarkType(typeOrName, state.schema);
  const isActive2 = isMarkActive(state, type, attributes);
  if (isActive2) {
    return commands2.unsetMark(type, { extendEmptyMarkRange });
  }
  return commands2.setMark(type, attributes);
};
const toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands: commands2 }) => {
  const type = getNodeType(typeOrName, state.schema);
  const toggleType = getNodeType(toggleTypeOrName, state.schema);
  const isActive2 = isNodeActive(state, type, attributes);
  if (isActive2) {
    return commands2.setNode(toggleType);
  }
  return commands2.setNode(type, attributes);
};
const toggleWrap = (typeOrName, attributes = {}) => ({ state, commands: commands2 }) => {
  const type = getNodeType(typeOrName, state.schema);
  const isActive2 = isNodeActive(state, type, attributes);
  if (isActive2) {
    return commands2.lift(type);
  }
  return commands2.wrapIn(type, attributes);
};
const undoInputRule = () => ({ state, dispatch }) => {
  const plugins = state.plugins;
  for (let i2 = 0; i2 < plugins.length; i2 += 1) {
    const plugin = plugins[i2];
    let undoable;
    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
      if (dispatch) {
        const tr2 = state.tr;
        const toUndo = undoable.transform;
        for (let j2 = toUndo.steps.length - 1; j2 >= 0; j2 -= 1) {
          tr2.step(toUndo.steps[j2].invert(toUndo.docs[j2]));
        }
        if (undoable.text) {
          const marks = tr2.doc.resolve(undoable.from).marks();
          tr2.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
        } else {
          tr2.delete(undoable.from, undoable.to);
        }
      }
      return true;
    }
  }
  return false;
};
const unsetAllMarks = () => ({ tr: tr2, dispatch }) => {
  const { selection } = tr2;
  const { empty: empty2, ranges } = selection;
  if (empty2) {
    return true;
  }
  if (dispatch) {
    ranges.forEach((range) => {
      tr2.removeMark(range.$from.pos, range.$to.pos);
    });
  }
  return true;
};
const unsetMark = (typeOrName, options = {}) => ({ tr: tr2, state, dispatch }) => {
  var _a;
  const { extendEmptyMarkRange = false } = options;
  const { selection } = tr2;
  const type = getMarkType(typeOrName, state.schema);
  const { $from, empty: empty2, ranges } = selection;
  if (!dispatch) {
    return true;
  }
  if (empty2 && extendEmptyMarkRange) {
    let { from: from3, to } = selection;
    const attrs = (_a = $from.marks().find((mark) => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;
    const range = getMarkRange($from, type, attrs);
    if (range) {
      from3 = range.from;
      to = range.to;
    }
    tr2.removeMark(from3, to, type);
  } else {
    ranges.forEach((range) => {
      tr2.removeMark(range.$from.pos, range.$to.pos, type);
    });
  }
  tr2.removeStoredMark(type);
  return true;
};
const updateAttributes = (typeOrName, attributes = {}) => ({ tr: tr2, state, dispatch }) => {
  let nodeType = null;
  let markType = null;
  const schemaType = getSchemaTypeNameByName(typeof typeOrName === "string" ? typeOrName : typeOrName.name, state.schema);
  if (!schemaType) {
    return false;
  }
  if (schemaType === "node") {
    nodeType = getNodeType(typeOrName, state.schema);
  }
  if (schemaType === "mark") {
    markType = getMarkType(typeOrName, state.schema);
  }
  if (dispatch) {
    tr2.selection.ranges.forEach((range) => {
      const from3 = range.$from.pos;
      const to = range.$to.pos;
      state.doc.nodesBetween(from3, to, (node2, pos) => {
        if (nodeType && nodeType === node2.type) {
          tr2.setNodeMarkup(pos, void 0, {
            ...node2.attrs,
            ...attributes
          });
        }
        if (markType && node2.marks.length) {
          node2.marks.forEach((mark) => {
            if (markType === mark.type) {
              const trimmedFrom = Math.max(pos, from3);
              const trimmedTo = Math.min(pos + node2.nodeSize, to);
              tr2.addMark(trimmedFrom, trimmedTo, markType.create({
                ...mark.attrs,
                ...attributes
              }));
            }
          });
        }
      });
    });
  }
  return true;
};
const wrapIn = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return wrapIn$1(type, attributes)(state, dispatch);
};
const wrapInList = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return wrapInList$1(type, attributes)(state, dispatch);
};
var commands = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  blur,
  clearContent,
  clearNodes,
  command,
  createParagraphNear,
  cut,
  deleteCurrentNode,
  deleteNode,
  deleteRange,
  deleteSelection,
  enter,
  exitCode,
  extendMarkRange,
  first,
  focus,
  forEach,
  insertContent,
  insertContentAt,
  joinUp,
  joinDown,
  joinBackward,
  joinForward,
  joinItemBackward,
  joinItemForward,
  joinTextblockBackward,
  joinTextblockForward,
  keyboardShortcut,
  lift,
  liftEmptyBlock,
  liftListItem,
  newlineInCode,
  resetAttributes,
  scrollIntoView,
  selectAll,
  selectNodeBackward,
  selectNodeForward,
  selectParentNode,
  selectTextblockEnd,
  selectTextblockStart,
  setContent,
  setMark,
  setMeta,
  setNode,
  setNodeSelection,
  setTextSelection,
  sinkListItem,
  splitBlock,
  splitListItem,
  toggleList,
  toggleMark,
  toggleNode,
  toggleWrap,
  undoInputRule,
  unsetAllMarks,
  unsetMark,
  updateAttributes,
  wrapIn,
  wrapInList
});
const Commands = Extension.create({
  name: "commands",
  addCommands() {
    return {
      ...commands
    };
  }
});
const Editable = Extension.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
});
const FocusEvents = Extension.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor } = this;
    return [
      new Plugin({
        key: new PluginKey("focusEvents"),
        props: {
          handleDOMEvents: {
            focus: (view, event) => {
              editor.isFocused = true;
              const transaction = editor.state.tr.setMeta("focus", { event }).setMeta("addToHistory", false);
              view.dispatch(transaction);
              return false;
            },
            blur: (view, event) => {
              editor.isFocused = false;
              const transaction = editor.state.tr.setMeta("blur", { event }).setMeta("addToHistory", false);
              view.dispatch(transaction);
              return false;
            }
          }
        }
      })
    ];
  }
});
const Keymap = Extension.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const handleBackspace = () => this.editor.commands.first(({ commands: commands2 }) => [
      () => commands2.undoInputRule(),
      // maybe convert first text block node to default node
      () => commands2.command(({ tr: tr2 }) => {
        const { selection, doc: doc2 } = tr2;
        const { empty: empty2, $anchor } = selection;
        const { pos, parent } = $anchor;
        const $parentPos = $anchor.parent.isTextblock ? tr2.doc.resolve(pos - 1) : $anchor;
        const parentIsIsolating = $parentPos.parent.type.spec.isolating;
        const parentPos = $anchor.pos - $anchor.parentOffset;
        const isAtStart = parentIsIsolating && $parentPos.parent.childCount === 1 ? parentPos === $anchor.pos : Selection.atStart(doc2).from === pos;
        if (!empty2 || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {
          return false;
        }
        return commands2.clearNodes();
      }),
      () => commands2.deleteSelection(),
      () => commands2.joinBackward(),
      () => commands2.selectNodeBackward()
    ]);
    const handleDelete = () => this.editor.commands.first(({ commands: commands2 }) => [
      () => commands2.deleteSelection(),
      () => commands2.deleteCurrentNode(),
      () => commands2.joinForward(),
      () => commands2.selectNodeForward()
    ]);
    const handleEnter = () => this.editor.commands.first(({ commands: commands2 }) => [
      () => commands2.newlineInCode(),
      () => commands2.createParagraphNear(),
      () => commands2.liftEmptyBlock(),
      () => commands2.splitBlock()
    ]);
    const baseKeymap = {
      Enter: handleEnter,
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: handleBackspace,
      "Mod-Backspace": handleBackspace,
      "Shift-Backspace": handleBackspace,
      Delete: handleDelete,
      "Mod-Delete": handleDelete,
      "Mod-a": () => this.editor.commands.selectAll()
    };
    const pcKeymap = {
      ...baseKeymap
    };
    const macKeymap = {
      ...baseKeymap,
      "Ctrl-h": handleBackspace,
      "Alt-Backspace": handleBackspace,
      "Ctrl-d": handleDelete,
      "Ctrl-Alt-Backspace": handleDelete,
      "Alt-Delete": handleDelete,
      "Alt-d": handleDelete,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    if (isiOS() || isMacOS()) {
      return macKeymap;
    }
    return pcKeymap;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new Plugin({
        key: new PluginKey("clearDocument"),
        appendTransaction: (transactions, oldState, newState) => {
          const docChanges = transactions.some((transaction) => transaction.docChanged) && !oldState.doc.eq(newState.doc);
          if (!docChanges) {
            return;
          }
          const { empty: empty2, from: from3, to } = oldState.selection;
          const allFrom = Selection.atStart(oldState.doc).from;
          const allEnd = Selection.atEnd(oldState.doc).to;
          const allWasSelected = from3 === allFrom && to === allEnd;
          if (empty2 || !allWasSelected) {
            return;
          }
          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, " ", " ").length === 0;
          if (!isEmpty) {
            return;
          }
          const tr2 = newState.tr;
          const state = createChainableState({
            state: newState,
            transaction: tr2
          });
          const { commands: commands2 } = new CommandManager({
            editor: this.editor,
            state
          });
          commands2.clearNodes();
          if (!tr2.steps.length) {
            return;
          }
          return tr2;
        }
      })
    ];
  }
});
const Tabindex = Extension.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("tabindex"),
        props: {
          attributes: this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
});
var extensions = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ClipboardTextSerializer,
  Commands,
  Editable,
  FocusEvents,
  Keymap,
  Tabindex
});
class NodePos {
  constructor(pos, editor, isBlock = false, node2 = null) {
    this.currentNode = null;
    this.actualDepth = null;
    this.isBlock = isBlock;
    this.resolvedPos = pos;
    this.editor = editor;
    this.currentNode = node2;
  }
  get name() {
    return this.node.type.name;
  }
  get node() {
    return this.currentNode || this.resolvedPos.node();
  }
  get element() {
    return this.editor.view.domAtPos(this.pos).node;
  }
  get depth() {
    var _a;
    return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;
  }
  get pos() {
    return this.resolvedPos.pos;
  }
  get content() {
    return this.node.content;
  }
  set content(content) {
    let from3 = this.from;
    let to = this.to;
    if (this.isBlock) {
      if (this.content.size === 0) {
        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);
        return;
      }
      from3 = this.from + 1;
      to = this.to - 1;
    }
    this.editor.commands.insertContentAt({ from: from3, to }, content);
  }
  get attributes() {
    return this.node.attrs;
  }
  get textContent() {
    return this.node.textContent;
  }
  get size() {
    return this.node.nodeSize;
  }
  get from() {
    if (this.isBlock) {
      return this.pos;
    }
    return this.resolvedPos.start(this.resolvedPos.depth);
  }
  get range() {
    return {
      from: this.from,
      to: this.to
    };
  }
  get to() {
    if (this.isBlock) {
      return this.pos + this.size;
    }
    return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);
  }
  get parent() {
    if (this.depth === 0) {
      return null;
    }
    const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);
    const $pos = this.resolvedPos.doc.resolve(parentPos);
    return new NodePos($pos, this.editor);
  }
  get before() {
    let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));
    if ($pos.depth !== this.depth) {
      $pos = this.resolvedPos.doc.resolve(this.from - 3);
    }
    return new NodePos($pos, this.editor);
  }
  get after() {
    let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));
    if ($pos.depth !== this.depth) {
      $pos = this.resolvedPos.doc.resolve(this.to + 3);
    }
    return new NodePos($pos, this.editor);
  }
  get children() {
    const children = [];
    this.node.content.forEach((node2, offset2) => {
      const isBlock = node2.isBlock && !node2.isTextblock;
      const targetPos = this.pos + offset2 + (isBlock ? 0 : 1);
      const $pos = this.resolvedPos.doc.resolve(targetPos);
      if (!isBlock && $pos.depth <= this.depth) {
        return;
      }
      const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node2 : null);
      if (isBlock) {
        childNodePos.actualDepth = this.depth + 1;
      }
      children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node2 : null));
    });
    return children;
  }
  get firstChild() {
    return this.children[0] || null;
  }
  get lastChild() {
    const children = this.children;
    return children[children.length - 1] || null;
  }
  closest(selector, attributes = {}) {
    let node2 = null;
    let currentNode = this.parent;
    while (currentNode && !node2) {
      if (currentNode.node.type.name === selector) {
        if (Object.keys(attributes).length > 0) {
          const nodeAttributes = currentNode.node.attrs;
          const attrKeys = Object.keys(attributes);
          for (let index2 = 0; index2 < attrKeys.length; index2 += 1) {
            const key = attrKeys[index2];
            if (nodeAttributes[key] !== attributes[key]) {
              break;
            }
          }
        } else {
          node2 = currentNode;
        }
      }
      currentNode = currentNode.parent;
    }
    return node2;
  }
  querySelector(selector, attributes = {}) {
    return this.querySelectorAll(selector, attributes, true)[0] || null;
  }
  querySelectorAll(selector, attributes = {}, firstItemOnly = false) {
    let nodes = [];
    if (this.isBlock || !this.children || this.children.length === 0) {
      return nodes;
    }
    this.children.forEach((childPos) => {
      if (childPos.node.type.name === selector) {
        if (Object.keys(attributes).length > 0) {
          const nodeAttributes = childPos.node.attrs;
          const attrKeys = Object.keys(attributes);
          for (let index2 = 0; index2 < attrKeys.length; index2 += 1) {
            const key = attrKeys[index2];
            if (nodeAttributes[key] !== attributes[key]) {
              return;
            }
          }
        }
        nodes.push(childPos);
        if (firstItemOnly) {
          return;
        }
      }
      nodes = nodes.concat(childPos.querySelectorAll(selector));
    });
    return nodes;
  }
  setAttribute(attributes) {
    const oldSelection = this.editor.state.selection;
    this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from).run();
  }
}
const style = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;
function createStyleTag(style2, nonce, suffix) {
  const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ""}]`);
  if (tiptapStyleTag !== null) {
    return tiptapStyleTag;
  }
  const styleNode = document.createElement("style");
  if (nonce) {
    styleNode.setAttribute("nonce", nonce);
  }
  styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ""}`, "");
  styleNode.innerHTML = style2;
  document.getElementsByTagName("head")[0].appendChild(styleNode);
  return styleNode;
}
let Editor$1 = class Editor extends EventEmitter {
  constructor(options = {}) {
    super();
    this.isFocused = false;
    this.extensionStorage = {};
    this.options = {
      element: document.createElement("div"),
      content: "",
      injectCSS: true,
      injectNonce: void 0,
      extensions: [],
      autofocus: false,
      editable: true,
      editorProps: {},
      parseOptions: {},
      enableInputRules: true,
      enablePasteRules: true,
      enableCoreExtensions: true,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null
    };
    this.isCapturingTransaction = false;
    this.capturedTransaction = null;
    this.setOptions(options);
    this.createExtensionManager();
    this.createCommandManager();
    this.createSchema();
    this.on("beforeCreate", this.options.onBeforeCreate);
    this.emit("beforeCreate", { editor: this });
    this.createView();
    this.injectCSS();
    this.on("create", this.options.onCreate);
    this.on("update", this.options.onUpdate);
    this.on("selectionUpdate", this.options.onSelectionUpdate);
    this.on("transaction", this.options.onTransaction);
    this.on("focus", this.options.onFocus);
    this.on("blur", this.options.onBlur);
    this.on("destroy", this.options.onDestroy);
    window.setTimeout(() => {
      if (this.isDestroyed) {
        return;
      }
      this.commands.focus(this.options.autofocus);
      this.emit("create", { editor: this });
    }, 0);
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    if (this.options.injectCSS && document) {
      this.css = createStyleTag(style, this.options.injectNonce);
    }
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(options = {}) {
    this.options = {
      ...this.options,
      ...options
    };
    if (!this.view || !this.state || this.isDestroyed) {
      return;
    }
    if (this.options.editorProps) {
      this.view.setProps(this.options.editorProps);
    }
    this.view.updateState(this.state);
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(editable, emitUpdate = true) {
    this.setOptions({ editable });
    if (emitUpdate) {
      this.emit("update", { editor: this, transaction: this.state.tr });
    }
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.view.state;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   */
  registerPlugin(plugin, handlePlugins) {
    const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, [...this.state.plugins]) : [...this.state.plugins, plugin];
    const state = this.state.reconfigure({ plugins });
    this.view.updateState(state);
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKey The plugins name
   */
  unregisterPlugin(nameOrPluginKey) {
    if (this.isDestroyed) {
      return;
    }
    const name = typeof nameOrPluginKey === "string" ? `${nameOrPluginKey}$` : nameOrPluginKey.key;
    const state = this.state.reconfigure({
      // @ts-ignore
      plugins: this.state.plugins.filter((plugin) => !plugin.key.startsWith(name))
    });
    this.view.updateState(state);
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    const coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];
    const allExtensions = [...coreExtensions, ...this.options.extensions].filter((extension) => {
      return ["extension", "node", "mark"].includes(extension === null || extension === void 0 ? void 0 : extension.type);
    });
    this.extensionManager = new ExtensionManager(allExtensions, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new CommandManager({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView() {
    const doc2 = createDocument(this.options.content, this.schema, this.options.parseOptions);
    const selection = resolveFocusPosition(doc2, this.options.autofocus);
    this.view = new EditorView(this.options.element, {
      ...this.options.editorProps,
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: EditorState.create({
        doc: doc2,
        selection: selection || void 0
      })
    });
    const newState = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(newState);
    this.createNodeViews();
    this.prependClass();
    const dom = this.view.dom;
    dom.editor = this;
  }
  /**
   * Creates all node views.
   */
  createNodeViews() {
    this.view.setProps({
      nodeViews: this.extensionManager.nodeViews
    });
  }
  /**
   * Prepend class name to element.
   */
  prependClass() {
    this.view.dom.className = `tiptap ${this.view.dom.className}`;
  }
  captureTransaction(fn3) {
    this.isCapturingTransaction = true;
    fn3();
    this.isCapturingTransaction = false;
    const tr2 = this.capturedTransaction;
    this.capturedTransaction = null;
    return tr2;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(transaction) {
    if (this.view.isDestroyed) {
      return;
    }
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = transaction;
        return;
      }
      transaction.steps.forEach((step) => {
        var _a;
        return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);
      });
      return;
    }
    const state = this.state.apply(transaction);
    const selectionHasChanged = !this.state.selection.eq(state.selection);
    this.view.updateState(state);
    this.emit("transaction", {
      editor: this,
      transaction
    });
    if (selectionHasChanged) {
      this.emit("selectionUpdate", {
        editor: this,
        transaction
      });
    }
    const focus2 = transaction.getMeta("focus");
    const blur2 = transaction.getMeta("blur");
    if (focus2) {
      this.emit("focus", {
        editor: this,
        event: focus2.event,
        transaction
      });
    }
    if (blur2) {
      this.emit("blur", {
        editor: this,
        event: blur2.event,
        transaction
      });
    }
    if (!transaction.docChanged || transaction.getMeta("preventUpdate")) {
      return;
    }
    this.emit("update", {
      editor: this,
      transaction
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(nameOrType) {
    return getAttributes(this.state, nameOrType);
  }
  isActive(nameOrAttributes, attributesOrUndefined) {
    const name = typeof nameOrAttributes === "string" ? nameOrAttributes : null;
    const attributes = typeof nameOrAttributes === "string" ? attributesOrUndefined : nameOrAttributes;
    return isActive(this.state, name, attributes);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return getHTMLFromFragment(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(options) {
    const { blockSeparator = "\n\n", textSerializers = {} } = options || {};
    return getText(this.state.doc, {
      blockSeparator,
      textSerializers: {
        ...getTextSerializersFromSchema(this.schema),
        ...textSerializers
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return isNodeEmpty(this.state.doc);
  }
  /**
   * Get the number of characters for the current document.
   *
   * @deprecated
   */
  getCharacterCount() {
    console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.');
    return this.state.doc.content.size - 2;
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    this.emit("destroy");
    if (this.view) {
      this.view.destroy();
    }
    this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var _a;
    return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);
  }
  $node(selector, attributes) {
    var _a;
    return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;
  }
  $nodes(selector, attributes) {
    var _a;
    return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;
  }
  $pos(pos) {
    const $pos = this.state.doc.resolve(pos);
    return new NodePos($pos, this);
  }
  get $doc() {
    return this.$pos(0);
  }
};
function markInputRule(config) {
  return new InputRule({
    find: config.find,
    handler: ({ state, range, match: match2 }) => {
      const attributes = callOrReturn(config.getAttributes, void 0, match2);
      if (attributes === false || attributes === null) {
        return null;
      }
      const { tr: tr2 } = state;
      const captureGroup = match2[match2.length - 1];
      const fullMatch = match2[0];
      if (captureGroup) {
        const startSpaces = fullMatch.search(/\S/);
        const textStart = range.from + fullMatch.indexOf(captureGroup);
        const textEnd = textStart + captureGroup.length;
        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter((item) => {
          const excluded = item.mark.type.excluded;
          return excluded.find((type) => type === config.type && type !== item.mark.type);
        }).filter((item) => item.to > textStart);
        if (excludedMarks.length) {
          return null;
        }
        if (textEnd < range.to) {
          tr2.delete(textEnd, range.to);
        }
        if (textStart > range.from) {
          tr2.delete(range.from + startSpaces, textStart);
        }
        const markEnd = range.from + startSpaces + captureGroup.length;
        tr2.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
        tr2.removeStoredMark(config.type);
      }
    }
  });
}
function textblockTypeInputRule(config) {
  return new InputRule({
    find: config.find,
    handler: ({ state, range, match: match2 }) => {
      const $start = state.doc.resolve(range.from);
      const attributes = callOrReturn(config.getAttributes, void 0, match2) || {};
      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {
        return null;
      }
      state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);
    }
  });
}
function wrappingInputRule(config) {
  return new InputRule({
    find: config.find,
    handler: ({ state, range, match: match2, chain }) => {
      const attributes = callOrReturn(config.getAttributes, void 0, match2) || {};
      const tr2 = state.tr.delete(range.from, range.to);
      const $start = tr2.doc.resolve(range.from);
      const blockRange = $start.blockRange();
      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);
      if (!wrapping) {
        return null;
      }
      tr2.wrap(blockRange, wrapping);
      if (config.keepMarks && config.editor) {
        const { selection, storedMarks } = state;
        const { splittableMarks } = config.editor.extensionManager;
        const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
        if (marks) {
          const filteredMarks = marks.filter((mark) => splittableMarks.includes(mark.type.name));
          tr2.ensureMarks(filteredMarks);
        }
      }
      if (config.keepAttributes) {
        const nodeType = config.type.name === "bulletList" || config.type.name === "orderedList" ? "listItem" : "taskList";
        chain().updateAttributes(nodeType, attributes).run();
      }
      const before = tr2.doc.resolve(range.from - 1).nodeBefore;
      if (before && before.type === config.type && canJoin(tr2.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match2, before))) {
        tr2.join(range.from - 1);
      }
    }
  });
}
class Mark2 {
  constructor(config = {}) {
    this.type = "mark";
    this.name = "mark";
    this.parent = null;
    this.child = null;
    this.config = {
      name: this.name,
      defaultOptions: {}
    };
    this.config = {
      ...this.config,
      ...config
    };
    this.name = this.config.name;
    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
    }
    this.options = this.config.defaultOptions;
    if (this.config.addOptions) {
      this.options = callOrReturn(getExtensionField(this, "addOptions", {
        name: this.name
      }));
    }
    this.storage = callOrReturn(getExtensionField(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(config = {}) {
    return new Mark2(config);
  }
  configure(options = {}) {
    const extension = this.extend();
    extension.options = mergeDeep(this.options, options);
    extension.storage = callOrReturn(getExtensionField(extension, "addStorage", {
      name: extension.name,
      options: extension.options
    }));
    return extension;
  }
  extend(extendedConfig = {}) {
    const extension = new Mark2({ ...this.config, ...extendedConfig });
    extension.parent = this;
    this.child = extension;
    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;
    if (extendedConfig.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
    }
    extension.options = callOrReturn(getExtensionField(extension, "addOptions", {
      name: extension.name
    }));
    extension.storage = callOrReturn(getExtensionField(extension, "addStorage", {
      name: extension.name,
      options: extension.options
    }));
    return extension;
  }
  static handleExit({ editor, mark }) {
    const { tr: tr2 } = editor.state;
    const currentPos = editor.state.selection.$from;
    const isAtEnd = currentPos.pos === currentPos.end();
    if (isAtEnd) {
      const currentMarks = currentPos.marks();
      const isInMark = !!currentMarks.find((m4) => (m4 === null || m4 === void 0 ? void 0 : m4.type.name) === mark.name);
      if (!isInMark) {
        return false;
      }
      const removeMark2 = currentMarks.find((m4) => (m4 === null || m4 === void 0 ? void 0 : m4.type.name) === mark.name);
      if (removeMark2) {
        tr2.removeStoredMark(removeMark2);
      }
      tr2.insertText(" ", currentPos.pos);
      editor.view.dispatch(tr2);
      return true;
    }
    return false;
  }
}
let Node$1 = class Node3 {
  constructor(config = {}) {
    this.type = "node";
    this.name = "node";
    this.parent = null;
    this.child = null;
    this.config = {
      name: this.name,
      defaultOptions: {}
    };
    this.config = {
      ...this.config,
      ...config
    };
    this.name = this.config.name;
    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
    }
    this.options = this.config.defaultOptions;
    if (this.config.addOptions) {
      this.options = callOrReturn(getExtensionField(this, "addOptions", {
        name: this.name
      }));
    }
    this.storage = callOrReturn(getExtensionField(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(config = {}) {
    return new Node3(config);
  }
  configure(options = {}) {
    const extension = this.extend();
    extension.options = mergeDeep(this.options, options);
    extension.storage = callOrReturn(getExtensionField(extension, "addStorage", {
      name: extension.name,
      options: extension.options
    }));
    return extension;
  }
  extend(extendedConfig = {}) {
    const extension = new Node3({ ...this.config, ...extendedConfig });
    extension.parent = this;
    this.child = extension;
    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;
    if (extendedConfig.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
    }
    extension.options = callOrReturn(getExtensionField(extension, "addOptions", {
      name: extension.name
    }));
    extension.storage = callOrReturn(getExtensionField(extension, "addStorage", {
      name: extension.name,
      options: extension.options
    }));
    return extension;
  }
};
function markPasteRule(config) {
  return new PasteRule({
    find: config.find,
    handler: ({ state, range, match: match2, pasteEvent }) => {
      const attributes = callOrReturn(config.getAttributes, void 0, match2, pasteEvent);
      if (attributes === false || attributes === null) {
        return null;
      }
      const { tr: tr2 } = state;
      const captureGroup = match2[match2.length - 1];
      const fullMatch = match2[0];
      let markEnd = range.to;
      if (captureGroup) {
        const startSpaces = fullMatch.search(/\S/);
        const textStart = range.from + fullMatch.indexOf(captureGroup);
        const textEnd = textStart + captureGroup.length;
        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter((item) => {
          const excluded = item.mark.type.excluded;
          return excluded.find((type) => type === config.type && type !== item.mark.type);
        }).filter((item) => item.to > textStart);
        if (excludedMarks.length) {
          return null;
        }
        if (textEnd < range.to) {
          tr2.delete(textEnd, range.to);
        }
        if (textStart > range.from) {
          tr2.delete(range.from + startSpaces, textStart);
        }
        markEnd = range.from + startSpaces + captureGroup.length;
        tr2.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
        tr2.removeStoredMark(config.type);
      }
    }
  });
}
class BubbleMenuView {
  constructor({ editor, element, view, tippyOptions = {}, updateDelay = 250, shouldShow }) {
    this.preventHide = false;
    this.shouldShow = ({ view: view2, state, from: from3, to }) => {
      const { doc: doc2, selection } = state;
      const { empty: empty2 } = selection;
      const isEmptyTextBlock = !doc2.textBetween(from3, to).length && isTextSelection(state.selection);
      const isChildOfMenu = this.element.contains(document.activeElement);
      const hasEditorFocus = view2.hasFocus() || isChildOfMenu;
      if (!hasEditorFocus || empty2 || isEmptyTextBlock || !this.editor.isEditable) {
        return false;
      }
      return true;
    };
    this.mousedownHandler = () => {
      this.preventHide = true;
    };
    this.dragstartHandler = () => {
      this.hide();
    };
    this.focusHandler = () => {
      setTimeout(() => this.update(this.editor.view));
    };
    this.blurHandler = ({ event }) => {
      var _a;
      if (this.preventHide) {
        this.preventHide = false;
        return;
      }
      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
        return;
      }
      this.hide();
    };
    this.tippyBlurHandler = (event) => {
      this.blurHandler({ event });
    };
    this.handleDebouncedUpdate = (view2, oldState) => {
      const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view2.state.selection));
      const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view2.state.doc));
      if (!selectionChanged && !docChanged) {
        return;
      }
      if (this.updateDebounceTimer) {
        clearTimeout(this.updateDebounceTimer);
      }
      this.updateDebounceTimer = window.setTimeout(() => {
        this.updateHandler(view2, selectionChanged, docChanged, oldState);
      }, this.updateDelay);
    };
    this.updateHandler = (view2, selectionChanged, docChanged, oldState) => {
      var _a, _b, _c;
      const { state, composing } = view2;
      const { selection } = state;
      const isSame = !selectionChanged && !docChanged;
      if (composing || isSame) {
        return;
      }
      this.createTooltip();
      const { ranges } = selection;
      const from3 = Math.min(...ranges.map((range) => range.$from.pos));
      const to = Math.max(...ranges.map((range) => range.$to.pos));
      const shouldShow2 = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {
        editor: this.editor,
        view: view2,
        state,
        oldState,
        from: from3,
        to
      });
      if (!shouldShow2) {
        this.hide();
        return;
      }
      (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({
        getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => {
          if (isNodeSelection(state.selection)) {
            let node2 = view2.nodeDOM(from3);
            const nodeViewWrapper = node2.dataset.nodeViewWrapper ? node2 : node2.querySelector("[data-node-view-wrapper]");
            if (nodeViewWrapper) {
              node2 = nodeViewWrapper.firstChild;
            }
            if (node2) {
              return node2.getBoundingClientRect();
            }
          }
          return posToDOMRect(view2, from3, to);
        })
      });
      this.show();
    };
    this.editor = editor;
    this.element = element;
    this.view = view;
    this.updateDelay = updateDelay;
    if (shouldShow) {
      this.shouldShow = shouldShow;
    }
    this.element.addEventListener("mousedown", this.mousedownHandler, { capture: true });
    this.view.dom.addEventListener("dragstart", this.dragstartHandler);
    this.editor.on("focus", this.focusHandler);
    this.editor.on("blur", this.blurHandler);
    this.tippyOptions = tippyOptions;
    this.element.remove();
    this.element.style.visibility = "visible";
  }
  createTooltip() {
    const { element: editorElement } = this.editor.options;
    const editorIsAttached = !!editorElement.parentElement;
    if (this.tippy || !editorIsAttached) {
      return;
    }
    this.tippy = tippy(editorElement, {
      duration: 0,
      getReferenceClientRect: null,
      content: this.element,
      interactive: true,
      trigger: "manual",
      placement: "top",
      hideOnClick: "toggle",
      ...this.tippyOptions
    });
    if (this.tippy.popper.firstChild) {
      this.tippy.popper.firstChild.addEventListener("blur", this.tippyBlurHandler);
    }
  }
  update(view, oldState) {
    const { state } = view;
    const hasValidSelection = state.selection.$from.pos !== state.selection.$to.pos;
    if (this.updateDelay > 0 && hasValidSelection) {
      this.handleDebouncedUpdate(view, oldState);
      return;
    }
    const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));
    const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));
    this.updateHandler(view, selectionChanged, docChanged, oldState);
  }
  show() {
    var _a;
    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();
  }
  hide() {
    var _a;
    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();
  }
  destroy() {
    var _a, _b;
    if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {
      this.tippy.popper.firstChild.removeEventListener("blur", this.tippyBlurHandler);
    }
    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();
    this.element.removeEventListener("mousedown", this.mousedownHandler, { capture: true });
    this.view.dom.removeEventListener("dragstart", this.dragstartHandler);
    this.editor.off("focus", this.focusHandler);
    this.editor.off("blur", this.blurHandler);
  }
}
const BubbleMenuPlugin = (options) => {
  return new Plugin({
    key: typeof options.pluginKey === "string" ? new PluginKey(options.pluginKey) : options.pluginKey,
    view: (view) => new BubbleMenuView({ view, ...options })
  });
};
Extension.create({
  name: "bubbleMenu",
  addOptions() {
    return {
      element: null,
      tippyOptions: {},
      pluginKey: "bubbleMenu",
      updateDelay: void 0,
      shouldShow: null
    };
  },
  addProseMirrorPlugins() {
    if (!this.options.element) {
      return [];
    }
    return [
      BubbleMenuPlugin({
        pluginKey: this.options.pluginKey,
        editor: this.editor,
        element: this.options.element,
        tippyOptions: this.options.tippyOptions,
        updateDelay: this.options.updateDelay,
        shouldShow: this.options.shouldShow
      })
    ];
  }
});
const mergeRefs = (...refs) => {
  return (node2) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(node2);
      } else if (ref) {
        ref.current = node2;
      }
    });
  };
};
const Portals = ({
  renderers
}) => {
  return /* @__PURE__ */ jsx(Fragment$1, {
    children: Object.entries(renderers).map(([key, renderer]) => {
      return ae.createPortal(renderer.reactElement, renderer.element, key);
    })
  });
};
class PureEditorContent extends e$1.Component {
  constructor(props) {
    super(props);
    this.editorContentRef = e$1.createRef();
    this.initialized = false;
    this.state = {
      renderers: {}
    };
  }
  componentDidMount() {
    this.init();
  }
  componentDidUpdate() {
    this.init();
  }
  init() {
    const {
      editor
    } = this.props;
    if (editor && editor.options.element) {
      if (editor.contentComponent) {
        return;
      }
      const element = this.editorContentRef.current;
      element.append(...editor.options.element.childNodes);
      editor.setOptions({
        element
      });
      editor.contentComponent = this;
      editor.createNodeViews();
      this.initialized = true;
    }
  }
  maybeFlushSync(fn3) {
    if (this.initialized) {
      reactDomExports.flushSync(fn3);
    } else {
      fn3();
    }
  }
  setRenderer(id, renderer) {
    this.maybeFlushSync(() => {
      this.setState(({
        renderers
      }) => ({
        renderers: {
          ...renderers,
          [id]: renderer
        }
      }));
    });
  }
  removeRenderer(id) {
    this.maybeFlushSync(() => {
      this.setState(({
        renderers
      }) => {
        const nextRenderers = {
          ...renderers
        };
        delete nextRenderers[id];
        return {
          renderers: nextRenderers
        };
      });
    });
  }
  componentWillUnmount() {
    const {
      editor
    } = this.props;
    if (!editor) {
      return;
    }
    this.initialized = false;
    if (!editor.isDestroyed) {
      editor.view.setProps({
        nodeViews: {}
      });
    }
    editor.contentComponent = null;
    if (!editor.options.element.firstChild) {
      return;
    }
    const newElement = document.createElement("div");
    newElement.append(...editor.options.element.childNodes);
    editor.setOptions({
      element: newElement
    });
  }
  render() {
    const {
      editor,
      innerRef,
      ...rest
    } = this.props;
    return /* @__PURE__ */ jsxs(Fragment$1, {
      children: [/* @__PURE__ */ jsx("div", {
        ref: mergeRefs(innerRef, this.editorContentRef),
        ...rest
      }), /* @__PURE__ */ jsx(Portals, {
        renderers: this.state.renderers
      })]
    });
  }
}
const EditorContentWithKey = reactExports.forwardRef((props, ref) => {
  const key = e$1.useMemo(() => {
    return Math.floor(Math.random() * 4294967295).toString();
  }, [props.editor]);
  return /* @__PURE__ */ jsx(PureEditorContent, {
    innerRef: ref,
    ...props
  }, key);
});
const EditorContent = e$1.memo(EditorContentWithKey);
class Editor2 extends Editor$1 {
  constructor() {
    super(...arguments);
    this.contentComponent = null;
  }
}
const useEditor = (options = {}, deps = []) => {
  const editorRef = reactExports.useRef(null);
  const [, forceUpdate] = reactExports.useState({});
  const {
    onBeforeCreate,
    onBlur,
    onCreate: onCreate2,
    onDestroy: onDestroy2,
    onFocus,
    onSelectionUpdate,
    onTransaction,
    onUpdate
  } = options;
  const onBeforeCreateRef = reactExports.useRef(onBeforeCreate);
  const onBlurRef = reactExports.useRef(onBlur);
  const onCreateRef = reactExports.useRef(onCreate2);
  const onDestroyRef = reactExports.useRef(onDestroy2);
  const onFocusRef = reactExports.useRef(onFocus);
  const onSelectionUpdateRef = reactExports.useRef(onSelectionUpdate);
  const onTransactionRef = reactExports.useRef(onTransaction);
  const onUpdateRef = reactExports.useRef(onUpdate);
  reactExports.useEffect(() => {
    if (!editorRef.current) {
      return;
    }
    if (onBeforeCreate) {
      editorRef.current.off("beforeCreate", onBeforeCreateRef.current);
      editorRef.current.on("beforeCreate", onBeforeCreate);
      onBeforeCreateRef.current = onBeforeCreate;
    }
    if (onBlur) {
      editorRef.current.off("blur", onBlurRef.current);
      editorRef.current.on("blur", onBlur);
      onBlurRef.current = onBlur;
    }
    if (onCreate2) {
      editorRef.current.off("create", onCreateRef.current);
      editorRef.current.on("create", onCreate2);
      onCreateRef.current = onCreate2;
    }
    if (onDestroy2) {
      editorRef.current.off("destroy", onDestroyRef.current);
      editorRef.current.on("destroy", onDestroy2);
      onDestroyRef.current = onDestroy2;
    }
    if (onFocus) {
      editorRef.current.off("focus", onFocusRef.current);
      editorRef.current.on("focus", onFocus);
      onFocusRef.current = onFocus;
    }
    if (onSelectionUpdate) {
      editorRef.current.off("selectionUpdate", onSelectionUpdateRef.current);
      editorRef.current.on("selectionUpdate", onSelectionUpdate);
      onSelectionUpdateRef.current = onSelectionUpdate;
    }
    if (onTransaction) {
      editorRef.current.off("transaction", onTransactionRef.current);
      editorRef.current.on("transaction", onTransaction);
      onTransactionRef.current = onTransaction;
    }
    if (onUpdate) {
      editorRef.current.off("update", onUpdateRef.current);
      editorRef.current.on("update", onUpdate);
      onUpdateRef.current = onUpdate;
    }
  }, [onBeforeCreate, onBlur, onCreate2, onDestroy2, onFocus, onSelectionUpdate, onTransaction, onUpdate, editorRef.current]);
  reactExports.useEffect(() => {
    let isMounted = true;
    editorRef.current = new Editor2(options);
    editorRef.current.on("transaction", () => {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          if (isMounted) {
            forceUpdate({});
          }
        });
      });
    });
    return () => {
      isMounted = false;
    };
  }, deps);
  reactExports.useEffect(() => {
    return () => {
      var _a;
      return (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    };
  }, []);
  return editorRef.current;
};
const EditorContext = reactExports.createContext({
  editor: null
});
EditorContext.Consumer;
const useCurrentEditor = () => reactExports.useContext(EditorContext);
const BubbleMenu = (props) => {
  const [element, setElement] = reactExports.useState(null);
  const {
    editor: currentEditor
  } = useCurrentEditor();
  reactExports.useEffect(() => {
    var _a;
    if (!element) {
      return;
    }
    if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {
      return;
    }
    const {
      pluginKey = "bubbleMenu",
      editor,
      tippyOptions = {},
      updateDelay,
      shouldShow = null
    } = props;
    const menuEditor = editor || currentEditor;
    if (!menuEditor) {
      console.warn("BubbleMenu component is not rendered inside of an editor component or does not have editor prop.");
      return;
    }
    const plugin = BubbleMenuPlugin({
      updateDelay,
      editor: menuEditor,
      element,
      pluginKey,
      shouldShow,
      tippyOptions
    });
    menuEditor.registerPlugin(plugin);
    return () => menuEditor.unregisterPlugin(pluginKey);
  }, [props.editor, currentEditor, element]);
  return /* @__PURE__ */ jsx("div", {
    ref: setElement,
    className: props.className,
    style: {
      visibility: "hidden"
    },
    children: props.children
  });
};
const ReactNodeViewContext = reactExports.createContext({
  onDragStart: void 0
});
const useReactNodeView = () => reactExports.useContext(ReactNodeViewContext);
e$1.forwardRef((props, ref) => {
  const {
    onDragStart
  } = useReactNodeView();
  const Tag = props.as || "div";
  return /* @__PURE__ */ jsx(Tag, {
    ...props,
    ref,
    "data-node-view-wrapper": "",
    onDragStart,
    style: {
      whiteSpace: "normal",
      ...props.style
    }
  });
});
const Text$1 = Node$1.create({
  name: "text",
  group: "inline"
});
const starInputRegex$1 = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/;
const starPasteRegex$1 = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g;
const underscoreInputRegex$1 = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/;
const underscorePasteRegex$1 = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/g;
const Bold = Mark2.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (node2) => node2.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight",
        getAttrs: (value) => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["strong", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setBold: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleBold: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetBold: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: starInputRegex$1,
        type: this.type
      }),
      markInputRule({
        find: underscoreInputRegex$1,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: starPasteRegex$1,
        type: this.type
      }),
      markPasteRule({
        find: underscorePasteRegex$1,
        type: this.type
      })
    ];
  }
});
const starInputRegex = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/;
const starPasteRegex = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g;
const underscoreInputRegex = /(?:^|\s)((?:_)((?:[^_]+))(?:_))$/;
const underscorePasteRegex = /(?:^|\s)((?:_)((?:[^_]+))(?:_))/g;
const Italic = Mark2.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (node2) => node2.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["em", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleItalic: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetItalic: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: starInputRegex,
        type: this.type
      }),
      markInputRule({
        find: underscoreInputRegex,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: starPasteRegex,
        type: this.type
      }),
      markPasteRule({
        find: underscorePasteRegex,
        type: this.type
      })
    ];
  }
});
const encodedTlds = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster6d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2";
const encodedUtlds = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2";
const assign$1 = (target, properties2) => {
  for (const key in properties2) {
    target[key] = properties2[key];
  }
  return target;
};
const numeric = "numeric";
const ascii = "ascii";
const alpha = "alpha";
const asciinumeric = "asciinumeric";
const alphanumeric = "alphanumeric";
const domain = "domain";
const emoji = "emoji";
const scheme = "scheme";
const slashscheme = "slashscheme";
const whitespace = "whitespace";
function registerGroup(name, groups) {
  if (!(name in groups)) {
    groups[name] = [];
  }
  return groups[name];
}
function addToGroups(t3, flags, groups) {
  if (flags[numeric]) {
    flags[asciinumeric] = true;
    flags[alphanumeric] = true;
  }
  if (flags[ascii]) {
    flags[asciinumeric] = true;
    flags[alpha] = true;
  }
  if (flags[asciinumeric]) {
    flags[alphanumeric] = true;
  }
  if (flags[alpha]) {
    flags[alphanumeric] = true;
  }
  if (flags[alphanumeric]) {
    flags[domain] = true;
  }
  if (flags[emoji]) {
    flags[domain] = true;
  }
  for (const k3 in flags) {
    const group = registerGroup(k3, groups);
    if (group.indexOf(t3) < 0) {
      group.push(t3);
    }
  }
}
function flagsForToken(t3, groups) {
  const result = {};
  for (const c3 in groups) {
    if (groups[c3].indexOf(t3) >= 0) {
      result[c3] = true;
    }
  }
  return result;
}
function State(token2) {
  if (token2 === void 0) {
    token2 = null;
  }
  this.j = {};
  this.jr = [];
  this.jd = null;
  this.t = token2;
}
State.groups = {};
State.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(input) {
    const state = this;
    const nextState = state.j[input];
    if (nextState) {
      return nextState;
    }
    for (let i2 = 0; i2 < state.jr.length; i2++) {
      const regex = state.jr[i2][0];
      const nextState2 = state.jr[i2][1];
      if (nextState2 && regex.test(input)) {
        return nextState2;
      }
    }
    return state.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(input, exactOnly) {
    if (exactOnly === void 0) {
      exactOnly = false;
    }
    return exactOnly ? input in this.j : !!this.go(input);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(inputs, next2, flags, groups) {
    for (let i2 = 0; i2 < inputs.length; i2++) {
      this.tt(inputs[i2], next2, flags, groups);
    }
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(regexp, next2, flags, groups) {
    groups = groups || State.groups;
    let nextState;
    if (next2 && next2.j) {
      nextState = next2;
    } else {
      nextState = new State(next2);
      if (flags && groups) {
        addToGroups(next2, flags, groups);
      }
    }
    this.jr.push([regexp, nextState]);
    return nextState;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(input, next2, flags, groups) {
    let state = this;
    const len = input.length;
    if (!len) {
      return state;
    }
    for (let i2 = 0; i2 < len - 1; i2++) {
      state = state.tt(input[i2]);
    }
    return state.tt(input[len - 1], next2, flags, groups);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(input, next2, flags, groups) {
    groups = groups || State.groups;
    const state = this;
    if (next2 && next2.j) {
      state.j[input] = next2;
      return next2;
    }
    const t3 = next2;
    let nextState, templateState = state.go(input);
    if (templateState) {
      nextState = new State();
      assign$1(nextState.j, templateState.j);
      nextState.jr.push.apply(nextState.jr, templateState.jr);
      nextState.jd = templateState.jd;
      nextState.t = templateState.t;
    } else {
      nextState = new State();
    }
    if (t3) {
      if (groups) {
        if (nextState.t && typeof nextState.t === "string") {
          const allFlags = assign$1(flagsForToken(nextState.t, groups), flags);
          addToGroups(t3, allFlags, groups);
        } else if (flags) {
          addToGroups(t3, flags, groups);
        }
      }
      nextState.t = t3;
    }
    state.j[input] = nextState;
    return nextState;
  }
};
const ta = (state, input, next2, flags, groups) => state.ta(input, next2, flags, groups);
const tr$1 = (state, regexp, next2, flags, groups) => state.tr(regexp, next2, flags, groups);
const ts = (state, input, next2, flags, groups) => state.ts(input, next2, flags, groups);
const tt$1 = (state, input, next2, flags, groups) => state.tt(input, next2, flags, groups);
const WORD = "WORD";
const UWORD = "UWORD";
const LOCALHOST = "LOCALHOST";
const TLD = "TLD";
const UTLD = "UTLD";
const SCHEME = "SCHEME";
const SLASH_SCHEME = "SLASH_SCHEME";
const NUM = "NUM";
const WS = "WS";
const NL$1 = "NL";
const OPENBRACE = "OPENBRACE";
const CLOSEBRACE = "CLOSEBRACE";
const OPENBRACKET = "OPENBRACKET";
const CLOSEBRACKET = "CLOSEBRACKET";
const OPENPAREN = "OPENPAREN";
const CLOSEPAREN = "CLOSEPAREN";
const OPENANGLEBRACKET = "OPENANGLEBRACKET";
const CLOSEANGLEBRACKET = "CLOSEANGLEBRACKET";
const FULLWIDTHLEFTPAREN = "FULLWIDTHLEFTPAREN";
const FULLWIDTHRIGHTPAREN = "FULLWIDTHRIGHTPAREN";
const LEFTCORNERBRACKET = "LEFTCORNERBRACKET";
const RIGHTCORNERBRACKET = "RIGHTCORNERBRACKET";
const LEFTWHITECORNERBRACKET = "LEFTWHITECORNERBRACKET";
const RIGHTWHITECORNERBRACKET = "RIGHTWHITECORNERBRACKET";
const FULLWIDTHLESSTHAN = "FULLWIDTHLESSTHAN";
const FULLWIDTHGREATERTHAN = "FULLWIDTHGREATERTHAN";
const AMPERSAND = "AMPERSAND";
const APOSTROPHE = "APOSTROPHE";
const ASTERISK = "ASTERISK";
const AT = "AT";
const BACKSLASH = "BACKSLASH";
const BACKTICK = "BACKTICK";
const CARET = "CARET";
const COLON = "COLON";
const COMMA = "COMMA";
const DOLLAR = "DOLLAR";
const DOT = "DOT";
const EQUALS = "EQUALS";
const EXCLAMATION = "EXCLAMATION";
const HYPHEN = "HYPHEN";
const PERCENT = "PERCENT";
const PIPE = "PIPE";
const PLUS = "PLUS";
const POUND = "POUND";
const QUERY = "QUERY";
const QUOTE = "QUOTE";
const SEMI = "SEMI";
const SLASH = "SLASH";
const TILDE = "TILDE";
const UNDERSCORE = "UNDERSCORE";
const EMOJI$1 = "EMOJI";
const SYM = "SYM";
var tk = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  WORD,
  UWORD,
  LOCALHOST,
  TLD,
  UTLD,
  SCHEME,
  SLASH_SCHEME,
  NUM,
  WS,
  NL: NL$1,
  OPENBRACE,
  CLOSEBRACE,
  OPENBRACKET,
  CLOSEBRACKET,
  OPENPAREN,
  CLOSEPAREN,
  OPENANGLEBRACKET,
  CLOSEANGLEBRACKET,
  FULLWIDTHLEFTPAREN,
  FULLWIDTHRIGHTPAREN,
  LEFTCORNERBRACKET,
  RIGHTCORNERBRACKET,
  LEFTWHITECORNERBRACKET,
  RIGHTWHITECORNERBRACKET,
  FULLWIDTHLESSTHAN,
  FULLWIDTHGREATERTHAN,
  AMPERSAND,
  APOSTROPHE,
  ASTERISK,
  AT,
  BACKSLASH,
  BACKTICK,
  CARET,
  COLON,
  COMMA,
  DOLLAR,
  DOT,
  EQUALS,
  EXCLAMATION,
  HYPHEN,
  PERCENT,
  PIPE,
  PLUS,
  POUND,
  QUERY,
  QUOTE,
  SEMI,
  SLASH,
  TILDE,
  UNDERSCORE,
  EMOJI: EMOJI$1,
  SYM
});
const ASCII_LETTER = /[a-z]/;
const LETTER = /\p{L}/u;
const EMOJI = /\p{Emoji}/u;
const DIGIT = /\d/;
const SPACE = /\s/;
const NL = "\n";
const EMOJI_VARIATION = "️";
const EMOJI_JOINER = "‍";
let tlds = null, utlds = null;
function init$2(customSchemes) {
  if (customSchemes === void 0) {
    customSchemes = [];
  }
  const groups = {};
  State.groups = groups;
  const Start = new State();
  if (tlds == null) {
    tlds = decodeTlds(encodedTlds);
  }
  if (utlds == null) {
    utlds = decodeTlds(encodedUtlds);
  }
  tt$1(Start, "'", APOSTROPHE);
  tt$1(Start, "{", OPENBRACE);
  tt$1(Start, "}", CLOSEBRACE);
  tt$1(Start, "[", OPENBRACKET);
  tt$1(Start, "]", CLOSEBRACKET);
  tt$1(Start, "(", OPENPAREN);
  tt$1(Start, ")", CLOSEPAREN);
  tt$1(Start, "<", OPENANGLEBRACKET);
  tt$1(Start, ">", CLOSEANGLEBRACKET);
  tt$1(Start, "（", FULLWIDTHLEFTPAREN);
  tt$1(Start, "）", FULLWIDTHRIGHTPAREN);
  tt$1(Start, "「", LEFTCORNERBRACKET);
  tt$1(Start, "」", RIGHTCORNERBRACKET);
  tt$1(Start, "『", LEFTWHITECORNERBRACKET);
  tt$1(Start, "』", RIGHTWHITECORNERBRACKET);
  tt$1(Start, "＜", FULLWIDTHLESSTHAN);
  tt$1(Start, "＞", FULLWIDTHGREATERTHAN);
  tt$1(Start, "&", AMPERSAND);
  tt$1(Start, "*", ASTERISK);
  tt$1(Start, "@", AT);
  tt$1(Start, "`", BACKTICK);
  tt$1(Start, "^", CARET);
  tt$1(Start, ":", COLON);
  tt$1(Start, ",", COMMA);
  tt$1(Start, "$", DOLLAR);
  tt$1(Start, ".", DOT);
  tt$1(Start, "=", EQUALS);
  tt$1(Start, "!", EXCLAMATION);
  tt$1(Start, "-", HYPHEN);
  tt$1(Start, "%", PERCENT);
  tt$1(Start, "|", PIPE);
  tt$1(Start, "+", PLUS);
  tt$1(Start, "#", POUND);
  tt$1(Start, "?", QUERY);
  tt$1(Start, '"', QUOTE);
  tt$1(Start, "/", SLASH);
  tt$1(Start, ";", SEMI);
  tt$1(Start, "~", TILDE);
  tt$1(Start, "_", UNDERSCORE);
  tt$1(Start, "\\", BACKSLASH);
  const Num = tr$1(Start, DIGIT, NUM, {
    [numeric]: true
  });
  tr$1(Num, DIGIT, Num);
  const Word = tr$1(Start, ASCII_LETTER, WORD, {
    [ascii]: true
  });
  tr$1(Word, ASCII_LETTER, Word);
  const UWord = tr$1(Start, LETTER, UWORD, {
    [alpha]: true
  });
  tr$1(UWord, ASCII_LETTER);
  tr$1(UWord, LETTER, UWord);
  const Ws = tr$1(Start, SPACE, WS, {
    [whitespace]: true
  });
  tt$1(Start, NL, NL$1, {
    [whitespace]: true
  });
  tt$1(Ws, NL);
  tr$1(Ws, SPACE, Ws);
  const Emoji = tr$1(Start, EMOJI, EMOJI$1, {
    [emoji]: true
  });
  tr$1(Emoji, EMOJI, Emoji);
  tt$1(Emoji, EMOJI_VARIATION, Emoji);
  const EmojiJoiner = tt$1(Emoji, EMOJI_JOINER);
  tr$1(EmojiJoiner, EMOJI, Emoji);
  const wordjr = [[ASCII_LETTER, Word]];
  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];
  for (let i2 = 0; i2 < tlds.length; i2++) {
    fastts(Start, tlds[i2], TLD, WORD, wordjr);
  }
  for (let i2 = 0; i2 < utlds.length; i2++) {
    fastts(Start, utlds[i2], UTLD, UWORD, uwordjr);
  }
  addToGroups(TLD, {
    tld: true,
    ascii: true
  }, groups);
  addToGroups(UTLD, {
    utld: true,
    alpha: true
  }, groups);
  fastts(Start, "file", SCHEME, WORD, wordjr);
  fastts(Start, "mailto", SCHEME, WORD, wordjr);
  fastts(Start, "http", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "https", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftp", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftps", SLASH_SCHEME, WORD, wordjr);
  addToGroups(SCHEME, {
    scheme: true,
    ascii: true
  }, groups);
  addToGroups(SLASH_SCHEME, {
    slashscheme: true,
    ascii: true
  }, groups);
  customSchemes = customSchemes.sort((a4, b3) => a4[0] > b3[0] ? 1 : -1);
  for (let i2 = 0; i2 < customSchemes.length; i2++) {
    const sch = customSchemes[i2][0];
    const optionalSlashSlash = customSchemes[i2][1];
    const flags = optionalSlashSlash ? {
      [scheme]: true
    } : {
      [slashscheme]: true
    };
    if (sch.indexOf("-") >= 0) {
      flags[domain] = true;
    } else if (!ASCII_LETTER.test(sch)) {
      flags[numeric] = true;
    } else if (DIGIT.test(sch)) {
      flags[asciinumeric] = true;
    } else {
      flags[ascii] = true;
    }
    ts(Start, sch, sch, flags);
  }
  ts(Start, "localhost", LOCALHOST, {
    ascii: true
  });
  Start.jd = new State(SYM);
  return {
    start: Start,
    tokens: assign$1({
      groups
    }, tk)
  };
}
function run$1(start2, str) {
  const iterable = stringToArray(str.replace(/[A-Z]/g, (c3) => c3.toLowerCase()));
  const charCount = iterable.length;
  const tokens = [];
  let cursor2 = 0;
  let charCursor = 0;
  while (charCursor < charCount) {
    let state = start2;
    let nextState = null;
    let tokenLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    let charsSinceAccepts = -1;
    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        charsSinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts += iterable[charCursor].length;
        charsSinceAccepts++;
      }
      tokenLength += iterable[charCursor].length;
      cursor2 += iterable[charCursor].length;
      charCursor++;
    }
    cursor2 -= sinceAccepts;
    charCursor -= charsSinceAccepts;
    tokenLength -= sinceAccepts;
    tokens.push({
      t: latestAccepting.t,
      // token type/name
      v: str.slice(cursor2 - tokenLength, cursor2),
      // string value
      s: cursor2 - tokenLength,
      // start index
      e: cursor2
      // end index (excluding)
    });
  }
  return tokens;
}
function stringToArray(str) {
  const result = [];
  const len = str.length;
  let index2 = 0;
  while (index2 < len) {
    let first2 = str.charCodeAt(index2);
    let second;
    let char2 = first2 < 55296 || first2 > 56319 || index2 + 1 === len || (second = str.charCodeAt(index2 + 1)) < 56320 || second > 57343 ? str[index2] : str.slice(index2, index2 + 2);
    result.push(char2);
    index2 += char2.length;
  }
  return result;
}
function fastts(state, input, t3, defaultt, jr) {
  let next2;
  const len = input.length;
  for (let i2 = 0; i2 < len - 1; i2++) {
    const char2 = input[i2];
    if (state.j[char2]) {
      next2 = state.j[char2];
    } else {
      next2 = new State(defaultt);
      next2.jr = jr.slice();
      state.j[char2] = next2;
    }
    state = next2;
  }
  next2 = new State(t3);
  next2.jr = jr.slice();
  state.j[input[len - 1]] = next2;
  return next2;
}
function decodeTlds(encoded) {
  const words = [];
  const stack = [];
  let i2 = 0;
  let digits = "0123456789";
  while (i2 < encoded.length) {
    let popDigitCount = 0;
    while (digits.indexOf(encoded[i2 + popDigitCount]) >= 0) {
      popDigitCount++;
    }
    if (popDigitCount > 0) {
      words.push(stack.join(""));
      for (let popCount = parseInt(encoded.substring(i2, i2 + popDigitCount), 10); popCount > 0; popCount--) {
        stack.pop();
      }
      i2 += popDigitCount;
    } else {
      stack.push(encoded[i2]);
      i2++;
    }
  }
  return words;
}
const defaults = {
  defaultProtocol: "http",
  events: null,
  format: noop,
  formatHref: noop,
  nl2br: false,
  tagName: "a",
  target: null,
  rel: null,
  validate: true,
  truncate: Infinity,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Options(opts, defaultRender) {
  if (defaultRender === void 0) {
    defaultRender = null;
  }
  let o2 = assign$1({}, defaults);
  if (opts) {
    o2 = assign$1(o2, opts instanceof Options ? opts.o : opts);
  }
  const ignoredTags = o2.ignoreTags;
  const uppercaseIgnoredTags = [];
  for (let i2 = 0; i2 < ignoredTags.length; i2++) {
    uppercaseIgnoredTags.push(ignoredTags[i2].toUpperCase());
  }
  this.o = o2;
  if (defaultRender) {
    this.defaultRender = defaultRender;
  }
  this.ignoreTags = uppercaseIgnoredTags;
}
Options.prototype = {
  o: defaults,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(ir) {
    return ir;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(token2) {
    return this.get("validate", token2.toString(), token2);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(key, operator, token2) {
    const isCallable = operator != null;
    let option = this.o[key];
    if (!option) {
      return option;
    }
    if (typeof option === "object") {
      option = token2.t in option ? option[token2.t] : defaults[key];
      if (typeof option === "function" && isCallable) {
        option = option(operator, token2);
      }
    } else if (typeof option === "function" && isCallable) {
      option = option(operator, token2.t, token2);
    }
    return option;
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(key, operator, token2) {
    let obj = this.o[key];
    if (typeof obj === "function" && operator != null) {
      obj = obj(operator, token2.t, token2);
    }
    return obj;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(token2) {
    const ir = token2.render(this);
    const renderFn = this.get("render", null, token2) || this.defaultRender;
    return renderFn(ir, token2.t, token2);
  }
};
function noop(val) {
  return val;
}
function MultiToken(value, tokens) {
  this.t = "token";
  this.v = value;
  this.tk = tokens;
}
MultiToken.prototype = {
  isLink: false,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
  */
  toHref(scheme2) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(options) {
    const val = this.toString();
    const truncate = options.get("truncate", val, this);
    const formatted = options.get("format", val, this);
    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + "…" : formatted;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(options) {
    return options.get("formatHref", this.toHref(options.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(protocol) {
    if (protocol === void 0) {
      protocol = defaults.defaultProtocol;
    }
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(protocol),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(options) {
    return {
      type: this.t,
      value: this.toFormattedString(options),
      isLink: this.isLink,
      href: this.toFormattedHref(options),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(options) {
    return options.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(options) {
    const token2 = this;
    const href = this.toHref(options.get("defaultProtocol"));
    const formattedHref = options.get("formatHref", href, this);
    const tagName = options.get("tagName", href, token2);
    const content = this.toFormattedString(options);
    const attributes = {};
    const className = options.get("className", href, token2);
    const target = options.get("target", href, token2);
    const rel = options.get("rel", href, token2);
    const attrs = options.getObj("attributes", href, token2);
    const eventListeners2 = options.getObj("events", href, token2);
    attributes.href = formattedHref;
    if (className) {
      attributes.class = className;
    }
    if (target) {
      attributes.target = target;
    }
    if (rel) {
      attributes.rel = rel;
    }
    if (attrs) {
      assign$1(attributes, attrs);
    }
    return {
      tagName,
      attributes,
      content,
      eventListeners: eventListeners2
    };
  }
};
function createTokenClass(type, props) {
  class Token extends MultiToken {
    constructor(value, tokens) {
      super(value, tokens);
      this.t = type;
    }
  }
  for (const p2 in props) {
    Token.prototype[p2] = props[p2];
  }
  Token.t = type;
  return Token;
}
const Email = createTokenClass("email", {
  isLink: true,
  toHref() {
    return "mailto:" + this.toString();
  }
});
const Text = createTokenClass("text");
const Nl = createTokenClass("nl");
const Url = createTokenClass("url", {
  isLink: true,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(scheme2) {
    if (scheme2 === void 0) {
      scheme2 = defaults.defaultProtocol;
    }
    return this.hasProtocol() ? this.v : `${scheme2}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const tokens = this.tk;
    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;
  }
});
const makeState = (arg) => new State(arg);
function init$1(_ref2) {
  let {
    groups
  } = _ref2;
  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);
  const qsNonAccepting = [APOSTROPHE, COLON, COMMA, DOT, EXCLAMATION, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];
  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];
  const Start = makeState();
  const Localpart = tt$1(Start, TILDE);
  ta(Localpart, localpartAccepting, Localpart);
  ta(Localpart, groups.domain, Localpart);
  const Domain = makeState(), Scheme = makeState(), SlashScheme = makeState();
  ta(Start, groups.domain, Domain);
  ta(Start, groups.scheme, Scheme);
  ta(Start, groups.slashscheme, SlashScheme);
  ta(Domain, localpartAccepting, Localpart);
  ta(Domain, groups.domain, Domain);
  const LocalpartAt = tt$1(Domain, AT);
  tt$1(Localpart, AT, LocalpartAt);
  tt$1(Scheme, AT, LocalpartAt);
  tt$1(SlashScheme, AT, LocalpartAt);
  const LocalpartDot = tt$1(Localpart, DOT);
  ta(LocalpartDot, localpartAccepting, Localpart);
  ta(LocalpartDot, groups.domain, Localpart);
  const EmailDomain = makeState();
  ta(LocalpartAt, groups.domain, EmailDomain);
  ta(EmailDomain, groups.domain, EmailDomain);
  const EmailDomainDot = tt$1(EmailDomain, DOT);
  ta(EmailDomainDot, groups.domain, EmailDomain);
  const Email$1 = makeState(Email);
  ta(EmailDomainDot, groups.tld, Email$1);
  ta(EmailDomainDot, groups.utld, Email$1);
  tt$1(LocalpartAt, LOCALHOST, Email$1);
  const EmailDomainHyphen = tt$1(EmailDomain, HYPHEN);
  ta(EmailDomainHyphen, groups.domain, EmailDomain);
  ta(Email$1, groups.domain, EmailDomain);
  tt$1(Email$1, DOT, EmailDomainDot);
  tt$1(Email$1, HYPHEN, EmailDomainHyphen);
  const EmailColon = tt$1(Email$1, COLON);
  ta(EmailColon, groups.numeric, Email);
  const DomainHyphen = tt$1(Domain, HYPHEN);
  const DomainDot = tt$1(Domain, DOT);
  ta(DomainHyphen, groups.domain, Domain);
  ta(DomainDot, localpartAccepting, Localpart);
  ta(DomainDot, groups.domain, Domain);
  const DomainDotTld = makeState(Url);
  ta(DomainDot, groups.tld, DomainDotTld);
  ta(DomainDot, groups.utld, DomainDotTld);
  ta(DomainDotTld, groups.domain, Domain);
  ta(DomainDotTld, localpartAccepting, Localpart);
  tt$1(DomainDotTld, DOT, DomainDot);
  tt$1(DomainDotTld, HYPHEN, DomainHyphen);
  tt$1(DomainDotTld, AT, LocalpartAt);
  const DomainDotTldColon = tt$1(DomainDotTld, COLON);
  const DomainDotTldColonPort = makeState(Url);
  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);
  const Url$1 = makeState(Url);
  const UrlNonaccept = makeState();
  ta(Url$1, qsAccepting, Url$1);
  ta(Url$1, qsNonAccepting, UrlNonaccept);
  ta(UrlNonaccept, qsAccepting, Url$1);
  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);
  tt$1(DomainDotTld, SLASH, Url$1);
  tt$1(DomainDotTldColonPort, SLASH, Url$1);
  const SchemeColon = tt$1(Scheme, COLON);
  const SlashSchemeColon = tt$1(SlashScheme, COLON);
  const SlashSchemeColonSlash = tt$1(SlashSchemeColon, SLASH);
  const UriPrefix = tt$1(SlashSchemeColonSlash, SLASH);
  ta(Scheme, groups.domain, Domain);
  tt$1(Scheme, DOT, DomainDot);
  tt$1(Scheme, HYPHEN, DomainHyphen);
  ta(SlashScheme, groups.domain, Domain);
  tt$1(SlashScheme, DOT, DomainDot);
  tt$1(SlashScheme, HYPHEN, DomainHyphen);
  ta(SchemeColon, groups.domain, Url$1);
  tt$1(SchemeColon, SLASH, Url$1);
  ta(UriPrefix, groups.domain, Url$1);
  ta(UriPrefix, qsAccepting, Url$1);
  tt$1(UriPrefix, SLASH, Url$1);
  const bracketPairs = [
    [OPENBRACE, CLOSEBRACE],
    // {}
    [OPENBRACKET, CLOSEBRACKET],
    // []
    [OPENPAREN, CLOSEPAREN],
    // ()
    [OPENANGLEBRACKET, CLOSEANGLEBRACKET],
    // <>
    [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],
    // （）
    [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],
    // 「」
    [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],
    // 『』
    [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN]
    // ＜＞
  ];
  for (let i2 = 0; i2 < bracketPairs.length; i2++) {
    const [OPEN, CLOSE] = bracketPairs[i2];
    const UrlOpen = tt$1(Url$1, OPEN);
    tt$1(UrlNonaccept, OPEN, UrlOpen);
    tt$1(UrlOpen, CLOSE, Url$1);
    const UrlOpenQ = makeState(Url);
    ta(UrlOpen, qsAccepting, UrlOpenQ);
    const UrlOpenSyms = makeState();
    ta(UrlOpen, qsNonAccepting);
    ta(UrlOpenQ, qsAccepting, UrlOpenQ);
    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);
    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);
    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);
    tt$1(UrlOpenQ, CLOSE, Url$1);
    tt$1(UrlOpenSyms, CLOSE, Url$1);
  }
  tt$1(Start, LOCALHOST, DomainDotTld);
  tt$1(Start, NL$1, Nl);
  return {
    start: Start,
    tokens: tk
  };
}
function run(start2, input, tokens) {
  let len = tokens.length;
  let cursor2 = 0;
  let multis = [];
  let textTokens = [];
  while (cursor2 < len) {
    let state = start2;
    let secondState = null;
    let nextState = null;
    let multiLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    while (cursor2 < len && !(secondState = state.go(tokens[cursor2].t))) {
      textTokens.push(tokens[cursor2++]);
    }
    while (cursor2 < len && (nextState = secondState || state.go(tokens[cursor2].t))) {
      secondState = null;
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts++;
      }
      cursor2++;
      multiLength++;
    }
    if (sinceAccepts < 0) {
      cursor2 -= multiLength;
      if (cursor2 < len) {
        textTokens.push(tokens[cursor2]);
        cursor2++;
      }
    } else {
      if (textTokens.length > 0) {
        multis.push(initMultiToken(Text, input, textTokens));
        textTokens = [];
      }
      cursor2 -= sinceAccepts;
      multiLength -= sinceAccepts;
      const Multi = latestAccepting.t;
      const subtokens = tokens.slice(cursor2 - multiLength, cursor2);
      multis.push(initMultiToken(Multi, input, subtokens));
    }
  }
  if (textTokens.length > 0) {
    multis.push(initMultiToken(Text, input, textTokens));
  }
  return multis;
}
function initMultiToken(Multi, input, tokens) {
  const startIdx = tokens[0].s;
  const endIdx = tokens[tokens.length - 1].e;
  const value = input.slice(startIdx, endIdx);
  return new Multi(value, tokens);
}
const warn = typeof console !== "undefined" && console && console.warn || (() => {
});
const warnAdvice = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.";
const INIT = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: false
};
function reset() {
  State.groups = {};
  INIT.scanner = null;
  INIT.parser = null;
  INIT.tokenQueue = [];
  INIT.pluginQueue = [];
  INIT.customSchemes = [];
  INIT.initialized = false;
}
function registerCustomProtocol(scheme2, optionalSlashSlash) {
  if (optionalSlashSlash === void 0) {
    optionalSlashSlash = false;
  }
  if (INIT.initialized) {
    warn(`linkifyjs: already initialized - will not register custom scheme "${scheme2}" ${warnAdvice}`);
  }
  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme2)) {
    throw new Error(`linkifyjs: incorrect scheme format.
1. Must only contain digits, lowercase ASCII letters or "-"
2. Cannot start or end with "-"
3. "-" cannot repeat`);
  }
  INIT.customSchemes.push([scheme2, optionalSlashSlash]);
}
function init() {
  INIT.scanner = init$2(INIT.customSchemes);
  for (let i2 = 0; i2 < INIT.tokenQueue.length; i2++) {
    INIT.tokenQueue[i2][1]({
      scanner: INIT.scanner
    });
  }
  INIT.parser = init$1(INIT.scanner.tokens);
  for (let i2 = 0; i2 < INIT.pluginQueue.length; i2++) {
    INIT.pluginQueue[i2][1]({
      scanner: INIT.scanner,
      parser: INIT.parser
    });
  }
  INIT.initialized = true;
}
function tokenize(str) {
  if (!INIT.initialized) {
    init();
  }
  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));
}
function find(str, type, opts) {
  if (type === void 0) {
    type = null;
  }
  if (opts === void 0) {
    opts = null;
  }
  if (type && typeof type === "object") {
    if (opts) {
      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
    }
    opts = type;
    type = null;
  }
  const options = new Options(opts);
  const tokens = tokenize(str);
  const filtered = [];
  for (let i2 = 0; i2 < tokens.length; i2++) {
    const token2 = tokens[i2];
    if (token2.isLink && (!type || token2.t === type) && options.check(token2)) {
      filtered.push(token2.toFormattedObject(options));
    }
  }
  return filtered;
}
function autolink(options) {
  return new Plugin({
    key: new PluginKey("autolink"),
    appendTransaction: (transactions, oldState, newState) => {
      const docChanges = transactions.some((transaction) => transaction.docChanged) && !oldState.doc.eq(newState.doc);
      const preventAutolink = transactions.some((transaction) => transaction.getMeta("preventAutolink"));
      if (!docChanges || preventAutolink) {
        return;
      }
      const { tr: tr2 } = newState;
      const transform = combineTransactionSteps(oldState.doc, [...transactions]);
      const changes = getChangedRanges(transform);
      changes.forEach(({ newRange }) => {
        const nodesInChangedRanges = findChildrenInRange(newState.doc, newRange, (node2) => node2.isTextblock);
        let textBlock;
        let textBeforeWhitespace;
        if (nodesInChangedRanges.length > 1) {
          textBlock = nodesInChangedRanges[0];
          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, void 0, " ");
        } else if (nodesInChangedRanges.length && newState.doc.textBetween(newRange.from, newRange.to, " ", " ").endsWith(" ")) {
          textBlock = nodesInChangedRanges[0];
          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, void 0, " ");
        }
        if (textBlock && textBeforeWhitespace) {
          const wordsBeforeWhitespace = textBeforeWhitespace.split(" ").filter((s4) => s4 !== "");
          if (wordsBeforeWhitespace.length <= 0) {
            return false;
          }
          const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];
          const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);
          if (!lastWordBeforeSpace) {
            return false;
          }
          find(lastWordBeforeSpace).filter((link) => link.isLink).map((link) => ({
            ...link,
            from: lastWordAndBlockOffset + link.start + 1,
            to: lastWordAndBlockOffset + link.end + 1
          })).filter((link) => {
            if (!newState.schema.marks.code) {
              return true;
            }
            return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code);
          }).filter((link) => {
            if (options.validate) {
              return options.validate(link.value);
            }
            return true;
          }).forEach((link) => {
            if (getMarksBetween(link.from, link.to, newState.doc).some((item) => item.mark.type === options.type)) {
              return;
            }
            tr2.addMark(link.from, link.to, options.type.create({
              href: link.href
            }));
          });
        }
      });
      if (!tr2.steps.length) {
        return;
      }
      return tr2;
    }
  });
}
function clickHandler(options) {
  return new Plugin({
    key: new PluginKey("handleClickLink"),
    props: {
      handleClick: (view, pos, event) => {
        var _a, _b;
        if (event.button !== 0) {
          return false;
        }
        let a4 = event.target;
        const els = [];
        while (a4.nodeName !== "DIV") {
          els.push(a4);
          a4 = a4.parentNode;
        }
        if (!els.find((value) => value.nodeName === "A")) {
          return false;
        }
        const attrs = getAttributes(view.state, options.type.name);
        const link = event.target;
        const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;
        const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;
        if (link && href) {
          window.open(href, target);
          return true;
        }
        return false;
      }
    }
  });
}
function pasteHandler(options) {
  return new Plugin({
    key: new PluginKey("handlePasteLink"),
    props: {
      handlePaste: (view, event, slice3) => {
        const { state } = view;
        const { selection } = state;
        const { empty: empty2 } = selection;
        if (empty2) {
          return false;
        }
        let textContent2 = "";
        slice3.content.forEach((node2) => {
          textContent2 += node2.textContent;
        });
        const link = find(textContent2).find((item) => item.isLink && item.value === textContent2);
        if (!textContent2 || !link) {
          return false;
        }
        options.editor.commands.setMark(options.type, {
          href: link.href
        });
        return true;
      }
    }
  });
}
const Link = Mark2.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: false,
  onCreate() {
    this.options.protocols.forEach((protocol) => {
      if (typeof protocol === "string") {
        registerCustomProtocol(protocol);
        return;
      }
      registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);
    });
  },
  onDestroy() {
    reset();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: true,
      linkOnPaste: true,
      autolink: true,
      protocols: [],
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      validate: void 0
    };
  },
  addAttributes() {
    return {
      href: {
        default: null
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      rel: {
        default: this.options.HTMLAttributes.rel
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [{ tag: 'a[href]:not([href *= "javascript:" i])' }];
  },
  renderHTML({ HTMLAttributes }) {
    var _a;
    if ((_a = HTMLAttributes.href) === null || _a === void 0 ? void 0 : _a.startsWith("javascript:")) {
      return ["a", mergeAttributes(this.options.HTMLAttributes, { ...HTMLAttributes, href: "" }), 0];
    }
    return ["a", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setLink: (attributes) => ({ chain }) => {
        return chain().setMark(this.name, attributes).setMeta("preventAutolink", true).run();
      },
      toggleLink: (attributes) => ({ chain }) => {
        return chain().toggleMark(this.name, attributes, { extendEmptyMarkRange: true }).setMeta("preventAutolink", true).run();
      },
      unsetLink: () => ({ chain }) => {
        return chain().unsetMark(this.name, { extendEmptyMarkRange: true }).setMeta("preventAutolink", true).run();
      }
    };
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: (text, event) => {
          var _a;
          const html = (_a = event === null || event === void 0 ? void 0 : event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text/html");
          const foundLinks = [];
          if (html) {
            const dom = new DOMParser().parseFromString(html, "text/html");
            const anchors = dom.querySelectorAll("a");
            if (anchors.length) {
              [...anchors].forEach((anchor) => foundLinks.push({
                text: anchor.innerText,
                data: {
                  href: anchor.getAttribute("href")
                },
                // get the index of the anchor inside the text
                // and add the length of the anchor text
                index: dom.body.innerText.indexOf(anchor.innerText) + anchor.innerText.length
              }));
            }
          }
          if (text) {
            const links = find(text).filter((item) => item.isLink);
            if (links.length) {
              links.forEach((link) => foundLinks.push({
                text: link.value,
                data: {
                  href: link.href
                },
                index: link.start
              }));
            }
          }
          return foundLinks;
        },
        type: this.type,
        getAttributes: (match2) => {
          var _a;
          return {
            href: (_a = match2.data) === null || _a === void 0 ? void 0 : _a.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const plugins = [];
    if (this.options.autolink) {
      plugins.push(autolink({
        type: this.type,
        validate: this.options.validate
      }));
    }
    if (this.options.openOnClick) {
      plugins.push(clickHandler({
        type: this.type
      }));
    }
    if (this.options.linkOnPaste) {
      plugins.push(pasteHandler({
        editor: this.editor,
        type: this.type
      }));
    }
    return plugins;
  }
});
const Underline = Mark2.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: false,
        getAttrs: (style2) => style2.includes("underline") ? {} : false
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["u", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleUnderline: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetUnderline: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
});
const inputRegex$3 = /(?:^|\s)((?:==)((?:[^~=]+))(?:==))$/;
const pasteRegex = /(?:^|\s)((?:==)((?:[^~=]+))(?:==))/g;
const Highlight = Mark2.create({
  name: "highlight",
  addOptions() {
    return {
      multicolor: false,
      HTMLAttributes: {}
    };
  },
  addAttributes() {
    if (!this.options.multicolor) {
      return {};
    }
    return {
      color: {
        default: null,
        parseHTML: (element) => element.getAttribute("data-color") || element.style.backgroundColor,
        renderHTML: (attributes) => {
          if (!attributes.color) {
            return {};
          }
          return {
            "data-color": attributes.color,
            style: `background-color: ${attributes.color}; color: inherit`
          };
        }
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "mark"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["mark", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setHighlight: (attributes) => ({ commands: commands2 }) => {
        return commands2.setMark(this.name, attributes);
      },
      toggleHighlight: (attributes) => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name, attributes);
      },
      unsetHighlight: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-h": () => this.editor.commands.toggleHighlight()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: inputRegex$3,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: pasteRegex,
        type: this.type
      })
    ];
  }
});
const TiptapToolbarButton = /* @__PURE__ */ createStyled(UnstyledButton, process.env.NODE_ENV === "production" ? {
  target: "etkoohp0"
} : {
  target: "etkoohp0",
  label: "TiptapToolbarButton"
})("height:40px;width:28px;flex:none;cursor:pointer;display:flex;align-items:center;justify-content:center;&:hover{color:#FFF;}", (props) => ({
  color: props.active ? "#FFF" : "#CCC",
  background: props.active ? "rgba(255, 255, 255, .1)" : void 0
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBUb29sYmFyQnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHbUMiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9FZGl0b3IvVGlwdGFwRWRpdG9yL1RpcHRhcFRvb2xiYXJCdXR0b24udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuXG5leHBvcnQgY29uc3QgVGlwdGFwVG9vbGJhckJ1dHRvbiA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbik8eyBhY3RpdmU/OiBib29sZWFuIH0+KFxuICB7XG4gICAgaGVpZ2h0OiA0MCxcbiAgICB3aWR0aDogMjgsXG4gICAgZmxleDogJ25vbmUnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBjb2xvcjogJyNGRkYnLFxuICAgIH0sXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICBjb2xvcjogcHJvcHMuYWN0aXZlID8gJyNGRkYnIDogJyNDQ0MnLFxuICAgIGJhY2tncm91bmQ6IHByb3BzLmFjdGl2ZSA/ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIC4xKScgOiB1bmRlZmluZWQsXG4gIH0pXG4pXG4iXX0= */");
function IconBold({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    width: size2,
    height: size2,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ jsx("path", {
      d: "M8 11h4.5a2.5 2.5 0 1 0 0-5H8v5zm10 4.5a4.5 4.5 0 0 1-4.5 4.5H6V4h6.5a4.5 4.5 0 0 1 3.256 7.606A4.498 4.498 0 0 1 18 15.5zM8 13v5h5.5a2.5 2.5 0 1 0 0-5H8z",
      fill: "currentColor"
    })
  });
}
function IconItalic({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M15 20H7v-2h2.927l2.116-12H9V4h8v2h-2.927l-2.116 12H15z",
      fill: "currentColor"
    })
  });
}
function IconUnderline({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M8 3v9a4 4 0 1 0 8 0V3h2v9a6 6 0 1 1-12 0V3h2zM4 20h16v2H4v-2z",
      fill: "currentColor"
    })
  });
}
function IconMark({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M15.243 4.515l-6.738 6.737-.707 2.121-1.04 1.041 2.828 2.829 1.04-1.041 2.122-.707 6.737-6.738-4.242-4.242zm6.364 3.535a1 1 0 0 1 0 1.414l-7.779 7.779-2.12.707-1.415 1.414a1 1 0 0 1-1.414 0l-4.243-4.243a1 1 0 0 1 0-1.414l1.414-1.414.707-2.121 7.779-7.779a1 1 0 0 1 1.414 0l5.657 5.657zm-6.364-.707l1.414 1.414-4.95 4.95-1.414-1.414 4.95-4.95zM4.283 16.89l2.828 2.829-1.414 1.414-4.243-1.414 2.828-2.829z",
      fill: "currentColor"
    })
  });
}
function IconLink({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M17.657 14.828l-1.414-1.414L17.657 12A4 4 0 1 0 12 6.343l-1.414 1.414-1.414-1.414 1.414-1.414a6 6 0 0 1 8.485 8.485l-1.414 1.414zm-2.829 2.829l-1.414 1.414a6 6 0 1 1-8.485-8.485l1.414-1.414 1.414 1.414L6.343 12A4 4 0 1 0 12 17.657l1.414-1.414 1.414 1.414zm0-9.9l1.415 1.415-7.071 7.07-1.415-1.414 7.071-7.07z",
      fill: "currentColor"
    })
  });
}
function IconClear({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M12.651 14.065L11.605 20H9.574l1.35-7.661-7.41-7.41L4.93 3.515 20.485 19.07l-1.414 1.414-6.42-6.42zm-.878-6.535l.27-1.53h-1.8l-2-2H20v2h-5.927L13.5 9.257 11.773 7.53z",
      fill: "currentColor"
    })
  });
}
function IconList({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M8 4h13v2H8V4zM4.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 6.9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM8 11h13v2H8v-2zm0 7h13v2H8v-2z",
      fill: "currentColor"
    })
  });
}
function IconQuote({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M4.583 17.321C3.553 16.227 3 15 3 13.011c0-3.5 2.457-6.637 6.03-8.188l.893 1.378c-3.335 1.804-3.987 4.145-4.247 5.621.537-.278 1.24-.375 1.929-.311 1.804.167 3.226 1.648 3.226 3.489a3.5 3.5 0 0 1-3.5 3.5c-1.073 0-2.099-.49-2.748-1.179zm10 0C13.553 16.227 13 15 13 13.011c0-3.5 2.457-6.637 6.03-8.188l.893 1.378c-3.335 1.804-3.987 4.145-4.247 5.621.537-.278 1.24-.375 1.929-.311 1.804.167 3.226 1.648 3.226 3.489a3.5 3.5 0 0 1-3.5 3.5c-1.073 0-2.099-.49-2.748-1.179z",
      fill: "currentColor"
    })
  });
}
function IconOrderedList({
  size: size2 = 24
}) {
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M8 4h13v2H8V4zM5 3v3h1v1H3V6h1V4H3V3h2zM3 14v-2.5h2V11H3v-1h3v2.5H4v.5h2v1H3zm2 5.5H3v-1h2V18H3v-1h3v4H3v-1h2v-.5zM8 11h13v2H8v-2zm0 7h13v2H8v-2z",
      fill: "currentColor"
    })
  });
}
function IconHeading({
  size: size2 = 24,
  level
}) {
  let path = "";
  if (level === void 0) {
    path = "M17 11V4h2v17h-2v-8H7v8H5V4h2v7z";
  } else if (level === 1) {
    path = "M13 20h-2v-7H4v7H2V4h2v7h7V4h2v16zm8-12v12h-2v-9.796l-2 .536V8.67L19.5 8H21z";
  } else if (level === 2) {
    path = "M4 4v7h7V4h2v16h-2v-7H4v7H2V4h2zm14.5 4c2.071 0 3.75 1.679 3.75 3.75 0 .857-.288 1.648-.772 2.28l-.148.18L18.034 18H22v2h-7v-1.556l4.82-5.546c.268-.307.43-.709.43-1.148 0-.966-.784-1.75-1.75-1.75-.918 0-1.671.707-1.744 1.606l-.006.144h-2C14.75 9.679 16.429 8 18.5 8z";
  } else if (level === 3) {
    path = "M22 8l-.002 2-2.505 2.883c1.59.435 2.757 1.89 2.757 3.617 0 2.071-1.679 3.75-3.75 3.75-1.826 0-3.347-1.305-3.682-3.033l1.964-.382c.156.806.866 1.415 1.718 1.415.966 0 1.75-.784 1.75-1.75s-.784-1.75-1.75-1.75c-.286 0-.556.069-.794.19l-1.307-1.547L19.35 10H15V8h7zM4 4v7h7V4h2v16h-2v-7H4v7H2V4h2z";
  } else if (level === 4) {
    path = "M13 20h-2v-7H4v7H2V4h2v7h7V4h2v16zm9-12v8h1.5v2H22v2h-2v-2h-5.5v-1.34l5-8.66H22zm-2 3.133L17.19 16H20v-4.867z";
  } else if (level === 5) {
    path = "M22 8v2h-4.323l-.464 2.636c.33-.089.678-.136 1.037-.136 2.21 0 4 1.79 4 4s-1.79 4-4 4c-1.827 0-3.367-1.224-3.846-2.897l1.923-.551c.24.836 1.01 1.448 1.923 1.448 1.105 0 2-.895 2-2s-.895-2-2-2c-.63 0-1.193.292-1.56.748l-1.81-.904L16 8h6zM4 4v7h7V4h2v16h-2v-7H4v7H2V4h2z";
  } else if (level === 6) {
    path = "M21.097 8l-2.598 4.5c2.21 0 4.001 1.79 4.001 4s-1.79 4-4 4-4-1.79-4-4c0-.736.199-1.426.546-2.019L18.788 8h2.309zM4 4v7h7V4h2v16h-2v-7H4v7H2V4h2zm14.5 10.5c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2z";
  }
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: path,
      fill: "currentColor"
    })
  });
}
function IconAlign({
  size: size2 = 24,
  direction = "left"
}) {
  if (direction === "left") {
    return /* @__PURE__ */ jsx("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      width: size2,
      height: size2,
      children: /* @__PURE__ */ jsx("path", {
        d: "M3 4h18v2H3V4zm0 15h14v2H3v-2zm0-5h18v2H3v-2zm0-5h14v2H3V9z",
        fill: "currentColor"
      })
    });
  } else if (direction === "right") {
    return /* @__PURE__ */ jsx("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      width: size2,
      height: size2,
      children: /* @__PURE__ */ jsx("path", {
        d: "M3 4h18v2H3V4zm4 15h14v2H7v-2zm-4-5h18v2H3v-2zm4-5h14v2H7V9z",
        fill: "currentColor"
      })
    });
  } else if (direction === "center") {
    return /* @__PURE__ */ jsx("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      width: size2,
      height: size2,
      children: /* @__PURE__ */ jsx("path", {
        d: "M3 4h18v2H3V4zm2 15h14v2H5v-2zm-2-5h18v2H3v-2zm2-5h14v2H5V9z",
        fill: "currentColor"
      })
    });
  }
  return /* @__PURE__ */ jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size2,
    height: size2,
    children: /* @__PURE__ */ jsx("path", {
      d: "M3 4h18v2H3V4zm0 15h18v2H3v-2zm0-5h18v2H3v-2zm0-5h18v2H3V9z",
      fill: "currentColor"
    })
  });
}
const baseHeight = 40;
const TiptapDropdown = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "ebfqhrc0"
} : {
  target: "ebfqhrc0",
  label: "TiptapDropdown"
})({
  position: "relative",
  display: "flex",
  flexDirection: "column",
  background: "#444",
  height: baseHeight,
  flex: "none",
  overflow: "hidden",
  alignItems: "center",
  transition: "height .2s, transform .3s",
  transformOrigin: "50% 0",
  borderRadius: 3,
  "& > *": {
    height: baseHeight - 10
  },
  "& > *:first-of-type": {
    marginTop: 0,
    transition: "margin .3s",
    height: baseHeight
  },
  "&:hover > *:first-of-type": {
    marginTop: -3
  },
  "&:hover": {
    transform: "scale(1.2)"
  }
}, (props) => ({
  "&:hover": {
    height: baseHeight * props.size - 10 * (props.size - 1)
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBEcm9wZG93bi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSThCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBEcm9wZG93bi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxuY29uc3QgYmFzZUhlaWdodCA9IDQwXG5cbmV4cG9ydCBjb25zdCBUaXB0YXBEcm9wZG93biA9IHN0eWxlZC5kaXY8eyBzaXplOiBudW1iZXIgfT4oXG4gIHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgYmFja2dyb3VuZDogJyM0NDQnLFxuICAgIGhlaWdodDogYmFzZUhlaWdodCxcbiAgICBmbGV4OiAnbm9uZScsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHRyYW5zaXRpb246ICdoZWlnaHQgLjJzLCB0cmFuc2Zvcm0gLjNzJyxcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICc1MCUgMCcsXG4gICAgYm9yZGVyUmFkaXVzOiAzLFxuICAgICcmID4gKic6IHtcbiAgICAgIGhlaWdodDogYmFzZUhlaWdodCAtIDEwLFxuICAgIH0sXG4gICAgJyYgPiAqOmZpcnN0LW9mLXR5cGUnOiB7XG4gICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICB0cmFuc2l0aW9uOiAnbWFyZ2luIC4zcycsXG4gICAgICBoZWlnaHQ6IGJhc2VIZWlnaHQsXG4gICAgfSxcbiAgICAnJjpob3ZlciA+ICo6Zmlyc3Qtb2YtdHlwZSc6IHtcbiAgICAgIG1hcmdpblRvcDogLTMsXG4gICAgfSxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMiknLFxuICAgIH0sXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGhlaWdodDogYmFzZUhlaWdodCAqIHByb3BzLnNpemUgLSAxMCAqIChwcm9wcy5zaXplIC0gMSksXG4gICAgfSxcbiAgfSlcbilcbiJdfQ== */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$8() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$3 = process.env.NODE_ENV === "production" ? {
  name: "zdz8xi",
  styles: "height:30px"
} : {
  name: "15gh9ye-TiptapToolbarAlign",
  styles: "height:30px;label:TiptapToolbarAlign;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBUb29sYmFyQWxpZ24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDWSIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0VkaXRvci9UaXB0YXBFZGl0b3IvVGlwdGFwVG9vbGJhckFsaWduLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBJY29uQWxpZ24gfSBmcm9tICcuL1RpcHRhcEljb25zJ1xuaW1wb3J0IHsgRWRpdG9yIH0gZnJvbSAnQHRpcHRhcC9jb3JlJ1xuaW1wb3J0IHsgVGlwdGFwVG9vbGJhckJ1dHRvbiBhcyBCdXR0b24gfSBmcm9tICcuL1RpcHRhcFRvb2xiYXJCdXR0b24nXG5pbXBvcnQgeyBUaXB0YXBEcm9wZG93biBhcyBEcm9wZG93biB9IGZyb20gJy4vVGlwdGFwRHJvcGRvd24nXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9zdHJpbmcnXG5cbmV4cG9ydCBjb25zdCBUaXB0YXBUb29sYmFyQWxpZ246IEZ1bmN0aW9uQ29tcG9uZW50PHsgZWRpdG9yOiBFZGl0b3IgfT4gPSAoe1xuICBlZGl0b3IsXG59KSA9PiB7XG4gIGNvbnN0IGFsaWdubWVudHMgPSBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXSBhcyBjb25zdFxuICBjb25zdCBjdXJyZW50QWxpZ24gPSBhbGlnbm1lbnRzLmZpbHRlcigoYWxpZ24pID0+XG4gICAgZWRpdG9yLmlzQWN0aXZlKHsgdGV4dEFsaWduOiBhbGlnbiB9KVxuICApWzBdIVxuXG4gIGlmICghZWRpdG9yLmNhbigpLnNldFBhcmFncmFwaCgpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPERyb3Bkb3duIHNpemU9e2FsaWdubWVudHMubGVuZ3RofT5cbiAgICAgIDxCdXR0b24gdGl0bGU9e2NhcGl0YWxpemUoY3VycmVudEFsaWduKX0gdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICA8SWNvbkFsaWduIHNpemU9ezE2fSBkaXJlY3Rpb249e2N1cnJlbnRBbGlnbn0gLz5cbiAgICAgIDwvQnV0dG9uPlxuICAgICAge2FsaWdubWVudHNcbiAgICAgICAgLmZpbHRlcigoYWxpZ24pID0+IGFsaWduICE9PSBjdXJyZW50QWxpZ24pXG4gICAgICAgIC5tYXAoKGFsaWduKSA9PiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAga2V5PXthbGlnbn1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT5cbiAgICAgICAgICAgICAgZWRpdG9yLmNoYWluKCkuZm9jdXMoKS5zZXRUZXh0QWxpZ24oYWxpZ24pLnJ1bigpXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgY3NzPXt7IGhlaWdodDogMzAgfX1cbiAgICAgICAgICAgIHRpdGxlPXtjYXBpdGFsaXplKGFsaWduKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvbkFsaWduIHNpemU9ezE2fSBkaXJlY3Rpb249e2FsaWdufSAvPlxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApKX1cbiAgICA8L0Ryb3Bkb3duPlxuICApXG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$8
};
const TiptapToolbarAlign = ({
  editor
}) => {
  const alignments = ["left", "center", "right", "justify"];
  const currentAlign = alignments.filter((align) => editor.isActive({
    textAlign: align
  }))[0];
  if (!editor.can().setParagraph()) {
    return null;
  }
  return /* @__PURE__ */ jsxs(TiptapDropdown, {
    size: alignments.length,
    children: [/* @__PURE__ */ jsx(TiptapToolbarButton, {
      title: capitalize(currentAlign),
      type: "button",
      children: /* @__PURE__ */ jsx(IconAlign, {
        size: 16,
        direction: currentAlign
      })
    }), alignments.filter((align) => align !== currentAlign).map((align) => /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().setTextAlign(align).run()),
      css: _ref$3,
      title: capitalize(align),
      children: /* @__PURE__ */ jsx(IconAlign, {
        size: 16,
        direction: align
      })
    }, align))]
  });
};
function _EMOTION_STRINGIFIED_CSS_ERROR__$7() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$2 = process.env.NODE_ENV === "production" ? {
  name: "zdz8xi",
  styles: "height:30px"
} : {
  name: "1y8lxx7-TiptapToolbarHeadings",
  styles: "height:30px;label:TiptapToolbarHeadings;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBUb29sYmFySGVhZGluZ3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdDVSIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0VkaXRvci9UaXB0YXBFZGl0b3IvVGlwdGFwVG9vbGJhckhlYWRpbmdzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBJY29uSGVhZGluZyB9IGZyb20gJy4vVGlwdGFwSWNvbnMnXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdAdGlwdGFwL2NvcmUnXG5pbXBvcnQgeyBUaXB0YXBUb29sYmFyQnV0dG9uIGFzIEJ1dHRvbiB9IGZyb20gJy4vVGlwdGFwVG9vbGJhckJ1dHRvbidcbmltcG9ydCB7IFRpcHRhcERyb3Bkb3duIGFzIERyb3Bkb3duIH0gZnJvbSAnLi9UaXB0YXBEcm9wZG93bidcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcblxudHlwZSBMZXZlbCA9IDEgfCAyIHwgMyB8IDQgfCA1IHwgNlxuXG5leHBvcnQgY29uc3QgVGlwdGFwVG9vbGJhckhlYWRpbmdzOiBGdW5jdGlvbkNvbXBvbmVudDx7IGVkaXRvcjogRWRpdG9yIH0+ID0gKHtcbiAgZWRpdG9yLFxufSkgPT4ge1xuICBjb25zdCBsZXZlbHMgPSBbMiwgMywgNCwgNSwgNl0gYXMgY29uc3RcbiAgY29uc3QgY3VycmVudExldmVsID0gZWRpdG9yLmdldEF0dHJpYnV0ZXMoJ2hlYWRpbmcnKS5sZXZlbFxuXG4gIGlmIChcbiAgICAhKCd0b2dnbGVIZWFkaW5nJyBpbiBlZGl0b3IuY2FuKCkpIHx8XG4gICAgIWVkaXRvci5jYW4oKS50b2dnbGVIZWFkaW5nKHsgbGV2ZWw6IDIgfSlcbiAgKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IGNsaWNrSGFuZGxlciA9IChsZXZlbD86IExldmVsKSA9PlxuICAgIHByZXZlbnQoKCkgPT4ge1xuICAgICAgaWYgKCFsZXZlbCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGVkaXRvci5jaGFpbigpLmZvY3VzKCkudG9nZ2xlSGVhZGluZyh7IGxldmVsIH0pLnJ1bigpXG4gICAgfSlcblxuICByZXR1cm4gKFxuICAgIDxEcm9wZG93biBzaXplPXtsZXZlbHMubGVuZ3RoICsgMX0+XG4gICAgICA8QnV0dG9uIGFjdGl2ZT17ISFjdXJyZW50TGV2ZWx9IG9uQ2xpY2s9e2NsaWNrSGFuZGxlcihjdXJyZW50TGV2ZWwpfT5cbiAgICAgICAgPEljb25IZWFkaW5nIHNpemU9ezE2fSBsZXZlbD17Y3VycmVudExldmVsfSAvPlxuICAgICAgPC9CdXR0b24+XG4gICAgICB7bGV2ZWxzLm1hcCgobGV2ZWwpID0+IChcbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGtleT17bGV2ZWx9XG4gICAgICAgICAgYWN0aXZlPXtsZXZlbCA9PT0gY3VycmVudExldmVsfVxuICAgICAgICAgIG9uQ2xpY2s9e2NsaWNrSGFuZGxlcihsZXZlbCl9XG4gICAgICAgICAgY3NzPXt7IGhlaWdodDogMzAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uSGVhZGluZyBzaXplPXsxNn0gbGV2ZWw9e2xldmVsfSAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICkpfVxuICAgIDwvRHJvcGRvd24+XG4gIClcbn1cbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$7
};
const TiptapToolbarHeadings = ({
  editor
}) => {
  const levels = [2, 3, 4, 5, 6];
  const currentLevel = editor.getAttributes("heading").level;
  if (!("toggleHeading" in editor.can()) || !editor.can().toggleHeading({
    level: 2
  })) {
    return null;
  }
  const clickHandler2 = (level) => prevent(() => {
    if (!level) {
      return;
    }
    editor.chain().focus().toggleHeading({
      level
    }).run();
  });
  return /* @__PURE__ */ jsxs(TiptapDropdown, {
    size: levels.length + 1,
    children: [/* @__PURE__ */ jsx(TiptapToolbarButton, {
      active: !!currentLevel,
      onClick: clickHandler2(currentLevel),
      children: /* @__PURE__ */ jsx(IconHeading, {
        size: 16,
        level: currentLevel
      })
    }), levels.map((level) => /* @__PURE__ */ jsx(TiptapToolbarButton, {
      active: level === currentLevel,
      onClick: clickHandler2(level),
      css: _ref$2,
      children: /* @__PURE__ */ jsx(IconHeading, {
        size: 16,
        level
      })
    }, level))]
  });
};
function colorToProperty(color) {
  if (typeof color !== "string") {
    return void 0;
  }
  if (color.startsWith("--")) {
    return `var(${color})`;
  }
  return color;
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$6() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref$1 = process.env.NODE_ENV === "production" ? {
  name: "bjn8wh",
  styles: "position:relative"
} : {
  name: "196dm7i-TiptapColorPicker",
  styles: "position:relative;label:TiptapColorPicker;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBDb2xvclBpY2tlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUNTIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBDb2xvclBpY2tlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaXB0YXBUb29sYmFyQnV0dG9uIGFzIEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0VkaXRvci9UaXB0YXBFZGl0b3IvVGlwdGFwVG9vbGJhckJ1dHRvbidcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ0B0aXB0YXAvcmVhY3QnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbG9yVG9Qcm9wZXJ0eSB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvY3NzJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICdzcmMvaG9va3MvdXNlVG9nZ2xlJ1xuXG50eXBlIFByb3BzID0ge1xuICBlZGl0b3I6IEVkaXRvclxuICBjb2xvcnM6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaXB0YXBDb2xvclBpY2tlcih7IGVkaXRvciwgY29sb3JzIH06IFByb3BzKSB7XG4gIGNvbnN0IGN1cnJlbnRDb2xvciA9IGVkaXRvcj8uZ2V0QXR0cmlidXRlcygndGV4dFN0eWxlJykuY29sb3JcbiAgY29uc3QgY3NzQ29sb3JzID0gdXNlTWVtbyhcbiAgICAoKSA9PiBjb2xvcnMubWFwKGNvbG9yVG9Qcm9wZXJ0eSksXG4gICAgW2NvbG9yc11cbiAgKSBhcyBzdHJpbmdbXVxuICBjb25zdCBbZXhwYW5kZWQsIHRvZ2dsZUV4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VUb2dnbGUoKVxuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gICAgdG9nZ2xlRXhwYW5kZWQoKVxuICAgIGVkaXRvci5jaGFpbigpLmZvY3VzKCkuc2V0Q29sb3IoY29sb3IpLnJ1bigpXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlZGl0b3IuaXNGb2N1c2VkKSB7XG4gICAgICBzZXRFeHBhbmRlZChmYWxzZSlcbiAgICB9XG4gIH0sIFtlZGl0b3IuaXNGb2N1c2VkXSlcblxuICBpZiAoY29sb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiAncmVsYXRpdmUnIH19PlxuICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtwcmV2ZW50KHRvZ2dsZUV4cGFuZGVkKX0+XG4gICAgICAgIDxzdmdcbiAgICAgICAgICB3aWR0aD17MTZ9XG4gICAgICAgICAgaGVpZ2h0PXsxNn1cbiAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgID5cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZD1cIk0xNS4yNDYgMTRIOC43NTRMNy4xNTQgMThINUwxMSAzSDEzTDE5IDE4SDE2Ljg0NkwxNS4yNDYgMTRaTTE0LjQ0NiAxMkwxMiA1Ljg4NUw5LjU1NCAxMkgxNC40NDZaXCJcbiAgICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHBhdGggZD1cIk0zIDIwSDIxVjIySDNWMjBaXCIgZmlsbD17Y3VycmVudENvbG9yIHx8ICdjdXJyZW50Q29sb3InfSAvPlxuICAgICAgICA8L3N2Zz5cbiAgICAgIDwvQnV0dG9uPlxuICAgICAge2V4cGFuZGVkICYmIDxQYWxldHRlIGNvbG9ycz17Y3NzQ29sb3JzfSBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSAvPn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBQYWxldHRlV3JhcHBlciA9IHN0eWxlZC5kaXY8eyBzaXplOiBudW1iZXIgfT4oXG4gIHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICcxMDAlJyxcbiAgICByaWdodDogMCxcbiAgICBiYWNrZ3JvdW5kOiAnIzQ0NCcsXG4gICAgZGlzcGxheTogJ2dyaWQnLFxuICAgIGdyaWRHYXA6IDMsXG4gICAgcGFkZGluZzogNCxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IGByZXBlYXQoJHtNYXRoLmNlaWwocHJvcHMuc2l6ZSAvIDMpfSwgMTZweClgLFxuICB9KVxuKVxuXG5jb25zdCBQYWxldHRlSXRlbSA9IHN0eWxlZC5idXR0b24oe1xuICB3aWR0aDogMTYsXG4gIGhlaWdodDogMTYsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnJjpob3Zlcic6IHtcbiAgICBib3JkZXJDb2xvcjogJ3doaXRlJyxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjUpJyxcbiAgfSxcbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiBQYWxldHRlKHtcbiAgY29sb3JzLFxuICBvbkNoYW5nZSxcbn06IHtcbiAgY29sb3JzOiBzdHJpbmdbXVxuICBvbkNoYW5nZTogKHY6IHN0cmluZykgPT4gdm9pZFxufSkge1xuICBjb25zdCBjaGFuZ2VIYW5kbGVyID0gKGNvbG9yOiBzdHJpbmcpID0+IHByZXZlbnQoKCkgPT4gb25DaGFuZ2UoY29sb3IpKVxuICByZXR1cm4gKFxuICAgIDxQYWxldHRlV3JhcHBlciBzaXplPXtjb2xvcnMubGVuZ3RofT5cbiAgICAgIHtjb2xvcnMubWFwKChjb2xvcikgPT4gKFxuICAgICAgICA8UGFsZXR0ZUl0ZW1cbiAgICAgICAgICBrZXk9e2NvbG9yfVxuICAgICAgICAgIG9uQ2xpY2s9e2NoYW5nZUhhbmRsZXIoY29sb3IpfVxuICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogY29sb3IgfX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvUGFsZXR0ZVdyYXBwZXI+XG4gIClcbn1cbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$6
};
function TiptapColorPicker({
  editor,
  colors
}) {
  const currentColor = editor == null ? void 0 : editor.getAttributes("textStyle").color;
  const cssColors = reactExports.useMemo(() => colors.map(colorToProperty), [colors]);
  const [expanded, toggleExpanded, setExpanded] = useToggle();
  const handleChange = (color) => {
    toggleExpanded();
    editor.chain().focus().setColor(color).run();
  };
  reactExports.useEffect(() => {
    if (editor.isFocused) {
      setExpanded(false);
    }
  }, [editor.isFocused]);
  if (colors.length === 0) {
    return null;
  }
  return /* @__PURE__ */ jsxs("div", {
    css: _ref$1,
    children: [/* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(toggleExpanded),
      children: /* @__PURE__ */ jsxs("svg", {
        width: 16,
        height: 16,
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [/* @__PURE__ */ jsx("path", {
          d: "M15.246 14H8.754L7.154 18H5L11 3H13L19 18H16.846L15.246 14ZM14.446 12L12 5.885L9.554 12H14.446Z",
          fill: "currentColor"
        }), /* @__PURE__ */ jsx("path", {
          d: "M3 20H21V22H3V20Z",
          fill: currentColor || "currentColor"
        })]
      })
    }), expanded && /* @__PURE__ */ jsx(Palette$1, {
      colors: cssColors,
      onChange: handleChange
    })]
  });
}
const PaletteWrapper = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1eivaxe1"
} : {
  target: "e1eivaxe1",
  label: "PaletteWrapper"
})("position:absolute;top:100%;right:0;background:#444;display:grid;grid-gap:3px;padding:4px;", (props) => ({
  gridTemplateColumns: `repeat(${Math.ceil(props.size / 3)}, 16px)`
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBDb2xvclBpY2tlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMER1QiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0VkaXRvci9UaXB0YXBFZGl0b3IvVGlwdGFwQ29sb3JQaWNrZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlwdGFwVG9vbGJhckJ1dHRvbiBhcyBCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy9FZGl0b3IvVGlwdGFwRWRpdG9yL1RpcHRhcFRvb2xiYXJCdXR0b24nXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdAdGlwdGFwL3JlYWN0J1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb2xvclRvUHJvcGVydHkgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2NzcydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVRvZ2dsZSdcblxudHlwZSBQcm9wcyA9IHtcbiAgZWRpdG9yOiBFZGl0b3JcbiAgY29sb3JzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gVGlwdGFwQ29sb3JQaWNrZXIoeyBlZGl0b3IsIGNvbG9ycyB9OiBQcm9wcykge1xuICBjb25zdCBjdXJyZW50Q29sb3IgPSBlZGl0b3I/LmdldEF0dHJpYnV0ZXMoJ3RleHRTdHlsZScpLmNvbG9yXG4gIGNvbnN0IGNzc0NvbG9ycyA9IHVzZU1lbW8oXG4gICAgKCkgPT4gY29sb3JzLm1hcChjb2xvclRvUHJvcGVydHkpLFxuICAgIFtjb2xvcnNdXG4gICkgYXMgc3RyaW5nW11cbiAgY29uc3QgW2V4cGFuZGVkLCB0b2dnbGVFeHBhbmRlZCwgc2V0RXhwYW5kZWRdID0gdXNlVG9nZ2xlKClcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoY29sb3I6IHN0cmluZykgPT4ge1xuICAgIHRvZ2dsZUV4cGFuZGVkKClcbiAgICBlZGl0b3IuY2hhaW4oKS5mb2N1cygpLnNldENvbG9yKGNvbG9yKS5ydW4oKVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZWRpdG9yLmlzRm9jdXNlZCkge1xuICAgICAgc2V0RXhwYW5kZWQoZmFsc2UpXG4gICAgfVxuICB9LCBbZWRpdG9yLmlzRm9jdXNlZF0pXG5cbiAgaWYgKGNvbG9ycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cbiAgICAgIDxCdXR0b24gb25DbGljaz17cHJldmVudCh0b2dnbGVFeHBhbmRlZCl9PlxuICAgICAgICA8c3ZnXG4gICAgICAgICAgd2lkdGg9ezE2fVxuICAgICAgICAgIGhlaWdodD17MTZ9XG4gICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICA+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGQ9XCJNMTUuMjQ2IDE0SDguNzU0TDcuMTU0IDE4SDVMMTEgM0gxM0wxOSAxOEgxNi44NDZMMTUuMjQ2IDE0Wk0xNC40NDYgMTJMMTIgNS44ODVMOS41NTQgMTJIMTQuNDQ2WlwiXG4gICAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMyAyMEgyMVYyMkgzVjIwWlwiIGZpbGw9e2N1cnJlbnRDb2xvciB8fCAnY3VycmVudENvbG9yJ30gLz5cbiAgICAgICAgPC9zdmc+XG4gICAgICA8L0J1dHRvbj5cbiAgICAgIHtleHBhbmRlZCAmJiA8UGFsZXR0ZSBjb2xvcnM9e2Nzc0NvbG9yc30gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gLz59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgUGFsZXR0ZVdyYXBwZXIgPSBzdHlsZWQuZGl2PHsgc2l6ZTogbnVtYmVyIH0+KFxuICB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnMTAwJScsXG4gICAgcmlnaHQ6IDAsXG4gICAgYmFja2dyb3VuZDogJyM0NDQnLFxuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBncmlkR2FwOiAzLFxuICAgIHBhZGRpbmc6IDQsXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBgcmVwZWF0KCR7TWF0aC5jZWlsKHByb3BzLnNpemUgLyAzKX0sIDE2cHgpYCxcbiAgfSlcbilcblxuY29uc3QgUGFsZXR0ZUl0ZW0gPSBzdHlsZWQuYnV0dG9uKHtcbiAgd2lkdGg6IDE2LFxuICBoZWlnaHQ6IDE2LFxuICBib3JkZXI6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJyY6aG92ZXInOiB7XG4gICAgYm9yZGVyQ29sb3I6ICd3aGl0ZScsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS41KScsXG4gIH0sXG59KVxuXG5leHBvcnQgZnVuY3Rpb24gUGFsZXR0ZSh7XG4gIGNvbG9ycyxcbiAgb25DaGFuZ2UsXG59OiB7XG4gIGNvbG9yczogc3RyaW5nW11cbiAgb25DaGFuZ2U6ICh2OiBzdHJpbmcpID0+IHZvaWRcbn0pIHtcbiAgY29uc3QgY2hhbmdlSGFuZGxlciA9IChjb2xvcjogc3RyaW5nKSA9PiBwcmV2ZW50KCgpID0+IG9uQ2hhbmdlKGNvbG9yKSlcbiAgcmV0dXJuIChcbiAgICA8UGFsZXR0ZVdyYXBwZXIgc2l6ZT17Y29sb3JzLmxlbmd0aH0+XG4gICAgICB7Y29sb3JzLm1hcCgoY29sb3IpID0+IChcbiAgICAgICAgPFBhbGV0dGVJdGVtXG4gICAgICAgICAga2V5PXtjb2xvcn1cbiAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VIYW5kbGVyKGNvbG9yKX1cbiAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yIH19XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L1BhbGV0dGVXcmFwcGVyPlxuICApXG59XG4iXX0= */");
const PaletteItem$1 = /* @__PURE__ */ createStyled("button", process.env.NODE_ENV === "production" ? {
  target: "e1eivaxe0"
} : {
  target: "e1eivaxe0",
  label: "PaletteItem"
})(process.env.NODE_ENV === "production" ? {
  name: "1j36tbg",
  styles: "width:16px;height:16px;border:1px solid transparent;cursor:pointer;&:hover{border-color:white;transform:scale(1.5);}"
} : {
  name: "1j36tbg",
  styles: "width:16px;height:16px;border:1px solid transparent;cursor:pointer;&:hover{border-color:white;transform:scale(1.5);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBDb2xvclBpY2tlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUVvQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9jb21wb25lbnRzL0VkaXRvci9UaXB0YXBFZGl0b3IvVGlwdGFwQ29sb3JQaWNrZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlwdGFwVG9vbGJhckJ1dHRvbiBhcyBCdXR0b24gfSBmcm9tICdzcmMvY29tcG9uZW50cy9FZGl0b3IvVGlwdGFwRWRpdG9yL1RpcHRhcFRvb2xiYXJCdXR0b24nXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdAdGlwdGFwL3JlYWN0J1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb2xvclRvUHJvcGVydHkgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2NzcydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgcHJldmVudCB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvZnVuY3Rpb25zJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVRvZ2dsZSdcblxudHlwZSBQcm9wcyA9IHtcbiAgZWRpdG9yOiBFZGl0b3JcbiAgY29sb3JzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gVGlwdGFwQ29sb3JQaWNrZXIoeyBlZGl0b3IsIGNvbG9ycyB9OiBQcm9wcykge1xuICBjb25zdCBjdXJyZW50Q29sb3IgPSBlZGl0b3I/LmdldEF0dHJpYnV0ZXMoJ3RleHRTdHlsZScpLmNvbG9yXG4gIGNvbnN0IGNzc0NvbG9ycyA9IHVzZU1lbW8oXG4gICAgKCkgPT4gY29sb3JzLm1hcChjb2xvclRvUHJvcGVydHkpLFxuICAgIFtjb2xvcnNdXG4gICkgYXMgc3RyaW5nW11cbiAgY29uc3QgW2V4cGFuZGVkLCB0b2dnbGVFeHBhbmRlZCwgc2V0RXhwYW5kZWRdID0gdXNlVG9nZ2xlKClcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoY29sb3I6IHN0cmluZykgPT4ge1xuICAgIHRvZ2dsZUV4cGFuZGVkKClcbiAgICBlZGl0b3IuY2hhaW4oKS5mb2N1cygpLnNldENvbG9yKGNvbG9yKS5ydW4oKVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZWRpdG9yLmlzRm9jdXNlZCkge1xuICAgICAgc2V0RXhwYW5kZWQoZmFsc2UpXG4gICAgfVxuICB9LCBbZWRpdG9yLmlzRm9jdXNlZF0pXG5cbiAgaWYgKGNvbG9ycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cbiAgICAgIDxCdXR0b24gb25DbGljaz17cHJldmVudCh0b2dnbGVFeHBhbmRlZCl9PlxuICAgICAgICA8c3ZnXG4gICAgICAgICAgd2lkdGg9ezE2fVxuICAgICAgICAgIGhlaWdodD17MTZ9XG4gICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICA+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGQ9XCJNMTUuMjQ2IDE0SDguNzU0TDcuMTU0IDE4SDVMMTEgM0gxM0wxOSAxOEgxNi44NDZMMTUuMjQ2IDE0Wk0xNC40NDYgMTJMMTIgNS44ODVMOS41NTQgMTJIMTQuNDQ2WlwiXG4gICAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMyAyMEgyMVYyMkgzVjIwWlwiIGZpbGw9e2N1cnJlbnRDb2xvciB8fCAnY3VycmVudENvbG9yJ30gLz5cbiAgICAgICAgPC9zdmc+XG4gICAgICA8L0J1dHRvbj5cbiAgICAgIHtleHBhbmRlZCAmJiA8UGFsZXR0ZSBjb2xvcnM9e2Nzc0NvbG9yc30gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gLz59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgUGFsZXR0ZVdyYXBwZXIgPSBzdHlsZWQuZGl2PHsgc2l6ZTogbnVtYmVyIH0+KFxuICB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnMTAwJScsXG4gICAgcmlnaHQ6IDAsXG4gICAgYmFja2dyb3VuZDogJyM0NDQnLFxuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBncmlkR2FwOiAzLFxuICAgIHBhZGRpbmc6IDQsXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBgcmVwZWF0KCR7TWF0aC5jZWlsKHByb3BzLnNpemUgLyAzKX0sIDE2cHgpYCxcbiAgfSlcbilcblxuY29uc3QgUGFsZXR0ZUl0ZW0gPSBzdHlsZWQuYnV0dG9uKHtcbiAgd2lkdGg6IDE2LFxuICBoZWlnaHQ6IDE2LFxuICBib3JkZXI6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJyY6aG92ZXInOiB7XG4gICAgYm9yZGVyQ29sb3I6ICd3aGl0ZScsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS41KScsXG4gIH0sXG59KVxuXG5leHBvcnQgZnVuY3Rpb24gUGFsZXR0ZSh7XG4gIGNvbG9ycyxcbiAgb25DaGFuZ2UsXG59OiB7XG4gIGNvbG9yczogc3RyaW5nW11cbiAgb25DaGFuZ2U6ICh2OiBzdHJpbmcpID0+IHZvaWRcbn0pIHtcbiAgY29uc3QgY2hhbmdlSGFuZGxlciA9IChjb2xvcjogc3RyaW5nKSA9PiBwcmV2ZW50KCgpID0+IG9uQ2hhbmdlKGNvbG9yKSlcbiAgcmV0dXJuIChcbiAgICA8UGFsZXR0ZVdyYXBwZXIgc2l6ZT17Y29sb3JzLmxlbmd0aH0+XG4gICAgICB7Y29sb3JzLm1hcCgoY29sb3IpID0+IChcbiAgICAgICAgPFBhbGV0dGVJdGVtXG4gICAgICAgICAga2V5PXtjb2xvcn1cbiAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VIYW5kbGVyKGNvbG9yKX1cbiAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yIH19XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L1BhbGV0dGVXcmFwcGVyPlxuICApXG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$6
});
function Palette$1({
  colors,
  onChange
}) {
  const changeHandler = (color) => prevent(() => onChange(color));
  return /* @__PURE__ */ jsx(PaletteWrapper, {
    size: colors.length,
    children: colors.map((color) => /* @__PURE__ */ jsx(PaletteItem$1, {
      onClick: changeHandler(color),
      style: {
        backgroundColor: color
      }
    }, color))
  });
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$5() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const iconSize = 16;
function TiptapToolbar({
  editor,
  colors
}) {
  const [mode, setMode] = reactExports.useState(
    0
    /* Buttons */
  );
  const setLinkMode = () => setMode(
    1
    /* Link */
  );
  const setButtonsMode = () => setMode(
    0
    /* Buttons */
  );
  const insertLink = (link) => {
    editor.commands.setLink({
      href: link
    });
  };
  let rootElement = null;
  try {
    rootElement = usePartialStore("rootElement").rootElement;
  } catch (e3) {
  }
  reactExports.useEffect(() => {
    if (editor.isFocused) {
      setMode(
        0
        /* Buttons */
      );
    }
  }, [editor.isFocused]);
  return /* @__PURE__ */ jsx(Toolbar, {
    className: "WysiwygToolbar",
    editor,
    shouldShow: ({
      from: from3,
      to
    }) => from3 !== to,
    tippyOptions: {
      maxWidth: 500,
      ...rootElement ? {
        appendTo: () => rootElement
      } : {}
    },
    children: mode === 1 ? /* @__PURE__ */ jsx(ToolbarLink, {
      onSubmit: insertLink,
      onCancel: setButtonsMode
    }) : /* @__PURE__ */ jsx(ToolbarButtons, {
      editor,
      onLinkClick: setLinkMode,
      colors
    })
  });
}
function ToolbarLink({
  onSubmit,
  onCancel
}) {
  const handleKeyDown = (e3) => {
    if (e3.key === "Escape") {
      onCancel();
    }
  };
  const handleSubmit = (e3) => {
    const data = new FormData(e3.target);
    const link = data.get("link");
    if (link) {
      onSubmit(link.toString());
    } else {
      onCancel(link);
    }
  };
  return /* @__PURE__ */ jsxs(Flex, {
    as: "form",
    onKeyDown: handleKeyDown,
    onSubmit: prevent(handleSubmit),
    children: [/* @__PURE__ */ jsx(LinkInput, {
      name: "link",
      type: "text",
      placeholder: "https://...",
      autoFocus: true
    }), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      children: "Ok"
    })]
  });
}
function ToolbarButtons({
  editor,
  onLinkClick,
  colors
}) {
  const clearFormat = () => editor.chain().focus().clearNodes().unsetAllMarks().run();
  const toggleLink = () => {
    if (editor.isActive("link")) {
      editor.chain().focus().unsetLink().run();
    } else {
      onLinkClick();
    }
  };
  return /* @__PURE__ */ jsxs(Fragment$1, {
    children: [editor.can().toggleOrderedList() && /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleOrderedList().run()),
      active: editor.isActive("orderedList"),
      title: "Ordered List",
      children: /* @__PURE__ */ jsx(IconOrderedList, {
        size: iconSize
      })
    }), editor.can().toggleBulletList() && /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleBulletList().run()),
      active: editor.isActive("bulletList"),
      title: "Unordered List",
      children: /* @__PURE__ */ jsx(IconList, {
        size: iconSize
      })
    }), editor.can().toggleBlockquote() && /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleBlockquote().run()),
      active: editor.isActive("blockquote"),
      title: "Blockquote",
      children: /* @__PURE__ */ jsx(IconQuote, {
        size: iconSize
      })
    }), /* @__PURE__ */ jsx(TiptapToolbarHeadings, {
      editor
    }), editor.can().toggleBulletList() && /* @__PURE__ */ jsx(Separator, {}), /* @__PURE__ */ jsx(TiptapToolbarAlign, {
      editor
    }), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleBold().run()),
      active: editor.isActive("bold"),
      title: "Bold",
      children: /* @__PURE__ */ jsx(IconBold, {
        size: iconSize
      })
    }), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleItalic().run()),
      active: editor.isActive("italic"),
      title: "Italic",
      children: /* @__PURE__ */ jsx(IconItalic, {
        size: iconSize
      })
    }), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleUnderline().run()),
      active: editor.isActive("underline"),
      title: "Underline",
      children: /* @__PURE__ */ jsx(IconUnderline, {
        size: iconSize
      })
    }), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(() => editor.chain().focus().toggleHighlight().run()),
      active: editor.isActive("highlight"),
      title: "Mark",
      children: /* @__PURE__ */ jsx(IconMark, {
        size: iconSize
      })
    }), /* @__PURE__ */ jsx(TiptapColorPicker, {
      editor,
      colors
    }), /* @__PURE__ */ jsx(Separator, {}), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(toggleLink),
      active: editor.isActive("link"),
      title: "Link",
      children: /* @__PURE__ */ jsx(IconLink, {
        size: iconSize
      })
    }), /* @__PURE__ */ jsx(TiptapToolbarButton, {
      onClick: prevent(clearFormat),
      title: "Clear",
      children: /* @__PURE__ */ jsx(IconClear, {
        size: iconSize
      })
    })]
  });
}
const Toolbar = /* @__PURE__ */ createStyled(BubbleMenu, process.env.NODE_ENV === "production" ? {
  target: "e44r5hc2"
} : {
  target: "e44r5hc2",
  label: "Toolbar"
})(process.env.NODE_ENV === "production" ? {
  name: "1i1xml5",
  styles: "border-radius:25px;background-color:#444;color:#FFF;height:40px;display:flex;padding:0 1em"
} : {
  name: "1i1xml5",
  styles: "border-radius:25px;background-color:#444;color:#FFF;height:40px;display:flex;padding:0 1em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$5
});
const Separator = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e44r5hc1"
} : {
  target: "e44r5hc1",
  label: "Separator"
})(process.env.NODE_ENV === "production" ? {
  name: "kfg3zs",
  styles: "width:.5em;flex:none"
} : {
  name: "kfg3zs",
  styles: "width:.5em;flex:none",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$5
});
const LinkInput = /* @__PURE__ */ createStyled("input", process.env.NODE_ENV === "production" ? {
  target: "e44r5hc0"
} : {
  target: "e44r5hc0",
  label: "LinkInput"
})(process.env.NODE_ENV === "production" ? {
  name: "o4a0dh",
  styles: "border:none;height:30px;color:inherit;font:inherit;background:transparent;outline:none"
} : {
  name: "o4a0dh",
  styles: "border:none;height:30px;color:inherit;font:inherit;background:transparent;outline:none",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$5
});
const Paragraph = Node$1.create({
  name: "paragraph",
  priority: 1e3,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      { tag: "p" }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["p", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: commands2 }) => {
        return commands2.setNode(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-0": () => this.editor.commands.setParagraph()
    };
  }
});
const ListItem$2 = Node$1.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: true,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["li", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
});
const TextStyle$2 = Mark2.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (element) => {
          const hasStyles = element.hasAttribute("style");
          if (!hasStyles) {
            return false;
          }
          return {};
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["span", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state, commands: commands2 }) => {
        const attributes = getMarkAttributes(state, this.type);
        const hasStyles = Object.entries(attributes).some(([, value]) => !!value);
        if (hasStyles) {
          return true;
        }
        return commands2.unsetMark(this.name);
      }
    };
  }
});
const inputRegex$2 = /^(\d+)\.\s$/;
const OrderedList = Node$1.create({
  name: "orderedList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: false,
      keepAttributes: false
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  addAttributes() {
    return {
      start: {
        default: 1,
        parseHTML: (element) => {
          return element.hasAttribute("start") ? parseInt(element.getAttribute("start") || "", 10) : 1;
        }
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "ol"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    const { start: start2, ...attributesWithoutStart } = HTMLAttributes;
    return start2 === 1 ? ["ol", mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ["ol", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      toggleOrderedList: () => ({ commands: commands2, chain }) => {
        if (this.options.keepAttributes) {
          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem$2.name, this.editor.getAttributes(TextStyle$2.name)).run();
        }
        return commands2.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-7": () => this.editor.commands.toggleOrderedList()
    };
  },
  addInputRules() {
    let inputRule = wrappingInputRule({
      find: inputRegex$2,
      type: this.type,
      getAttributes: (match2) => ({ start: +match2[1] }),
      joinPredicate: (match2, node2) => node2.childCount + node2.attrs.start === +match2[1]
    });
    if (this.options.keepMarks || this.options.keepAttributes) {
      inputRule = wrappingInputRule({
        find: inputRegex$2,
        type: this.type,
        keepMarks: this.options.keepMarks,
        keepAttributes: this.options.keepAttributes,
        getAttributes: (match2) => ({ start: +match2[1], ...this.editor.getAttributes(TextStyle$2.name) }),
        joinPredicate: (match2, node2) => node2.childCount + node2.attrs.start === +match2[1],
        editor: this.editor
      });
    }
    return [
      inputRule
    ];
  }
});
const ListItem$1 = Node$1.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: true,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["li", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
});
const TextStyle$1 = Mark2.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (element) => {
          const hasStyles = element.hasAttribute("style");
          if (!hasStyles) {
            return false;
          }
          return {};
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["span", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state, commands: commands2 }) => {
        const attributes = getMarkAttributes(state, this.type);
        const hasStyles = Object.entries(attributes).some(([, value]) => !!value);
        if (hasStyles) {
          return true;
        }
        return commands2.unsetMark(this.name);
      }
    };
  }
});
const inputRegex$1 = /^\s*([-+*])\s$/;
const BulletList = Node$1.create({
  name: "bulletList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: false,
      keepAttributes: false
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      { tag: "ul" }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["ul", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      toggleBulletList: () => ({ commands: commands2, chain }) => {
        if (this.options.keepAttributes) {
          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem$1.name, this.editor.getAttributes(TextStyle$1.name)).run();
        }
        return commands2.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-8": () => this.editor.commands.toggleBulletList()
    };
  },
  addInputRules() {
    let inputRule = wrappingInputRule({
      find: inputRegex$1,
      type: this.type
    });
    if (this.options.keepMarks || this.options.keepAttributes) {
      inputRule = wrappingInputRule({
        find: inputRegex$1,
        type: this.type,
        keepMarks: this.options.keepMarks,
        keepAttributes: this.options.keepAttributes,
        getAttributes: () => {
          return this.editor.getAttributes(TextStyle$1.name);
        },
        editor: this.editor
      });
    }
    return [
      inputRule
    ];
  }
});
const ListItem = Node$1.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: true,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["li", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
});
const Document = Node$1.create({
  name: "doc",
  topNode: true,
  content: "block+"
});
const Heading = Node$1.create({
  name: "heading",
  addOptions() {
    return {
      levels: [1, 2, 3, 4, 5, 6],
      HTMLAttributes: {}
    };
  },
  content: "inline*",
  group: "block",
  defining: true,
  addAttributes() {
    return {
      level: {
        default: 1,
        rendered: false
      }
    };
  },
  parseHTML() {
    return this.options.levels.map((level) => ({
      tag: `h${level}`,
      attrs: { level }
    }));
  },
  renderHTML({ node: node2, HTMLAttributes }) {
    const hasLevel = this.options.levels.includes(node2.attrs.level);
    const level = hasLevel ? node2.attrs.level : this.options.levels[0];
    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setHeading: (attributes) => ({ commands: commands2 }) => {
        if (!this.options.levels.includes(attributes.level)) {
          return false;
        }
        return commands2.setNode(this.name, attributes);
      },
      toggleHeading: (attributes) => ({ commands: commands2 }) => {
        if (!this.options.levels.includes(attributes.level)) {
          return false;
        }
        return commands2.toggleNode(this.name, "paragraph", attributes);
      }
    };
  },
  addKeyboardShortcuts() {
    return this.options.levels.reduce((items, level) => ({
      ...items,
      ...{
        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level })
      }
    }), {});
  },
  addInputRules() {
    return this.options.levels.map((level) => {
      return textblockTypeInputRule({
        find: new RegExp(`^(#{1,${level}})\\s$`),
        type: this.type,
        getAttributes: {
          level
        }
      });
    });
  }
});
const TextAlign$1 = Extension.create({
  name: "textAlign",
  addOptions() {
    return {
      types: [],
      alignments: ["left", "center", "right", "justify"],
      defaultAlignment: "left"
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          textAlign: {
            default: this.options.defaultAlignment,
            parseHTML: (element) => element.style.textAlign || this.options.defaultAlignment,
            renderHTML: (attributes) => {
              if (attributes.textAlign === this.options.defaultAlignment) {
                return {};
              }
              return { style: `text-align: ${attributes.textAlign}` };
            }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlign: (alignment) => ({ commands: commands2 }) => {
        if (!this.options.alignments.includes(alignment)) {
          return false;
        }
        return this.options.types.every((type) => commands2.updateAttributes(type, { textAlign: alignment }));
      },
      unsetTextAlign: () => ({ commands: commands2 }) => {
        return this.options.types.every((type) => commands2.resetAttributes(type, "textAlign"));
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
      "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
      "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
      "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify")
    };
  }
});
const TextStyle = Mark2.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (element) => {
          const hasStyles = element.hasAttribute("style");
          if (!hasStyles) {
            return false;
          }
          return {};
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["span", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state, commands: commands2 }) => {
        const attributes = getMarkAttributes(state, this.type);
        const hasStyles = Object.entries(attributes).some(([, value]) => !!value);
        if (hasStyles) {
          return true;
        }
        return commands2.unsetMark(this.name);
      }
    };
  }
});
const Color$1 = Extension.create({
  name: "color",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          color: {
            default: null,
            parseHTML: (element) => {
              var _a;
              return (_a = element.style.color) === null || _a === void 0 ? void 0 : _a.replace(/['"]+/g, "");
            },
            renderHTML: (attributes) => {
              if (!attributes.color) {
                return {};
              }
              return {
                style: `color: ${attributes.color}`
              };
            }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setColor: (color) => ({ chain }) => {
        return chain().setMark("textStyle", { color }).run();
      },
      unsetColor: () => ({ chain }) => {
        return chain().setMark("textStyle", { color: null }).removeEmptyTextStyle().run();
      }
    };
  }
});
const HardBreak = Node$1.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: true,
      HTMLAttributes: {}
    };
  },
  inline: true,
  group: "inline",
  selectable: false,
  parseHTML() {
    return [
      { tag: "br" }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["br", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
  },
  renderText() {
    return "\n";
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: commands2, chain, state, editor }) => {
        return commands2.first([
          () => commands2.exitCode(),
          () => commands2.command(() => {
            const { selection, storedMarks } = state;
            if (selection.$from.parent.type.spec.isolating) {
              return false;
            }
            const { keepMarks } = this.options;
            const { splittableMarks } = editor.extensionManager;
            const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
            return chain().insertContent({ type: this.name }).command(({ tr: tr2, dispatch }) => {
              if (dispatch && marks && keepMarks) {
                const filteredMarks = marks.filter((mark) => splittableMarks.includes(mark.type.name));
                tr2.ensureMarks(filteredMarks);
              }
              return true;
            }).run();
          })
        ]);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
});
var GOOD_LEAF_SIZE = 200;
var RopeSequence = function RopeSequence2() {
};
RopeSequence.prototype.append = function append2(other) {
  if (!other.length) {
    return this;
  }
  other = RopeSequence.from(other);
  return !this.length && other || other.length < GOOD_LEAF_SIZE && this.leafAppend(other) || this.length < GOOD_LEAF_SIZE && other.leafPrepend(this) || this.appendInner(other);
};
RopeSequence.prototype.prepend = function prepend(other) {
  if (!other.length) {
    return this;
  }
  return RopeSequence.from(other).append(this);
};
RopeSequence.prototype.appendInner = function appendInner(other) {
  return new Append(this, other);
};
RopeSequence.prototype.slice = function slice2(from3, to) {
  if (from3 === void 0)
    from3 = 0;
  if (to === void 0)
    to = this.length;
  if (from3 >= to) {
    return RopeSequence.empty;
  }
  return this.sliceInner(Math.max(0, from3), Math.min(this.length, to));
};
RopeSequence.prototype.get = function get(i2) {
  if (i2 < 0 || i2 >= this.length) {
    return void 0;
  }
  return this.getInner(i2);
};
RopeSequence.prototype.forEach = function forEach2(f2, from3, to) {
  if (from3 === void 0)
    from3 = 0;
  if (to === void 0)
    to = this.length;
  if (from3 <= to) {
    this.forEachInner(f2, from3, to, 0);
  } else {
    this.forEachInvertedInner(f2, from3, to, 0);
  }
};
RopeSequence.prototype.map = function map(f2, from3, to) {
  if (from3 === void 0)
    from3 = 0;
  if (to === void 0)
    to = this.length;
  var result = [];
  this.forEach(function(elt, i2) {
    return result.push(f2(elt, i2));
  }, from3, to);
  return result;
};
RopeSequence.from = function from2(values) {
  if (values instanceof RopeSequence) {
    return values;
  }
  return values && values.length ? new Leaf(values) : RopeSequence.empty;
};
var Leaf = /* @__PURE__ */ function(RopeSequence3) {
  function Leaf2(values) {
    RopeSequence3.call(this);
    this.values = values;
  }
  if (RopeSequence3)
    Leaf2.__proto__ = RopeSequence3;
  Leaf2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
  Leaf2.prototype.constructor = Leaf2;
  var prototypeAccessors = { length: { configurable: true }, depth: { configurable: true } };
  Leaf2.prototype.flatten = function flatten() {
    return this.values;
  };
  Leaf2.prototype.sliceInner = function sliceInner(from3, to) {
    if (from3 == 0 && to == this.length) {
      return this;
    }
    return new Leaf2(this.values.slice(from3, to));
  };
  Leaf2.prototype.getInner = function getInner(i2) {
    return this.values[i2];
  };
  Leaf2.prototype.forEachInner = function forEachInner(f2, from3, to, start2) {
    for (var i2 = from3; i2 < to; i2++) {
      if (f2(this.values[i2], start2 + i2) === false) {
        return false;
      }
    }
  };
  Leaf2.prototype.forEachInvertedInner = function forEachInvertedInner(f2, from3, to, start2) {
    for (var i2 = from3 - 1; i2 >= to; i2--) {
      if (f2(this.values[i2], start2 + i2) === false) {
        return false;
      }
    }
  };
  Leaf2.prototype.leafAppend = function leafAppend(other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE) {
      return new Leaf2(this.values.concat(other.flatten()));
    }
  };
  Leaf2.prototype.leafPrepend = function leafPrepend(other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE) {
      return new Leaf2(other.flatten().concat(this.values));
    }
  };
  prototypeAccessors.length.get = function() {
    return this.values.length;
  };
  prototypeAccessors.depth.get = function() {
    return 0;
  };
  Object.defineProperties(Leaf2.prototype, prototypeAccessors);
  return Leaf2;
}(RopeSequence);
RopeSequence.empty = new Leaf([]);
var Append = /* @__PURE__ */ function(RopeSequence3) {
  function Append2(left2, right2) {
    RopeSequence3.call(this);
    this.left = left2;
    this.right = right2;
    this.length = left2.length + right2.length;
    this.depth = Math.max(left2.depth, right2.depth) + 1;
  }
  if (RopeSequence3)
    Append2.__proto__ = RopeSequence3;
  Append2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
  Append2.prototype.constructor = Append2;
  Append2.prototype.flatten = function flatten() {
    return this.left.flatten().concat(this.right.flatten());
  };
  Append2.prototype.getInner = function getInner(i2) {
    return i2 < this.left.length ? this.left.get(i2) : this.right.get(i2 - this.left.length);
  };
  Append2.prototype.forEachInner = function forEachInner(f2, from3, to, start2) {
    var leftLen = this.left.length;
    if (from3 < leftLen && this.left.forEachInner(f2, from3, Math.min(to, leftLen), start2) === false) {
      return false;
    }
    if (to > leftLen && this.right.forEachInner(f2, Math.max(from3 - leftLen, 0), Math.min(this.length, to) - leftLen, start2 + leftLen) === false) {
      return false;
    }
  };
  Append2.prototype.forEachInvertedInner = function forEachInvertedInner(f2, from3, to, start2) {
    var leftLen = this.left.length;
    if (from3 > leftLen && this.right.forEachInvertedInner(f2, from3 - leftLen, Math.max(to, leftLen) - leftLen, start2 + leftLen) === false) {
      return false;
    }
    if (to < leftLen && this.left.forEachInvertedInner(f2, Math.min(from3, leftLen), to, start2) === false) {
      return false;
    }
  };
  Append2.prototype.sliceInner = function sliceInner(from3, to) {
    if (from3 == 0 && to == this.length) {
      return this;
    }
    var leftLen = this.left.length;
    if (to <= leftLen) {
      return this.left.slice(from3, to);
    }
    if (from3 >= leftLen) {
      return this.right.slice(from3 - leftLen, to - leftLen);
    }
    return this.left.slice(from3, leftLen).append(this.right.slice(0, to - leftLen));
  };
  Append2.prototype.leafAppend = function leafAppend(other) {
    var inner = this.right.leafAppend(other);
    if (inner) {
      return new Append2(this.left, inner);
    }
  };
  Append2.prototype.leafPrepend = function leafPrepend(other) {
    var inner = this.left.leafPrepend(other);
    if (inner) {
      return new Append2(inner, this.right);
    }
  };
  Append2.prototype.appendInner = function appendInner2(other) {
    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1) {
      return new Append2(this.left, new Append2(this.right, other));
    }
    return new Append2(this, other);
  };
  return Append2;
}(RopeSequence);
const max_empty_items = 500;
class Branch {
  constructor(items, eventCount) {
    this.items = items;
    this.eventCount = eventCount;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(state, preserveItems) {
    if (this.eventCount == 0)
      return null;
    let end2 = this.items.length;
    for (; ; end2--) {
      let next2 = this.items.get(end2 - 1);
      if (next2.selection) {
        --end2;
        break;
      }
    }
    let remap, mapFrom;
    if (preserveItems) {
      remap = this.remapping(end2, this.items.length);
      mapFrom = remap.maps.length;
    }
    let transform = state.tr;
    let selection, remaining;
    let addAfter = [], addBefore = [];
    this.items.forEach((item, i2) => {
      if (!item.step) {
        if (!remap) {
          remap = this.remapping(end2, i2 + 1);
          mapFrom = remap.maps.length;
        }
        mapFrom--;
        addBefore.push(item);
        return;
      }
      if (remap) {
        addBefore.push(new Item(item.map));
        let step = item.step.map(remap.slice(mapFrom)), map2;
        if (step && transform.maybeStep(step).doc) {
          map2 = transform.mapping.maps[transform.mapping.maps.length - 1];
          addAfter.push(new Item(map2, void 0, void 0, addAfter.length + addBefore.length));
        }
        mapFrom--;
        if (map2)
          remap.appendMap(map2, mapFrom);
      } else {
        transform.maybeStep(item.step);
      }
      if (item.selection) {
        selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
        remaining = new Branch(this.items.slice(0, end2).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
        return false;
      }
    }, this.items.length, 0);
    return { remaining, transform, selection };
  }
  // Create a new branch with the given transform added.
  addTransform(transform, selection, histOptions, preserveItems) {
    let newItems = [], eventCount = this.eventCount;
    let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
    for (let i2 = 0; i2 < transform.steps.length; i2++) {
      let step = transform.steps[i2].invert(transform.docs[i2]);
      let item = new Item(transform.mapping.maps[i2], step, selection), merged;
      if (merged = lastItem && lastItem.merge(item)) {
        item = merged;
        if (i2)
          newItems.pop();
        else
          oldItems = oldItems.slice(0, oldItems.length - 1);
      }
      newItems.push(item);
      if (selection) {
        eventCount++;
        selection = void 0;
      }
      if (!preserveItems)
        lastItem = item;
    }
    let overflow = eventCount - histOptions.depth;
    if (overflow > DEPTH_OVERFLOW) {
      oldItems = cutOffEvents(oldItems, overflow);
      eventCount -= overflow;
    }
    return new Branch(oldItems.append(newItems), eventCount);
  }
  remapping(from3, to) {
    let maps = new Mapping();
    this.items.forEach((item, i2) => {
      let mirrorPos = item.mirrorOffset != null && i2 - item.mirrorOffset >= from3 ? maps.maps.length - item.mirrorOffset : void 0;
      maps.appendMap(item.map, mirrorPos);
    }, from3, to);
    return maps;
  }
  addMaps(array) {
    if (this.eventCount == 0)
      return this;
    return new Branch(this.items.append(array.map((map2) => new Item(map2))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(rebasedTransform, rebasedCount) {
    if (!this.eventCount)
      return this;
    let rebasedItems = [], start2 = Math.max(0, this.items.length - rebasedCount);
    let mapping = rebasedTransform.mapping;
    let newUntil = rebasedTransform.steps.length;
    let eventCount = this.eventCount;
    this.items.forEach((item) => {
      if (item.selection)
        eventCount--;
    }, start2);
    let iRebased = rebasedCount;
    this.items.forEach((item) => {
      let pos = mapping.getMirror(--iRebased);
      if (pos == null)
        return;
      newUntil = Math.min(newUntil, pos);
      let map2 = mapping.maps[pos];
      if (item.step) {
        let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
        let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
        if (selection)
          eventCount++;
        rebasedItems.push(new Item(map2, step, selection));
      } else {
        rebasedItems.push(new Item(map2));
      }
    }, start2);
    let newMaps = [];
    for (let i2 = rebasedCount; i2 < newUntil; i2++)
      newMaps.push(new Item(mapping.maps[i2]));
    let items = this.items.slice(0, start2).append(newMaps).append(rebasedItems);
    let branch = new Branch(items, eventCount);
    if (branch.emptyItemCount() > max_empty_items)
      branch = branch.compress(this.items.length - rebasedItems.length);
    return branch;
  }
  emptyItemCount() {
    let count = 0;
    this.items.forEach((item) => {
      if (!item.step)
        count++;
    });
    return count;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(upto = this.items.length) {
    let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
    let items = [], events2 = 0;
    this.items.forEach((item, i2) => {
      if (i2 >= upto) {
        items.push(item);
        if (item.selection)
          events2++;
      } else if (item.step) {
        let step = item.step.map(remap.slice(mapFrom)), map2 = step && step.getMap();
        mapFrom--;
        if (map2)
          remap.appendMap(map2, mapFrom);
        if (step) {
          let selection = item.selection && item.selection.map(remap.slice(mapFrom));
          if (selection)
            events2++;
          let newItem = new Item(map2.invert(), step, selection), merged, last = items.length - 1;
          if (merged = items.length && items[last].merge(newItem))
            items[last] = merged;
          else
            items.push(newItem);
        }
      } else if (item.map) {
        mapFrom--;
      }
    }, this.items.length, 0);
    return new Branch(RopeSequence.from(items.reverse()), events2);
  }
}
Branch.empty = new Branch(RopeSequence.empty, 0);
function cutOffEvents(items, n2) {
  let cutPoint;
  items.forEach((item, i2) => {
    if (item.selection && n2-- == 0) {
      cutPoint = i2;
      return false;
    }
  });
  return items.slice(cutPoint);
}
class Item {
  constructor(map2, step, selection, mirrorOffset) {
    this.map = map2;
    this.step = step;
    this.selection = selection;
    this.mirrorOffset = mirrorOffset;
  }
  merge(other) {
    if (this.step && other.step && !other.selection) {
      let step = other.step.merge(this.step);
      if (step)
        return new Item(step.getMap().invert(), step, this.selection);
    }
  }
}
class HistoryState {
  constructor(done, undone, prevRanges, prevTime, prevComposition) {
    this.done = done;
    this.undone = undone;
    this.prevRanges = prevRanges;
    this.prevTime = prevTime;
    this.prevComposition = prevComposition;
  }
}
const DEPTH_OVERFLOW = 20;
function applyTransaction(history2, state, tr2, options) {
  let historyTr = tr2.getMeta(historyKey), rebased;
  if (historyTr)
    return historyTr.historyState;
  if (tr2.getMeta(closeHistoryKey))
    history2 = new HistoryState(history2.done, history2.undone, null, 0, -1);
  let appended = tr2.getMeta("appendedTransaction");
  if (tr2.steps.length == 0) {
    return history2;
  } else if (appended && appended.getMeta(historyKey)) {
    if (appended.getMeta(historyKey).redo)
      return new HistoryState(history2.done.addTransform(tr2, void 0, options, mustPreserveItems(state)), history2.undone, rangesFor(tr2.mapping.maps[tr2.steps.length - 1]), history2.prevTime, history2.prevComposition);
    else
      return new HistoryState(history2.done, history2.undone.addTransform(tr2, void 0, options, mustPreserveItems(state)), null, history2.prevTime, history2.prevComposition);
  } else if (tr2.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
    let composition = tr2.getMeta("composition");
    let newGroup = history2.prevTime == 0 || !appended && history2.prevComposition != composition && (history2.prevTime < (tr2.time || 0) - options.newGroupDelay || !isAdjacentTo(tr2, history2.prevRanges));
    let prevRanges = appended ? mapRanges(history2.prevRanges, tr2.mapping) : rangesFor(tr2.mapping.maps[tr2.steps.length - 1]);
    return new HistoryState(history2.done.addTransform(tr2, newGroup ? state.selection.getBookmark() : void 0, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr2.time, composition == null ? history2.prevComposition : composition);
  } else if (rebased = tr2.getMeta("rebased")) {
    return new HistoryState(history2.done.rebased(tr2, rebased), history2.undone.rebased(tr2, rebased), mapRanges(history2.prevRanges, tr2.mapping), history2.prevTime, history2.prevComposition);
  } else {
    return new HistoryState(history2.done.addMaps(tr2.mapping.maps), history2.undone.addMaps(tr2.mapping.maps), mapRanges(history2.prevRanges, tr2.mapping), history2.prevTime, history2.prevComposition);
  }
}
function isAdjacentTo(transform, prevRanges) {
  if (!prevRanges)
    return false;
  if (!transform.docChanged)
    return true;
  let adjacent = false;
  transform.mapping.maps[0].forEach((start2, end2) => {
    for (let i2 = 0; i2 < prevRanges.length; i2 += 2)
      if (start2 <= prevRanges[i2 + 1] && end2 >= prevRanges[i2])
        adjacent = true;
  });
  return adjacent;
}
function rangesFor(map2) {
  let result = [];
  map2.forEach((_from, _to, from3, to) => result.push(from3, to));
  return result;
}
function mapRanges(ranges, mapping) {
  if (!ranges)
    return null;
  let result = [];
  for (let i2 = 0; i2 < ranges.length; i2 += 2) {
    let from3 = mapping.map(ranges[i2], 1), to = mapping.map(ranges[i2 + 1], -1);
    if (from3 <= to)
      result.push(from3, to);
  }
  return result;
}
function histTransaction(history2, state, dispatch, redo2) {
  let preserveItems = mustPreserveItems(state);
  let histOptions = historyKey.get(state).spec.config;
  let pop = (redo2 ? history2.undone : history2.done).popEvent(state, preserveItems);
  if (!pop)
    return;
  let selection = pop.selection.resolve(pop.transform.doc);
  let added = (redo2 ? history2.done : history2.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
  let newHist = new HistoryState(redo2 ? added : pop.remaining, redo2 ? pop.remaining : added, null, 0, -1);
  dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo: redo2, historyState: newHist }).scrollIntoView());
}
let cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
function mustPreserveItems(state) {
  let plugins = state.plugins;
  if (cachedPreserveItemsPlugins != plugins) {
    cachedPreserveItems = false;
    cachedPreserveItemsPlugins = plugins;
    for (let i2 = 0; i2 < plugins.length; i2++)
      if (plugins[i2].spec.historyPreserveItems) {
        cachedPreserveItems = true;
        break;
      }
  }
  return cachedPreserveItems;
}
const historyKey = new PluginKey("history");
const closeHistoryKey = new PluginKey("closeHistory");
function history(config = {}) {
  config = {
    depth: config.depth || 100,
    newGroupDelay: config.newGroupDelay || 500
  };
  return new Plugin({
    key: historyKey,
    state: {
      init() {
        return new HistoryState(Branch.empty, Branch.empty, null, 0, -1);
      },
      apply(tr2, hist, state) {
        return applyTransaction(hist, state, tr2, config);
      }
    },
    config,
    props: {
      handleDOMEvents: {
        beforeinput(view, e3) {
          let inputType = e3.inputType;
          let command2 = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
          if (!command2)
            return false;
          e3.preventDefault();
          return command2(view.state, view.dispatch);
        }
      }
    }
  });
}
const undo = (state, dispatch) => {
  let hist = historyKey.getState(state);
  if (!hist || hist.done.eventCount == 0)
    return false;
  if (dispatch)
    histTransaction(hist, state, dispatch, false);
  return true;
};
const redo = (state, dispatch) => {
  let hist = historyKey.getState(state);
  if (!hist || hist.undone.eventCount == 0)
    return false;
  if (dispatch)
    histTransaction(hist, state, dispatch, true);
  return true;
};
const History = Extension.create({
  name: "history",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state, dispatch }) => {
        return undo(state, dispatch);
      },
      redo: () => ({ state, dispatch }) => {
        return redo(state, dispatch);
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      history(this.options)
    ];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      "Mod-y": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
});
const inputRegex = /^\s*>\s$/;
const Blockquote = Node$1.create({
  name: "blockquote",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  group: "block",
  defining: true,
  parseHTML() {
    return [
      { tag: "blockquote" }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["blockquote", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setBlockquote: () => ({ commands: commands2 }) => {
        return commands2.wrapIn(this.name);
      },
      toggleBlockquote: () => ({ commands: commands2 }) => {
        return commands2.toggleWrap(this.name);
      },
      unsetBlockquote: () => ({ commands: commands2 }) => {
        return commands2.lift(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-b": () => this.editor.commands.toggleBlockquote()
    };
  },
  addInputRules() {
    return [
      wrappingInputRule({
        find: inputRegex,
        type: this.type
      })
    ];
  }
});
const SingleDocument = Node$1.create({
  name: "doc",
  topNode: true,
  group: "block",
  content: "inline*"
});
function TiptapEditor({
  value,
  onChange,
  multiline = false,
  colors = [],
  defaultAlign = "left",
  backgroundColor,
  color
}) {
  const [isFocused, setFocus] = reactExports.useState(false);
  const onChangeRef = reactExports.useRef(onChange);
  onChangeRef.current = onChange;
  const editor = useEditor({
    extensions: [...multiline ? [Document] : [SingleDocument], Paragraph, OrderedList, BulletList, ListItem, Text$1, Bold, Italic, Highlight, Underline, TextStyle, Color$1, HardBreak, History, Blockquote, Link.configure({
      openOnClick: false
    }), Heading.configure({
      levels: [2, 3, 4, 5, 6]
    }), TextAlign$1.configure({
      types: ["heading", "bulletList", "listItem", "orderedList", "blockquote", "paragraph"],
      defaultAlignment: defaultAlign
    })],
    onUpdate: ({
      editor: editor2
    }) => onChangeRef.current(cleanHTML(editor2.getHTML(), multiline)),
    onFocus: () => setFocus(true),
    onBlur: () => setFocus(false),
    content: value
  });
  reactExports.useEffect(() => {
    if (editor) {
      editor.extensionManager.extensions.find((e3) => e3.name === "textAlign").options.defaultAlignment = defaultAlign;
      editor.commands.setContent(value);
    }
  }, [defaultAlign]);
  return /* @__PURE__ */ jsxs(EditorWrapper, {
    focused: isFocused,
    style: {
      textAlign: defaultAlign,
      color,
      backgroundColor
    },
    children: [/* @__PURE__ */ jsx(EditorContent, {
      editor
    }), editor && /* @__PURE__ */ jsx(TiptapToolbar, {
      editor,
      colors
    })]
  });
}
const cleanHTML = (str, multiline) => {
  let content = str.replaceAll(/(<[uo]l[^>]*>)(.*?)(<\/[uo]l>)/gi, (_2, openingTag, inner, closingTag) => `${openingTag}${removeParagraphs(inner)}${closingTag}`);
  if (!multiline) {
    content = removeParagraphs(content);
  }
  return content.trim();
};
function removeParagraphs(str) {
  return str.replaceAll(/<\/p><p[^>]*>/gi, "<br>").replaceAll(/<p[^>]*>/gi, "").replaceAll(/<\/p>/gi, "");
}
const EditorWrapper = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e3jwn8k0"
} : {
  target: "e3jwn8k0",
  label: "EditorWrapper"
})("color:var(--ve-color);background:transparent;padding:.5rem .75em;line-height:1.25rem;border-radius:.2rem;display:block;width:100%;border:solid 1px var(--ve-field-border);box-shadow:var(--ve-field-shadow);outline:none;p, ul, ol, h2, h3, h4, h5, h1{margin:0 0 1em 0;}li p{margin:0;}.ProseMirror{outline:none;}.ProseMirror > *:last-child{margin:0;}", (props) => ({
  ...props.focused ? Styles.FocusState : void 0,
  p: {
    marginBottom: props.singleLine ? "0" : "1em"
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2NvbXBvbmVudHMvRWRpdG9yL1RpcHRhcEVkaXRvci9UaXB0YXBFZGl0b3IudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdJc0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvY29tcG9uZW50cy9FZGl0b3IvVGlwdGFwRWRpdG9yL1RpcHRhcEVkaXRvci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JDb250ZW50LCB1c2VFZGl0b3IgfSBmcm9tICdAdGlwdGFwL3JlYWN0J1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0B0aXB0YXAvY29yZSdcbmltcG9ydCBUZXh0IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXRleHQnXG5pbXBvcnQgQm9sZCBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1ib2xkJ1xuaW1wb3J0IEl0YWxpYyBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1pdGFsaWMnXG5pbXBvcnQgTGluayBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1saW5rJ1xuaW1wb3J0IFVuZGVybGluZSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi11bmRlcmxpbmUnXG5pbXBvcnQgSGlnaGxpZ2h0IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWhpZ2hsaWdodCdcbmltcG9ydCB7IFRpcHRhcFRvb2xiYXIgfSBmcm9tICdzcmMvY29tcG9uZW50cy9FZGl0b3IvVGlwdGFwRWRpdG9yL1RpcHRhcFRvb2xiYXInXG5pbXBvcnQgUGFyYWdyYXBoIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXBhcmFncmFwaCdcbmltcG9ydCBPcmRlcmVkTGlzdCBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1vcmRlcmVkLWxpc3QnXG5pbXBvcnQgQnVsbGV0TGlzdCBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1idWxsZXQtbGlzdCdcbmltcG9ydCBMaXN0SXRlbSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1saXN0LWl0ZW0nXG5pbXBvcnQgRG9jdW1lbnQgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQnXG5pbXBvcnQgSGVhZGluZyBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1oZWFkaW5nJ1xuaW1wb3J0IFRleHRBbGlnbiBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi10ZXh0LWFsaWduJ1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1jb2xvcidcbmltcG9ydCBUZXh0U3R5bGUgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tdGV4dC1zdHlsZSdcbmltcG9ydCBIYXJkQnJlYWsgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24taGFyZC1icmVhaydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IEhpc3RvcnkgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeSdcbmltcG9ydCBCbG9ja3F1b3RlIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWJsb2NrcXVvdGUnXG5pbXBvcnQgeyBTdHlsZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBTaW5nbGVEb2N1bWVudCA9IE5vZGUuY3JlYXRlKHtcbiAgbmFtZTogJ2RvYycsXG4gIHRvcE5vZGU6IHRydWUsXG4gIGdyb3VwOiAnYmxvY2snLFxuICBjb250ZW50OiAnaW5saW5lKicsXG59KVxuXG50eXBlIFRpcHRhcEVkaXRvclByb3BzID0ge1xuICB2YWx1ZTogc3RyaW5nXG4gIG9uQ2hhbmdlOiAodjogc3RyaW5nKSA9PiB2b2lkXG4gIGNvbG9ycz86IHN0cmluZ1tdXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZ1xuICBjb2xvcj86IHN0cmluZ1xuICBtdWx0aWxpbmU/OiBib29sZWFuXG4gIGRlZmF1bHRBbGlnbj86ICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJyB8ICdqdXN0aWZ5J1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGlwdGFwRWRpdG9yKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgY29sb3JzID0gW10sXG4gIGRlZmF1bHRBbGlnbiA9ICdsZWZ0JyxcbiAgYmFja2dyb3VuZENvbG9yLFxuICBjb2xvcixcbn06IFRpcHRhcEVkaXRvclByb3BzKSB7XG4gIGNvbnN0IFtpc0ZvY3VzZWQsIHNldEZvY3VzXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBvbkNoYW5nZVJlZiA9IHVzZVJlZihvbkNoYW5nZSlcbiAgb25DaGFuZ2VSZWYuY3VycmVudCA9IG9uQ2hhbmdlXG4gIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcih7XG4gICAgZXh0ZW5zaW9uczogW1xuICAgICAgLi4uKG11bHRpbGluZSA/IFtEb2N1bWVudF0gOiBbU2luZ2xlRG9jdW1lbnRdKSxcbiAgICAgIFBhcmFncmFwaCxcbiAgICAgIE9yZGVyZWRMaXN0LFxuICAgICAgQnVsbGV0TGlzdCxcbiAgICAgIExpc3RJdGVtLFxuICAgICAgVGV4dCxcbiAgICAgIEJvbGQsXG4gICAgICBJdGFsaWMsXG4gICAgICBIaWdobGlnaHQsXG4gICAgICBVbmRlcmxpbmUsXG4gICAgICBUZXh0U3R5bGUsXG4gICAgICBDb2xvcixcbiAgICAgIEhhcmRCcmVhayxcbiAgICAgIEhpc3RvcnksXG4gICAgICBCbG9ja3F1b3RlLFxuICAgICAgTGluay5jb25maWd1cmUoeyBvcGVuT25DbGljazogZmFsc2UgfSksXG4gICAgICBIZWFkaW5nLmNvbmZpZ3VyZSh7IGxldmVsczogWzIsIDMsIDQsIDUsIDZdIH0pLFxuICAgICAgVGV4dEFsaWduLmNvbmZpZ3VyZSh7XG4gICAgICAgIHR5cGVzOiBbXG4gICAgICAgICAgJ2hlYWRpbmcnLFxuICAgICAgICAgICdidWxsZXRMaXN0JyxcbiAgICAgICAgICAnbGlzdEl0ZW0nLFxuICAgICAgICAgICdvcmRlcmVkTGlzdCcsXG4gICAgICAgICAgJ2Jsb2NrcXVvdGUnLFxuICAgICAgICAgICdwYXJhZ3JhcGgnLFxuICAgICAgICBdLFxuICAgICAgICBkZWZhdWx0QWxpZ25tZW50OiBkZWZhdWx0QWxpZ24sXG4gICAgICB9KSxcbiAgICBdLFxuICAgIG9uVXBkYXRlOiAoeyBlZGl0b3IgfSkgPT5cbiAgICAgIG9uQ2hhbmdlUmVmLmN1cnJlbnQoY2xlYW5IVE1MKGVkaXRvci5nZXRIVE1MKCksIG11bHRpbGluZSkpLFxuICAgIG9uRm9jdXM6ICgpID0+IHNldEZvY3VzKHRydWUpLFxuICAgIG9uQmx1cjogKCkgPT4gc2V0Rm9jdXMoZmFsc2UpLFxuICAgIGNvbnRlbnQ6IHZhbHVlLFxuICB9KVxuXG4gIC8vIFVwZGF0ZSB0aGUgZGVmYXVsdCBhbGlnbm1lbnQgZm9yIHRoZSBUZXh0QWxpZ24gZXh0ZW5zaW9uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGVkaXRvcikge1xuICAgICAgZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXIuZXh0ZW5zaW9ucy5maW5kKFxuICAgICAgICAoZSkgPT4gZS5uYW1lID09PSAndGV4dEFsaWduJ1xuICAgICAgKSEub3B0aW9ucy5kZWZhdWx0QWxpZ25tZW50ID0gZGVmYXVsdEFsaWduXG4gICAgICAvLyBSZXNldCB0aGUgY29udGVudCB0byByZXNldCB0aGUgZGVmYXVsdCBhbGlnbm1lbnRcbiAgICAgIGVkaXRvci5jb21tYW5kcy5zZXRDb250ZW50KHZhbHVlKVxuICAgIH1cbiAgfSwgW2RlZmF1bHRBbGlnbl0pXG5cbiAgcmV0dXJuIChcbiAgICA8RWRpdG9yV3JhcHBlclxuICAgICAgZm9jdXNlZD17aXNGb2N1c2VkfVxuICAgICAgc3R5bGU9e3sgdGV4dEFsaWduOiBkZWZhdWx0QWxpZ24sIGNvbG9yLCBiYWNrZ3JvdW5kQ29sb3IgfX1cbiAgICA+XG4gICAgICA8RWRpdG9yQ29udGVudCBlZGl0b3I9e2VkaXRvcn0gLz5cbiAgICAgIHtlZGl0b3IgJiYgPFRpcHRhcFRvb2xiYXIgZWRpdG9yPXtlZGl0b3J9IGNvbG9ycz17Y29sb3JzfSAvPn1cbiAgICA8L0VkaXRvcldyYXBwZXI+XG4gIClcbn1cblxuLyoqXG4gKiBUaXB0YXAgb3V0cHV0IDxwPiBpbnNpZGUgPGxpPiwgd2UgbmVlZCB0byBkbyBzb21lIGNsZWFudXBcbiAqL1xuY29uc3QgY2xlYW5IVE1MID0gKHN0cjogc3RyaW5nLCBtdWx0aWxpbmU6IGJvb2xlYW4pID0+IHtcbiAgbGV0IGNvbnRlbnQgPSBzdHIucmVwbGFjZUFsbChcbiAgICAvKDxbdW9dbFtePl0qPikoLio/KSg8XFwvW3VvXWw+KS9naSxcbiAgICAoXywgb3BlbmluZ1RhZywgaW5uZXIsIGNsb3NpbmdUYWcpID0+XG4gICAgICBgJHtvcGVuaW5nVGFnfSR7cmVtb3ZlUGFyYWdyYXBocyhpbm5lcil9JHtjbG9zaW5nVGFnfWBcbiAgKVxuICBpZiAoIW11bHRpbGluZSkge1xuICAgIGNvbnRlbnQgPSByZW1vdmVQYXJhZ3JhcGhzKGNvbnRlbnQpXG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQudHJpbSgpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZVBhcmFncmFwaHMoc3RyOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlQWxsKC88XFwvcD48cFtePl0qPi9naSwgJzxicj4nKVxuICAgIC5yZXBsYWNlQWxsKC88cFtePl0qPi9naSwgJycpXG4gICAgLnJlcGxhY2VBbGwoLzxcXC9wPi9naSwgJycpXG59XG5cbmNvbnN0IEVkaXRvcldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgZm9jdXNlZDogYm9vbGVhbjsgc2luZ2xlTGluZT86IGJvb2xlYW4gfT4oXG4gIHtcbiAgICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yKScsXG4gICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICBwYWRkaW5nOiAnLjVyZW0gLjc1ZW0nLFxuICAgIGxpbmVIZWlnaHQ6ICcxLjI1cmVtJyxcbiAgICBib3JkZXJSYWRpdXM6ICcuMnJlbScsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJvcmRlcjogJ3NvbGlkIDFweCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBib3hTaGFkb3c6ICd2YXIoLS12ZS1maWVsZC1zaGFkb3cpJyxcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgJ3AsIHVsLCBvbCwgaDIsIGgzLCBoNCwgaDUsIGgxJzoge1xuICAgICAgbWFyZ2luOiAnMCAwIDFlbSAwJyxcbiAgICB9LFxuICAgICdsaSBwJzoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgIH0sXG4gICAgJy5Qcm9zZU1pcnJvcic6IHtcbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICB9LFxuICAgICcuUHJvc2VNaXJyb3IgPiAqOmxhc3QtY2hpbGQnOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgfSxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIC4uLihwcm9wcy5mb2N1c2VkID8gU3R5bGVzLkZvY3VzU3RhdGUgOiB1bmRlZmluZWQpLFxuICAgIHA6IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogcHJvcHMuc2luZ2xlTGluZSA/ICcwJyA6ICcxZW0nLFxuICAgIH0sXG4gIH0pXG4pXG4iXX0= */");
const Component$8 = ({
  value,
  onChange,
  options,
  backgroundColor,
  textColor,
  defaultAlign
}) => {
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    help: options.help,
    children: /* @__PURE__ */ jsx(TiptapEditor, {
      value,
      onChange,
      backgroundColor,
      color: textColor,
      colors: options.colors,
      multiline: options.multiline,
      defaultAlign
    })
  });
};
const HTMLText = (name, options = {}) => {
  return {
    name,
    options: {
      multiline: true,
      allowHeadings: false,
      default: "",
      ...options
    },
    extraProps: (data) => ({
      backgroundColor: colorToProperty(options.backgroundColor && data[options.backgroundColor]),
      textColor: colorToProperty(options.textColor && data[options.textColor]),
      defaultAlign: options.defaultAlign ? data[options.defaultAlign] : void 0
    }),
    render: Component$8,
    ...defaultFieldProperties()
  };
};
const sides = ["top", "right", "bottom", "left"];
const min$1 = Math.min;
const max$1 = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v2) => ({
  x: v2,
  y: v2
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start2, value, end2) {
  return max$1(start2, min$1(value, end2));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length2 = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length2] > rects.floating[length2]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt2 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt2;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
function computeCoordsFromPlacement(_ref2, placement, rtl) {
  let {
    reference: reference2,
    floating
  } = _ref2;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference2.x + reference2.width / 2 - floating.width / 2;
  const commonY = reference2.y + reference2.height / 2 - floating.height / 2;
  const commonAlign = reference2[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference2.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case "right":
      coords = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference2.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference2.x,
        y: reference2.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference2, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware2.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference: reference2,
    floating,
    strategy
  });
  let {
    x: x3,
    y: y4
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0; i2 < validMiddleware.length; i2++) {
    const {
      name,
      fn: fn3
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset: reset2
    } = await fn3({
      x: x3,
      y: y4,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference: reference2,
        floating
      }
    });
    x3 = nextX != null ? nextX : x3;
    y4 = nextY != null ? nextY : y4;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset2 && resetCount <= 50) {
      resetCount++;
      if (typeof reset2 === "object") {
        if (reset2.placement) {
          statefulPlacement = reset2.placement;
        }
        if (reset2.rects) {
          rects = reset2.rects === true ? await platform2.getElementRects({
            reference: reference2,
            floating,
            strategy
          }) : reset2.rects;
        }
        ({
          x: x3,
          y: y4
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
    }
  }
  return {
    x: x3,
    y: y4,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x3,
    y: y4,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x3,
    y: y4
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const arrow$2 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x3,
      y: y4,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x3,
      y: y4
    };
    const axis = getAlignmentAxis(placement);
    const length2 = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length2];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
    const minPadding = min$1(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min$1(paddingObject[maxProp], largestPossiblePadding);
    const min$1$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length2] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
    const offset2 = clamp(min$1$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length2] / 2 - (center < min$1$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1$1 ? center - min$1$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
const flip$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d4) => d4.overflows[0] <= 0).sort((a4, b3) => a4.overflows[1] - b3.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d4) => [d4.placement, d4.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a4, b3) => a4[1] - b3[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
const hide$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x3,
        y: y4,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x3 + diffCoords.x,
        y: y4 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
const shift$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x3,
        y: y4,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref2) => {
            let {
              x: x4,
              y: y5
            } = _ref2;
            return {
              x: x4,
              y: y5
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x3,
        y: y4
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x3,
          y: limitedCoords.y - y4
        }
      };
    }
  };
};
const limitShift$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x: x3,
        y: y4,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset2 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x: x3,
        y: y4
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset2, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
const size$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply: apply2 = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const overflowAvailableHeight = height - overflow[heightSide];
      const overflowAvailableWidth = width - overflow[widthSide];
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isYAxis) {
        const maximumClippingWidth = width - overflow.left - overflow.right;
        availableWidth = alignment || noShift ? min$1(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        availableHeight = alignment || noShift ? min$1(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max$1(overflow.left, 0);
        const xMax = max$1(overflow.right, 0);
        const yMin = max$1(overflow.top, 0);
        const yMax = max$1(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$1(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$1(overflow.top, overflow.bottom));
        }
      }
      await apply2({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};
function getNodeName(node2) {
  if (isNode(node2)) {
    return (node2.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node2) {
  var _node$ownerDocument;
  return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node2) {
  var _ref2;
  return (_ref2 = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref2.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit2 = isWebKit();
  const css2 = getComputedStyle$1(element);
  return css2.transform !== "none" || css2.perspective !== "none" || (css2.containerType ? css2.containerType !== "normal" : false) || !webkit2 && (css2.backdropFilter ? css2.backdropFilter !== "none" : false) || !webkit2 && (css2.filter ? css2.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css2.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css2.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node2) {
  return ["html", "body", "#document"].includes(getNodeName(node2));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node2.assignedSlot || // DOM Element detected.
    node2.parentNode || // ShadowRoot detected.
    isShadowRoot(node2) && node2.host || // Fallback.
    getDocumentElement(node2)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node2) {
  const parentNode2 = getParentNode(node2);
  if (isLastTraversableNode(parentNode2)) {
    return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
  }
  if (isHTMLElement(parentNode2) && isOverflowElement(parentNode2)) {
    return parentNode2;
  }
  return getNearestOverflowAncestor(parentNode2);
}
function getOverflowAncestors(node2, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getCssDimensions(element) {
  const css2 = getComputedStyle$1(element);
  let width = parseFloat(css2.width) || 0;
  let height = parseFloat(css2.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x3 = ($ ? round(rect.width) : rect.width) / width;
  let y4 = ($ ? round(rect.height) : rect.height) / height;
  if (!x3 || !Number.isFinite(x3)) {
    x3 = 1;
  }
  if (!y4 || !Number.isFinite(y4)) {
    y4 = 1;
  }
  return {
    x: x3,
    y: y4
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed2, floatingOffsetParent) {
  if (isFixed2 === void 0) {
    isFixed2 = false;
  }
  if (!floatingOffsetParent || isFixed2 && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed2;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect2 = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x3 = (clientRect2.left + visualOffsets.x) / scale.x;
  let y4 = (clientRect2.top + visualOffsets.y) / scale.y;
  let width = clientRect2.width / scale.x;
  let height = clientRect2.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css2 = getComputedStyle$1(currentIFrame);
      const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
      const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
      x3 *= iframeScale.x;
      y4 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x3 += left2;
      y4 += top2;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x3,
    y: y4
  });
}
const topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(floating) {
  return topLayerSelectors.some((selector) => {
    try {
      return floating.matches(selector);
    } catch (e3) {
      return false;
    }
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref2) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref2;
  const isFixed2 = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed2) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed2) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max$1(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max$1(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x3 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y4 = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === "rtl") {
    x3 += max$1(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x3 = 0;
  let y4 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y4 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect2 = getBoundingClientRect(element, true, strategy === "fixed");
  const top2 = clientRect2.top + element.clientTop;
  const left2 = clientRect2.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x3 = left2 * scale.x;
  const y4 = top2 * scale.y;
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode2 = getParentNode(element);
  if (parentNode2 === stopNode || !isElement(parentNode2) || isLastTraversableNode(parentNode2)) {
    return false;
  }
  return getComputedStyle$1(parentNode2).position === "fixed" || hasFixedPositionAncestor(parentNode2, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult2 = cache.get(element);
  if (cachedResult2) {
    return cachedResult2;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref2) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref2;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max$1(rect.top, accRect.top);
    accRect.right = min$1(rect.right, accRect.right);
    accRect.bottom = min$1(rect.bottom, accRect.bottom);
    accRect.left = max$1(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed2 = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed2, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed2) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed2, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x3 = rect.left + scroll.scrollLeft - offsets.x;
  const y4 = rect.top + scroll.scrollTop - offsets.y;
  return {
    x: x3,
    y: y4,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element) || isTopLayer(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
const getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(data.floating)
    }
  };
};
function isRTL(element) {
  return getComputedStyle$1(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left: left2,
      top: top2,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top2);
    const insetRight = floor(root.clientWidth - (left2 + width));
    const insetBottom = floor(root.clientHeight - (top2 + height));
    const insetLeft = floor(left2);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max$1(0, min$1(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e3) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference2, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference2);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref2) => {
      let [firstEntry] = _ref2;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference2) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference2);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const shift = shift$1;
const flip = flip$1;
const size = size$1;
const hide = hide$1;
const arrow$1 = arrow$2;
const limitShift = limitShift$1;
const computePosition = (reference2, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference2, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
const arrow = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow$1({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow$1({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var index = typeof document !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
function deepEqual(a4, b3) {
  if (a4 === b3) {
    return true;
  }
  if (typeof a4 !== typeof b3) {
    return false;
  }
  if (typeof a4 === "function" && a4.toString() === b3.toString()) {
    return true;
  }
  let length2;
  let i2;
  let keys2;
  if (a4 && b3 && typeof a4 === "object") {
    if (Array.isArray(a4)) {
      length2 = a4.length;
      if (length2 !== b3.length)
        return false;
      for (i2 = length2; i2-- !== 0; ) {
        if (!deepEqual(a4[i2], b3[i2])) {
          return false;
        }
      }
      return true;
    }
    keys2 = Object.keys(a4);
    length2 = keys2.length;
    if (length2 !== Object.keys(b3).length) {
      return false;
    }
    for (i2 = length2; i2-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b3, keys2[i2])) {
        return false;
      }
    }
    for (i2 = length2; i2-- !== 0; ) {
      const key = keys2[i2];
      if (key === "_owner" && a4.$$typeof) {
        continue;
      }
      if (!deepEqual(a4[key], b3[key])) {
        return false;
      }
    }
    return true;
  }
  return a4 !== a4 && b3 !== b3;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = reactExports.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = reactExports.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = reactExports.useState(middleware2);
  if (!deepEqual(latestMiddleware, middleware2)) {
    setLatestMiddleware(middleware2);
  }
  const [_reference, _setReference] = reactExports.useState(null);
  const [_floating, _setFloating] = reactExports.useState(null);
  const setReference = reactExports.useCallback((node2) => {
    if (node2 !== referenceRef.current) {
      referenceRef.current = node2;
      _setReference(node2);
    }
  }, []);
  const setFloating = reactExports.useCallback((node2) => {
    if (node2 !== floatingRef.current) {
      floatingRef.current = node2;
      _setFloating(node2);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = reactExports.useRef(null);
  const floatingRef = reactExports.useRef(null);
  const dataRef = reactExports.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const update = reactExports.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        reactDomExports.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = reactExports.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = reactExports.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = reactExports.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = reactExports.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x3 = roundByDPR(elements.floating, data.x);
    const y4 = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x3 + "px, " + y4 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x3,
      top: y4
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return reactExports.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
const $7e8f5cd07187803e$export$21b07c8f274aebd5 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { children, width = 10, height = 5, ...arrowProps } = props;
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.svg, _extends({}, arrowProps, {
    ref: forwardedRef,
    width,
    height,
    viewBox: "0 0 30 10",
    preserveAspectRatio: "none"
  }), props.asChild ? children : /* @__PURE__ */ reactExports.createElement("polygon", {
    points: "0,0 30,0 15,10"
  }));
});
const $7e8f5cd07187803e$export$be92b6f5f03c0fe9 = $7e8f5cd07187803e$export$21b07c8f274aebd5;
function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
  const [size2, setSize] = reactExports.useState(void 0);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (element) {
      setSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries))
          return;
        if (!entries.length)
          return;
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({
          width,
          height
        });
      });
      resizeObserver.observe(element, {
        box: "border-box"
      });
      return () => resizeObserver.unobserve(element);
    } else
      setSize(void 0);
  }, [
    element
  ]);
  return size2;
}
const $cf1ac5d9fe0e8206$var$POPPER_NAME = "Popper";
const [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME);
const [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);
const $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = reactExports.useState(null);
  return /* @__PURE__ */ reactExports.createElement($cf1ac5d9fe0e8206$var$PopperProvider, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor
  }, children);
};
const $cf1ac5d9fe0e8206$var$ANCHOR_NAME = "PopperAnchor";
const $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopePopper, virtualRef, ...anchorProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);
  const ref = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  reactExports.useEffect(() => {
    context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
  });
  return virtualRef ? null : /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, anchorProps, {
    ref: composedRefs
  }));
});
const $cf1ac5d9fe0e8206$var$CONTENT_NAME = "PopperContent";
const [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);
const $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;
  const { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, avoidCollisions = true, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, updatePositionStrategy = "optimized", onPlaced, ...contentProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
  const [content, setContent2] = reactExports.useState(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setContent2(node2)
  );
  const [arrow$12, setArrow] = reactExports.useState(null);
  const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow$12);
  const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
  const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
  const desiredPlacement = side + (align !== "center" ? "-" + align : "");
  const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...collisionPaddingProp
  };
  const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
    collisionBoundary
  ];
  const hasExplicitBoundaries = boundary.length > 0;
  const detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),
    // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
    altBoundary: hasExplicitBoundaries
  };
  const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
    // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
    strategy: "fixed",
    placement: desiredPlacement,
    whileElementsMounted: (...args) => {
      const cleanup = autoUpdate(...args, {
        animationFrame: updatePositionStrategy === "always"
      });
      return cleanup;
    },
    elements: {
      reference: context.anchor
    },
    middleware: [
      offset({
        mainAxis: sideOffset + arrowHeight,
        alignmentAxis: alignOffset
      }),
      avoidCollisions && shift({
        mainAxis: true,
        crossAxis: false,
        limiter: sticky === "partial" ? limitShift() : void 0,
        ...detectOverflowOptions
      }),
      avoidCollisions && flip({
        ...detectOverflowOptions
      }),
      size({
        ...detectOverflowOptions,
        apply: ({ elements, rects, availableWidth, availableHeight }) => {
          const { width: anchorWidth, height: anchorHeight } = rects.reference;
          const contentStyle = elements.floating.style;
          contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
          contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
          contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
          contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
        }
      }),
      arrow$12 && arrow({
        element: arrow$12,
        padding: arrowPadding
      }),
      $cf1ac5d9fe0e8206$var$transformOrigin({
        arrowWidth,
        arrowHeight
      }),
      hideWhenDetached && hide({
        strategy: "referenceHidden",
        ...detectOverflowOptions
      })
    ]
  });
  const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
  const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPlaced);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (isPositioned)
      handlePlaced === null || handlePlaced === void 0 || handlePlaced();
  }, [
    isPositioned,
    handlePlaced
  ]);
  const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
  const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
  const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
  const [contentZIndex, setContentZIndex] = reactExports.useState();
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (content)
      setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [
    content
  ]);
  return /* @__PURE__ */ reactExports.createElement("div", {
    ref: refs.setFloating,
    "data-radix-popper-content-wrapper": "",
    style: {
      ...floatingStyles,
      transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
      // keep off the page when measuring
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
        (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
      ].join(" ")
    },
    dir: props.dir
  }, /* @__PURE__ */ reactExports.createElement($cf1ac5d9fe0e8206$var$PopperContentProvider, {
    scope: __scopePopper,
    placedSide,
    onArrowChange: setArrow,
    arrowX,
    arrowY,
    shouldHideArrow: cannotCenterArrow
  }, /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-side": placedSide,
    "data-align": placedAlign
  }, contentProps, {
    ref: composedRefs,
    style: {
      ...contentProps.style,
      // if the PopperContent hasn't been placed yet (not all measurements done)
      // we prevent animations so that users's animation don't kick in too early referring wrong sides
      animation: !isPositioned ? "none" : void 0,
      // hide the content if using the hide middleware and should be hidden
      opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
    }
  }))));
});
const $cf1ac5d9fe0e8206$var$ARROW_NAME = "PopperArrow";
const $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
const $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0 = /* @__PURE__ */ reactExports.forwardRef(function $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd02(props, forwardedRef) {
  const { __scopePopper, ...arrowProps } = props;
  const contentContext = $cf1ac5d9fe0e8206$var$useContentContext($cf1ac5d9fe0e8206$var$ARROW_NAME, __scopePopper);
  const baseSide = $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE[contentContext.placedSide];
  return (
    // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
    // doesn't report size as we'd expect on SVG elements.
    // it reports their bounding box which is effectively the largest path inside the SVG.
    /* @__PURE__ */ reactExports.createElement("span", {
      ref: contentContext.onArrowChange,
      style: {
        position: "absolute",
        left: contentContext.arrowX,
        top: contentContext.arrowY,
        [baseSide]: 0,
        transformOrigin: {
          top: "",
          right: "0 0",
          bottom: "center 0",
          left: "100% 0"
        }[contentContext.placedSide],
        transform: {
          top: "translateY(100%)",
          right: "translateY(50%) rotate(90deg) translateX(-50%)",
          bottom: `rotate(180deg)`,
          left: "translateY(50%) rotate(-90deg) translateX(50%)"
        }[contentContext.placedSide],
        visibility: contentContext.shouldHideArrow ? "hidden" : void 0
      }
    }, /* @__PURE__ */ reactExports.createElement($7e8f5cd07187803e$export$be92b6f5f03c0fe9, _extends({}, arrowProps, {
      ref: forwardedRef,
      style: {
        ...arrowProps.style,
        // ensures the element can be measured correctly (mostly for if SVG)
        display: "block"
      }
    })))
  );
});
function $cf1ac5d9fe0e8206$var$isNotNull(value) {
  return value !== null;
}
const $cf1ac5d9fe0e8206$var$transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
    const noArrowAlign = {
      start: "0%",
      center: "50%",
      end: "100%"
    }[placedAlign];
    const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
    const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
    let x3 = "";
    let y4 = "";
    if (placedSide === "bottom") {
      x3 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y4 = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x3 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y4 = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x3 = `${-arrowHeight}px`;
      y4 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x3 = `${rects.floating.width + arrowHeight}px`;
      y4 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return {
      data: {
        x: x3,
        y: y4
      }
    };
  }
});
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [
    side,
    align
  ];
}
const $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;
const $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;
const $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;
const $cf1ac5d9fe0e8206$export$21b07c8f274aebd5 = $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0;
const $cb5cc270b50c6fcd$var$POPOVER_NAME = "Popover";
const [$cb5cc270b50c6fcd$var$createPopoverContext, $cb5cc270b50c6fcd$export$c8393c9e73286932] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cb5cc270b50c6fcd$var$POPOVER_NAME, [
  $cf1ac5d9fe0e8206$export$722aac194ae923
]);
const $cb5cc270b50c6fcd$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
const [$cb5cc270b50c6fcd$var$PopoverProvider, $cb5cc270b50c6fcd$var$usePopoverContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$POPOVER_NAME);
const $cb5cc270b50c6fcd$export$5b6b19405a83ff9d = (props) => {
  const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const triggerRef = reactExports.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = reactExports.useState(false);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ reactExports.createElement($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ reactExports.createElement($cb5cc270b50c6fcd$var$PopoverProvider, {
    scope: __scopePopover,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    triggerRef,
    open,
    onOpenChange: setOpen,
    onOpenToggle: reactExports.useCallback(
      () => setOpen(
        (prevOpen) => !prevOpen
      ),
      [
        setOpen
      ]
    ),
    hasCustomAnchor,
    onCustomAnchorAdd: reactExports.useCallback(
      () => setHasCustomAnchor(true),
      []
    ),
    onCustomAnchorRemove: reactExports.useCallback(
      () => setHasCustomAnchor(false),
      []
    ),
    modal
  }, children));
};
const $cb5cc270b50c6fcd$var$TRIGGER_NAME = "PopoverTrigger";
const $cb5cc270b50c6fcd$export$7dacb05d26466c3 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopePopover, ...triggerProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$TRIGGER_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.triggerRef);
  const trigger = /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button",
    "aria-haspopup": "dialog",
    "aria-expanded": context.open,
    "aria-controls": context.contentId,
    "data-state": $cb5cc270b50c6fcd$var$getState(context.open)
  }, triggerProps, {
    ref: composedTriggerRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, context.onOpenToggle)
  }));
  return context.hasCustomAnchor ? trigger : /* @__PURE__ */ reactExports.createElement($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({
    asChild: true
  }, popperScope), trigger);
});
const $cb5cc270b50c6fcd$var$PORTAL_NAME = "PopoverPortal";
const [$cb5cc270b50c6fcd$var$PortalProvider, $cb5cc270b50c6fcd$var$usePortalContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, {
  forceMount: void 0
});
const $cb5cc270b50c6fcd$var$CONTENT_NAME = "PopoverContent";
const $cb5cc270b50c6fcd$export$d7e1f420b25549ff = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = $cb5cc270b50c6fcd$var$usePortalContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  return /* @__PURE__ */ reactExports.createElement($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, context.modal ? /* @__PURE__ */ reactExports.createElement($cb5cc270b50c6fcd$var$PopoverContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ reactExports.createElement($cb5cc270b50c6fcd$var$PopoverContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })));
});
const $cb5cc270b50c6fcd$var$PopoverContentModal = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const contentRef = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
  const isRightClickOutsideRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    const content = contentRef.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ reactExports.createElement($am6gm$RemoveScroll, {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
    allowPinchZoom: true
  }, /* @__PURE__ */ reactExports.createElement($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      event.preventDefault();
      if (!isRightClickOutsideRef.current)
        (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
    }),
    onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      isRightClickOutsideRef.current = isRightClick;
    }, {
      checkForDefaultPrevented: false
    }),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onFocusOutside,
      (event) => event.preventDefault(),
      {
        checkForDefaultPrevented: false
      }
    )
  })));
});
const $cb5cc270b50c6fcd$var$PopoverContentNonModal = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const hasInteractedOutsideRef = reactExports.useRef(false);
  const hasPointerDownOutsideRef = reactExports.useRef(false);
  return /* @__PURE__ */ reactExports.createElement($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented) {
        var _context$triggerRef$c2;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts, _context$triggerRef$c3;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown")
          hasPointerDownOutsideRef.current = true;
      }
      const target = event.target;
      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
      if (targetIsTrigger)
        event.preventDefault();
      if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
        event.preventDefault();
    }
  }));
});
const $cb5cc270b50c6fcd$var$PopoverContentImpl = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  return /* @__PURE__ */ reactExports.createElement($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: true,
    loop: true,
    trapped: trapFocus,
    onMountAutoFocus: onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ reactExports.createElement($5cb92bef7577960e$export$177fb62ff3ec1f22, {
    asChild: true,
    disableOutsidePointerEvents,
    onInteractOutside,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onDismiss: () => context.onOpenChange(false)
  }, /* @__PURE__ */ reactExports.createElement($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
    "data-state": $cb5cc270b50c6fcd$var$getState(context.open),
    role: "dialog",
    id: context.contentId
  }, popperScope, contentProps, {
    ref: forwardedRef,
    style: {
      ...contentProps.style,
      "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
      "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
      "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }))));
});
const $cb5cc270b50c6fcd$export$3152841115e061b2 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopePopover, ...arrowProps } = props;
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  return /* @__PURE__ */ reactExports.createElement($cf1ac5d9fe0e8206$export$21b07c8f274aebd5, _extends({}, popperScope, arrowProps, {
    ref: forwardedRef
  }));
});
function $cb5cc270b50c6fcd$var$getState(open) {
  return open ? "open" : "closed";
}
const $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9 = $cb5cc270b50c6fcd$export$5b6b19405a83ff9d;
const $cb5cc270b50c6fcd$export$41fb9f06171c75f4 = $cb5cc270b50c6fcd$export$7dacb05d26466c3;
const $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2 = $cb5cc270b50c6fcd$export$d7e1f420b25549ff;
const $cb5cc270b50c6fcd$export$21b07c8f274aebd5 = $cb5cc270b50c6fcd$export$3152841115e061b2;
function _EMOTION_STRINGIFIED_CSS_ERROR__$4() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Component$7 = ({
  value,
  onChange,
  options
}) => {
  const [isOpen, setOpen] = reactExports.useState(false);
  const changeHandler = (color) => prevent(() => {
    onChange(color);
    setOpen(false);
  });
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    children: /* @__PURE__ */ jsxs($cb5cc270b50c6fcd$export$be92b6f5f03c0fe9, {
      open: isOpen,
      onOpenChange: () => setOpen((v2) => !v2),
      children: [/* @__PURE__ */ jsx($cb5cc270b50c6fcd$export$41fb9f06171c75f4, {
        asChild: true,
        children: /* @__PURE__ */ jsx(Button$2, {
          focused: isOpen || void 0,
          color: value || "",
          style: value ? {
            "--ve-selected-color": colorToProperty(value)
          } : void 0
        })
      }), /* @__PURE__ */ jsxs(Tooltip, {
        side: "top",
        children: [/* @__PURE__ */ jsxs(Palette, {
          style: {
            "--children": options.colors.length + 1
          },
          children: [/* @__PURE__ */ jsx(PaletteItemTransparent, {
            onClick: prevent(() => onChange(null))
          }), options.colors.map((color) => /* @__PURE__ */ jsx(PaletteItem, {
            style: {
              "--ve-color": colorToProperty(color)
            },
            onClick: changeHandler(color)
          }, color))]
        }), /* @__PURE__ */ jsx(Arrow, {})]
      })]
    })
  });
};
const Color = defineField({
  defaultOptions: {
    default: "",
    colors: []
  },
  render: Component$7
});
const Button$2 = /* @__PURE__ */ createStyled(UnstyledButton, process.env.NODE_ENV === "production" ? {
  target: "eza5urq5"
} : {
  target: "eza5urq5",
  label: "Button"
})({
  width: "38px",
  height: "38px",
  backgroundColor: "#fff",
  boxShadow: "var(--ve-field-shadow)",
  border: "1px solid var(--ve-field-border)",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  cursor: "pointer",
  borderRadius: "3px",
  "&::before": {
    content: "''",
    display: "block",
    width: "28px",
    height: "28px",
    flex: "none",
    background: "var(--ve-selected-color, red)",
    borderRadius: "2px"
  },
  "&:focus": Styles.FocusState
}, (props) => ({
  ...props.focused ? Styles.FocusState : null,
  "&::before": props.color ? null : Styles.Mosaic
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEVlIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICogYXMgUG9wb3ZlciBmcm9tICdAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlcidcbmltcG9ydCB7IEZpZWxkLCBTdHlsZXMsIFVuc3R5bGVkQnV0dG9uIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHsgZGVmaW5lRmllbGQgfSBmcm9tICdzcmMvZmllbGRzL3V0aWxzJ1xuaW1wb3J0IHsgY29sb3JUb1Byb3BlcnR5IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9jc3MnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBkZWZhdWx0Pzogc3RyaW5nXG4gIGNvbG9yczogc3RyaW5nW11cbn1cblxuY29uc3QgQ29tcG9uZW50OiBGaWVsZENvbXBvbmVudDxGaWVsZEFyZ3MsIHN0cmluZyB8IG51bGw+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBjaGFuZ2VIYW5kbGVyID0gKGNvbG9yOiBzdHJpbmcpID0+XG4gICAgcHJldmVudCgoKSA9PiB7XG4gICAgICBvbkNoYW5nZShjb2xvcilcbiAgICAgIHNldE9wZW4oZmFsc2UpXG4gICAgfSlcblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD17b3B0aW9ucy5sYWJlbH0+XG4gICAgICA8UG9wb3Zlci5Sb290IG9wZW49e2lzT3Blbn0gb25PcGVuQ2hhbmdlPXsoKSA9PiBzZXRPcGVuKCh2KSA9PiAhdil9PlxuICAgICAgICA8UG9wb3Zlci5UcmlnZ2VyIGFzQ2hpbGQ+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgZm9jdXNlZD17aXNPcGVuIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIGNvbG9yPXt2YWx1ZSB8fCAnJ31cbiAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICA/ICh7XG4gICAgICAgICAgICAgICAgICAgICctLXZlLXNlbGVjdGVkLWNvbG9yJzogY29sb3JUb1Byb3BlcnR5KHZhbHVlKSxcbiAgICAgICAgICAgICAgICAgIH0gYXMgQ1NTUHJvcGVydGllcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUG9wb3Zlci5UcmlnZ2VyPlxuICAgICAgICA8VG9vbHRpcCBzaWRlPVwidG9wXCI+XG4gICAgICAgICAgPFBhbGV0dGVcbiAgICAgICAgICAgIHN0eWxlPXt7ICctLWNoaWxkcmVuJzogb3B0aW9ucy5jb2xvcnMubGVuZ3RoICsgMSB9IGFzIENTU1Byb3BlcnRpZXN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFBhbGV0dGVJdGVtVHJhbnNwYXJlbnQgb25DbGljaz17cHJldmVudCgoKSA9PiBvbkNoYW5nZShudWxsKSl9IC8+XG4gICAgICAgICAgICB7b3B0aW9ucy5jb2xvcnMubWFwKChjb2xvcikgPT4gKFxuICAgICAgICAgICAgICA8UGFsZXR0ZUl0ZW1cbiAgICAgICAgICAgICAgICBrZXk9e2NvbG9yfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgICAgIHsgJy0tdmUtY29sb3InOiBjb2xvclRvUHJvcGVydHkoY29sb3IpIH0gYXMgQ1NTUHJvcGVydGllc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VIYW5kbGVyKGNvbG9yKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvUGFsZXR0ZT5cbiAgICAgICAgICA8QXJyb3cgLz5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgPC9Qb3BvdmVyLlJvb3Q+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgQ29sb3IgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIHN0cmluZyB8IG51bGw+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBkZWZhdWx0OiAnJyxcbiAgICBjb2xvcnM6IFtdIGFzIHN0cmluZ1tdLFxuICB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pXG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbik8e1xuICBmb2N1c2VkPzogYm9vbGVhblxuICBjb2xvcjogc3RyaW5nXG59PihcbiAge1xuICAgIHdpZHRoOiAnMzhweCcsXG4gICAgaGVpZ2h0OiAnMzhweCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgYm94U2hhZG93OiAndmFyKC0tdmUtZmllbGQtc2hhZG93KScsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIHZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiAnM3B4JyxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMjhweCcsXG4gICAgICBoZWlnaHQ6ICcyOHB4JyxcbiAgICAgIGZsZXg6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1zZWxlY3RlZC1jb2xvciwgcmVkKScsXG4gICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgIH0sXG4gICAgJyY6Zm9jdXMnOiBTdHlsZXMuRm9jdXNTdGF0ZSxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIC4uLihwcm9wcy5mb2N1c2VkID8gU3R5bGVzLkZvY3VzU3RhdGUgOiBudWxsKSxcbiAgICAnJjo6YmVmb3JlJzogcHJvcHMuY29sb3IgPyBudWxsIDogU3R5bGVzLk1vc2FpYyxcbiAgfSlcbilcblxuY29uc3QgSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtLjJlbSknLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59KVxuXG5jb25zdCBUb29sdGlwID0gc3R5bGVkKFBvcG92ZXIuQ29udGVudCkoe1xuICBwYWRkaW5nOiAzLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gIGJvcmRlcjogJ3NvbGlkIDFweCByZ2JhKDAsIDAsIDAsIDAuMSknLFxuICBib3hTaGFkb3c6XG4gICAgJ3JnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LCByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4JyxcbiAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgYW5pbWF0aW9uOiBgJHtJbn0gMC4zcyBlYXNlLW91dGAsXG59KVxuXG5jb25zdCBQYWxldHRlID0gc3R5bGVkLmRpdih7XG4gIGZsZXhXcmFwOiAnd3JhcCcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgd2lkdGg6ICdjYWxjKDI3cHggKiB2YXIoLS1jaGlsZHJlbikgKiAwLjUpJyxcbn0pXG5cbmNvbnN0IFBhbGV0dGVJdGVtID0gc3R5bGVkKFVuc3R5bGVkQnV0dG9uKSh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1jb2xvciknLFxuICB3aWR0aDogJzI1cHgnLFxuICBoZWlnaHQ6ICcyNXB4JyxcbiAgbWFyZ2luOiAxLFxuICBmbGV4OiAnbm9uZScsXG4gIHpJbmRleDogMixcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlclJhZGl1czogJzJweCcsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgYm94U2hhZG93OiAndmFyKC0tdmUtZmllbGQtc2hhZG93KScsXG4gICcmOmhvdmVyJzoge1xuICAgIHpJbmRleDogMyxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjIpJyxcbiAgICBib3JkZXJDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICBvdXRsaW5lOiAnMCcsXG4gICAgYm94U2hhZG93OiAnMCAwIDAgMC4yNXJlbSByZ2IoMjMgMTEzIDIzMCAvIDI1JSknLFxuICB9LFxufSlcblxuY29uc3QgUGFsZXR0ZUl0ZW1UcmFuc3BhcmVudCA9IHN0eWxlZChQYWxldHRlSXRlbSkoe1xuICAuLi5TdHlsZXMuTW9zYWljLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJy05cHgnLFxuICAgIGxlZnQ6ICdjYWxjKDUwJSAtIDFweCknLFxuICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICB3aWR0aDogJzJweCcsXG4gICAgaGVpZ2h0OiAnNDBweCcsXG4gICAgYmFja2dyb3VuZDogJ3JlZCcsXG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDQ1ZGVnKScsXG4gIH0sXG59KVxuXG5jb25zdCBBcnJvdyA9IHN0eWxlZChQb3BvdmVyLkFycm93KSh7XG4gIGZpbGw6ICd3aGl0ZScsXG59KVxuIl19 */");
const In = keyframes({
  from: {
    transform: "translateY(-.2em)",
    opacity: 0
  }
});
const Tooltip = /* @__PURE__ */ createStyled($cb5cc270b50c6fcd$export$7c6e2c02157bb7d2, process.env.NODE_ENV === "production" ? {
  target: "eza5urq4"
} : {
  target: "eza5urq4",
  label: "Tooltip"
})({
  padding: 3,
  backgroundColor: "white",
  border: "solid 1px rgba(0, 0, 0, 0.1)",
  boxShadow: "rgba(0, 0, 0, 0.1) 0 10px 15px -3px, rgba(0, 0, 0, 0.05) 0 4px 6px -2px",
  borderRadius: "4px",
  animation: `${In} 0.3s ease-out`
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUhnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvQ29sb3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIFBvcG92ZXIgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXInXG5pbXBvcnQgeyBGaWVsZCwgU3R5bGVzLCBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IGNvbG9yVG9Qcm9wZXJ0eSB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvY3NzJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgZGVmYXVsdD86IHN0cmluZ1xuICBjb2xvcnM6IHN0cmluZ1tdXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgY2hhbmdlSGFuZGxlciA9IChjb2xvcjogc3RyaW5nKSA9PlxuICAgIHByZXZlbnQoKCkgPT4ge1xuICAgICAgb25DaGFuZ2UoY29sb3IpXG4gICAgICBzZXRPcGVuKGZhbHNlKVxuICAgIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9e29wdGlvbnMubGFiZWx9PlxuICAgICAgPFBvcG92ZXIuUm9vdCBvcGVuPXtpc09wZW59IG9uT3BlbkNoYW5nZT17KCkgPT4gc2V0T3BlbigodikgPT4gIXYpfT5cbiAgICAgICAgPFBvcG92ZXIuVHJpZ2dlciBhc0NoaWxkPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGZvY3VzZWQ9e2lzT3BlbiB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICBjb2xvcj17dmFsdWUgfHwgJyd9XG4gICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAnLS12ZS1zZWxlY3RlZC1jb2xvcic6IGNvbG9yVG9Qcm9wZXJ0eSh2YWx1ZSksXG4gICAgICAgICAgICAgICAgICB9IGFzIENTU1Byb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BvcG92ZXIuVHJpZ2dlcj5cbiAgICAgICAgPFRvb2x0aXAgc2lkZT1cInRvcFwiPlxuICAgICAgICAgIDxQYWxldHRlXG4gICAgICAgICAgICBzdHlsZT17eyAnLS1jaGlsZHJlbic6IG9wdGlvbnMuY29sb3JzLmxlbmd0aCArIDEgfSBhcyBDU1NQcm9wZXJ0aWVzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxQYWxldHRlSXRlbVRyYW5zcGFyZW50IG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25DaGFuZ2UobnVsbCkpfSAvPlxuICAgICAgICAgICAge29wdGlvbnMuY29sb3JzLm1hcCgoY29sb3IpID0+IChcbiAgICAgICAgICAgICAgPFBhbGV0dGVJdGVtXG4gICAgICAgICAgICAgICAga2V5PXtjb2xvcn1cbiAgICAgICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgICB7ICctLXZlLWNvbG9yJzogY29sb3JUb1Byb3BlcnR5KGNvbG9yKSB9IGFzIENTU1Byb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25DbGljaz17Y2hhbmdlSGFuZGxlcihjb2xvcil9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L1BhbGV0dGU+XG4gICAgICAgICAgPEFycm93IC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgIDwvUG9wb3Zlci5Sb290PlxuICAgIDwvRmllbGQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IENvbG9yID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPih7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgZGVmYXVsdDogJycsXG4gICAgY29sb3JzOiBbXSBhcyBzdHJpbmdbXSxcbiAgfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoVW5zdHlsZWRCdXR0b24pPHtcbiAgZm9jdXNlZD86IGJvb2xlYW5cbiAgY29sb3I6IHN0cmluZ1xufT4oXG4gIHtcbiAgICB3aWR0aDogJzM4cHgnLFxuICAgIGhlaWdodDogJzM4cHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGJvcmRlclJhZGl1czogJzNweCcsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzI4cHgnLFxuICAgICAgaGVpZ2h0OiAnMjhweCcsXG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtc2VsZWN0ZWQtY29sb3IsIHJlZCknLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICB9LFxuICAgICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICAuLi4ocHJvcHMuZm9jdXNlZCA/IFN0eWxlcy5Gb2N1c1N0YXRlIDogbnVsbCksXG4gICAgJyY6OmJlZm9yZSc6IHByb3BzLmNvbG9yID8gbnVsbCA6IFN0eWxlcy5Nb3NhaWMsXG4gIH0pXG4pXG5cbmNvbnN0IEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLS4yZW0pJyxcbiAgICBvcGFjaXR5OiAwLFxuICB9LFxufSlcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZChQb3BvdmVyLkNvbnRlbnQpKHtcbiAgcGFkZGluZzogMyxcbiAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICBib3JkZXI6ICdzb2xpZCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcbiAgYm94U2hhZG93OlxuICAgICdyZ2JhKDAsIDAsIDAsIDAuMSkgMCAxMHB4IDE1cHggLTNweCwgcmdiYSgwLCAwLCAwLCAwLjA1KSAwIDRweCA2cHggLTJweCcsXG4gIGJvcmRlclJhZGl1czogJzRweCcsXG4gIGFuaW1hdGlvbjogYCR7SW59IDAuM3MgZWFzZS1vdXRgLFxufSlcblxuY29uc3QgUGFsZXR0ZSA9IHN0eWxlZC5kaXYoe1xuICBmbGV4V3JhcDogJ3dyYXAnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdpZHRoOiAnY2FsYygyN3B4ICogdmFyKC0tY2hpbGRyZW4pICogMC41KScsXG59KVxuXG5jb25zdCBQYWxldHRlSXRlbSA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbikoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgd2lkdGg6ICcyNXB4JyxcbiAgaGVpZ2h0OiAnMjVweCcsXG4gIG1hcmdpbjogMSxcbiAgZmxleDogJ25vbmUnLFxuICB6SW5kZXg6IDIsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAnJjpob3Zlcic6IHtcbiAgICB6SW5kZXg6IDMsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKScsXG4gICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgb3V0bGluZTogJzAnLFxuICAgIGJveFNoYWRvdzogJzAgMCAwIDAuMjVyZW0gcmdiKDIzIDExMyAyMzAgLyAyNSUpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IFBhbGV0dGVJdGVtVHJhbnNwYXJlbnQgPSBzdHlsZWQoUGFsZXR0ZUl0ZW0pKHtcbiAgLi4uU3R5bGVzLk1vc2FpYyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICctOXB4JyxcbiAgICBsZWZ0OiAnY2FsYyg1MCUgLSAxcHgpJyxcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgd2lkdGg6ICcycHgnLFxuICAgIGhlaWdodDogJzQwcHgnLFxuICAgIGJhY2tncm91bmQ6ICdyZWQnLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknLFxuICB9LFxufSlcblxuY29uc3QgQXJyb3cgPSBzdHlsZWQoUG9wb3Zlci5BcnJvdykoe1xuICBmaWxsOiAnd2hpdGUnLFxufSlcbiJdfQ== */");
const Palette = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "eza5urq3"
} : {
  target: "eza5urq3",
  label: "Palette"
})(process.env.NODE_ENV === "production" ? {
  name: "ea9use",
  styles: "flex-wrap:wrap;display:flex;width:calc(27px * var(--children) * 0.5)"
} : {
  name: "ea9use",
  styles: "flex-wrap:wrap;display:flex;width:calc(27px * var(--children) * 0.5)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkhnQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvQ29sb3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIFBvcG92ZXIgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXInXG5pbXBvcnQgeyBGaWVsZCwgU3R5bGVzLCBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IGNvbG9yVG9Qcm9wZXJ0eSB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvY3NzJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgZGVmYXVsdD86IHN0cmluZ1xuICBjb2xvcnM6IHN0cmluZ1tdXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgY2hhbmdlSGFuZGxlciA9IChjb2xvcjogc3RyaW5nKSA9PlxuICAgIHByZXZlbnQoKCkgPT4ge1xuICAgICAgb25DaGFuZ2UoY29sb3IpXG4gICAgICBzZXRPcGVuKGZhbHNlKVxuICAgIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9e29wdGlvbnMubGFiZWx9PlxuICAgICAgPFBvcG92ZXIuUm9vdCBvcGVuPXtpc09wZW59IG9uT3BlbkNoYW5nZT17KCkgPT4gc2V0T3BlbigodikgPT4gIXYpfT5cbiAgICAgICAgPFBvcG92ZXIuVHJpZ2dlciBhc0NoaWxkPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGZvY3VzZWQ9e2lzT3BlbiB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICBjb2xvcj17dmFsdWUgfHwgJyd9XG4gICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAnLS12ZS1zZWxlY3RlZC1jb2xvcic6IGNvbG9yVG9Qcm9wZXJ0eSh2YWx1ZSksXG4gICAgICAgICAgICAgICAgICB9IGFzIENTU1Byb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BvcG92ZXIuVHJpZ2dlcj5cbiAgICAgICAgPFRvb2x0aXAgc2lkZT1cInRvcFwiPlxuICAgICAgICAgIDxQYWxldHRlXG4gICAgICAgICAgICBzdHlsZT17eyAnLS1jaGlsZHJlbic6IG9wdGlvbnMuY29sb3JzLmxlbmd0aCArIDEgfSBhcyBDU1NQcm9wZXJ0aWVzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxQYWxldHRlSXRlbVRyYW5zcGFyZW50IG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25DaGFuZ2UobnVsbCkpfSAvPlxuICAgICAgICAgICAge29wdGlvbnMuY29sb3JzLm1hcCgoY29sb3IpID0+IChcbiAgICAgICAgICAgICAgPFBhbGV0dGVJdGVtXG4gICAgICAgICAgICAgICAga2V5PXtjb2xvcn1cbiAgICAgICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgICB7ICctLXZlLWNvbG9yJzogY29sb3JUb1Byb3BlcnR5KGNvbG9yKSB9IGFzIENTU1Byb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25DbGljaz17Y2hhbmdlSGFuZGxlcihjb2xvcil9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L1BhbGV0dGU+XG4gICAgICAgICAgPEFycm93IC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgIDwvUG9wb3Zlci5Sb290PlxuICAgIDwvRmllbGQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IENvbG9yID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPih7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgZGVmYXVsdDogJycsXG4gICAgY29sb3JzOiBbXSBhcyBzdHJpbmdbXSxcbiAgfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoVW5zdHlsZWRCdXR0b24pPHtcbiAgZm9jdXNlZD86IGJvb2xlYW5cbiAgY29sb3I6IHN0cmluZ1xufT4oXG4gIHtcbiAgICB3aWR0aDogJzM4cHgnLFxuICAgIGhlaWdodDogJzM4cHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGJvcmRlclJhZGl1czogJzNweCcsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzI4cHgnLFxuICAgICAgaGVpZ2h0OiAnMjhweCcsXG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtc2VsZWN0ZWQtY29sb3IsIHJlZCknLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICB9LFxuICAgICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICAuLi4ocHJvcHMuZm9jdXNlZCA/IFN0eWxlcy5Gb2N1c1N0YXRlIDogbnVsbCksXG4gICAgJyY6OmJlZm9yZSc6IHByb3BzLmNvbG9yID8gbnVsbCA6IFN0eWxlcy5Nb3NhaWMsXG4gIH0pXG4pXG5cbmNvbnN0IEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLS4yZW0pJyxcbiAgICBvcGFjaXR5OiAwLFxuICB9LFxufSlcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZChQb3BvdmVyLkNvbnRlbnQpKHtcbiAgcGFkZGluZzogMyxcbiAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICBib3JkZXI6ICdzb2xpZCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcbiAgYm94U2hhZG93OlxuICAgICdyZ2JhKDAsIDAsIDAsIDAuMSkgMCAxMHB4IDE1cHggLTNweCwgcmdiYSgwLCAwLCAwLCAwLjA1KSAwIDRweCA2cHggLTJweCcsXG4gIGJvcmRlclJhZGl1czogJzRweCcsXG4gIGFuaW1hdGlvbjogYCR7SW59IDAuM3MgZWFzZS1vdXRgLFxufSlcblxuY29uc3QgUGFsZXR0ZSA9IHN0eWxlZC5kaXYoe1xuICBmbGV4V3JhcDogJ3dyYXAnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdpZHRoOiAnY2FsYygyN3B4ICogdmFyKC0tY2hpbGRyZW4pICogMC41KScsXG59KVxuXG5jb25zdCBQYWxldHRlSXRlbSA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbikoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgd2lkdGg6ICcyNXB4JyxcbiAgaGVpZ2h0OiAnMjVweCcsXG4gIG1hcmdpbjogMSxcbiAgZmxleDogJ25vbmUnLFxuICB6SW5kZXg6IDIsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAnJjpob3Zlcic6IHtcbiAgICB6SW5kZXg6IDMsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKScsXG4gICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgb3V0bGluZTogJzAnLFxuICAgIGJveFNoYWRvdzogJzAgMCAwIDAuMjVyZW0gcmdiKDIzIDExMyAyMzAgLyAyNSUpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IFBhbGV0dGVJdGVtVHJhbnNwYXJlbnQgPSBzdHlsZWQoUGFsZXR0ZUl0ZW0pKHtcbiAgLi4uU3R5bGVzLk1vc2FpYyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICctOXB4JyxcbiAgICBsZWZ0OiAnY2FsYyg1MCUgLSAxcHgpJyxcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgd2lkdGg6ICcycHgnLFxuICAgIGhlaWdodDogJzQwcHgnLFxuICAgIGJhY2tncm91bmQ6ICdyZWQnLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknLFxuICB9LFxufSlcblxuY29uc3QgQXJyb3cgPSBzdHlsZWQoUG9wb3Zlci5BcnJvdykoe1xuICBmaWxsOiAnd2hpdGUnLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
});
const PaletteItem = /* @__PURE__ */ createStyled(UnstyledButton, process.env.NODE_ENV === "production" ? {
  target: "eza5urq2"
} : {
  target: "eza5urq2",
  label: "PaletteItem"
})(process.env.NODE_ENV === "production" ? {
  name: "118g99r",
  styles: "position:relative;background-color:var(--ve-color);width:25px;height:25px;margin:1px;flex:none;z-index:2;cursor:pointer;border-radius:2px;border:1px solid var(--ve-field-border);box-shadow:var(--ve-field-shadow);&:hover{z-index:3;transform:scale(1.2);border-color:var(--ve-primary);outline:0;box-shadow:0 0 0 0.25rem rgb(23 113 230 / 25%);}"
} : {
  name: "118g99r",
  styles: "position:relative;background-color:var(--ve-color);width:25px;height:25px;margin:1px;flex:none;z-index:2;cursor:pointer;border-radius:2px;border:1px solid var(--ve-field-border);box-shadow:var(--ve-field-shadow);&:hover{z-index:3;transform:scale(1.2);border-color:var(--ve-primary);outline:0;box-shadow:0 0 0 0.25rem rgb(23 113 230 / 25%);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUlvQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvQ29sb3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIFBvcG92ZXIgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXInXG5pbXBvcnQgeyBGaWVsZCwgU3R5bGVzLCBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IGNvbG9yVG9Qcm9wZXJ0eSB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvY3NzJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgZGVmYXVsdD86IHN0cmluZ1xuICBjb2xvcnM6IHN0cmluZ1tdXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgY2hhbmdlSGFuZGxlciA9IChjb2xvcjogc3RyaW5nKSA9PlxuICAgIHByZXZlbnQoKCkgPT4ge1xuICAgICAgb25DaGFuZ2UoY29sb3IpXG4gICAgICBzZXRPcGVuKGZhbHNlKVxuICAgIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9e29wdGlvbnMubGFiZWx9PlxuICAgICAgPFBvcG92ZXIuUm9vdCBvcGVuPXtpc09wZW59IG9uT3BlbkNoYW5nZT17KCkgPT4gc2V0T3BlbigodikgPT4gIXYpfT5cbiAgICAgICAgPFBvcG92ZXIuVHJpZ2dlciBhc0NoaWxkPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGZvY3VzZWQ9e2lzT3BlbiB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICBjb2xvcj17dmFsdWUgfHwgJyd9XG4gICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAnLS12ZS1zZWxlY3RlZC1jb2xvcic6IGNvbG9yVG9Qcm9wZXJ0eSh2YWx1ZSksXG4gICAgICAgICAgICAgICAgICB9IGFzIENTU1Byb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BvcG92ZXIuVHJpZ2dlcj5cbiAgICAgICAgPFRvb2x0aXAgc2lkZT1cInRvcFwiPlxuICAgICAgICAgIDxQYWxldHRlXG4gICAgICAgICAgICBzdHlsZT17eyAnLS1jaGlsZHJlbic6IG9wdGlvbnMuY29sb3JzLmxlbmd0aCArIDEgfSBhcyBDU1NQcm9wZXJ0aWVzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxQYWxldHRlSXRlbVRyYW5zcGFyZW50IG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25DaGFuZ2UobnVsbCkpfSAvPlxuICAgICAgICAgICAge29wdGlvbnMuY29sb3JzLm1hcCgoY29sb3IpID0+IChcbiAgICAgICAgICAgICAgPFBhbGV0dGVJdGVtXG4gICAgICAgICAgICAgICAga2V5PXtjb2xvcn1cbiAgICAgICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgICB7ICctLXZlLWNvbG9yJzogY29sb3JUb1Byb3BlcnR5KGNvbG9yKSB9IGFzIENTU1Byb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25DbGljaz17Y2hhbmdlSGFuZGxlcihjb2xvcil9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L1BhbGV0dGU+XG4gICAgICAgICAgPEFycm93IC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgIDwvUG9wb3Zlci5Sb290PlxuICAgIDwvRmllbGQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IENvbG9yID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPih7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgZGVmYXVsdDogJycsXG4gICAgY29sb3JzOiBbXSBhcyBzdHJpbmdbXSxcbiAgfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoVW5zdHlsZWRCdXR0b24pPHtcbiAgZm9jdXNlZD86IGJvb2xlYW5cbiAgY29sb3I6IHN0cmluZ1xufT4oXG4gIHtcbiAgICB3aWR0aDogJzM4cHgnLFxuICAgIGhlaWdodDogJzM4cHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGJvcmRlclJhZGl1czogJzNweCcsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzI4cHgnLFxuICAgICAgaGVpZ2h0OiAnMjhweCcsXG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtc2VsZWN0ZWQtY29sb3IsIHJlZCknLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICB9LFxuICAgICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICAuLi4ocHJvcHMuZm9jdXNlZCA/IFN0eWxlcy5Gb2N1c1N0YXRlIDogbnVsbCksXG4gICAgJyY6OmJlZm9yZSc6IHByb3BzLmNvbG9yID8gbnVsbCA6IFN0eWxlcy5Nb3NhaWMsXG4gIH0pXG4pXG5cbmNvbnN0IEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLS4yZW0pJyxcbiAgICBvcGFjaXR5OiAwLFxuICB9LFxufSlcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZChQb3BvdmVyLkNvbnRlbnQpKHtcbiAgcGFkZGluZzogMyxcbiAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICBib3JkZXI6ICdzb2xpZCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcbiAgYm94U2hhZG93OlxuICAgICdyZ2JhKDAsIDAsIDAsIDAuMSkgMCAxMHB4IDE1cHggLTNweCwgcmdiYSgwLCAwLCAwLCAwLjA1KSAwIDRweCA2cHggLTJweCcsXG4gIGJvcmRlclJhZGl1czogJzRweCcsXG4gIGFuaW1hdGlvbjogYCR7SW59IDAuM3MgZWFzZS1vdXRgLFxufSlcblxuY29uc3QgUGFsZXR0ZSA9IHN0eWxlZC5kaXYoe1xuICBmbGV4V3JhcDogJ3dyYXAnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdpZHRoOiAnY2FsYygyN3B4ICogdmFyKC0tY2hpbGRyZW4pICogMC41KScsXG59KVxuXG5jb25zdCBQYWxldHRlSXRlbSA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbikoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgd2lkdGg6ICcyNXB4JyxcbiAgaGVpZ2h0OiAnMjVweCcsXG4gIG1hcmdpbjogMSxcbiAgZmxleDogJ25vbmUnLFxuICB6SW5kZXg6IDIsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAnJjpob3Zlcic6IHtcbiAgICB6SW5kZXg6IDMsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKScsXG4gICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgb3V0bGluZTogJzAnLFxuICAgIGJveFNoYWRvdzogJzAgMCAwIDAuMjVyZW0gcmdiKDIzIDExMyAyMzAgLyAyNSUpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IFBhbGV0dGVJdGVtVHJhbnNwYXJlbnQgPSBzdHlsZWQoUGFsZXR0ZUl0ZW0pKHtcbiAgLi4uU3R5bGVzLk1vc2FpYyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICctOXB4JyxcbiAgICBsZWZ0OiAnY2FsYyg1MCUgLSAxcHgpJyxcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgd2lkdGg6ICcycHgnLFxuICAgIGhlaWdodDogJzQwcHgnLFxuICAgIGJhY2tncm91bmQ6ICdyZWQnLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknLFxuICB9LFxufSlcblxuY29uc3QgQXJyb3cgPSBzdHlsZWQoUG9wb3Zlci5BcnJvdykoe1xuICBmaWxsOiAnd2hpdGUnLFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
});
const PaletteItemTransparent = /* @__PURE__ */ createStyled(PaletteItem, process.env.NODE_ENV === "production" ? {
  target: "eza5urq1"
} : {
  target: "eza5urq1",
  label: "PaletteItemTransparent"
})({
  ...Styles.Mosaic,
  position: "relative",
  overflow: "hidden",
  "&::before": {
    position: "absolute",
    top: "-9px",
    left: "calc(50% - 1px)",
    content: "''",
    width: "2px",
    height: "40px",
    background: "red",
    transform: "rotate(45deg)"
  }
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0orQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvQ29sb3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5pbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIFBvcG92ZXIgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXInXG5pbXBvcnQgeyBGaWVsZCwgU3R5bGVzLCBVbnN0eWxlZEJ1dHRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCB7IGNvbG9yVG9Qcm9wZXJ0eSB9IGZyb20gJ3NyYy9mdW5jdGlvbnMvY3NzJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgZGVmYXVsdD86IHN0cmluZ1xuICBjb2xvcnM6IHN0cmluZ1tdXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgY2hhbmdlSGFuZGxlciA9IChjb2xvcjogc3RyaW5nKSA9PlxuICAgIHByZXZlbnQoKCkgPT4ge1xuICAgICAgb25DaGFuZ2UoY29sb3IpXG4gICAgICBzZXRPcGVuKGZhbHNlKVxuICAgIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9e29wdGlvbnMubGFiZWx9PlxuICAgICAgPFBvcG92ZXIuUm9vdCBvcGVuPXtpc09wZW59IG9uT3BlbkNoYW5nZT17KCkgPT4gc2V0T3BlbigodikgPT4gIXYpfT5cbiAgICAgICAgPFBvcG92ZXIuVHJpZ2dlciBhc0NoaWxkPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGZvY3VzZWQ9e2lzT3BlbiB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICBjb2xvcj17dmFsdWUgfHwgJyd9XG4gICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAnLS12ZS1zZWxlY3RlZC1jb2xvcic6IGNvbG9yVG9Qcm9wZXJ0eSh2YWx1ZSksXG4gICAgICAgICAgICAgICAgICB9IGFzIENTU1Byb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BvcG92ZXIuVHJpZ2dlcj5cbiAgICAgICAgPFRvb2x0aXAgc2lkZT1cInRvcFwiPlxuICAgICAgICAgIDxQYWxldHRlXG4gICAgICAgICAgICBzdHlsZT17eyAnLS1jaGlsZHJlbic6IG9wdGlvbnMuY29sb3JzLmxlbmd0aCArIDEgfSBhcyBDU1NQcm9wZXJ0aWVzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxQYWxldHRlSXRlbVRyYW5zcGFyZW50IG9uQ2xpY2s9e3ByZXZlbnQoKCkgPT4gb25DaGFuZ2UobnVsbCkpfSAvPlxuICAgICAgICAgICAge29wdGlvbnMuY29sb3JzLm1hcCgoY29sb3IpID0+IChcbiAgICAgICAgICAgICAgPFBhbGV0dGVJdGVtXG4gICAgICAgICAgICAgICAga2V5PXtjb2xvcn1cbiAgICAgICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgICB7ICctLXZlLWNvbG9yJzogY29sb3JUb1Byb3BlcnR5KGNvbG9yKSB9IGFzIENTU1Byb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25DbGljaz17Y2hhbmdlSGFuZGxlcihjb2xvcil9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L1BhbGV0dGU+XG4gICAgICAgICAgPEFycm93IC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgIDwvUG9wb3Zlci5Sb290PlxuICAgIDwvRmllbGQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IENvbG9yID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBzdHJpbmcgfCBudWxsPih7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgZGVmYXVsdDogJycsXG4gICAgY29sb3JzOiBbXSBhcyBzdHJpbmdbXSxcbiAgfSxcbiAgcmVuZGVyOiBDb21wb25lbnQsXG59KVxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQoVW5zdHlsZWRCdXR0b24pPHtcbiAgZm9jdXNlZD86IGJvb2xlYW5cbiAgY29sb3I6IHN0cmluZ1xufT4oXG4gIHtcbiAgICB3aWR0aDogJzM4cHgnLFxuICAgIGhlaWdodDogJzM4cHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGJvcmRlclJhZGl1czogJzNweCcsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzI4cHgnLFxuICAgICAgaGVpZ2h0OiAnMjhweCcsXG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tdmUtc2VsZWN0ZWQtY29sb3IsIHJlZCknLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICB9LFxuICAgICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG4gIH0sXG4gIChwcm9wcykgPT4gKHtcbiAgICAuLi4ocHJvcHMuZm9jdXNlZCA/IFN0eWxlcy5Gb2N1c1N0YXRlIDogbnVsbCksXG4gICAgJyY6OmJlZm9yZSc6IHByb3BzLmNvbG9yID8gbnVsbCA6IFN0eWxlcy5Nb3NhaWMsXG4gIH0pXG4pXG5cbmNvbnN0IEluID0ga2V5ZnJhbWVzKHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLS4yZW0pJyxcbiAgICBvcGFjaXR5OiAwLFxuICB9LFxufSlcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZChQb3BvdmVyLkNvbnRlbnQpKHtcbiAgcGFkZGluZzogMyxcbiAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICBib3JkZXI6ICdzb2xpZCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcbiAgYm94U2hhZG93OlxuICAgICdyZ2JhKDAsIDAsIDAsIDAuMSkgMCAxMHB4IDE1cHggLTNweCwgcmdiYSgwLCAwLCAwLCAwLjA1KSAwIDRweCA2cHggLTJweCcsXG4gIGJvcmRlclJhZGl1czogJzRweCcsXG4gIGFuaW1hdGlvbjogYCR7SW59IDAuM3MgZWFzZS1vdXRgLFxufSlcblxuY29uc3QgUGFsZXR0ZSA9IHN0eWxlZC5kaXYoe1xuICBmbGV4V3JhcDogJ3dyYXAnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdpZHRoOiAnY2FsYygyN3B4ICogdmFyKC0tY2hpbGRyZW4pICogMC41KScsXG59KVxuXG5jb25zdCBQYWxldHRlSXRlbSA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbikoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtY29sb3IpJyxcbiAgd2lkdGg6ICcyNXB4JyxcbiAgaGVpZ2h0OiAnMjVweCcsXG4gIG1hcmdpbjogMSxcbiAgZmxleDogJ25vbmUnLFxuICB6SW5kZXg6IDIsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIGJveFNoYWRvdzogJ3ZhcigtLXZlLWZpZWxkLXNoYWRvdyknLFxuICAnJjpob3Zlcic6IHtcbiAgICB6SW5kZXg6IDMsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKScsXG4gICAgYm9yZGVyQ29sb3I6ICd2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgb3V0bGluZTogJzAnLFxuICAgIGJveFNoYWRvdzogJzAgMCAwIDAuMjVyZW0gcmdiKDIzIDExMyAyMzAgLyAyNSUpJyxcbiAgfSxcbn0pXG5cbmNvbnN0IFBhbGV0dGVJdGVtVHJhbnNwYXJlbnQgPSBzdHlsZWQoUGFsZXR0ZUl0ZW0pKHtcbiAgLi4uU3R5bGVzLk1vc2FpYyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICctOXB4JyxcbiAgICBsZWZ0OiAnY2FsYyg1MCUgLSAxcHgpJyxcbiAgICBjb250ZW50OiBcIicnXCIsXG4gICAgd2lkdGg6ICcycHgnLFxuICAgIGhlaWdodDogJzQwcHgnLFxuICAgIGJhY2tncm91bmQ6ICdyZWQnLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknLFxuICB9LFxufSlcblxuY29uc3QgQXJyb3cgPSBzdHlsZWQoUG9wb3Zlci5BcnJvdykoe1xuICBmaWxsOiAnd2hpdGUnLFxufSlcbiJdfQ== */");
const Arrow = /* @__PURE__ */ createStyled($cb5cc270b50c6fcd$export$21b07c8f274aebd5, process.env.NODE_ENV === "production" ? {
  target: "eza5urq0"
} : {
  target: "eza5urq0",
  label: "Arrow"
})(process.env.NODE_ENV === "production" ? {
  name: "1b3qpiw",
  styles: "fill:white"
} : {
  name: "1b3qpiw",
  styles: "fill:white",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0tjIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Db2xvci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICogYXMgUG9wb3ZlciBmcm9tICdAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlcidcbmltcG9ydCB7IEZpZWxkLCBTdHlsZXMsIFVuc3R5bGVkQnV0dG9uIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHsgZGVmaW5lRmllbGQgfSBmcm9tICdzcmMvZmllbGRzL3V0aWxzJ1xuaW1wb3J0IHsgY29sb3JUb1Byb3BlcnR5IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9jc3MnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBkZWZhdWx0Pzogc3RyaW5nXG4gIGNvbG9yczogc3RyaW5nW11cbn1cblxuY29uc3QgQ29tcG9uZW50OiBGaWVsZENvbXBvbmVudDxGaWVsZEFyZ3MsIHN0cmluZyB8IG51bGw+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBjaGFuZ2VIYW5kbGVyID0gKGNvbG9yOiBzdHJpbmcpID0+XG4gICAgcHJldmVudCgoKSA9PiB7XG4gICAgICBvbkNoYW5nZShjb2xvcilcbiAgICAgIHNldE9wZW4oZmFsc2UpXG4gICAgfSlcblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD17b3B0aW9ucy5sYWJlbH0+XG4gICAgICA8UG9wb3Zlci5Sb290IG9wZW49e2lzT3Blbn0gb25PcGVuQ2hhbmdlPXsoKSA9PiBzZXRPcGVuKCh2KSA9PiAhdil9PlxuICAgICAgICA8UG9wb3Zlci5UcmlnZ2VyIGFzQ2hpbGQ+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgZm9jdXNlZD17aXNPcGVuIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIGNvbG9yPXt2YWx1ZSB8fCAnJ31cbiAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICA/ICh7XG4gICAgICAgICAgICAgICAgICAgICctLXZlLXNlbGVjdGVkLWNvbG9yJzogY29sb3JUb1Byb3BlcnR5KHZhbHVlKSxcbiAgICAgICAgICAgICAgICAgIH0gYXMgQ1NTUHJvcGVydGllcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUG9wb3Zlci5UcmlnZ2VyPlxuICAgICAgICA8VG9vbHRpcCBzaWRlPVwidG9wXCI+XG4gICAgICAgICAgPFBhbGV0dGVcbiAgICAgICAgICAgIHN0eWxlPXt7ICctLWNoaWxkcmVuJzogb3B0aW9ucy5jb2xvcnMubGVuZ3RoICsgMSB9IGFzIENTU1Byb3BlcnRpZXN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFBhbGV0dGVJdGVtVHJhbnNwYXJlbnQgb25DbGljaz17cHJldmVudCgoKSA9PiBvbkNoYW5nZShudWxsKSl9IC8+XG4gICAgICAgICAgICB7b3B0aW9ucy5jb2xvcnMubWFwKChjb2xvcikgPT4gKFxuICAgICAgICAgICAgICA8UGFsZXR0ZUl0ZW1cbiAgICAgICAgICAgICAgICBrZXk9e2NvbG9yfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgICAgIHsgJy0tdmUtY29sb3InOiBjb2xvclRvUHJvcGVydHkoY29sb3IpIH0gYXMgQ1NTUHJvcGVydGllc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VIYW5kbGVyKGNvbG9yKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvUGFsZXR0ZT5cbiAgICAgICAgICA8QXJyb3cgLz5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgPC9Qb3BvdmVyLlJvb3Q+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgQ29sb3IgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIHN0cmluZyB8IG51bGw+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBkZWZhdWx0OiAnJyxcbiAgICBjb2xvcnM6IFtdIGFzIHN0cmluZ1tdLFxuICB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pXG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZChVbnN0eWxlZEJ1dHRvbik8e1xuICBmb2N1c2VkPzogYm9vbGVhblxuICBjb2xvcjogc3RyaW5nXG59PihcbiAge1xuICAgIHdpZHRoOiAnMzhweCcsXG4gICAgaGVpZ2h0OiAnMzhweCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgYm94U2hhZG93OiAndmFyKC0tdmUtZmllbGQtc2hhZG93KScsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIHZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiAnM3B4JyxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogXCInJ1wiLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMjhweCcsXG4gICAgICBoZWlnaHQ6ICcyOHB4JyxcbiAgICAgIGZsZXg6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmQ6ICd2YXIoLS12ZS1zZWxlY3RlZC1jb2xvciwgcmVkKScsXG4gICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgIH0sXG4gICAgJyY6Zm9jdXMnOiBTdHlsZXMuRm9jdXNTdGF0ZSxcbiAgfSxcbiAgKHByb3BzKSA9PiAoe1xuICAgIC4uLihwcm9wcy5mb2N1c2VkID8gU3R5bGVzLkZvY3VzU3RhdGUgOiBudWxsKSxcbiAgICAnJjo6YmVmb3JlJzogcHJvcHMuY29sb3IgPyBudWxsIDogU3R5bGVzLk1vc2FpYyxcbiAgfSlcbilcblxuY29uc3QgSW4gPSBrZXlmcmFtZXMoe1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtLjJlbSknLFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59KVxuXG5jb25zdCBUb29sdGlwID0gc3R5bGVkKFBvcG92ZXIuQ29udGVudCkoe1xuICBwYWRkaW5nOiAzLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gIGJvcmRlcjogJ3NvbGlkIDFweCByZ2JhKDAsIDAsIDAsIDAuMSknLFxuICBib3hTaGFkb3c6XG4gICAgJ3JnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LCByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4JyxcbiAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgYW5pbWF0aW9uOiBgJHtJbn0gMC4zcyBlYXNlLW91dGAsXG59KVxuXG5jb25zdCBQYWxldHRlID0gc3R5bGVkLmRpdih7XG4gIGZsZXhXcmFwOiAnd3JhcCcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgd2lkdGg6ICdjYWxjKDI3cHggKiB2YXIoLS1jaGlsZHJlbikgKiAwLjUpJyxcbn0pXG5cbmNvbnN0IFBhbGV0dGVJdGVtID0gc3R5bGVkKFVuc3R5bGVkQnV0dG9uKSh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS12ZS1jb2xvciknLFxuICB3aWR0aDogJzI1cHgnLFxuICBoZWlnaHQ6ICcyNXB4JyxcbiAgbWFyZ2luOiAxLFxuICBmbGV4OiAnbm9uZScsXG4gIHpJbmRleDogMixcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlclJhZGl1czogJzJweCcsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgYm94U2hhZG93OiAndmFyKC0tdmUtZmllbGQtc2hhZG93KScsXG4gICcmOmhvdmVyJzoge1xuICAgIHpJbmRleDogMyxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjIpJyxcbiAgICBib3JkZXJDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICBvdXRsaW5lOiAnMCcsXG4gICAgYm94U2hhZG93OiAnMCAwIDAgMC4yNXJlbSByZ2IoMjMgMTEzIDIzMCAvIDI1JSknLFxuICB9LFxufSlcblxuY29uc3QgUGFsZXR0ZUl0ZW1UcmFuc3BhcmVudCA9IHN0eWxlZChQYWxldHRlSXRlbSkoe1xuICAuLi5TdHlsZXMuTW9zYWljLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJy05cHgnLFxuICAgIGxlZnQ6ICdjYWxjKDUwJSAtIDFweCknLFxuICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICB3aWR0aDogJzJweCcsXG4gICAgaGVpZ2h0OiAnNDBweCcsXG4gICAgYmFja2dyb3VuZDogJ3JlZCcsXG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDQ1ZGVnKScsXG4gIH0sXG59KVxuXG5jb25zdCBBcnJvdyA9IHN0eWxlZChQb3BvdmVyLkFycm93KSh7XG4gIGZpbGw6ICd3aGl0ZScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
});
const RowComponent = ({
  options,
  children
}) => {
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    children: /* @__PURE__ */ jsx(Wrapper, {
      columns: options.columns,
      children
    })
  });
};
const Row = defineFieldGroup({
  defaultOptions: {},
  render: RowComponent
});
const Wrapper = /* @__PURE__ */ createStyled(Flex, process.env.NODE_ENV === "production" ? {
  target: "eud83ua0"
} : {
  target: "eud83ua0",
  label: "Wrapper"
})("& > *{width:100%;}", ({
  columns
}) => columns ? {
  display: "grid",
  gridTemplateColumns: columns
} : {}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9Sb3cudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVCZ0IiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvZmllbGRzL1Jvdy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZCwgRmxleCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL3VpJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBGaWVsZEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgZGVmaW5lRmllbGRHcm91cCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5cbnR5cGUgUm93QXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgY29sdW1ucz86IHN0cmluZ1xufVxuXG5jb25zdCBSb3dDb21wb25lbnQ6IEZpZWxkR3JvdXBDb21wb25lbnQ8Um93QXJncz4gPSAoeyBvcHRpb25zLCBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEZpZWxkIGxhYmVsPXtvcHRpb25zLmxhYmVsfT5cbiAgICAgIDxXcmFwcGVyIGNvbHVtbnM9e29wdGlvbnMuY29sdW1uc30+e2NoaWxkcmVufTwvV3JhcHBlcj5cbiAgICA8L0ZpZWxkPlxuICApXG59XG5cbmV4cG9ydCBjb25zdCBSb3cgPSBkZWZpbmVGaWVsZEdyb3VwPFJvd0FyZ3M+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHt9LFxuICByZW5kZXI6IFJvd0NvbXBvbmVudCxcbn0pXG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoRmxleCkoXG4gIHtcbiAgICAnJiA+IConOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH0sXG4gIH0sXG4gICh7IGNvbHVtbnMgfTogeyBjb2x1bW5zPzogc3RyaW5nIH0pID0+XG4gICAgY29sdW1uc1xuICAgICAgPyB7XG4gICAgICAgICAgZGlzcGxheTogJ2dyaWQnLFxuICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IGNvbHVtbnMsXG4gICAgICAgIH1cbiAgICAgIDoge31cbilcbiJdfQ== */");
function _EMOTION_STRINGIFIED_CSS_ERROR__$3() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
function AlignmentButton({
  value,
  onChange,
  icon: IconComponent,
  ...props
}) {
  return /* @__PURE__ */ jsxs(Button$1, {
    children: [/* @__PURE__ */ jsx("input", {
      type: "radio",
      value,
      onChange: () => onChange(value),
      title: capitalize(value),
      ...props
    }), /* @__PURE__ */ jsx("div", {
      children: /* @__PURE__ */ jsx(IconComponent, {})
    })]
  });
}
const Button$1 = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e124slv70"
} : {
  target: "e124slv70",
  label: "Button"
})(process.env.NODE_ENV === "production" ? {
  name: "1pu2klx",
  styles: "position:relative;border-right:1px solid var(--ve-field-border);&:last-of-type{border:none;}&:hover{background-color:var(--ve-hover);}& div{cursor:pointer;width:36px;height:36px;display:flex;align-items:center;justify-content:center;z-index:2;transition:.3s;}& input{opacity:0;position:absolute;top:0;left:0;width:100%;height:100%;z-index:3;cursor:pointer;}& input:checked + div{background-color:var(--ve-primary);color:#FFF;box-shadow:0 0 0 1px var(--ve-primary);border-radius:.2em;}& input:focus + div{box-shadow:0 0 0 1px var(--ve-primary), 0 0 0 0.25rem rgb(23 113 230 / 25%);border-radius:.2em;}"
} : {
  name: "1pu2klx",
  styles: "position:relative;border-right:1px solid var(--ve-field-border);&:last-of-type{border:none;}&:hover{background-color:var(--ve-hover);}& div{cursor:pointer;width:36px;height:36px;display:flex;align-items:center;justify-content:center;z-index:2;transition:.3s;}& input{opacity:0;position:absolute;top:0;left:0;width:100%;height:100%;z-index:3;cursor:pointer;}& input:checked + div{background-color:var(--ve-primary);color:#FFF;box-shadow:0 0 0 1px var(--ve-primary);border-radius:.2em;}& input:focus + div{box-shadow:0 0 0 1px var(--ve-primary), 0 0 0 0.25rem rgb(23 113 230 / 25%);border-radius:.2em;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9zaGFyZWQvQWxpZ25tZW50QnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ2UiLCJmaWxlIjoiL1VzZXJzL3hzdGV2ZW55dW5nL0NvZGUva2xhcGF1ZGllbmNlL3BhY2thZ2VzL3Zpc3VhbC1lZGl0b3IvdmlzdWFsLWVkaXRvci9zcmMvZmllbGRzL3NoYXJlZC9BbGlnbm1lbnRCdXR0b24udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9zdHJpbmcnXG5pbXBvcnQgeyBwcmV2ZW50IH0gZnJvbSAnc3JjL2Z1bmN0aW9ucy9mdW5jdGlvbnMnXG5cbnR5cGUgUHJvcHM8VCBleHRlbmRzIHVua25vd24+ID0ge1xuICB2YWx1ZTogVFxuICBjaGVja2VkOiBib29sZWFuXG4gIGljb246IEZ1bmN0aW9uQ29tcG9uZW50XG4gIG9uQ2hhbmdlOiAodjogVCkgPT4gdm9pZFxuICBuYW1lPzogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBbGlnbm1lbnRCdXR0b248VCBleHRlbmRzIHVua25vd24+KHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBpY29uOiBJY29uQ29tcG9uZW50LFxuICAuLi5wcm9wc1xufTogUHJvcHM8VD4pIHtcbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uPlxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgIHZhbHVlPXt2YWx1ZSBhcyBzdHJpbmd9XG4gICAgICAgIG9uQ2hhbmdlPXsoKSA9PiBvbkNoYW5nZSh2YWx1ZSl9XG4gICAgICAgIHRpdGxlPXtjYXBpdGFsaXplKHZhbHVlIGFzIHN0cmluZyl9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+XG4gICAgICA8ZGl2PlxuICAgICAgICA8SWNvbkNvbXBvbmVudCAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9CdXR0b24+XG4gIClcbn1cblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3JkZXJSaWdodDogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcblxuICAnJjpsYXN0LW9mLXR5cGUnOiB7XG4gICAgYm9yZGVyOiAnbm9uZScsXG4gIH0sXG5cbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtaG92ZXIpJyxcbiAgfSxcbiAgJyYgZGl2Jzoge1xuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHdpZHRoOiAnMzZweCcsXG4gICAgaGVpZ2h0OiAnMzZweCcsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB6SW5kZXg6IDIsXG4gICAgdHJhbnNpdGlvbjogJy4zcycsXG4gIH0sXG4gICcmIGlucHV0Jzoge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnMCcsXG4gICAgbGVmdDogJzAnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgekluZGV4OiAzLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICB9LFxuICAnJiBpbnB1dDpjaGVja2VkICsgZGl2Jzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbiAgICBjb2xvcjogJyNGRkYnLFxuICAgIGJveFNoYWRvdzogJzAgMCAwIDFweCB2YXIoLS12ZS1wcmltYXJ5KScsXG4gICAgYm9yZGVyUmFkaXVzOiAnLjJlbScsXG4gIH0sXG4gICcmIGlucHV0OmZvY3VzICsgZGl2Jzoge1xuICAgIGJveFNoYWRvdzpcbiAgICAgICcwIDAgMCAxcHggdmFyKC0tdmUtcHJpbWFyeSksIDAgMCAwIDAuMjVyZW0gcmdiKDIzIDExMyAyMzAgLyAyNSUpJyxcbiAgICBib3JkZXJSYWRpdXM6ICcuMmVtJyxcbiAgfSxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$3
});
function _EMOTION_STRINGIFIED_CSS_ERROR__$2() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const AlignmentButtons = /* @__PURE__ */ createStyled("div", process.env.NODE_ENV === "production" ? {
  target: "e1yyt0iz0"
} : {
  target: "e1yyt0iz0",
  label: "AlignmentButtons"
})(process.env.NODE_ENV === "production" ? {
  name: "1z5vla",
  styles: "display:inline-flex;border:1px solid var(--ve-field-border);box-shadow:var(--ve-field-shadow);border-radius:.2em"
} : {
  name: "1z5vla",
  styles: "display:inline-flex;border:1px solid var(--ve-field-border);box-shadow:var(--ve-field-shadow);border-radius:.2em",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9zaGFyZWQvQWxpZ25tZW50QnV0dG9ucy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRWdDIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9zaGFyZWQvQWxpZ25tZW50QnV0dG9ucy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxuZXhwb3J0IGNvbnN0IEFsaWdubWVudEJ1dHRvbnMgPSBzdHlsZWQuZGl2KHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgYm9yZGVyOiAnMXB4IHNvbGlkIHZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICBib3hTaGFkb3c6ICd2YXIoLS12ZS1maWVsZC1zaGFkb3cpJyxcbiAgYm9yZGVyUmFkaXVzOiAnLjJlbScsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
});
const AlignmentIcons$1 = {
  top: IconAlignTop,
  left: IconAlignLeft,
  bottom: IconAlignBottom,
  right: IconAlignRight
};
const Component$6 = ({
  value,
  onChange,
  options
}) => {
  const alignements = ["left", "right", ...options.vertical ? ["top", "bottom"] : []];
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    children: /* @__PURE__ */ jsx(AlignmentButtons, {
      children: alignements.map((alignment) => /* @__PURE__ */ jsx(AlignmentButton, {
        value: alignment,
        checked: value === alignment,
        onChange,
        icon: AlignmentIcons$1[alignment]
      }, alignment))
    })
  });
};
const Alignment = defineField({
  defaultOptions: {
    default: "left"
  },
  render: Component$6
});
const Component$5 = ({
  value,
  onChange,
  options
}) => {
  const id = useUniqId("selectinput");
  return /* @__PURE__ */ jsx(Field$1, {
    id,
    label: options.label,
    help: options.help,
    options: options.options,
    value,
    onInput: (e3) => onChange(e3.target.value)
  });
};
const Select = defineField({
  defaultOptions: {
    default: "",
    options: []
  },
  render: Component$5
});
const Component$4 = ({
  value,
  onChange,
  options
}) => {
  const id = useUniqId("numberinput");
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    type: "number",
    id,
    value,
    onInput: (e3) => onChange(e3.target.value),
    help: options.help
  });
};
const Number$1 = defineField({
  defaultOptions: {
    default: ""
  },
  render: Component$4
});
function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value, [min2, max2]) {
  return Math.min(max2, Math.max(min2, value));
}
function $010c2913dbd2fe3d$export$5cae361ad82dce8b(value) {
  const ref = reactExports.useRef({
    value,
    previous: value
  });
  return reactExports.useMemo(() => {
    if (ref.current.value !== value) {
      ref.current.previous = ref.current.value;
      ref.current.value = value;
    }
    return ref.current.previous;
  }, [
    value
  ]);
}
const $faa2e61a3361514f$var$PAGE_KEYS = [
  "PageUp",
  "PageDown"
];
const $faa2e61a3361514f$var$ARROW_KEYS = [
  "ArrowUp",
  "ArrowDown",
  "ArrowLeft",
  "ArrowRight"
];
const $faa2e61a3361514f$var$BACK_KEYS = {
  "from-left": [
    "Home",
    "PageDown",
    "ArrowDown",
    "ArrowLeft"
  ],
  "from-right": [
    "Home",
    "PageDown",
    "ArrowDown",
    "ArrowRight"
  ],
  "from-bottom": [
    "Home",
    "PageDown",
    "ArrowDown",
    "ArrowLeft"
  ],
  "from-top": [
    "Home",
    "PageDown",
    "ArrowUp",
    "ArrowLeft"
  ]
};
const $faa2e61a3361514f$var$SLIDER_NAME = "Slider";
const [$faa2e61a3361514f$var$Collection, $faa2e61a3361514f$var$useCollection, $faa2e61a3361514f$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($faa2e61a3361514f$var$SLIDER_NAME);
const [$faa2e61a3361514f$var$createSliderContext, $faa2e61a3361514f$export$ef72632d7b901f97] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($faa2e61a3361514f$var$SLIDER_NAME, [
  $faa2e61a3361514f$var$createCollectionScope
]);
const [$faa2e61a3361514f$var$SliderProvider, $faa2e61a3361514f$var$useSliderContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME);
const $faa2e61a3361514f$export$472062a354075cee = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { name, min: min2 = 0, max: max2 = 100, step = 1, orientation = "horizontal", disabled = false, minStepsBetweenThumbs = 0, defaultValue: defaultValue2 = [
    min2
  ], value: value1, onValueChange = () => {
  }, onValueCommit = () => {
  }, inverted = false, ...sliderProps } = props;
  const [slider, setSlider] = reactExports.useState(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setSlider(node2)
  );
  const thumbRefs = reactExports.useRef(/* @__PURE__ */ new Set());
  const valueIndexToChangeRef = reactExports.useRef(0);
  const isHorizontal = orientation === "horizontal";
  const isFormControl = slider ? Boolean(slider.closest("form")) : true;
  const SliderOrientation = isHorizontal ? $faa2e61a3361514f$var$SliderHorizontal : $faa2e61a3361514f$var$SliderVertical;
  const [values = [], setValues] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: value1,
    defaultProp: defaultValue2,
    onChange: (value) => {
      var _thumbs$valueIndexToC;
      const thumbs = [
        ...thumbRefs.current
      ];
      (_thumbs$valueIndexToC = thumbs[valueIndexToChangeRef.current]) === null || _thumbs$valueIndexToC === void 0 || _thumbs$valueIndexToC.focus();
      onValueChange(value);
    }
  });
  const valuesBeforeSlideStartRef = reactExports.useRef(values);
  function handleSlideStart(value) {
    const closestIndex = $faa2e61a3361514f$var$getClosestValueIndex(values, value);
    updateValues(value, closestIndex);
  }
  function handleSlideMove(value) {
    updateValues(value, valueIndexToChangeRef.current);
  }
  function handleSlideEnd() {
    const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
    const nextValue = values[valueIndexToChangeRef.current];
    const hasChanged = nextValue !== prevValue;
    if (hasChanged)
      onValueCommit(values);
  }
  function updateValues(value, atIndex, { commit } = {
    commit: false
  }) {
    const decimalCount = $faa2e61a3361514f$var$getDecimalCount(step);
    const snapToStep = $faa2e61a3361514f$var$roundValue(Math.round((value - min2) / step) * step + min2, decimalCount);
    const nextValue = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(snapToStep, [
      min2,
      max2
    ]);
    setValues((prevValues = []) => {
      const nextValues = $faa2e61a3361514f$var$getNextSortedValues(prevValues, nextValue, atIndex);
      if ($faa2e61a3361514f$var$hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
        valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
        const hasChanged = String(nextValues) !== String(prevValues);
        if (hasChanged && commit)
          onValueCommit(nextValues);
        return hasChanged ? nextValues : prevValues;
      } else
        return prevValues;
    });
  }
  return /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$SliderProvider, {
    scope: props.__scopeSlider,
    disabled,
    min: min2,
    max: max2,
    valueIndexToChangeRef,
    thumbs: thumbRefs.current,
    values,
    orientation
  }, /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$Collection.Provider, {
    scope: props.__scopeSlider
  }, /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$Collection.Slot, {
    scope: props.__scopeSlider
  }, /* @__PURE__ */ reactExports.createElement(SliderOrientation, _extends({
    "aria-disabled": disabled,
    "data-disabled": disabled ? "" : void 0
  }, sliderProps, {
    ref: composedRefs,
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(sliderProps.onPointerDown, () => {
      if (!disabled)
        valuesBeforeSlideStartRef.current = values;
    }),
    min: min2,
    max: max2,
    inverted,
    onSlideStart: disabled ? void 0 : handleSlideStart,
    onSlideMove: disabled ? void 0 : handleSlideMove,
    onSlideEnd: disabled ? void 0 : handleSlideEnd,
    onHomeKeyDown: () => !disabled && updateValues(min2, 0, {
      commit: true
    }),
    onEndKeyDown: () => !disabled && updateValues(max2, values.length - 1, {
      commit: true
    }),
    onStepKeyDown: ({ event, direction: stepDirection }) => {
      if (!disabled) {
        const isPageKey = $faa2e61a3361514f$var$PAGE_KEYS.includes(event.key);
        const isSkipKey = isPageKey || event.shiftKey && $faa2e61a3361514f$var$ARROW_KEYS.includes(event.key);
        const multiplier = isSkipKey ? 10 : 1;
        const atIndex = valueIndexToChangeRef.current;
        const value = values[atIndex];
        const stepInDirection = step * multiplier * stepDirection;
        updateValues(value + stepInDirection, atIndex, {
          commit: true
        });
      }
    }
  })))), isFormControl && values.map(
    (value, index2) => /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$BubbleInput, {
      key: index2,
      name: name ? name + (values.length > 1 ? "[]" : "") : void 0,
      value
    })
  ));
});
const [$faa2e61a3361514f$var$SliderOrientationProvider, $faa2e61a3361514f$var$useSliderOrientationContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  size: "width",
  direction: 1
});
const $faa2e61a3361514f$var$SliderHorizontal = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { min: min2, max: max2, dir, inverted, onSlideStart, onSlideMove, onSlideEnd, onStepKeyDown, ...sliderProps } = props;
  const [slider, setSlider] = reactExports.useState(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setSlider(node2)
  );
  const rectRef = reactExports.useRef();
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const isDirectionLTR = direction === "ltr";
  const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
  function getValueFromPointer(pointerPosition) {
    const rect = rectRef.current || slider.getBoundingClientRect();
    const input = [
      0,
      rect.width
    ];
    const output = isSlidingFromLeft ? [
      min2,
      max2
    ] : [
      max2,
      min2
    ];
    const value = $faa2e61a3361514f$var$linearScale(input, output);
    rectRef.current = rect;
    return value(pointerPosition - rect.left);
  }
  return /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$SliderOrientationProvider, {
    scope: props.__scopeSlider,
    startEdge: isSlidingFromLeft ? "left" : "right",
    endEdge: isSlidingFromLeft ? "right" : "left",
    direction: isSlidingFromLeft ? 1 : -1,
    size: "width"
  }, /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$SliderImpl, _extends({
    dir: direction,
    "data-orientation": "horizontal"
  }, sliderProps, {
    ref: composedRefs,
    style: {
      ...sliderProps.style,
      ["--radix-slider-thumb-transform"]: "translateX(-50%)"
    },
    onSlideStart: (event) => {
      const value = getValueFromPointer(event.clientX);
      onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
    },
    onSlideMove: (event) => {
      const value = getValueFromPointer(event.clientX);
      onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
    },
    onSlideEnd: () => {
      rectRef.current = void 0;
      onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
    },
    onStepKeyDown: (event) => {
      const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
      const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
      onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
        event,
        direction: isBackKey ? -1 : 1
      });
    }
  })));
});
const $faa2e61a3361514f$var$SliderVertical = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { min: min2, max: max2, inverted, onSlideStart, onSlideMove, onSlideEnd, onStepKeyDown, ...sliderProps } = props;
  const sliderRef = reactExports.useRef(null);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, sliderRef);
  const rectRef = reactExports.useRef();
  const isSlidingFromBottom = !inverted;
  function getValueFromPointer(pointerPosition) {
    const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
    const input = [
      0,
      rect.height
    ];
    const output = isSlidingFromBottom ? [
      max2,
      min2
    ] : [
      min2,
      max2
    ];
    const value = $faa2e61a3361514f$var$linearScale(input, output);
    rectRef.current = rect;
    return value(pointerPosition - rect.top);
  }
  return /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$SliderOrientationProvider, {
    scope: props.__scopeSlider,
    startEdge: isSlidingFromBottom ? "bottom" : "top",
    endEdge: isSlidingFromBottom ? "top" : "bottom",
    size: "height",
    direction: isSlidingFromBottom ? 1 : -1
  }, /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$SliderImpl, _extends({
    "data-orientation": "vertical"
  }, sliderProps, {
    ref,
    style: {
      ...sliderProps.style,
      ["--radix-slider-thumb-transform"]: "translateY(50%)"
    },
    onSlideStart: (event) => {
      const value = getValueFromPointer(event.clientY);
      onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
    },
    onSlideMove: (event) => {
      const value = getValueFromPointer(event.clientY);
      onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
    },
    onSlideEnd: () => {
      rectRef.current = void 0;
      onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
    },
    onStepKeyDown: (event) => {
      const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
      const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
      onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
        event,
        direction: isBackKey ? -1 : 1
      });
    }
  })));
});
const $faa2e61a3361514f$var$SliderImpl = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeSlider, onSlideStart, onSlideMove, onSlideEnd, onHomeKeyDown, onEndKeyDown, onStepKeyDown, ...sliderProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$SLIDER_NAME, __scopeSlider);
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, sliderProps, {
    ref: forwardedRef,
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (event.key === "Home") {
        onHomeKeyDown(event);
        event.preventDefault();
      } else if (event.key === "End") {
        onEndKeyDown(event);
        event.preventDefault();
      } else if ($faa2e61a3361514f$var$PAGE_KEYS.concat($faa2e61a3361514f$var$ARROW_KEYS).includes(event.key)) {
        onStepKeyDown(event);
        event.preventDefault();
      }
    }),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
      const target = event.target;
      target.setPointerCapture(event.pointerId);
      event.preventDefault();
      if (context.thumbs.has(target))
        target.focus();
      else
        onSlideStart(event);
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event) => {
      const target = event.target;
      if (target.hasPointerCapture(event.pointerId))
        onSlideMove(event);
    }),
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
      const target = event.target;
      if (target.hasPointerCapture(event.pointerId)) {
        target.releasePointerCapture(event.pointerId);
        onSlideEnd(event);
      }
    })
  }));
});
const $faa2e61a3361514f$var$TRACK_NAME = "SliderTrack";
const $faa2e61a3361514f$export$105594979f116971 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeSlider, ...trackProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$TRACK_NAME, __scopeSlider);
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-disabled": context.disabled ? "" : void 0,
    "data-orientation": context.orientation
  }, trackProps, {
    ref: forwardedRef
  }));
});
const $faa2e61a3361514f$var$RANGE_NAME = "SliderRange";
const $faa2e61a3361514f$export$a5cf38a7a000fe77 = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeSlider, ...rangeProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
  const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
  const ref = reactExports.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  const valuesCount = context.values.length;
  const percentages = context.values.map(
    (value) => $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max)
  );
  const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
  const offsetEnd = 100 - Math.max(...percentages);
  return /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-orientation": context.orientation,
    "data-disabled": context.disabled ? "" : void 0
  }, rangeProps, {
    ref: composedRefs,
    style: {
      ...props.style,
      [orientation.startEdge]: offsetStart + "%",
      [orientation.endEdge]: offsetEnd + "%"
    }
  }));
});
const $faa2e61a3361514f$var$THUMB_NAME = "SliderThumb";
const $faa2e61a3361514f$export$2c1b491743890dec = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const getItems = $faa2e61a3361514f$var$useCollection(props.__scopeSlider);
  const [thumb, setThumb] = reactExports.useState(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setThumb(node2)
  );
  const index2 = reactExports.useMemo(
    () => thumb ? getItems().findIndex(
      (item) => item.ref.current === thumb
    ) : -1,
    [
      getItems,
      thumb
    ]
  );
  return /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$SliderThumbImpl, _extends({}, props, {
    ref: composedRefs,
    index: index2
  }));
});
const $faa2e61a3361514f$var$SliderThumbImpl = /* @__PURE__ */ reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeSlider, index: index2, ...thumbProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
  const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
  const [thumb, setThumb] = reactExports.useState(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node2) => setThumb(node2)
  );
  const size2 = $db6c3485150b8e66$export$1ab7ae714698c4b8(thumb);
  const value = context.values[index2];
  const percent = value === void 0 ? 0 : $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max);
  const label = $faa2e61a3361514f$var$getLabel(index2, context.values.length);
  const orientationSize = size2 === null || size2 === void 0 ? void 0 : size2[orientation.size];
  const thumbInBoundsOffset = orientationSize ? $faa2e61a3361514f$var$getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
  reactExports.useEffect(() => {
    if (thumb) {
      context.thumbs.add(thumb);
      return () => {
        context.thumbs.delete(thumb);
      };
    }
  }, [
    thumb,
    context.thumbs
  ]);
  return /* @__PURE__ */ reactExports.createElement("span", {
    style: {
      transform: "var(--radix-slider-thumb-transform)",
      position: "absolute",
      [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
    }
  }, /* @__PURE__ */ reactExports.createElement($faa2e61a3361514f$var$Collection.ItemSlot, {
    scope: props.__scopeSlider
  }, /* @__PURE__ */ reactExports.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    role: "slider",
    "aria-label": props["aria-label"] || label,
    "aria-valuemin": context.min,
    "aria-valuenow": value,
    "aria-valuemax": context.max,
    "aria-orientation": context.orientation,
    "data-orientation": context.orientation,
    "data-disabled": context.disabled ? "" : void 0,
    tabIndex: context.disabled ? void 0 : 0
  }, thumbProps, {
    ref: composedRefs,
    style: value === void 0 ? {
      display: "none"
    } : props.style,
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => {
      context.valueIndexToChangeRef.current = index2;
    })
  }))));
});
const $faa2e61a3361514f$var$BubbleInput = (props) => {
  const { value, ...inputProps } = props;
  const ref = reactExports.useRef(null);
  const prevValue = $010c2913dbd2fe3d$export$5cae361ad82dce8b(value);
  reactExports.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
    const setValue = descriptor.set;
    if (prevValue !== value && setValue) {
      const event = new Event("input", {
        bubbles: true
      });
      setValue.call(input, value);
      input.dispatchEvent(event);
    }
  }, [
    prevValue,
    value
  ]);
  return /* @__PURE__ */ reactExports.createElement("input", _extends({
    style: {
      display: "none"
    }
  }, inputProps, {
    ref,
    defaultValue: value
  }));
};
function $faa2e61a3361514f$var$getNextSortedValues(prevValues = [], nextValue, atIndex) {
  const nextValues = [
    ...prevValues
  ];
  nextValues[atIndex] = nextValue;
  return nextValues.sort(
    (a4, b3) => a4 - b3
  );
}
function $faa2e61a3361514f$var$convertValueToPercentage(value, min2, max2) {
  const maxSteps = max2 - min2;
  const percentPerStep = 100 / maxSteps;
  const percentage = percentPerStep * (value - min2);
  return $ae6933e535247d3d$export$7d15b64cf5a3a4c4(percentage, [
    0,
    100
  ]);
}
function $faa2e61a3361514f$var$getLabel(index2, totalValues) {
  if (totalValues > 2)
    return `Value ${index2 + 1} of ${totalValues}`;
  else if (totalValues === 2)
    return [
      "Minimum",
      "Maximum"
    ][index2];
  else
    return void 0;
}
function $faa2e61a3361514f$var$getClosestValueIndex(values, nextValue) {
  if (values.length === 1)
    return 0;
  const distances = values.map(
    (value) => Math.abs(value - nextValue)
  );
  const closestDistance = Math.min(...distances);
  return distances.indexOf(closestDistance);
}
function $faa2e61a3361514f$var$getThumbInBoundsOffset(width, left2, direction) {
  const halfWidth = width / 2;
  const halfPercent = 50;
  const offset2 = $faa2e61a3361514f$var$linearScale([
    0,
    halfPercent
  ], [
    0,
    halfWidth
  ]);
  return (halfWidth - offset2(left2) * direction) * direction;
}
function $faa2e61a3361514f$var$getStepsBetweenValues(values) {
  return values.slice(0, -1).map(
    (value, index2) => values[index2 + 1] - value
  );
}
function $faa2e61a3361514f$var$hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    const stepsBetweenValues = $faa2e61a3361514f$var$getStepsBetweenValues(values);
    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
    return actualMinStepsBetweenValues >= minStepsBetweenValues;
  }
  return true;
}
function $faa2e61a3361514f$var$linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1])
      return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function $faa2e61a3361514f$var$getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function $faa2e61a3361514f$var$roundValue(value, decimalCount) {
  const rounder = Math.pow(10, decimalCount);
  return Math.round(value * rounder) / rounder;
}
const $faa2e61a3361514f$export$be92b6f5f03c0fe9 = $faa2e61a3361514f$export$472062a354075cee;
const $faa2e61a3361514f$export$13921ac0cc260818 = $faa2e61a3361514f$export$105594979f116971;
const $faa2e61a3361514f$export$9a58ef0d7ad3278c = $faa2e61a3361514f$export$a5cf38a7a000fe77;
const $faa2e61a3361514f$export$6521433ed15a34db = $faa2e61a3361514f$export$2c1b491743890dec;
function _EMOTION_STRINGIFIED_CSS_ERROR__$1() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const Component$3 = ({
  value,
  onChange,
  options
}) => {
  return /* @__PURE__ */ jsx(Field$1, {
    label: /* @__PURE__ */ jsxs(Fragment$1, {
      children: [options.label, " ", /* @__PURE__ */ jsxs("small", {
        children: ["(", value, ")"]
      })]
    }),
    help: options.help,
    children: /* @__PURE__ */ jsxs(Root, {
      min: options.min,
      max: options.max,
      value: [value === void 0 ? options.default || 0 : value],
      step: options.step,
      onValueChange: (v2) => onChange(v2[0] || 0),
      children: [/* @__PURE__ */ jsx(Track, {
        children: /* @__PURE__ */ jsx(TrackSelected, {})
      }), /* @__PURE__ */ jsx(Cursor, {})]
    })
  });
};
const Range = defineField({
  defaultOptions: {
    default: 0,
    min: 0,
    max: 100,
    step: 1
  },
  render: Component$3
});
const Root = /* @__PURE__ */ createStyled($faa2e61a3361514f$export$be92b6f5f03c0fe9, process.env.NODE_ENV === "production" ? {
  target: "e1hd42n23"
} : {
  target: "e1hd42n23",
  label: "Root"
})(process.env.NODE_ENV === "production" ? {
  name: "154h4by",
  styles: "position:relative;display:flex;align-items:center;user-select:none;touch-action:none;width:100%;height:20px"
} : {
  name: "154h4by",
  styles: "position:relative;display:flex;align-items:center;user-select:none;touch-action:none;width:100%;height:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdURhIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IEZpZWxkLCBTdHlsZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCAqIGFzIFNsaWRlciBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBoZWxwPzogc3RyaW5nXG4gIGRlZmF1bHQ/OiBudW1iZXJcbiAgbWluPzogbnVtYmVyXG4gIG1heD86IG51bWJlclxuICBzdGVwPzogbnVtYmVyXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBudW1iZXI+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxGaWVsZFxuICAgICAgbGFiZWw9e1xuICAgICAgICA8PlxuICAgICAgICAgIHtvcHRpb25zLmxhYmVsfSA8c21hbGw+KHt2YWx1ZX0pPC9zbWFsbD5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgICBoZWxwPXtvcHRpb25zLmhlbHB9XG4gICAgPlxuICAgICAgPFJvb3RcbiAgICAgICAgbWluPXtvcHRpb25zLm1pbn1cbiAgICAgICAgbWF4PXtvcHRpb25zLm1heH1cbiAgICAgICAgdmFsdWU9e1t2YWx1ZSA9PT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZWZhdWx0IHx8IDAgOiB2YWx1ZV19XG4gICAgICAgIHN0ZXA9e29wdGlvbnMuc3RlcH1cbiAgICAgICAgb25WYWx1ZUNoYW5nZT17KHYpID0+IG9uQ2hhbmdlKHZbMF0gfHwgMCl9XG4gICAgICA+XG4gICAgICAgIDxUcmFjaz5cbiAgICAgICAgICA8VHJhY2tTZWxlY3RlZCAvPlxuICAgICAgICA8L1RyYWNrPlxuICAgICAgICA8Q3Vyc29yIC8+XG4gICAgICA8L1Jvb3Q+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgUmFuZ2UgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIG51bWJlcj4oe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIGRlZmF1bHQ6IDAsXG4gICAgbWluOiAwLFxuICAgIG1heDogMTAwLFxuICAgIHN0ZXA6IDEsXG4gIH0sXG4gIHJlbmRlcjogQ29tcG9uZW50LFxufSlcblxuY29uc3QgUm9vdCA9IHN0eWxlZChTbGlkZXIuUm9vdCkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICB0b3VjaEFjdGlvbjogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcyMHB4Jyxcbn0pXG5cbmNvbnN0IFRyYWNrID0gc3R5bGVkKFNsaWRlci5UcmFjaykoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiAnNXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJvcmRlclJhZGl1czogJzVweCcsXG59KVxuXG5jb25zdCBUcmFja1NlbGVjdGVkID0gc3R5bGVkKFNsaWRlci5SYW5nZSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogJzAnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxufSlcblxuY29uc3QgQ3Vyc29yID0gc3R5bGVkKFNsaWRlci5UaHVtYikoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZGJyxcbiAgd2lkdGg6ICcyMHB4JyxcbiAgaGVpZ2h0OiAnMjBweCcsXG4gIGJvcmRlclJhZGl1czogJzIwcHgnLFxuICBib3hTaGFkb3c6XG4gICAgJ3JnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LCByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgJyY6Zm9jdXMnOiBTdHlsZXMuRm9jdXNTdGF0ZSxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});
const Track = /* @__PURE__ */ createStyled($faa2e61a3361514f$export$13921ac0cc260818, process.env.NODE_ENV === "production" ? {
  target: "e1hd42n22"
} : {
  target: "e1hd42n22",
  label: "Track"
})(process.env.NODE_ENV === "production" ? {
  name: "l10cfu",
  styles: "position:relative;display:block;height:5px;background-color:var(--ve-field-border);width:100%;border-radius:5px"
} : {
  name: "l10cfu",
  styles: "position:relative;display:block;height:5px;background-color:var(--ve-field-border);width:100%;border-radius:5px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUVjIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IEZpZWxkLCBTdHlsZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCAqIGFzIFNsaWRlciBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBoZWxwPzogc3RyaW5nXG4gIGRlZmF1bHQ/OiBudW1iZXJcbiAgbWluPzogbnVtYmVyXG4gIG1heD86IG51bWJlclxuICBzdGVwPzogbnVtYmVyXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBudW1iZXI+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxGaWVsZFxuICAgICAgbGFiZWw9e1xuICAgICAgICA8PlxuICAgICAgICAgIHtvcHRpb25zLmxhYmVsfSA8c21hbGw+KHt2YWx1ZX0pPC9zbWFsbD5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgICBoZWxwPXtvcHRpb25zLmhlbHB9XG4gICAgPlxuICAgICAgPFJvb3RcbiAgICAgICAgbWluPXtvcHRpb25zLm1pbn1cbiAgICAgICAgbWF4PXtvcHRpb25zLm1heH1cbiAgICAgICAgdmFsdWU9e1t2YWx1ZSA9PT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZWZhdWx0IHx8IDAgOiB2YWx1ZV19XG4gICAgICAgIHN0ZXA9e29wdGlvbnMuc3RlcH1cbiAgICAgICAgb25WYWx1ZUNoYW5nZT17KHYpID0+IG9uQ2hhbmdlKHZbMF0gfHwgMCl9XG4gICAgICA+XG4gICAgICAgIDxUcmFjaz5cbiAgICAgICAgICA8VHJhY2tTZWxlY3RlZCAvPlxuICAgICAgICA8L1RyYWNrPlxuICAgICAgICA8Q3Vyc29yIC8+XG4gICAgICA8L1Jvb3Q+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgUmFuZ2UgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIG51bWJlcj4oe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIGRlZmF1bHQ6IDAsXG4gICAgbWluOiAwLFxuICAgIG1heDogMTAwLFxuICAgIHN0ZXA6IDEsXG4gIH0sXG4gIHJlbmRlcjogQ29tcG9uZW50LFxufSlcblxuY29uc3QgUm9vdCA9IHN0eWxlZChTbGlkZXIuUm9vdCkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICB0b3VjaEFjdGlvbjogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcyMHB4Jyxcbn0pXG5cbmNvbnN0IFRyYWNrID0gc3R5bGVkKFNsaWRlci5UcmFjaykoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiAnNXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJvcmRlclJhZGl1czogJzVweCcsXG59KVxuXG5jb25zdCBUcmFja1NlbGVjdGVkID0gc3R5bGVkKFNsaWRlci5SYW5nZSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogJzAnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxufSlcblxuY29uc3QgQ3Vyc29yID0gc3R5bGVkKFNsaWRlci5UaHVtYikoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZGJyxcbiAgd2lkdGg6ICcyMHB4JyxcbiAgaGVpZ2h0OiAnMjBweCcsXG4gIGJvcmRlclJhZGl1czogJzIwcHgnLFxuICBib3hTaGFkb3c6XG4gICAgJ3JnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LCByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgJyY6Zm9jdXMnOiBTdHlsZXMuRm9jdXNTdGF0ZSxcbn0pXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});
const TrackSelected = /* @__PURE__ */ createStyled($faa2e61a3361514f$export$9a58ef0d7ad3278c, process.env.NODE_ENV === "production" ? {
  target: "e1hd42n21"
} : {
  target: "e1hd42n21",
  label: "TrackSelected"
})(process.env.NODE_ENV === "production" ? {
  name: "v9pn8w",
  styles: "position:absolute;left:0;height:100%;display:block;border-radius:5px;background-color:var(--ve-primary)"
} : {
  name: "v9pn8w",
  styles: "position:absolute;left:0;height:100%;display:block;border-radius:5px;background-color:var(--ve-primary)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEVzQiIsImZpbGUiOiIvVXNlcnMveHN0ZXZlbnl1bmcvQ29kZS9rbGFwYXVkaWVuY2UvcGFja2FnZXMvdmlzdWFsLWVkaXRvci92aXN1YWwtZWRpdG9yL3NyYy9maWVsZHMvUmFuZ2UudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRDb21wb25lbnQgfSBmcm9tICdzcmMvdHlwZXMnXG5pbXBvcnQgeyBGaWVsZCwgU3R5bGVzIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvdWknXG5pbXBvcnQgKiBhcyBTbGlkZXIgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LXNsaWRlcidcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgZGVmaW5lRmllbGQgfSBmcm9tICdzcmMvZmllbGRzL3V0aWxzJ1xuXG50eXBlIEZpZWxkQXJncyA9IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgaGVscD86IHN0cmluZ1xuICBkZWZhdWx0PzogbnVtYmVyXG4gIG1pbj86IG51bWJlclxuICBtYXg/OiBudW1iZXJcbiAgc3RlcD86IG51bWJlclxufVxuXG5jb25zdCBDb21wb25lbnQ6IEZpZWxkQ29tcG9uZW50PEZpZWxkQXJncywgbnVtYmVyPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8RmllbGRcbiAgICAgIGxhYmVsPXtcbiAgICAgICAgPD5cbiAgICAgICAgICB7b3B0aW9ucy5sYWJlbH0gPHNtYWxsPih7dmFsdWV9KTwvc21hbGw+XG4gICAgICAgIDwvPlxuICAgICAgfVxuICAgICAgaGVscD17b3B0aW9ucy5oZWxwfVxuICAgID5cbiAgICAgIDxSb290XG4gICAgICAgIG1pbj17b3B0aW9ucy5taW59XG4gICAgICAgIG1heD17b3B0aW9ucy5tYXh9XG4gICAgICAgIHZhbHVlPXtbdmFsdWUgPT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVmYXVsdCB8fCAwIDogdmFsdWVdfVxuICAgICAgICBzdGVwPXtvcHRpb25zLnN0ZXB9XG4gICAgICAgIG9uVmFsdWVDaGFuZ2U9eyh2KSA9PiBvbkNoYW5nZSh2WzBdIHx8IDApfVxuICAgICAgPlxuICAgICAgICA8VHJhY2s+XG4gICAgICAgICAgPFRyYWNrU2VsZWN0ZWQgLz5cbiAgICAgICAgPC9UcmFjaz5cbiAgICAgICAgPEN1cnNvciAvPlxuICAgICAgPC9Sb290PlxuICAgIDwvRmllbGQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IFJhbmdlID0gZGVmaW5lRmllbGQ8RmllbGRBcmdzLCBudW1iZXI+KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBkZWZhdWx0OiAwLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEwMCxcbiAgICBzdGVwOiAxLFxuICB9LFxuICByZW5kZXI6IENvbXBvbmVudCxcbn0pXG5cbmNvbnN0IFJvb3QgPSBzdHlsZWQoU2xpZGVyLlJvb3QpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgdG91Y2hBY3Rpb246ICdub25lJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMjBweCcsXG59KVxuXG5jb25zdCBUcmFjayA9IHN0eWxlZChTbGlkZXIuVHJhY2spKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIGhlaWdodDogJzVweCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLWZpZWxkLWJvcmRlciknLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3JkZXJSYWRpdXM6ICc1cHgnLFxufSlcblxuY29uc3QgVHJhY2tTZWxlY3RlZCA9IHN0eWxlZChTbGlkZXIuUmFuZ2UpKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6ICcwJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIGJvcmRlclJhZGl1czogJzVweCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXZlLXByaW1hcnkpJyxcbn0pXG5cbmNvbnN0IEN1cnNvciA9IHN0eWxlZChTbGlkZXIuVGh1bWIpKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRicsXG4gIHdpZHRoOiAnMjBweCcsXG4gIGhlaWdodDogJzIwcHgnLFxuICBib3JkZXJSYWRpdXM6ICcyMHB4JyxcbiAgYm94U2hhZG93OlxuICAgICdyZ2JhKDAsIDAsIDAsIDAuMSkgMCAxMHB4IDE1cHggLTNweCwgcmdiYSgwLCAwLCAwLCAwLjA1KSAwIDRweCA2cHggLTJweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gICcmOmZvY3VzJzogU3R5bGVzLkZvY3VzU3RhdGUsXG59KVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});
const Cursor = /* @__PURE__ */ createStyled($faa2e61a3361514f$export$6521433ed15a34db, process.env.NODE_ENV === "production" ? {
  target: "e1hd42n20"
} : {
  target: "e1hd42n20",
  label: "Cursor"
})({
  display: "block",
  backgroundColor: "#FFF",
  width: "20px",
  height: "20px",
  borderRadius: "20px",
  boxShadow: "rgba(0, 0, 0, 0.1) 0 10px 15px -3px, rgba(0, 0, 0, 0.05) 0 4px 6px -2px",
  cursor: "pointer",
  border: "1px solid var(--ve-field-border)",
  "&:focus": Styles.FocusState
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUZlIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9SYW5nZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gJ3NyYy90eXBlcydcbmltcG9ydCB7IEZpZWxkLCBTdHlsZXMgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCAqIGFzIFNsaWRlciBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQgeyBkZWZpbmVGaWVsZCB9IGZyb20gJ3NyYy9maWVsZHMvdXRpbHMnXG5cbnR5cGUgRmllbGRBcmdzID0ge1xuICBsYWJlbD86IHN0cmluZ1xuICBoZWxwPzogc3RyaW5nXG4gIGRlZmF1bHQ/OiBudW1iZXJcbiAgbWluPzogbnVtYmVyXG4gIG1heD86IG51bWJlclxuICBzdGVwPzogbnVtYmVyXG59XG5cbmNvbnN0IENvbXBvbmVudDogRmllbGRDb21wb25lbnQ8RmllbGRBcmdzLCBudW1iZXI+ID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBvcHRpb25zLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxGaWVsZFxuICAgICAgbGFiZWw9e1xuICAgICAgICA8PlxuICAgICAgICAgIHtvcHRpb25zLmxhYmVsfSA8c21hbGw+KHt2YWx1ZX0pPC9zbWFsbD5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgICBoZWxwPXtvcHRpb25zLmhlbHB9XG4gICAgPlxuICAgICAgPFJvb3RcbiAgICAgICAgbWluPXtvcHRpb25zLm1pbn1cbiAgICAgICAgbWF4PXtvcHRpb25zLm1heH1cbiAgICAgICAgdmFsdWU9e1t2YWx1ZSA9PT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZWZhdWx0IHx8IDAgOiB2YWx1ZV19XG4gICAgICAgIHN0ZXA9e29wdGlvbnMuc3RlcH1cbiAgICAgICAgb25WYWx1ZUNoYW5nZT17KHYpID0+IG9uQ2hhbmdlKHZbMF0gfHwgMCl9XG4gICAgICA+XG4gICAgICAgIDxUcmFjaz5cbiAgICAgICAgICA8VHJhY2tTZWxlY3RlZCAvPlxuICAgICAgICA8L1RyYWNrPlxuICAgICAgICA8Q3Vyc29yIC8+XG4gICAgICA8L1Jvb3Q+XG4gICAgPC9GaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgUmFuZ2UgPSBkZWZpbmVGaWVsZDxGaWVsZEFyZ3MsIG51bWJlcj4oe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIGRlZmF1bHQ6IDAsXG4gICAgbWluOiAwLFxuICAgIG1heDogMTAwLFxuICAgIHN0ZXA6IDEsXG4gIH0sXG4gIHJlbmRlcjogQ29tcG9uZW50LFxufSlcblxuY29uc3QgUm9vdCA9IHN0eWxlZChTbGlkZXIuUm9vdCkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICB0b3VjaEFjdGlvbjogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcyMHB4Jyxcbn0pXG5cbmNvbnN0IFRyYWNrID0gc3R5bGVkKFNsaWRlci5UcmFjaykoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiAnNXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtZmllbGQtYm9yZGVyKScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJvcmRlclJhZGl1czogJzVweCcsXG59KVxuXG5jb25zdCBUcmFja1NlbGVjdGVkID0gc3R5bGVkKFNsaWRlci5SYW5nZSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogJzAnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdmUtcHJpbWFyeSknLFxufSlcblxuY29uc3QgQ3Vyc29yID0gc3R5bGVkKFNsaWRlci5UaHVtYikoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZGJyxcbiAgd2lkdGg6ICcyMHB4JyxcbiAgaGVpZ2h0OiAnMjBweCcsXG4gIGJvcmRlclJhZGl1czogJzIwcHgnLFxuICBib3hTaGFkb3c6XG4gICAgJ3JnYmEoMCwgMCwgMCwgMC4xKSAwIDEwcHggMTVweCAtM3B4LCByZ2JhKDAsIDAsIDAsIDAuMDUpIDAgNHB4IDZweCAtMnB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS12ZS1maWVsZC1ib3JkZXIpJyxcbiAgJyY6Zm9jdXMnOiBTdHlsZXMuRm9jdXNTdGF0ZSxcbn0pXG4iXX0= */");
const Component$2 = ({
  children,
  options
}) => {
  const childrenForTab = (tab) => {
    return reactExports.cloneElement(children, {
      fields: tab.fields
    });
  };
  return /* @__PURE__ */ jsx(Tabs$1, {
    children: options.tabs.map((tab) => /* @__PURE__ */ jsx(Tabs$1.Tab, {
      title: tab.label,
      children: /* @__PURE__ */ jsx(Flex, {
        column: true,
        children: childrenForTab(tab)
      })
    }, tab.label))
  });
};
function Tabs(...tabs) {
  return {
    ...defaultFieldProperties(),
    group: true,
    options: {
      tabs
    },
    render: Component$2,
    fields: tabs.reduce((acc, tab) => [...acc, ...tab.fields], [])
  };
}
var classnames2 = { exports: {} };
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
(function(module) {
  (function() {
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
      var classes = "";
      for (var i2 = 0; i2 < arguments.length; i2++) {
        var arg = arguments[i2];
        if (arg) {
          classes = appendClass(classes, parseValue(arg));
        }
      }
      return classes;
    }
    function parseValue(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        return arg;
      }
      if (typeof arg !== "object") {
        return "";
      }
      if (Array.isArray(arg)) {
        return classNames.apply(null, arg);
      }
      if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
        return arg.toString();
      }
      var classes = "";
      for (var key in arg) {
        if (hasOwn.call(arg, key) && arg[key]) {
          classes = appendClass(classes, key);
        }
      }
      return classes;
    }
    function appendClass(value, newClass) {
      if (!newClass) {
        return value;
      }
      if (value) {
        return value + " " + newClass;
      }
      return value + newClass;
    }
    if (module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
})(classnames2);
var classnamesExports = classnames2.exports;
const r = /* @__PURE__ */ getDefaultExportFromCjs(classnamesExports);
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY$1 = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY$1) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$2 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref2, _ref22, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref2 = (_ref22 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref22 !== void 0 ? _ref22 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref2, _ref22, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref2 = (_ref22 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref22 !== void 0 ? _ref22 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref2, _ref22, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref2 = (_ref22 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref22 !== void 0 ? _ref22 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}
var formatters$2 = {
  // Year
  y: function y2(date, token2) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token2 === "yy" ? year % 100 : year, token2.length);
  },
  // Month
  M: function M2(date, token2) {
    var month = date.getUTCMonth();
    return token2 === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d2(date, token2) {
    return addLeadingZeros(date.getUTCDate(), token2.length);
  },
  // AM or PM
  a: function a2(date, token2) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token2) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h2(date, token2) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token2.length);
  },
  // Hour [0-23]
  H: function H(date, token2) {
    return addLeadingZeros(date.getUTCHours(), token2.length);
  },
  // Minute
  m: function m2(date, token2) {
    return addLeadingZeros(date.getUTCMinutes(), token2.length);
  },
  // Second
  s: function s2(date, token2) {
    return addLeadingZeros(date.getUTCSeconds(), token2.length);
  },
  // Fraction of second
  S: function S2(date, token2) {
    var numberOfDigits = token2.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token2.length);
  }
};
const lightFormatters = formatters$2;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function G(date, token2, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token2) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y3(date, token2, localize2) {
    if (token2 === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters.y(date, token2);
  },
  // Local week-numbering year
  Y: function Y(date, token2, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token2 === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token2 === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token2.length);
  },
  // ISO week-numbering year
  R: function R2(date, token2) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token2.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u2(date, token2) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token2.length);
  },
  // Quarter
  Q: function Q(date, token2, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token2) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token2, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token2) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M3(date, token2, localize2) {
    var month = date.getUTCMonth();
    switch (token2) {
      case "M":
      case "MM":
        return lightFormatters.M(date, token2);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token2, localize2) {
    var month = date.getUTCMonth();
    switch (token2) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w2(date, token2, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token2 === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token2.length);
  },
  // ISO week of year
  I: function I2(date, token2, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token2 === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token2.length);
  },
  // Day of the month
  d: function d3(date, token2, localize2) {
    if (token2 === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters.d(date, token2);
  },
  // Day of year
  D: function D2(date, token2, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token2 === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token2.length);
  },
  // Day of week
  E: function E2(date, token2, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token2) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e2(date, token2, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token2) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c2(date, token2, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token2) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token2.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token2, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token2) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token2.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a3(date, token2, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token2) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b2(date, token2, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token2) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token2, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token2) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h3(date, token2, localize2) {
    if (token2 === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters.h(date, token2);
  },
  // Hour [0-23]
  H: function H2(date, token2, localize2) {
    if (token2 === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters.H(date, token2);
  },
  // Hour [0-11]
  K: function K(date, token2, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token2 === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token2.length);
  },
  // Hour [1-24]
  k: function k2(date, token2, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token2 === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token2.length);
  },
  // Minute
  m: function m3(date, token2, localize2) {
    if (token2 === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters.m(date, token2);
  },
  // Second
  s: function s3(date, token2, localize2) {
    if (token2 === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters.s(date, token2);
  },
  // Fraction of second
  S: function S3(date, token2) {
    return lightFormatters.S(date, token2);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token2, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token2) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x2(date, token2, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token2) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O2(date, token2, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token2) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token2, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token2) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t2(date, token2, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token2.length);
  },
  // Milliseconds timestamp
  T: function T2(date, token2, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token2.length);
  }
};
function formatTimezoneShort(offset2, dirtyDelimiter) {
  var sign = offset2 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset2);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter2 = dirtyDelimiter || "";
  return sign + String(hours) + delimiter2 + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset2, dirtyDelimiter) {
  if (offset2 % 60 === 0) {
    var sign = offset2 > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset2) / 60, 2);
  }
  return formatTimezone(offset2, dirtyDelimiter);
}
function formatTimezone(offset2, dirtyDelimiter) {
  var delimiter2 = dirtyDelimiter || "";
  var sign = offset2 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset2);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter2 + minutes;
}
const formatters$1 = formatters;
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token2) {
  return protectedDayOfYearTokens.indexOf(token2) !== -1;
}
function isProtectedWeekYearToken(token2) {
  return protectedWeekYearTokens.indexOf(token2) !== -1;
}
function throwProtectedError(token2, format2, input) {
  if (token2 === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token2 === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token2 === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token2 === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token2, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token2];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$1 = formatDistance;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token2, _date, _baseDate, _options) {
  return formatRelativeLocale[token2];
};
const formatRelative$1 = formatRelative;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index2];
  };
}
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$1 = localize;
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale = {
  code: "en-US",
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const defaultLocale = locale;
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref2, _options$locale, _ref22, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref2 = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref2 !== void 0 ? _ref2 : defaultLocale;
  var firstWeekContainsDate = toInteger((_ref22 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref22 !== void 0 ? _ref22 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
var MILLISECONDS_IN_HOUR = 36e5;
function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}
function subWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addWeeks(dirtyDate, -amount);
}
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}
function subQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addQuarters(dirtyDate, -amount);
}
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}
function getDate(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var dayOfMonth = date.getDate();
  return dayOfMonth;
}
function startOfWeek(dirtyDate, options) {
  var _ref2, _ref22, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref2 = (_ref22 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref22 !== void 0 ? _ref22 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function getMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}
function getQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var quarter = Math.floor(date.getMonth() / 3) + 1;
  return quarter;
}
function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}
function getTime(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  return timestamp;
}
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = /* @__PURE__ */ new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}
function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = /* @__PURE__ */ new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}
function setQuarter(dirtyDate, dirtyQuarter) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var quarter = toInteger(dirtyQuarter);
  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
  var diff = quarter - oldQuarter;
  return setMonth(date, date.getMonth() + diff * 3);
}
function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}
function min(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}
function max(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = /* @__PURE__ */ new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function isEqual$1(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}
function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}
function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);
  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
}
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}
function isWithinInterval(dirtyDate, interval) {
  requiredArgs(2, arguments);
  var time = toDate(dirtyDate).getTime();
  var startTime = toDate(interval.start).getTime();
  var endTime = toDate(interval.end).getTime();
  if (!(startTime <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  return time >= startTime && time <= endTime;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _createForOfIteratorHelper(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it2) {
    if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it2)
        o2 = it2;
      var i2 = 0;
      var F2 = function F3() {
      };
      return {
        s: F2,
        n: function n2() {
          if (i2 >= o2.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o2[i2++]
          };
        },
        e: function e3(_e2) {
          throw _e2;
        },
        f: F2
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s4() {
      it2 = it2.call(o2);
    },
    n: function n2() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e3(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f2() {
      try {
        if (!normalCompletion && it2["return"] != null)
          it2["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _setPrototypeOf$1(o2, p2) {
  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf$1(o2, p2);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$1(subClass, superClass);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
function _isNativeReflectConstruct() {
  try {
    var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t3;
  })();
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function toPrimitive(t3, r2) {
  if ("object" != _typeof(t3) || !t3)
    return t3;
  var e3 = t3[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t3, r2 || "default");
    if ("object" != _typeof(i2))
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t3);
}
function toPropertyKey(t3) {
  var i2 = toPrimitive(t3, "string");
  return "symbol" == _typeof(i2) ? i2 : String(i2);
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized$1(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);
var Parser = /* @__PURE__ */ function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run2(dateString, token2, match2, options) {
      var result = this.parse(dateString, token2, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 140);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n2 + "}"), dateString);
  }
}
function parseNDigitsSigned(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n2 + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex$1(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 130);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token2 === "yy"
        };
      };
      switch (token2) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token2.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 130);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token2 === "YY"
        };
      };
      switch (token2) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token2.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 130);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token2) {
      if (token2 === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token2.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 130);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token2) {
      if (token2 === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token2.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 120);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "Q":
        case "QQ":
          return parseNDigits(token2.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 120);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "q":
        case "qq":
          return parseNDigits(token2.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized$1(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token2) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 110);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token2) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 100);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 100);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 90);
    _defineProperty(_assertThisInitialized$1(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 90);
    _defineProperty(_assertThisInitialized$1(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref2, _ref22, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref2 = (_ref22 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref22 !== void 0 ? _ref22 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 90);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 90);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token2) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token2.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 90);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token2) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token2.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 90);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token2) {
        case "i":
        case "ii":
          return parseNDigits(token2.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 80);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 80);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 80);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 70);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 70);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 70);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 70);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 60);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 50);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token2, match2) {
      switch (token2) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token2.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 30);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token2) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token2.length + 3));
      };
      return mapValue(parseNDigits(token2.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 10);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token2) {
      switch (token2) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 10);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token2) {
      switch (token2) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 40);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized$1(_this), "priority", 20);
    _defineProperty(_assertThisInitialized$1(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref2, _options$locale, _ref22, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref2 = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref2 !== void 0 ? _ref2 : defaultLocale;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref22 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref22 !== void 0 ? _ref22 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters$1) {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token2 = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token2)) {
        throwProtectedError(token2, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token2)) {
        throwProtectedError(token2, formatString, dirtyDateString);
      }
      var firstCharacter = token2[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token2, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token2, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token2
        });
        var parseResult = parser.run(dateString, token2, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token2 === "''") {
          token2 = "'";
        } else if (firstCharacter === "'") {
          token2 = cleanEscapedString(token2);
        }
        if (dateString.indexOf(token2) === 0) {
          dateString = dateString.slice(token2.length);
        } else {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a4, b3) {
    return b3 - a4;
  }).filter(function(priority, index2, array) {
    return array.indexOf(priority) === index2;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a4, b3) {
      return b3.subPriority - a4.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset2;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset2 = parseTimezone(dateStrings.timezone);
    if (isNaN(offset2)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset2);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token2 = patterns.timezone.exec(timeString);
    if (token2) {
      dateStrings.time = timeString.replace(token2[1], "");
      dateStrings.timezone = token2[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function isNodeFound(current, componentNode, ignoreClass) {
  if (current === componentNode) {
    return true;
  }
  if (current.correspondingElement) {
    return current.correspondingElement.classList.contains(ignoreClass);
  }
  return current.classList.contains(ignoreClass);
}
function findHighest(current, componentNode, ignoreClass) {
  if (current === componentNode) {
    return true;
  }
  while (current.parentNode || current.host) {
    if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {
      return true;
    }
    current = current.parentNode || current.host;
  }
  return current;
}
function clickedScrollbar(evt) {
  return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
}
var testPassiveEventSupport = function testPassiveEventSupport2() {
  if (typeof window === "undefined" || typeof window.addEventListener !== "function") {
    return;
  }
  var passive2 = false;
  var options = Object.defineProperty({}, "passive", {
    get: function get2() {
      passive2 = true;
    }
  });
  var noop2 = function noop3() {
  };
  window.addEventListener("testPassiveEventSupport", noop2, options);
  window.removeEventListener("testPassiveEventSupport", noop2, options);
  return passive2;
};
function autoInc(seed) {
  if (seed === void 0) {
    seed = 0;
  }
  return function() {
    return ++seed;
  };
}
var uid = autoInc();
var passiveEventSupport;
var handlersMap = {};
var enabledInstances = {};
var touchEvents = ["touchstart", "touchmove"];
var IGNORE_CLASS_NAME = "ignore-react-onclickoutside";
function getEventHandlerOptions(instance, eventName) {
  var handlerOptions = {};
  var isTouchEvent2 = touchEvents.indexOf(eventName) !== -1;
  if (isTouchEvent2 && passiveEventSupport) {
    handlerOptions.passive = !instance.props.preventDefault;
  }
  return handlerOptions;
}
function onClickOutsideHOC(WrappedComponent, config) {
  var _class, _temp;
  var componentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
  return _temp = _class = /* @__PURE__ */ function(_Component) {
    _inheritsLoose(onClickOutside2, _Component);
    function onClickOutside2(props) {
      var _this;
      _this = _Component.call(this, props) || this;
      _this.__outsideClickHandler = function(event) {
        if (typeof _this.__clickOutsideHandlerProp === "function") {
          _this.__clickOutsideHandlerProp(event);
          return;
        }
        var instance = _this.getInstance();
        if (typeof instance.props.handleClickOutside === "function") {
          instance.props.handleClickOutside(event);
          return;
        }
        if (typeof instance.handleClickOutside === "function") {
          instance.handleClickOutside(event);
          return;
        }
        throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
      };
      _this.__getComponentNode = function() {
        var instance = _this.getInstance();
        if (config && typeof config.setClickOutsideRef === "function") {
          return config.setClickOutsideRef()(instance);
        }
        if (typeof instance.setClickOutsideRef === "function") {
          return instance.setClickOutsideRef();
        }
        return reactDomExports.findDOMNode(instance);
      };
      _this.enableOnClickOutside = function() {
        if (typeof document === "undefined" || enabledInstances[_this._uid]) {
          return;
        }
        if (typeof passiveEventSupport === "undefined") {
          passiveEventSupport = testPassiveEventSupport();
        }
        enabledInstances[_this._uid] = true;
        var events2 = _this.props.eventTypes;
        if (!events2.forEach) {
          events2 = [events2];
        }
        handlersMap[_this._uid] = function(event) {
          if (_this.componentNode === null)
            return;
          if (_this.props.preventDefault) {
            event.preventDefault();
          }
          if (_this.props.stopPropagation) {
            event.stopPropagation();
          }
          if (_this.props.excludeScrollbar && clickedScrollbar(event))
            return;
          var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;
          if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
            return;
          }
          _this.__outsideClickHandler(event);
        };
        events2.forEach(function(eventName) {
          document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized(_this), eventName));
        });
      };
      _this.disableOnClickOutside = function() {
        delete enabledInstances[_this._uid];
        var fn3 = handlersMap[_this._uid];
        if (fn3 && typeof document !== "undefined") {
          var events2 = _this.props.eventTypes;
          if (!events2.forEach) {
            events2 = [events2];
          }
          events2.forEach(function(eventName) {
            return document.removeEventListener(eventName, fn3, getEventHandlerOptions(_assertThisInitialized(_this), eventName));
          });
          delete handlersMap[_this._uid];
        }
      };
      _this.getRef = function(ref) {
        return _this.instanceRef = ref;
      };
      _this._uid = uid();
      return _this;
    }
    var _proto = onClickOutside2.prototype;
    _proto.getInstance = function getInstance() {
      if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {
        return this;
      }
      var ref = this.instanceRef;
      return ref.getInstance ? ref.getInstance() : ref;
    };
    _proto.componentDidMount = function componentDidMount() {
      if (typeof document === "undefined" || !document.createElement) {
        return;
      }
      var instance = this.getInstance();
      if (config && typeof config.handleClickOutside === "function") {
        this.__clickOutsideHandlerProp = config.handleClickOutside(instance);
        if (typeof this.__clickOutsideHandlerProp !== "function") {
          throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
        }
      }
      this.componentNode = this.__getComponentNode();
      if (this.props.disableOnClickOutside)
        return;
      this.enableOnClickOutside();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      this.componentNode = this.__getComponentNode();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.disableOnClickOutside();
    };
    _proto.render = function render2() {
      var _this$props = this.props;
      _this$props.excludeScrollbar;
      var props = _objectWithoutPropertiesLoose(_this$props, ["excludeScrollbar"]);
      if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {
        props.ref = this.getRef;
      } else {
        props.wrappedRef = this.getRef;
      }
      props.disableOnClickOutside = this.disableOnClickOutside;
      props.enableOnClickOutside = this.enableOnClickOutside;
      return reactExports.createElement(WrappedComponent, props);
    };
    return onClickOutside2;
  }(reactExports.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
    eventTypes: ["mousedown", "touchstart"],
    excludeScrollbar: config && config.excludeScrollbar || false,
    outsideClickIgnoreClass: IGNORE_CLASS_NAME,
    preventDefault: false,
    stopPropagation: false
  }, _class.getClass = function() {
    return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
  }, _temp;
}
var ManagerReferenceNodeContext = reactExports.createContext();
var ManagerReferenceNodeSetterContext = reactExports.createContext();
function Manager(_ref2) {
  var children = _ref2.children;
  var _React$useState = reactExports.useState(null), referenceNode = _React$useState[0], setReferenceNode = _React$useState[1];
  var hasUnmounted = reactExports.useRef(false);
  reactExports.useEffect(function() {
    return function() {
      hasUnmounted.current = true;
    };
  }, []);
  var handleSetReferenceNode = reactExports.useCallback(function(node2) {
    if (!hasUnmounted.current) {
      setReferenceNode(node2);
    }
  }, []);
  return /* @__PURE__ */ reactExports.createElement(ManagerReferenceNodeContext.Provider, {
    value: referenceNode
  }, /* @__PURE__ */ reactExports.createElement(ManagerReferenceNodeSetterContext.Provider, {
    value: handleSetReferenceNode
  }, children));
}
var unwrapArray = function unwrapArray2(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke2(fn3) {
  if (typeof fn3 === "function") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return fn3.apply(void 0, args);
  }
};
var setRef = function setRef2(ref, node2) {
  if (typeof ref === "function") {
    return safeInvoke(ref, node2);
  } else if (ref != null) {
    ref.current = node2;
  }
};
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref2) {
    var key = _ref2[0], value = _ref2[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? reactExports.useLayoutEffect : reactExports.useEffect;
var hasElementType = typeof Element !== "undefined";
var hasMap = typeof Map === "function";
var hasSet = typeof Set === "function";
var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
function equal(a4, b3) {
  if (a4 === b3)
    return true;
  if (a4 && b3 && typeof a4 == "object" && typeof b3 == "object") {
    if (a4.constructor !== b3.constructor)
      return false;
    var length2, i2, keys2;
    if (Array.isArray(a4)) {
      length2 = a4.length;
      if (length2 != b3.length)
        return false;
      for (i2 = length2; i2-- !== 0; )
        if (!equal(a4[i2], b3[i2]))
          return false;
      return true;
    }
    var it2;
    if (hasMap && a4 instanceof Map && b3 instanceof Map) {
      if (a4.size !== b3.size)
        return false;
      it2 = a4.entries();
      while (!(i2 = it2.next()).done)
        if (!b3.has(i2.value[0]))
          return false;
      it2 = a4.entries();
      while (!(i2 = it2.next()).done)
        if (!equal(i2.value[1], b3.get(i2.value[0])))
          return false;
      return true;
    }
    if (hasSet && a4 instanceof Set && b3 instanceof Set) {
      if (a4.size !== b3.size)
        return false;
      it2 = a4.entries();
      while (!(i2 = it2.next()).done)
        if (!b3.has(i2.value[0]))
          return false;
      return true;
    }
    if (hasArrayBuffer && ArrayBuffer.isView(a4) && ArrayBuffer.isView(b3)) {
      length2 = a4.length;
      if (length2 != b3.length)
        return false;
      for (i2 = length2; i2-- !== 0; )
        if (a4[i2] !== b3[i2])
          return false;
      return true;
    }
    if (a4.constructor === RegExp)
      return a4.source === b3.source && a4.flags === b3.flags;
    if (a4.valueOf !== Object.prototype.valueOf && typeof a4.valueOf === "function" && typeof b3.valueOf === "function")
      return a4.valueOf() === b3.valueOf();
    if (a4.toString !== Object.prototype.toString && typeof a4.toString === "function" && typeof b3.toString === "function")
      return a4.toString() === b3.toString();
    keys2 = Object.keys(a4);
    length2 = keys2.length;
    if (length2 !== Object.keys(b3).length)
      return false;
    for (i2 = length2; i2-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b3, keys2[i2]))
        return false;
    if (hasElementType && a4 instanceof Element)
      return false;
    for (i2 = length2; i2-- !== 0; ) {
      if ((keys2[i2] === "_owner" || keys2[i2] === "__v" || keys2[i2] === "__o") && a4.$$typeof) {
        continue;
      }
      if (!equal(a4[keys2[i2]], b3[keys2[i2]]))
        return false;
    }
    return true;
  }
  return a4 !== a4 && b3 !== b3;
}
var reactFastCompare = function isEqual(a4, b3) {
  try {
    return equal(a4, b3);
  } catch (error) {
    if ((error.message || "").match(/stack|recursion/i)) {
      console.warn("react-fast-compare cannot handle circular refs");
      return false;
    }
    throw error;
  }
};
const isEqual2 = /* @__PURE__ */ getDefaultExportFromCjs(reactFastCompare);
var EMPTY_MODIFIERS$1 = [];
var usePopper = function usePopper2(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }
  var prevOptions = reactExports.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS$1
  };
  var _React$useState = reactExports.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = reactExports.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn3(_ref2) {
        var state2 = _ref2.state;
        var elements = Object.keys(state2.elements);
        reactDomExports.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = reactExports.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if (isEqual2(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = reactExports.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper$1 = options.createPopper || createPopper;
    var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};
var NOOP = function NOOP2() {
  return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE2() {
  return Promise.resolve(null);
};
var EMPTY_MODIFIERS = [];
function Popper(_ref2) {
  var _ref$placement = _ref2.placement, placement = _ref$placement === void 0 ? "bottom" : _ref$placement, _ref$strategy = _ref2.strategy, strategy = _ref$strategy === void 0 ? "absolute" : _ref$strategy, _ref$modifiers = _ref2.modifiers, modifiers2 = _ref$modifiers === void 0 ? EMPTY_MODIFIERS : _ref$modifiers, referenceElement = _ref2.referenceElement, onFirstUpdate = _ref2.onFirstUpdate, innerRef = _ref2.innerRef, children = _ref2.children;
  var referenceNode = reactExports.useContext(ManagerReferenceNodeContext);
  var _React$useState = reactExports.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
  var _React$useState2 = reactExports.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
  reactExports.useEffect(function() {
    setRef(innerRef, popperElement);
  }, [innerRef, popperElement]);
  var options = reactExports.useMemo(function() {
    return {
      placement,
      strategy,
      onFirstUpdate,
      modifiers: [].concat(modifiers2, [{
        name: "arrow",
        enabled: arrowElement != null,
        options: {
          element: arrowElement
        }
      }])
    };
  }, [placement, strategy, onFirstUpdate, modifiers2, arrowElement]);
  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options), state = _usePopper.state, styles = _usePopper.styles, forceUpdate = _usePopper.forceUpdate, update = _usePopper.update;
  var childrenProps = reactExports.useMemo(function() {
    return {
      ref: setPopperElement,
      style: styles.popper,
      placement: state ? state.placement : placement,
      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
      arrowProps: {
        style: styles.arrow,
        ref: setArrowElement
      },
      forceUpdate: forceUpdate || NOOP,
      update: update || NOOP_PROMISE
    };
  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);
  return unwrapArray(children)(childrenProps);
}
var __DEV__ = process.env.NODE_ENV !== "production";
var warning = function() {
};
if (__DEV__) {
  var printWarning = function printWarning2(format2, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = "Warning: " + format2.replace(/%s/g, function() {
      return args[argIndex++];
    });
    if (typeof console !== "undefined") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x3) {
    }
  };
  warning = function(condition, format2, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format2 === void 0) {
      throw new Error(
        "`warning(condition, format, ...args)` requires a warning message argument"
      );
    }
    if (!condition) {
      printWarning.apply(null, [format2].concat(args));
    }
  };
}
var warning_1 = warning;
const warning$1 = /* @__PURE__ */ getDefaultExportFromCjs(warning_1);
function Reference(_ref2) {
  var children = _ref2.children, innerRef = _ref2.innerRef;
  var setReferenceNode = reactExports.useContext(ManagerReferenceNodeSetterContext);
  var refHandler = reactExports.useCallback(function(node2) {
    setRef(innerRef, node2);
    safeInvoke(setReferenceNode, node2);
  }, [innerRef, setReferenceNode]);
  reactExports.useEffect(function() {
    return function() {
      return setRef(innerRef, null);
    };
  }, []);
  reactExports.useEffect(function() {
    warning$1(Boolean(setReferenceNode), "`Reference` should not be used outside of a `Manager` component.");
  }, [setReferenceNode]);
  return unwrapArray(children)({
    ref: refHandler
  });
}
function set(dirtyDate, values) {
  requiredArgs(2, arguments);
  if (_typeof(values) !== "object" || values === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (values.year != null) {
    date.setFullYear(values.year);
  }
  if (values.month != null) {
    date = setMonth(date, values.month);
  }
  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }
  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }
  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }
  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }
  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }
  return date;
}
function le(e3, t3) {
  var r2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e3);
    t3 && (n2 = n2.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function de(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var r2 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? le(Object(r2), true).forEach(function(t4) {
      ye(e3, t4, r2[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : le(Object(r2)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
    });
  }
  return e3;
}
function ue(e3) {
  return ue = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
    return typeof e4;
  } : function(e4) {
    return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
  }, ue(e3);
}
function he(e3, t3) {
  if (!(e3 instanceof t3))
    throw new TypeError("Cannot call a class as a function");
}
function me(e3, t3) {
  for (var r2 = 0; r2 < t3.length; r2++) {
    var n2 = t3[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e3, _e(n2.key), n2);
  }
}
function fe(e3, t3, r2) {
  return t3 && me(e3.prototype, t3), r2 && me(e3, r2), Object.defineProperty(e3, "prototype", { writable: false }), e3;
}
function ye(e3, t3, r2) {
  return (t3 = _e(t3)) in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
}
function ve() {
  return ve = Object.assign ? Object.assign.bind() : function(e3) {
    for (var t3 = 1; t3 < arguments.length; t3++) {
      var r2 = arguments[t3];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (e3[n2] = r2[n2]);
    }
    return e3;
  }, ve.apply(this, arguments);
}
function De(e3, t3) {
  if ("function" != typeof t3 && null !== t3)
    throw new TypeError("Super expression must either be null or a function");
  e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && ke(e3, t3);
}
function ge(e3) {
  return ge = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
    return e4.__proto__ || Object.getPrototypeOf(e4);
  }, ge(e3);
}
function ke(e3, t3) {
  return ke = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
    return e4.__proto__ = t4, e4;
  }, ke(e3, t3);
}
function we(e3) {
  if (void 0 === e3)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}
function be(e3) {
  var t3 = function() {
    if ("undefined" == typeof Reflect || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if ("function" == typeof Proxy)
      return true;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), true;
    } catch (e4) {
      return false;
    }
  }();
  return function() {
    var r2, n2 = ge(e3);
    if (t3) {
      var o2 = ge(this).constructor;
      r2 = Reflect.construct(n2, arguments, o2);
    } else
      r2 = n2.apply(this, arguments);
    return function(e4, t4) {
      if (t4 && ("object" == typeof t4 || "function" == typeof t4))
        return t4;
      if (void 0 !== t4)
        throw new TypeError("Derived constructors may only return object or undefined");
      return we(e4);
    }(this, r2);
  };
}
function Se(e3) {
  return function(e4) {
    if (Array.isArray(e4))
      return Ce(e4);
  }(e3) || function(e4) {
    if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"])
      return Array.from(e4);
  }(e3) || function(e4, t3) {
    if (!e4)
      return;
    if ("string" == typeof e4)
      return Ce(e4, t3);
    var r2 = Object.prototype.toString.call(e4).slice(8, -1);
    "Object" === r2 && e4.constructor && (r2 = e4.constructor.name);
    if ("Map" === r2 || "Set" === r2)
      return Array.from(e4);
    if ("Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2))
      return Ce(e4, t3);
  }(e3) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function Ce(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var r2 = 0, n2 = new Array(t3); r2 < t3; r2++)
    n2[r2] = e3[r2];
  return n2;
}
function _e(e3) {
  var t3 = function(e4, t4) {
    if ("object" != typeof e4 || null === e4)
      return e4;
    var r2 = e4[Symbol.toPrimitive];
    if (void 0 !== r2) {
      var n2 = r2.call(e4, t4 || "default");
      if ("object" != typeof n2)
        return n2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === t4 ? String : Number)(e4);
  }(e3, "string");
  return "symbol" == typeof t3 ? t3 : String(t3);
}
var Me = function(e3, t3) {
  switch (e3) {
    case "P":
      return t3.date({ width: "short" });
    case "PP":
      return t3.date({ width: "medium" });
    case "PPP":
      return t3.date({ width: "long" });
    default:
      return t3.date({ width: "full" });
  }
}, Pe = function(e3, t3) {
  switch (e3) {
    case "p":
      return t3.time({ width: "short" });
    case "pp":
      return t3.time({ width: "medium" });
    case "ppp":
      return t3.time({ width: "long" });
    default:
      return t3.time({ width: "full" });
  }
}, Ee = { p: Pe, P: function(e3, t3) {
  var r2, n2 = e3.match(/(P+)(p+)?/) || [], o2 = n2[1], a4 = n2[2];
  if (!a4)
    return Me(e3, t3);
  switch (o2) {
    case "P":
      r2 = t3.dateTime({ width: "short" });
      break;
    case "PP":
      r2 = t3.dateTime({ width: "medium" });
      break;
    case "PPP":
      r2 = t3.dateTime({ width: "long" });
      break;
    default:
      r2 = t3.dateTime({ width: "full" });
  }
  return r2.replace("{{date}}", Me(o2, t3)).replace("{{time}}", Pe(a4, t3));
} }, Ne = 12, xe = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
function Ye(e3) {
  var t3 = e3 ? "string" == typeof e3 || e3 instanceof String ? parseISO(e3) : toDate(e3) : /* @__PURE__ */ new Date();
  return Te(t3) ? t3 : null;
}
function Te(e3, t3) {
  return t3 = t3 || /* @__PURE__ */ new Date("1/1/1000"), isValid(e3) && !isBefore(e3, t3);
}
function Ie(e3, t3, r2) {
  if ("en" === r2)
    return format(e3, t3, { awareOfUnicodeTokens: true });
  var n2 = Ge(r2);
  return r2 && !n2 && console.warn('A locale object was not found for the provided string ["'.concat(r2, '"].')), !n2 && $e() && Ge($e()) && (n2 = Ge($e())), format(e3, t3, { locale: n2 || null, awareOfUnicodeTokens: true });
}
function Oe(e3, t3) {
  var r2 = t3.dateFormat, n2 = t3.locale;
  return e3 && Ie(e3, Array.isArray(r2) ? r2[0] : r2, n2) || "";
}
function Re(e3, t3) {
  var r2 = t3.hour, n2 = void 0 === r2 ? 0 : r2, o2 = t3.minute, a4 = void 0 === o2 ? 0 : o2, s4 = t3.second;
  return setHours(setMinutes(setSeconds(e3, void 0 === s4 ? 0 : s4), a4), n2);
}
function Le(e3, t3, r2) {
  var n2 = Ge(t3 || $e());
  return startOfWeek(e3, { locale: n2, weekStartsOn: r2 });
}
function Fe(e3) {
  return startOfMonth(e3);
}
function Ae(e3) {
  return startOfYear(e3);
}
function We(e3) {
  return startOfQuarter(e3);
}
function Ke() {
  return startOfDay(Ye());
}
function Be(e3, t3) {
  return e3 && t3 ? isSameYear(e3, t3) : !e3 && !t3;
}
function Qe(e3, t3) {
  return e3 && t3 ? isSameMonth(e3, t3) : !e3 && !t3;
}
function He(e3, t3) {
  return e3 && t3 ? isSameQuarter(e3, t3) : !e3 && !t3;
}
function je(e3, t3) {
  return e3 && t3 ? isSameDay(e3, t3) : !e3 && !t3;
}
function Ve(e3, t3) {
  return e3 && t3 ? isEqual$1(e3, t3) : !e3 && !t3;
}
function qe(e3, t3, r2) {
  var n2, o2 = startOfDay(t3), a4 = endOfDay(r2);
  try {
    n2 = isWithinInterval(e3, { start: o2, end: a4 });
  } catch (e4) {
    n2 = false;
  }
  return n2;
}
function $e() {
  return ("undefined" != typeof window ? window : globalThis).__localeId__;
}
function Ge(e3) {
  if ("string" == typeof e3) {
    var t3 = "undefined" != typeof window ? window : globalThis;
    return t3.__localeData__ ? t3.__localeData__[e3] : null;
  }
  return e3;
}
function Je(e3, t3) {
  return Ie(setMonth(Ye(), e3), "LLLL", t3);
}
function Xe(e3, t3) {
  return Ie(setMonth(Ye(), e3), "LLL", t3);
}
function Ze(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.maxDate, o2 = t3.excludeDates, a4 = t3.excludeDateIntervals, s4 = t3.includeDates, i2 = t3.includeDateIntervals, p2 = t3.filterDate;
  return it(e3, { minDate: r2, maxDate: n2 }) || o2 && o2.some(function(t4) {
    return je(e3, t4);
  }) || a4 && a4.some(function(t4) {
    var r3 = t4.start, n3 = t4.end;
    return isWithinInterval(e3, { start: r3, end: n3 });
  }) || s4 && !s4.some(function(t4) {
    return je(e3, t4);
  }) || i2 && !i2.some(function(t4) {
    var r3 = t4.start, n3 = t4.end;
    return isWithinInterval(e3, { start: r3, end: n3 });
  }) || p2 && !p2(Ye(e3)) || false;
}
function et(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.excludeDates, n2 = t3.excludeDateIntervals;
  return n2 && n2.length > 0 ? n2.some(function(t4) {
    var r3 = t4.start, n3 = t4.end;
    return isWithinInterval(e3, { start: r3, end: n3 });
  }) : r2 && r2.some(function(t4) {
    return je(e3, t4);
  }) || false;
}
function tt(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.maxDate, o2 = t3.excludeDates, a4 = t3.includeDates, s4 = t3.filterDate;
  return it(e3, { minDate: startOfMonth(r2), maxDate: endOfMonth(n2) }) || o2 && o2.some(function(t4) {
    return Qe(e3, t4);
  }) || a4 && !a4.some(function(t4) {
    return Qe(e3, t4);
  }) || s4 && !s4(Ye(e3)) || false;
}
function rt(e3, t3, r2, n2) {
  var o2 = getYear(e3), a4 = getMonth(e3), s4 = getYear(t3), i2 = getMonth(t3), p2 = getYear(n2);
  return o2 === s4 && o2 === p2 ? a4 <= r2 && r2 <= i2 : o2 < s4 ? p2 === o2 && a4 <= r2 || p2 === s4 && i2 >= r2 || p2 < s4 && p2 > o2 : void 0;
}
function nt(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.maxDate, o2 = t3.excludeDates, a4 = t3.includeDates, s4 = t3.filterDate;
  return it(e3, { minDate: r2, maxDate: n2 }) || o2 && o2.some(function(t4) {
    return He(e3, t4);
  }) || a4 && !a4.some(function(t4) {
    return He(e3, t4);
  }) || s4 && !s4(Ye(e3)) || false;
}
function ot(e3, t3, r2) {
  if (!isValid(t3) || !isValid(r2))
    return false;
  var n2 = getYear(t3), a4 = getYear(r2);
  return n2 <= e3 && a4 >= e3;
}
function at(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.maxDate, o2 = t3.excludeDates, a4 = t3.includeDates, s4 = t3.filterDate, i2 = new Date(e3, 0, 1);
  return it(i2, { minDate: startOfYear(r2), maxDate: endOfYear(n2) }) || o2 && o2.some(function(e4) {
    return Be(i2, e4);
  }) || a4 && !a4.some(function(e4) {
    return Be(i2, e4);
  }) || s4 && !s4(Ye(i2)) || false;
}
function st(e3, t3, r2, n2) {
  var o2 = getYear(e3), a4 = getQuarter(e3), s4 = getYear(t3), i2 = getQuarter(t3), p2 = getYear(n2);
  return o2 === s4 && o2 === p2 ? a4 <= r2 && r2 <= i2 : o2 < s4 ? p2 === o2 && a4 <= r2 || p2 === s4 && i2 >= r2 || p2 < s4 && p2 > o2 : void 0;
}
function it(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.maxDate;
  return r2 && differenceInCalendarDays(e3, r2) < 0 || n2 && differenceInCalendarDays(e3, n2) > 0;
}
function pt(e3, t3) {
  return t3.some(function(t4) {
    return getHours(t4) === getHours(e3) && getMinutes(t4) === getMinutes(e3);
  });
}
function ct(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.excludeTimes, n2 = t3.includeTimes, o2 = t3.filterTime;
  return r2 && pt(e3, r2) || n2 && !pt(e3, n2) || o2 && !o2(e3) || false;
}
function lt(e3, t3) {
  var r2 = t3.minTime, n2 = t3.maxTime;
  if (!r2 || !n2)
    throw new Error("Both minTime and maxTime props required");
  var o2, a4 = Ye(), s4 = setHours(setMinutes(a4, getMinutes(e3)), getHours(e3)), i2 = setHours(setMinutes(a4, getMinutes(r2)), getHours(r2)), p2 = setHours(setMinutes(a4, getMinutes(n2)), getHours(n2));
  try {
    o2 = !isWithinInterval(s4, { start: i2, end: p2 });
  } catch (e4) {
    o2 = false;
  }
  return o2;
}
function dt(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.includeDates, o2 = subMonths(e3, 1);
  return r2 && differenceInCalendarMonths(r2, o2) > 0 || n2 && n2.every(function(e4) {
    return differenceInCalendarMonths(e4, o2) > 0;
  }) || false;
}
function ut(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.maxDate, n2 = t3.includeDates, o2 = addMonths(e3, 1);
  return r2 && differenceInCalendarMonths(o2, r2) > 0 || n2 && n2.every(function(e4) {
    return differenceInCalendarMonths(o2, e4) > 0;
  }) || false;
}
function ht(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.minDate, n2 = t3.includeDates, o2 = subYears(e3, 1);
  return r2 && differenceInCalendarYears(r2, o2) > 0 || n2 && n2.every(function(e4) {
    return differenceInCalendarYears(e4, o2) > 0;
  }) || false;
}
function mt(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t3.maxDate, n2 = t3.includeDates, o2 = addYears(e3, 1);
  return r2 && differenceInCalendarYears(o2, r2) > 0 || n2 && n2.every(function(e4) {
    return differenceInCalendarYears(o2, e4) > 0;
  }) || false;
}
function ft(e3) {
  var t3 = e3.minDate, r2 = e3.includeDates;
  if (r2 && t3) {
    var n2 = r2.filter(function(e4) {
      return differenceInCalendarDays(e4, t3) >= 0;
    });
    return min(n2);
  }
  return r2 ? min(r2) : t3;
}
function yt(e3) {
  var t3 = e3.maxDate, r2 = e3.includeDates;
  if (r2 && t3) {
    var n2 = r2.filter(function(e4) {
      return differenceInCalendarDays(e4, t3) <= 0;
    });
    return max(n2);
  }
  return r2 ? max(r2) : t3;
}
function vt() {
  for (var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "react-datepicker__day--highlighted", r2 = /* @__PURE__ */ new Map(), o2 = 0, a4 = e3.length; o2 < a4; o2++) {
    var s4 = e3[o2];
    if (isDate(s4)) {
      var i2 = Ie(s4, "MM.dd.yyyy"), p2 = r2.get(i2) || [];
      p2.includes(t3) || (p2.push(t3), r2.set(i2, p2));
    } else if ("object" === ue(s4)) {
      var c3 = Object.keys(s4), l2 = c3[0], d4 = s4[c3[0]];
      if ("string" == typeof l2 && d4.constructor === Array)
        for (var u3 = 0, h4 = d4.length; u3 < h4; u3++) {
          var m4 = Ie(d4[u3], "MM.dd.yyyy"), f2 = r2.get(m4) || [];
          f2.includes(l2) || (f2.push(l2), r2.set(m4, f2));
        }
    }
  }
  return r2;
}
function Dt() {
  var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "react-datepicker__day--holidays", r2 = /* @__PURE__ */ new Map();
  return e3.forEach(function(e4) {
    var o2 = e4.date, a4 = e4.holidayName;
    if (isDate(o2)) {
      var s4 = Ie(o2, "MM.dd.yyyy"), i2 = r2.get(s4) || {};
      if (!("className" in i2) || i2.className !== t3 || (p2 = i2.holidayNames, c3 = [a4], p2.length !== c3.length || !p2.every(function(e5, t4) {
        return e5 === c3[t4];
      }))) {
        var p2, c3;
        i2.className = t3;
        var l2 = i2.holidayNames;
        i2.holidayNames = l2 ? [].concat(Se(l2), [a4]) : [a4], r2.set(s4, i2);
      }
    }
  }), r2;
}
function gt(e3, t3, r2, n2, o2) {
  for (var a4 = o2.length, p2 = [], c3 = 0; c3 < a4; c3++) {
    var l2 = addMinutes(addHours(e3, getHours(o2[c3])), getMinutes(o2[c3])), d4 = addMinutes(e3, (r2 + 1) * n2);
    isAfter(l2, t3) && isBefore(l2, d4) && p2.push(o2[c3]);
  }
  return p2;
}
function kt(e3) {
  return e3 < 10 ? "0".concat(e3) : "".concat(e3);
}
function wt(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ne, r2 = Math.ceil(getYear(e3) / t3) * t3;
  return { startPeriod: r2 - (t3 - 1), endPeriod: r2 };
}
function bt(e3) {
  var t3 = e3.getSeconds(), r2 = e3.getMilliseconds();
  return toDate(e3.getTime() - 1e3 * t3 - r2);
}
function St(e3, t3, r2, n2) {
  for (var o2 = [], a4 = 0; a4 < 2 * t3 + 1; a4++) {
    var s4 = e3 + t3 - a4, i2 = true;
    r2 && (i2 = getYear(r2) <= s4), n2 && i2 && (i2 = getYear(n2) >= s4), i2 && o2.push(s4);
  }
  return o2;
}
var Ct = onClickOutsideHOC(function(n2) {
  De(a4, e$1.Component);
  var o2 = be(a4);
  function a4(r2) {
    var n3;
    he(this, a4), ye(we(n3 = o2.call(this, r2)), "renderOptions", function() {
      var t3 = n3.props.year, r3 = n3.state.yearsList.map(function(r4) {
        return e$1.createElement("div", { className: t3 === r4 ? "react-datepicker__year-option react-datepicker__year-option--selected_year" : "react-datepicker__year-option", key: r4, onClick: n3.onChange.bind(we(n3), r4), "aria-selected": t3 === r4 ? "true" : void 0 }, t3 === r4 ? e$1.createElement("span", { className: "react-datepicker__year-option--selected" }, "✓") : "", r4);
      }), o3 = n3.props.minDate ? getYear(n3.props.minDate) : null, a5 = n3.props.maxDate ? getYear(n3.props.maxDate) : null;
      return a5 && n3.state.yearsList.find(function(e3) {
        return e3 === a5;
      }) || r3.unshift(e$1.createElement("div", { className: "react-datepicker__year-option", key: "upcoming", onClick: n3.incrementYears }, e$1.createElement("a", { className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming" }))), o3 && n3.state.yearsList.find(function(e3) {
        return e3 === o3;
      }) || r3.push(e$1.createElement("div", { className: "react-datepicker__year-option", key: "previous", onClick: n3.decrementYears }, e$1.createElement("a", { className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous" }))), r3;
    }), ye(we(n3), "onChange", function(e3) {
      n3.props.onChange(e3);
    }), ye(we(n3), "handleClickOutside", function() {
      n3.props.onCancel();
    }), ye(we(n3), "shiftYears", function(e3) {
      var t3 = n3.state.yearsList.map(function(t4) {
        return t4 + e3;
      });
      n3.setState({ yearsList: t3 });
    }), ye(we(n3), "incrementYears", function() {
      return n3.shiftYears(1);
    }), ye(we(n3), "decrementYears", function() {
      return n3.shiftYears(-1);
    });
    var s4 = r2.yearDropdownItemNumber, i2 = r2.scrollableYearDropdown, p2 = s4 || (i2 ? 10 : 5);
    return n3.state = { yearsList: St(n3.props.year, p2, n3.props.minDate, n3.props.maxDate) }, n3.dropdownRef = reactExports.createRef(), n3;
  }
  return fe(a4, [{ key: "componentDidMount", value: function() {
    var e3 = this.dropdownRef.current;
    if (e3) {
      var t3 = e3.children ? Array.from(e3.children) : null, r2 = t3 ? t3.find(function(e4) {
        return e4.ariaSelected;
      }) : null;
      e3.scrollTop = r2 ? r2.offsetTop + (r2.clientHeight - e3.clientHeight) / 2 : (e3.scrollHeight - e3.clientHeight) / 2;
    }
  } }, { key: "render", value: function() {
    var t3 = r({ "react-datepicker__year-dropdown": true, "react-datepicker__year-dropdown--scrollable": this.props.scrollableYearDropdown });
    return e$1.createElement("div", { className: t3, ref: this.dropdownRef }, this.renderOptions());
  } }]), a4;
}()), _t = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2() {
    var t4;
    he(this, n2);
    for (var o2 = arguments.length, a4 = new Array(o2), s4 = 0; s4 < o2; s4++)
      a4[s4] = arguments[s4];
    return ye(we(t4 = r2.call.apply(r2, [this].concat(a4))), "state", { dropdownVisible: false }), ye(we(t4), "renderSelectOptions", function() {
      for (var r3 = t4.props.minDate ? getYear(t4.props.minDate) : 1900, n3 = t4.props.maxDate ? getYear(t4.props.maxDate) : 2100, o3 = [], a5 = r3; a5 <= n3; a5++)
        o3.push(e$1.createElement("option", { key: a5, value: a5 }, a5));
      return o3;
    }), ye(we(t4), "onSelectChange", function(e3) {
      t4.onChange(e3.target.value);
    }), ye(we(t4), "renderSelectMode", function() {
      return e$1.createElement("select", { value: t4.props.year, className: "react-datepicker__year-select", onChange: t4.onSelectChange }, t4.renderSelectOptions());
    }), ye(we(t4), "renderReadView", function(r3) {
      return e$1.createElement("div", { key: "read", style: { visibility: r3 ? "visible" : "hidden" }, className: "react-datepicker__year-read-view", onClick: function(e3) {
        return t4.toggleDropdown(e3);
      } }, e$1.createElement("span", { className: "react-datepicker__year-read-view--down-arrow" }), e$1.createElement("span", { className: "react-datepicker__year-read-view--selected-year" }, t4.props.year));
    }), ye(we(t4), "renderDropdown", function() {
      return e$1.createElement(Ct, { key: "dropdown", year: t4.props.year, onChange: t4.onChange, onCancel: t4.toggleDropdown, minDate: t4.props.minDate, maxDate: t4.props.maxDate, scrollableYearDropdown: t4.props.scrollableYearDropdown, yearDropdownItemNumber: t4.props.yearDropdownItemNumber });
    }), ye(we(t4), "renderScrollMode", function() {
      var e3 = t4.state.dropdownVisible, r3 = [t4.renderReadView(!e3)];
      return e3 && r3.unshift(t4.renderDropdown()), r3;
    }), ye(we(t4), "onChange", function(e3) {
      t4.toggleDropdown(), e3 !== t4.props.year && t4.props.onChange(e3);
    }), ye(we(t4), "toggleDropdown", function(e3) {
      t4.setState({ dropdownVisible: !t4.state.dropdownVisible }, function() {
        t4.props.adjustDateOnChange && t4.handleYearChange(t4.props.date, e3);
      });
    }), ye(we(t4), "handleYearChange", function(e3, r3) {
      t4.onSelect(e3, r3), t4.setOpen();
    }), ye(we(t4), "onSelect", function(e3, r3) {
      t4.props.onSelect && t4.props.onSelect(e3, r3);
    }), ye(we(t4), "setOpen", function() {
      t4.props.setOpen && t4.props.setOpen(true);
    }), t4;
  }
  return fe(n2, [{ key: "render", value: function() {
    var t4;
    switch (this.props.dropdownMode) {
      case "scroll":
        t4 = this.renderScrollMode();
        break;
      case "select":
        t4 = this.renderSelectMode();
    }
    return e$1.createElement("div", { className: "react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--".concat(this.props.dropdownMode) }, t4);
  } }]), n2;
}(), Mt = onClickOutsideHOC(function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2() {
    var t4;
    he(this, n2);
    for (var o2 = arguments.length, a4 = new Array(o2), s4 = 0; s4 < o2; s4++)
      a4[s4] = arguments[s4];
    return ye(we(t4 = r2.call.apply(r2, [this].concat(a4))), "isSelectedMonth", function(e3) {
      return t4.props.month === e3;
    }), ye(we(t4), "renderOptions", function() {
      return t4.props.monthNames.map(function(r3, n3) {
        return e$1.createElement("div", { className: t4.isSelectedMonth(n3) ? "react-datepicker__month-option react-datepicker__month-option--selected_month" : "react-datepicker__month-option", key: r3, onClick: t4.onChange.bind(we(t4), n3), "aria-selected": t4.isSelectedMonth(n3) ? "true" : void 0 }, t4.isSelectedMonth(n3) ? e$1.createElement("span", { className: "react-datepicker__month-option--selected" }, "✓") : "", r3);
      });
    }), ye(we(t4), "onChange", function(e3) {
      return t4.props.onChange(e3);
    }), ye(we(t4), "handleClickOutside", function() {
      return t4.props.onCancel();
    }), t4;
  }
  return fe(n2, [{ key: "render", value: function() {
    return e$1.createElement("div", { className: "react-datepicker__month-dropdown" }, this.renderOptions());
  } }]), n2;
}()), Pt = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2() {
    var t4;
    he(this, n2);
    for (var o2 = arguments.length, a4 = new Array(o2), s4 = 0; s4 < o2; s4++)
      a4[s4] = arguments[s4];
    return ye(we(t4 = r2.call.apply(r2, [this].concat(a4))), "state", { dropdownVisible: false }), ye(we(t4), "renderSelectOptions", function(t5) {
      return t5.map(function(t6, r3) {
        return e$1.createElement("option", { key: r3, value: r3 }, t6);
      });
    }), ye(we(t4), "renderSelectMode", function(r3) {
      return e$1.createElement("select", { value: t4.props.month, className: "react-datepicker__month-select", onChange: function(e3) {
        return t4.onChange(e3.target.value);
      } }, t4.renderSelectOptions(r3));
    }), ye(we(t4), "renderReadView", function(r3, n3) {
      return e$1.createElement("div", { key: "read", style: { visibility: r3 ? "visible" : "hidden" }, className: "react-datepicker__month-read-view", onClick: t4.toggleDropdown }, e$1.createElement("span", { className: "react-datepicker__month-read-view--down-arrow" }), e$1.createElement("span", { className: "react-datepicker__month-read-view--selected-month" }, n3[t4.props.month]));
    }), ye(we(t4), "renderDropdown", function(r3) {
      return e$1.createElement(Mt, { key: "dropdown", month: t4.props.month, monthNames: r3, onChange: t4.onChange, onCancel: t4.toggleDropdown });
    }), ye(we(t4), "renderScrollMode", function(e3) {
      var r3 = t4.state.dropdownVisible, n3 = [t4.renderReadView(!r3, e3)];
      return r3 && n3.unshift(t4.renderDropdown(e3)), n3;
    }), ye(we(t4), "onChange", function(e3) {
      t4.toggleDropdown(), e3 !== t4.props.month && t4.props.onChange(e3);
    }), ye(we(t4), "toggleDropdown", function() {
      return t4.setState({ dropdownVisible: !t4.state.dropdownVisible });
    }), t4;
  }
  return fe(n2, [{ key: "render", value: function() {
    var t4, r3 = this, n3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown ? function(e3) {
      return Xe(e3, r3.props.locale);
    } : function(e3) {
      return Je(e3, r3.props.locale);
    });
    switch (this.props.dropdownMode) {
      case "scroll":
        t4 = this.renderScrollMode(n3);
        break;
      case "select":
        t4 = this.renderSelectMode(n3);
    }
    return e$1.createElement("div", { className: "react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--".concat(this.props.dropdownMode) }, t4);
  } }]), n2;
}();
function Et(e3, t3) {
  for (var r2 = [], n2 = Fe(e3), o2 = Fe(t3); !isAfter(n2, o2); )
    r2.push(Ye(n2)), n2 = addMonths(n2, 1);
  return r2;
}
var Nt = onClickOutsideHOC(function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2(t4) {
    var r2;
    return he(this, o2), ye(we(r2 = n2.call(this, t4)), "renderOptions", function() {
      return r2.state.monthYearsList.map(function(t5) {
        var n3 = getTime(t5), o3 = Be(r2.props.date, t5) && Qe(r2.props.date, t5);
        return e$1.createElement("div", { className: o3 ? "react-datepicker__month-year-option--selected_month-year" : "react-datepicker__month-year-option", key: n3, onClick: r2.onChange.bind(we(r2), n3), "aria-selected": o3 ? "true" : void 0 }, o3 ? e$1.createElement("span", { className: "react-datepicker__month-year-option--selected" }, "✓") : "", Ie(t5, r2.props.dateFormat, r2.props.locale));
      });
    }), ye(we(r2), "onChange", function(e3) {
      return r2.props.onChange(e3);
    }), ye(we(r2), "handleClickOutside", function() {
      r2.props.onCancel();
    }), r2.state = { monthYearsList: Et(r2.props.minDate, r2.props.maxDate) }, r2;
  }
  return fe(o2, [{ key: "render", value: function() {
    var t4 = r({ "react-datepicker__month-year-dropdown": true, "react-datepicker__month-year-dropdown--scrollable": this.props.scrollableMonthYearDropdown });
    return e$1.createElement("div", { className: t4 }, this.renderOptions());
  } }]), o2;
}()), xt = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2() {
    var t4;
    he(this, n2);
    for (var o2 = arguments.length, a4 = new Array(o2), s4 = 0; s4 < o2; s4++)
      a4[s4] = arguments[s4];
    return ye(we(t4 = r2.call.apply(r2, [this].concat(a4))), "state", { dropdownVisible: false }), ye(we(t4), "renderSelectOptions", function() {
      for (var r3 = Fe(t4.props.minDate), n3 = Fe(t4.props.maxDate), o3 = []; !isAfter(r3, n3); ) {
        var a5 = getTime(r3);
        o3.push(e$1.createElement("option", { key: a5, value: a5 }, Ie(r3, t4.props.dateFormat, t4.props.locale))), r3 = addMonths(r3, 1);
      }
      return o3;
    }), ye(we(t4), "onSelectChange", function(e3) {
      t4.onChange(e3.target.value);
    }), ye(we(t4), "renderSelectMode", function() {
      return e$1.createElement("select", { value: getTime(Fe(t4.props.date)), className: "react-datepicker__month-year-select", onChange: t4.onSelectChange }, t4.renderSelectOptions());
    }), ye(we(t4), "renderReadView", function(r3) {
      var n3 = Ie(t4.props.date, t4.props.dateFormat, t4.props.locale);
      return e$1.createElement("div", { key: "read", style: { visibility: r3 ? "visible" : "hidden" }, className: "react-datepicker__month-year-read-view", onClick: function(e3) {
        return t4.toggleDropdown(e3);
      } }, e$1.createElement("span", { className: "react-datepicker__month-year-read-view--down-arrow" }), e$1.createElement("span", { className: "react-datepicker__month-year-read-view--selected-month-year" }, n3));
    }), ye(we(t4), "renderDropdown", function() {
      return e$1.createElement(Nt, { key: "dropdown", date: t4.props.date, dateFormat: t4.props.dateFormat, onChange: t4.onChange, onCancel: t4.toggleDropdown, minDate: t4.props.minDate, maxDate: t4.props.maxDate, scrollableMonthYearDropdown: t4.props.scrollableMonthYearDropdown, locale: t4.props.locale });
    }), ye(we(t4), "renderScrollMode", function() {
      var e3 = t4.state.dropdownVisible, r3 = [t4.renderReadView(!e3)];
      return e3 && r3.unshift(t4.renderDropdown()), r3;
    }), ye(we(t4), "onChange", function(e3) {
      t4.toggleDropdown();
      var r3 = Ye(parseInt(e3));
      Be(t4.props.date, r3) && Qe(t4.props.date, r3) || t4.props.onChange(r3);
    }), ye(we(t4), "toggleDropdown", function() {
      return t4.setState({ dropdownVisible: !t4.state.dropdownVisible });
    }), t4;
  }
  return fe(n2, [{ key: "render", value: function() {
    var t4;
    switch (this.props.dropdownMode) {
      case "scroll":
        t4 = this.renderScrollMode();
        break;
      case "select":
        t4 = this.renderSelectMode();
    }
    return e$1.createElement("div", { className: "react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--".concat(this.props.dropdownMode) }, t4);
  } }]), n2;
}(), Yt = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2() {
    var t4;
    he(this, o2);
    for (var a4 = arguments.length, s4 = new Array(a4), i2 = 0; i2 < a4; i2++)
      s4[i2] = arguments[i2];
    return ye(we(t4 = n2.call.apply(n2, [this].concat(s4))), "dayEl", e$1.createRef()), ye(we(t4), "handleClick", function(e3) {
      !t4.isDisabled() && t4.props.onClick && t4.props.onClick(e3);
    }), ye(we(t4), "handleMouseEnter", function(e3) {
      !t4.isDisabled() && t4.props.onMouseEnter && t4.props.onMouseEnter(e3);
    }), ye(we(t4), "handleOnKeyDown", function(e3) {
      " " === e3.key && (e3.preventDefault(), e3.key = "Enter"), t4.props.handleOnKeyDown(e3);
    }), ye(we(t4), "isSameDay", function(e3) {
      return je(t4.props.day, e3);
    }), ye(we(t4), "isKeyboardSelected", function() {
      return !t4.props.disabledKeyboardNavigation && !(t4.isSameDay(t4.props.selected) || t4.isSameWeek(t4.props.selected)) && (t4.isSameDay(t4.props.preSelection) || t4.isSameWeek(t4.props.preSelection));
    }), ye(we(t4), "isDisabled", function() {
      return Ze(t4.props.day, t4.props);
    }), ye(we(t4), "isExcluded", function() {
      return et(t4.props.day, t4.props);
    }), ye(we(t4), "isStartOfWeek", function() {
      return je(t4.props.day, Le(t4.props.day, t4.props.locale, t4.props.calendarStartDay));
    }), ye(we(t4), "isSameWeek", function(e3) {
      return t4.props.showWeekPicker && je(e3, Le(t4.props.day, t4.props.locale, t4.props.calendarStartDay));
    }), ye(we(t4), "getHighLightedClass", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.highlightDates;
      if (!n3)
        return false;
      var o3 = Ie(r2, "MM.dd.yyyy");
      return n3.get(o3);
    }), ye(we(t4), "getHolidaysClass", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.holidays;
      if (!n3)
        return false;
      var o3 = Ie(r2, "MM.dd.yyyy");
      return n3.has(o3) ? [n3.get(o3).className] : void 0;
    }), ye(we(t4), "isInRange", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.startDate, o3 = e3.endDate;
      return !(!n3 || !o3) && qe(r2, n3, o3);
    }), ye(we(t4), "isInSelectingRange", function() {
      var e3, r2 = t4.props, n3 = r2.day, o3 = r2.selectsStart, a5 = r2.selectsEnd, s5 = r2.selectsRange, i3 = r2.selectsDisabledDaysInRange, p2 = r2.startDate, c3 = r2.endDate, l2 = null !== (e3 = t4.props.selectingDate) && void 0 !== e3 ? e3 : t4.props.preSelection;
      return !(!(o3 || a5 || s5) || !l2 || !i3 && t4.isDisabled()) && (o3 && c3 && (isBefore(l2, c3) || Ve(l2, c3)) ? qe(n3, l2, c3) : (a5 && p2 && (isAfter(l2, p2) || Ve(l2, p2)) || !(!s5 || !p2 || c3 || !isAfter(l2, p2) && !Ve(l2, p2))) && qe(n3, p2, l2));
    }), ye(we(t4), "isSelectingRangeStart", function() {
      var e3;
      if (!t4.isInSelectingRange())
        return false;
      var r2 = t4.props, n3 = r2.day, o3 = r2.startDate, a5 = r2.selectsStart, s5 = null !== (e3 = t4.props.selectingDate) && void 0 !== e3 ? e3 : t4.props.preSelection;
      return je(n3, a5 ? s5 : o3);
    }), ye(we(t4), "isSelectingRangeEnd", function() {
      var e3;
      if (!t4.isInSelectingRange())
        return false;
      var r2 = t4.props, n3 = r2.day, o3 = r2.endDate, a5 = r2.selectsEnd, s5 = r2.selectsRange, i3 = null !== (e3 = t4.props.selectingDate) && void 0 !== e3 ? e3 : t4.props.preSelection;
      return je(n3, a5 || s5 ? i3 : o3);
    }), ye(we(t4), "isRangeStart", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.startDate, o3 = e3.endDate;
      return !(!n3 || !o3) && je(n3, r2);
    }), ye(we(t4), "isRangeEnd", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.startDate, o3 = e3.endDate;
      return !(!n3 || !o3) && je(o3, r2);
    }), ye(we(t4), "isWeekend", function() {
      var e3 = getDay(t4.props.day);
      return 0 === e3 || 6 === e3;
    }), ye(we(t4), "isAfterMonth", function() {
      return void 0 !== t4.props.month && (t4.props.month + 1) % 12 === getMonth(t4.props.day);
    }), ye(we(t4), "isBeforeMonth", function() {
      return void 0 !== t4.props.month && (getMonth(t4.props.day) + 1) % 12 === t4.props.month;
    }), ye(we(t4), "isCurrentDay", function() {
      return t4.isSameDay(Ye());
    }), ye(we(t4), "isSelected", function() {
      return t4.isSameDay(t4.props.selected) || t4.isSameWeek(t4.props.selected);
    }), ye(we(t4), "getClassNames", function(e3) {
      var n3, o3 = t4.props.dayClassName ? t4.props.dayClassName(e3) : void 0;
      return r("react-datepicker__day", o3, "react-datepicker__day--" + Ie(t4.props.day, "ddd", n3), { "react-datepicker__day--disabled": t4.isDisabled(), "react-datepicker__day--excluded": t4.isExcluded(), "react-datepicker__day--selected": t4.isSelected(), "react-datepicker__day--keyboard-selected": t4.isKeyboardSelected(), "react-datepicker__day--range-start": t4.isRangeStart(), "react-datepicker__day--range-end": t4.isRangeEnd(), "react-datepicker__day--in-range": t4.isInRange(), "react-datepicker__day--in-selecting-range": t4.isInSelectingRange(), "react-datepicker__day--selecting-range-start": t4.isSelectingRangeStart(), "react-datepicker__day--selecting-range-end": t4.isSelectingRangeEnd(), "react-datepicker__day--today": t4.isCurrentDay(), "react-datepicker__day--weekend": t4.isWeekend(), "react-datepicker__day--outside-month": t4.isAfterMonth() || t4.isBeforeMonth() }, t4.getHighLightedClass("react-datepicker__day--highlighted"), t4.getHolidaysClass());
    }), ye(we(t4), "getAriaLabel", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.ariaLabelPrefixWhenEnabled, o3 = void 0 === n3 ? "Choose" : n3, a5 = e3.ariaLabelPrefixWhenDisabled, s5 = void 0 === a5 ? "Not available" : a5, i3 = t4.isDisabled() || t4.isExcluded() ? s5 : o3;
      return "".concat(i3, " ").concat(Ie(r2, "PPPP", t4.props.locale));
    }), ye(we(t4), "getTitle", function() {
      var e3 = t4.props, r2 = e3.day, n3 = e3.holidays, o3 = void 0 === n3 ? /* @__PURE__ */ new Map() : n3, a5 = Ie(r2, "MM.dd.yyyy");
      return o3.has(a5) && o3.get(a5).holidayNames.length > 0 ? o3.get(a5).holidayNames.join(", ") : "";
    }), ye(we(t4), "getTabIndex", function(e3, r2) {
      var n3 = e3 || t4.props.selected, o3 = r2 || t4.props.preSelection;
      return (!t4.props.showWeekPicker || !t4.props.showWeekNumber && t4.isStartOfWeek()) && (t4.isKeyboardSelected() || t4.isSameDay(n3) && je(o3, n3)) ? 0 : -1;
    }), ye(we(t4), "handleFocusDay", function() {
      var e3, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n3 = false;
      0 === t4.getTabIndex() && !r2.isInputFocused && t4.isSameDay(t4.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (n3 = true), t4.props.inline && !t4.props.shouldFocusDayInline && (n3 = false), t4.props.containerRef && t4.props.containerRef.current && t4.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains("react-datepicker__day") && (n3 = true), t4.props.monthShowsDuplicateDaysEnd && t4.isAfterMonth() && (n3 = false), t4.props.monthShowsDuplicateDaysStart && t4.isBeforeMonth() && (n3 = false)), n3 && (null === (e3 = t4.dayEl.current) || void 0 === e3 || e3.focus({ preventScroll: true }));
    }), ye(we(t4), "renderDayContents", function() {
      return t4.props.monthShowsDuplicateDaysEnd && t4.isAfterMonth() || t4.props.monthShowsDuplicateDaysStart && t4.isBeforeMonth() ? null : t4.props.renderDayContents ? t4.props.renderDayContents(getDate(t4.props.day), t4.props.day) : getDate(t4.props.day);
    }), ye(we(t4), "render", function() {
      return e$1.createElement("div", { ref: t4.dayEl, className: t4.getClassNames(t4.props.day), onKeyDown: t4.handleOnKeyDown, onClick: t4.handleClick, onMouseEnter: t4.handleMouseEnter, tabIndex: t4.getTabIndex(), "aria-label": t4.getAriaLabel(), role: "option", title: t4.getTitle(), "aria-disabled": t4.isDisabled(), "aria-current": t4.isCurrentDay() ? "date" : void 0, "aria-selected": t4.isSelected() || t4.isInRange() }, t4.renderDayContents(), "" !== t4.getTitle() && e$1.createElement("span", { className: "holiday-overlay" }, t4.getTitle()));
    }), t4;
  }
  return fe(o2, [{ key: "componentDidMount", value: function() {
    this.handleFocusDay();
  } }, { key: "componentDidUpdate", value: function(e3) {
    this.handleFocusDay(e3);
  } }]), o2;
}(), Tt = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2() {
    var t4;
    he(this, o2);
    for (var r2 = arguments.length, a4 = new Array(r2), s4 = 0; s4 < r2; s4++)
      a4[s4] = arguments[s4];
    return ye(we(t4 = n2.call.apply(n2, [this].concat(a4))), "weekNumberEl", e$1.createRef()), ye(we(t4), "handleClick", function(e3) {
      t4.props.onClick && t4.props.onClick(e3);
    }), ye(we(t4), "handleOnKeyDown", function(e3) {
      " " === e3.key && (e3.preventDefault(), e3.key = "Enter"), t4.props.handleOnKeyDown(e3);
    }), ye(we(t4), "isKeyboardSelected", function() {
      return !t4.props.disabledKeyboardNavigation && !je(t4.props.date, t4.props.selected) && je(t4.props.date, t4.props.preSelection);
    }), ye(we(t4), "getTabIndex", function() {
      return t4.props.showWeekPicker && t4.props.showWeekNumber && (t4.isKeyboardSelected() || je(t4.props.date, t4.props.selected) && je(t4.props.preSelection, t4.props.selected)) ? 0 : -1;
    }), ye(we(t4), "handleFocusWeekNumber", function() {
      var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = false;
      0 === t4.getTabIndex() && !e3.isInputFocused && je(t4.props.date, t4.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (r3 = true), t4.props.inline && !t4.props.shouldFocusDayInline && (r3 = false), t4.props.containerRef && t4.props.containerRef.current && t4.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains("react-datepicker__week-number") && (r3 = true)), r3 && t4.weekNumberEl.current && t4.weekNumberEl.current.focus({ preventScroll: true });
    }), t4;
  }
  return fe(o2, [{ key: "componentDidMount", value: function() {
    this.handleFocusWeekNumber();
  } }, { key: "componentDidUpdate", value: function(e3) {
    this.handleFocusWeekNumber(e3);
  } }, { key: "render", value: function() {
    var t4 = this.props, n3 = t4.weekNumber, o3 = t4.ariaLabelPrefix, a4 = void 0 === o3 ? "week " : o3, s4 = { "react-datepicker__week-number": true, "react-datepicker__week-number--clickable": !!t4.onClick, "react-datepicker__week-number--selected": je(this.props.date, this.props.selected), "react-datepicker__week-number--keyboard-selected": this.isKeyboardSelected() };
    return e$1.createElement("div", { ref: this.weekNumberEl, className: r(s4), "aria-label": "".concat(a4, " ").concat(this.props.weekNumber), onClick: this.handleClick, onKeyDown: this.handleOnKeyDown, tabIndex: this.getTabIndex() }, n3);
  } }], [{ key: "defaultProps", get: function() {
    return { ariaLabelPrefix: "week " };
  } }]), o2;
}(), It = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2() {
    var t4;
    he(this, o2);
    for (var r2 = arguments.length, a4 = new Array(r2), s4 = 0; s4 < r2; s4++)
      a4[s4] = arguments[s4];
    return ye(we(t4 = n2.call.apply(n2, [this].concat(a4))), "handleDayClick", function(e3, r3) {
      t4.props.onDayClick && t4.props.onDayClick(e3, r3);
    }), ye(we(t4), "handleDayMouseEnter", function(e3) {
      t4.props.onDayMouseEnter && t4.props.onDayMouseEnter(e3);
    }), ye(we(t4), "handleWeekClick", function(e3, r3, n3) {
      if ("function" == typeof t4.props.onWeekSelect && t4.props.onWeekSelect(e3, r3, n3), t4.props.showWeekPicker) {
        var o3 = Le(e3, t4.props.locale, t4.props.calendarStartDay);
        t4.handleDayClick(o3, n3);
      }
      t4.props.shouldCloseOnSelect && t4.props.setOpen(false);
    }), ye(we(t4), "formatWeekNumber", function(e3) {
      return t4.props.formatWeekNumber ? t4.props.formatWeekNumber(e3) : function(e4, t5) {
        var r3 = t5 && Ge(t5) || $e() && Ge($e());
        return getISOWeek(e4, r3 ? { locale: r3 } : null);
      }(e3);
    }), ye(we(t4), "renderDays", function() {
      var r3 = Le(t4.props.day, t4.props.locale, t4.props.calendarStartDay), n3 = [], o3 = t4.formatWeekNumber(r3);
      if (t4.props.showWeekNumber) {
        var a5 = t4.props.onWeekSelect || t4.props.showWeekPicker ? t4.handleWeekClick.bind(we(t4), r3, o3) : void 0;
        n3.push(e$1.createElement(Tt, { key: "W", weekNumber: o3, date: r3, onClick: a5, selected: t4.props.selected, preSelection: t4.props.preSelection, ariaLabelPrefix: t4.props.ariaLabelPrefix, showWeekPicker: t4.props.showWeekPicker, showWeekNumber: t4.props.showWeekNumber, disabledKeyboardNavigation: t4.props.disabledKeyboardNavigation, handleOnKeyDown: t4.props.handleOnKeyDown, isInputFocused: t4.props.isInputFocused, containerRef: t4.props.containerRef }));
      }
      return n3.concat([0, 1, 2, 3, 4, 5, 6].map(function(n4) {
        var o4 = addDays(r3, n4);
        return e$1.createElement(Yt, { ariaLabelPrefixWhenEnabled: t4.props.chooseDayAriaLabelPrefix, ariaLabelPrefixWhenDisabled: t4.props.disabledDayAriaLabelPrefix, key: o4.valueOf(), day: o4, month: t4.props.month, onClick: t4.handleDayClick.bind(we(t4), o4), onMouseEnter: t4.handleDayMouseEnter.bind(we(t4), o4), minDate: t4.props.minDate, maxDate: t4.props.maxDate, excludeDates: t4.props.excludeDates, excludeDateIntervals: t4.props.excludeDateIntervals, includeDates: t4.props.includeDates, includeDateIntervals: t4.props.includeDateIntervals, highlightDates: t4.props.highlightDates, holidays: t4.props.holidays, selectingDate: t4.props.selectingDate, filterDate: t4.props.filterDate, preSelection: t4.props.preSelection, selected: t4.props.selected, selectsStart: t4.props.selectsStart, selectsEnd: t4.props.selectsEnd, selectsRange: t4.props.selectsRange, showWeekPicker: t4.props.showWeekPicker, showWeekNumber: t4.props.showWeekNumber, selectsDisabledDaysInRange: t4.props.selectsDisabledDaysInRange, startDate: t4.props.startDate, endDate: t4.props.endDate, dayClassName: t4.props.dayClassName, renderDayContents: t4.props.renderDayContents, disabledKeyboardNavigation: t4.props.disabledKeyboardNavigation, handleOnKeyDown: t4.props.handleOnKeyDown, isInputFocused: t4.props.isInputFocused, containerRef: t4.props.containerRef, inline: t4.props.inline, shouldFocusDayInline: t4.props.shouldFocusDayInline, monthShowsDuplicateDaysEnd: t4.props.monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: t4.props.monthShowsDuplicateDaysStart, locale: t4.props.locale });
      }));
    }), ye(we(t4), "startOfWeek", function() {
      return Le(t4.props.day, t4.props.locale, t4.props.calendarStartDay);
    }), ye(we(t4), "isKeyboardSelected", function() {
      return !t4.props.disabledKeyboardNavigation && !je(t4.startOfWeek(), t4.props.selected) && je(t4.startOfWeek(), t4.props.preSelection);
    }), t4;
  }
  return fe(o2, [{ key: "render", value: function() {
    var t4 = { "react-datepicker__week": true, "react-datepicker__week--selected": je(this.startOfWeek(), this.props.selected), "react-datepicker__week--keyboard-selected": this.isKeyboardSelected() };
    return e$1.createElement("div", { className: r(t4) }, this.renderDays());
  } }], [{ key: "defaultProps", get: function() {
    return { shouldCloseOnSelect: true };
  } }]), o2;
}(), Ot = "two_columns", Rt = "three_columns", Lt = "four_columns", Ft = ye(ye(ye({}, Ot, { grid: [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]], verticalNavigationOffset: 2 }), Rt, { grid: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]], verticalNavigationOffset: 3 }), Lt, { grid: [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], verticalNavigationOffset: 4 });
function At(e3, t3) {
  return e3 ? Lt : t3 ? Ot : Rt;
}
var Wt = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2() {
    var t4;
    he(this, o2);
    for (var a4 = arguments.length, s4 = new Array(a4), i2 = 0; i2 < a4; i2++)
      s4[i2] = arguments[i2];
    return ye(we(t4 = n2.call.apply(n2, [this].concat(s4))), "MONTH_REFS", Se(Array(12)).map(function() {
      return e$1.createRef();
    })), ye(we(t4), "QUARTER_REFS", Se(Array(4)).map(function() {
      return e$1.createRef();
    })), ye(we(t4), "isDisabled", function(e3) {
      return Ze(e3, t4.props);
    }), ye(we(t4), "isExcluded", function(e3) {
      return et(e3, t4.props);
    }), ye(we(t4), "handleDayClick", function(e3, r2) {
      t4.props.onDayClick && t4.props.onDayClick(e3, r2, t4.props.orderInDisplay);
    }), ye(we(t4), "handleDayMouseEnter", function(e3) {
      t4.props.onDayMouseEnter && t4.props.onDayMouseEnter(e3);
    }), ye(we(t4), "handleMouseLeave", function() {
      t4.props.onMouseLeave && t4.props.onMouseLeave();
    }), ye(we(t4), "isRangeStartMonth", function(e3) {
      var r2 = t4.props, n3 = r2.day, o3 = r2.startDate, a5 = r2.endDate;
      return !(!o3 || !a5) && Qe(setMonth(n3, e3), o3);
    }), ye(we(t4), "isRangeStartQuarter", function(e3) {
      var r2 = t4.props, n3 = r2.day, o3 = r2.startDate, a5 = r2.endDate;
      return !(!o3 || !a5) && He(setQuarter(n3, e3), o3);
    }), ye(we(t4), "isRangeEndMonth", function(e3) {
      var r2 = t4.props, n3 = r2.day, o3 = r2.startDate, a5 = r2.endDate;
      return !(!o3 || !a5) && Qe(setMonth(n3, e3), a5);
    }), ye(we(t4), "isRangeEndQuarter", function(e3) {
      var r2 = t4.props, n3 = r2.day, o3 = r2.startDate, a5 = r2.endDate;
      return !(!o3 || !a5) && He(setQuarter(n3, e3), a5);
    }), ye(we(t4), "isInSelectingRangeMonth", function(e3) {
      var r2, n3 = t4.props, o3 = n3.day, a5 = n3.selectsStart, s5 = n3.selectsEnd, i3 = n3.selectsRange, p2 = n3.startDate, c3 = n3.endDate, l2 = null !== (r2 = t4.props.selectingDate) && void 0 !== r2 ? r2 : t4.props.preSelection;
      return !(!(a5 || s5 || i3) || !l2) && (a5 && c3 ? rt(l2, c3, e3, o3) : (s5 && p2 || !(!i3 || !p2 || c3)) && rt(p2, l2, e3, o3));
    }), ye(we(t4), "isSelectingMonthRangeStart", function(e3) {
      var r2;
      if (!t4.isInSelectingRangeMonth(e3))
        return false;
      var n3 = t4.props, o3 = n3.day, a5 = n3.startDate, s5 = n3.selectsStart, i3 = setMonth(o3, e3), p2 = null !== (r2 = t4.props.selectingDate) && void 0 !== r2 ? r2 : t4.props.preSelection;
      return Qe(i3, s5 ? p2 : a5);
    }), ye(we(t4), "isSelectingMonthRangeEnd", function(e3) {
      var r2;
      if (!t4.isInSelectingRangeMonth(e3))
        return false;
      var n3 = t4.props, o3 = n3.day, a5 = n3.endDate, s5 = n3.selectsEnd, i3 = n3.selectsRange, p2 = setMonth(o3, e3), c3 = null !== (r2 = t4.props.selectingDate) && void 0 !== r2 ? r2 : t4.props.preSelection;
      return Qe(p2, s5 || i3 ? c3 : a5);
    }), ye(we(t4), "isInSelectingRangeQuarter", function(e3) {
      var r2, n3 = t4.props, o3 = n3.day, a5 = n3.selectsStart, s5 = n3.selectsEnd, i3 = n3.selectsRange, p2 = n3.startDate, c3 = n3.endDate, l2 = null !== (r2 = t4.props.selectingDate) && void 0 !== r2 ? r2 : t4.props.preSelection;
      return !(!(a5 || s5 || i3) || !l2) && (a5 && c3 ? st(l2, c3, e3, o3) : (s5 && p2 || !(!i3 || !p2 || c3)) && st(p2, l2, e3, o3));
    }), ye(we(t4), "isWeekInMonth", function(e3) {
      var r2 = t4.props.day, n3 = addDays(e3, 6);
      return Qe(e3, r2) || Qe(n3, r2);
    }), ye(we(t4), "isCurrentMonth", function(e3, t5) {
      return getYear(e3) === getYear(Ye()) && t5 === getMonth(Ye());
    }), ye(we(t4), "isCurrentQuarter", function(e3, t5) {
      return getYear(e3) === getYear(Ye()) && t5 === getQuarter(Ye());
    }), ye(we(t4), "isSelectedMonth", function(e3, t5, r2) {
      return getMonth(r2) === t5 && getYear(e3) === getYear(r2);
    }), ye(we(t4), "isSelectedQuarter", function(e3, t5, r2) {
      return getQuarter(e3) === t5 && getYear(e3) === getYear(r2);
    }), ye(we(t4), "renderWeeks", function() {
      for (var r2 = [], n3 = t4.props.fixedHeight, o3 = 0, a5 = false, s5 = Le(Fe(t4.props.day), t4.props.locale, t4.props.calendarStartDay); r2.push(e$1.createElement(It, { ariaLabelPrefix: t4.props.weekAriaLabelPrefix, chooseDayAriaLabelPrefix: t4.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: t4.props.disabledDayAriaLabelPrefix, key: o3, day: s5, month: getMonth(t4.props.day), onDayClick: t4.handleDayClick, onDayMouseEnter: t4.handleDayMouseEnter, onWeekSelect: t4.props.onWeekSelect, formatWeekNumber: t4.props.formatWeekNumber, locale: t4.props.locale, minDate: t4.props.minDate, maxDate: t4.props.maxDate, excludeDates: t4.props.excludeDates, excludeDateIntervals: t4.props.excludeDateIntervals, includeDates: t4.props.includeDates, includeDateIntervals: t4.props.includeDateIntervals, inline: t4.props.inline, shouldFocusDayInline: t4.props.shouldFocusDayInline, highlightDates: t4.props.highlightDates, holidays: t4.props.holidays, selectingDate: t4.props.selectingDate, filterDate: t4.props.filterDate, preSelection: t4.props.preSelection, selected: t4.props.selected, selectsStart: t4.props.selectsStart, selectsEnd: t4.props.selectsEnd, selectsRange: t4.props.selectsRange, selectsDisabledDaysInRange: t4.props.selectsDisabledDaysInRange, showWeekNumber: t4.props.showWeekNumbers, showWeekPicker: t4.props.showWeekPicker, startDate: t4.props.startDate, endDate: t4.props.endDate, dayClassName: t4.props.dayClassName, setOpen: t4.props.setOpen, shouldCloseOnSelect: t4.props.shouldCloseOnSelect, disabledKeyboardNavigation: t4.props.disabledKeyboardNavigation, renderDayContents: t4.props.renderDayContents, handleOnKeyDown: t4.props.handleOnKeyDown, isInputFocused: t4.props.isInputFocused, containerRef: t4.props.containerRef, calendarStartDay: t4.props.calendarStartDay, monthShowsDuplicateDaysEnd: t4.props.monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: t4.props.monthShowsDuplicateDaysStart })), !a5; ) {
        o3++, s5 = addWeeks(s5, 1);
        var i3 = n3 && o3 >= 6, p2 = !n3 && !t4.isWeekInMonth(s5);
        if (i3 || p2) {
          if (!t4.props.peekNextMonth)
            break;
          a5 = true;
        }
      }
      return r2;
    }), ye(we(t4), "onMonthClick", function(e3, r2) {
      t4.handleDayClick(Fe(setMonth(t4.props.day, r2)), e3);
    }), ye(we(t4), "onMonthMouseEnter", function(e3) {
      t4.handleDayMouseEnter(Fe(setMonth(t4.props.day, e3)));
    }), ye(we(t4), "handleMonthNavigation", function(e3, r2) {
      t4.isDisabled(r2) || t4.isExcluded(r2) || (t4.props.setPreSelection(r2), t4.MONTH_REFS[e3].current && t4.MONTH_REFS[e3].current.focus());
    }), ye(we(t4), "onMonthKeyDown", function(e3, r2) {
      var n3 = t4.props, o3 = n3.selected, a5 = n3.preSelection, s5 = n3.disabledKeyboardNavigation, i3 = n3.showTwoColumnMonthYearPicker, p2 = n3.showFourColumnMonthYearPicker, c3 = n3.setPreSelection, d4 = e3.key;
      if ("Tab" !== d4 && e3.preventDefault(), !s5) {
        var u3 = At(p2, i3), h4 = Ft[u3].verticalNavigationOffset, m4 = Ft[u3].grid;
        switch (d4) {
          case "Enter":
            t4.onMonthClick(e3, r2), c3(o3);
            break;
          case "ArrowRight":
            t4.handleMonthNavigation(11 === r2 ? 0 : r2 + 1, addMonths(a5, 1));
            break;
          case "ArrowLeft":
            t4.handleMonthNavigation(0 === r2 ? 11 : r2 - 1, subMonths(a5, 1));
            break;
          case "ArrowUp":
            t4.handleMonthNavigation(m4[0].includes(r2) ? r2 + 12 - h4 : r2 - h4, subMonths(a5, h4));
            break;
          case "ArrowDown":
            t4.handleMonthNavigation(m4[m4.length - 1].includes(r2) ? r2 - 12 + h4 : r2 + h4, addMonths(a5, h4));
        }
      }
    }), ye(we(t4), "onQuarterClick", function(e3, r2) {
      t4.handleDayClick(We(setQuarter(t4.props.day, r2)), e3);
    }), ye(we(t4), "onQuarterMouseEnter", function(e3) {
      t4.handleDayMouseEnter(We(setQuarter(t4.props.day, e3)));
    }), ye(we(t4), "handleQuarterNavigation", function(e3, r2) {
      t4.isDisabled(r2) || t4.isExcluded(r2) || (t4.props.setPreSelection(r2), t4.QUARTER_REFS[e3 - 1].current && t4.QUARTER_REFS[e3 - 1].current.focus());
    }), ye(we(t4), "onQuarterKeyDown", function(e3, r2) {
      var n3 = e3.key;
      if (!t4.props.disabledKeyboardNavigation)
        switch (n3) {
          case "Enter":
            t4.onQuarterClick(e3, r2), t4.props.setPreSelection(t4.props.selected);
            break;
          case "ArrowRight":
            t4.handleQuarterNavigation(4 === r2 ? 1 : r2 + 1, addQuarters(t4.props.preSelection, 1));
            break;
          case "ArrowLeft":
            t4.handleQuarterNavigation(1 === r2 ? 4 : r2 - 1, subQuarters(t4.props.preSelection, 1));
        }
    }), ye(we(t4), "getMonthClassNames", function(e3) {
      var n3 = t4.props, o3 = n3.day, a5 = n3.startDate, s5 = n3.endDate, i3 = n3.selected, p2 = n3.minDate, c3 = n3.maxDate, l2 = n3.preSelection, d4 = n3.monthClassName, u3 = n3.excludeDates, h4 = n3.includeDates, m4 = d4 ? d4(setMonth(o3, e3)) : void 0, f2 = setMonth(o3, e3);
      return r("react-datepicker__month-text", "react-datepicker__month-".concat(e3), m4, { "react-datepicker__month-text--disabled": (p2 || c3 || u3 || h4) && tt(f2, t4.props), "react-datepicker__month-text--selected": t4.isSelectedMonth(o3, e3, i3), "react-datepicker__month-text--keyboard-selected": !t4.props.disabledKeyboardNavigation && getMonth(l2) === e3, "react-datepicker__month-text--in-selecting-range": t4.isInSelectingRangeMonth(e3), "react-datepicker__month-text--in-range": rt(a5, s5, e3, o3), "react-datepicker__month-text--range-start": t4.isRangeStartMonth(e3), "react-datepicker__month-text--range-end": t4.isRangeEndMonth(e3), "react-datepicker__month-text--selecting-range-start": t4.isSelectingMonthRangeStart(e3), "react-datepicker__month-text--selecting-range-end": t4.isSelectingMonthRangeEnd(e3), "react-datepicker__month-text--today": t4.isCurrentMonth(o3, e3) });
    }), ye(we(t4), "getTabIndex", function(e3) {
      var r2 = getMonth(t4.props.preSelection);
      return t4.props.disabledKeyboardNavigation || e3 !== r2 ? "-1" : "0";
    }), ye(we(t4), "getQuarterTabIndex", function(e3) {
      var r2 = getQuarter(t4.props.preSelection);
      return t4.props.disabledKeyboardNavigation || e3 !== r2 ? "-1" : "0";
    }), ye(we(t4), "getAriaLabel", function(e3) {
      var r2 = t4.props, n3 = r2.chooseDayAriaLabelPrefix, o3 = void 0 === n3 ? "Choose" : n3, a5 = r2.disabledDayAriaLabelPrefix, s5 = void 0 === a5 ? "Not available" : a5, i3 = r2.day, p2 = setMonth(i3, e3), c3 = t4.isDisabled(p2) || t4.isExcluded(p2) ? s5 : o3;
      return "".concat(c3, " ").concat(Ie(p2, "MMMM yyyy"));
    }), ye(we(t4), "getQuarterClassNames", function(e3) {
      var n3 = t4.props, o3 = n3.day, a5 = n3.startDate, s5 = n3.endDate, i3 = n3.selected, p2 = n3.minDate, c3 = n3.maxDate, l2 = n3.preSelection, d4 = n3.disabledKeyboardNavigation;
      return r("react-datepicker__quarter-text", "react-datepicker__quarter-".concat(e3), { "react-datepicker__quarter-text--disabled": (p2 || c3) && nt(setQuarter(o3, e3), t4.props), "react-datepicker__quarter-text--selected": t4.isSelectedQuarter(o3, e3, i3), "react-datepicker__quarter-text--keyboard-selected": !d4 && getQuarter(l2) === e3, "react-datepicker__quarter-text--in-selecting-range": t4.isInSelectingRangeQuarter(e3), "react-datepicker__quarter-text--in-range": st(a5, s5, e3, o3), "react-datepicker__quarter-text--range-start": t4.isRangeStartQuarter(e3), "react-datepicker__quarter-text--range-end": t4.isRangeEndQuarter(e3) });
    }), ye(we(t4), "getMonthContent", function(e3) {
      var r2 = t4.props, n3 = r2.showFullMonthYearPicker, o3 = r2.renderMonthContent, a5 = r2.locale, s5 = r2.day, i3 = Xe(e3, a5), p2 = Je(e3, a5);
      return o3 ? o3(e3, i3, p2, s5) : n3 ? p2 : i3;
    }), ye(we(t4), "getQuarterContent", function(e3) {
      var r2 = t4.props, n3 = r2.renderQuarterContent, o3 = function(e4, t5) {
        return Ie(setQuarter(Ye(), e4), "QQQ", t5);
      }(e3, r2.locale);
      return n3 ? n3(e3, o3) : o3;
    }), ye(we(t4), "renderMonths", function() {
      var r2 = t4.props, n3 = r2.showTwoColumnMonthYearPicker, o3 = r2.showFourColumnMonthYearPicker, a5 = r2.day, s5 = r2.selected;
      return Ft[At(o3, n3)].grid.map(function(r3, n4) {
        return e$1.createElement("div", { className: "react-datepicker__month-wrapper", key: n4 }, r3.map(function(r4, n5) {
          return e$1.createElement("div", { ref: t4.MONTH_REFS[r4], key: n5, onClick: function(e3) {
            t4.onMonthClick(e3, r4);
          }, onKeyDown: function(e3) {
            t4.onMonthKeyDown(e3, r4);
          }, onMouseEnter: function() {
            return t4.onMonthMouseEnter(r4);
          }, tabIndex: t4.getTabIndex(r4), className: t4.getMonthClassNames(r4), role: "option", "aria-label": t4.getAriaLabel(r4), "aria-current": t4.isCurrentMonth(a5, r4) ? "date" : void 0, "aria-selected": t4.isSelectedMonth(a5, r4, s5) }, t4.getMonthContent(r4));
        }));
      });
    }), ye(we(t4), "renderQuarters", function() {
      var r2 = t4.props, n3 = r2.day, o3 = r2.selected;
      return e$1.createElement("div", { className: "react-datepicker__quarter-wrapper" }, [1, 2, 3, 4].map(function(r3, a5) {
        return e$1.createElement("div", { key: a5, ref: t4.QUARTER_REFS[a5], role: "option", onClick: function(e3) {
          t4.onQuarterClick(e3, r3);
        }, onKeyDown: function(e3) {
          t4.onQuarterKeyDown(e3, r3);
        }, onMouseEnter: function() {
          return t4.onQuarterMouseEnter(r3);
        }, className: t4.getQuarterClassNames(r3), "aria-selected": t4.isSelectedQuarter(n3, r3, o3), tabIndex: t4.getQuarterTabIndex(r3), "aria-current": t4.isCurrentQuarter(n3, r3) ? "date" : void 0 }, t4.getQuarterContent(r3));
      }));
    }), ye(we(t4), "getClassNames", function() {
      var e3 = t4.props, n3 = e3.selectingDate, o3 = e3.selectsStart, a5 = e3.selectsEnd, s5 = e3.showMonthYearPicker, i3 = e3.showQuarterYearPicker, p2 = e3.showWeekPicker;
      return r("react-datepicker__month", { "react-datepicker__month--selecting-range": n3 && (o3 || a5) }, { "react-datepicker__monthPicker": s5 }, { "react-datepicker__quarterPicker": i3 }, { "react-datepicker__weekPicker": p2 });
    }), t4;
  }
  return fe(o2, [{ key: "render", value: function() {
    var t4 = this.props, r2 = t4.showMonthYearPicker, n3 = t4.showQuarterYearPicker, o3 = t4.day, a4 = t4.ariaLabelPrefix, s4 = void 0 === a4 ? "month " : a4;
    return e$1.createElement("div", { className: this.getClassNames(), onMouseLeave: this.handleMouseLeave, "aria-label": "".concat(s4, " ").concat(Ie(o3, "yyyy-MM")), role: "listbox" }, r2 ? this.renderMonths() : n3 ? this.renderQuarters() : this.renderWeeks());
  } }]), o2;
}(), Kt = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2() {
    var t4;
    he(this, n2);
    for (var o2 = arguments.length, a4 = new Array(o2), i2 = 0; i2 < o2; i2++)
      a4[i2] = arguments[i2];
    return ye(we(t4 = r2.call.apply(r2, [this].concat(a4))), "state", { height: null }), ye(we(t4), "scrollToTheSelectedTime", function() {
      requestAnimationFrame(function() {
        t4.list && (t4.list.scrollTop = t4.centerLi && n2.calcCenterPosition(t4.props.monthRef ? t4.props.monthRef.clientHeight - t4.header.clientHeight : t4.list.clientHeight, t4.centerLi));
      });
    }), ye(we(t4), "handleClick", function(e3) {
      (t4.props.minTime || t4.props.maxTime) && lt(e3, t4.props) || (t4.props.excludeTimes || t4.props.includeTimes || t4.props.filterTime) && ct(e3, t4.props) || t4.props.onChange(e3);
    }), ye(we(t4), "isSelectedTime", function(e3) {
      return t4.props.selected && (r3 = t4.props.selected, n3 = e3, bt(r3).getTime() === bt(n3).getTime());
      var r3, n3;
    }), ye(we(t4), "isDisabledTime", function(e3) {
      return (t4.props.minTime || t4.props.maxTime) && lt(e3, t4.props) || (t4.props.excludeTimes || t4.props.includeTimes || t4.props.filterTime) && ct(e3, t4.props);
    }), ye(we(t4), "liClasses", function(e3) {
      var r3 = ["react-datepicker__time-list-item", t4.props.timeClassName ? t4.props.timeClassName(e3) : void 0];
      return t4.isSelectedTime(e3) && r3.push("react-datepicker__time-list-item--selected"), t4.isDisabledTime(e3) && r3.push("react-datepicker__time-list-item--disabled"), t4.props.injectTimes && (60 * getHours(e3) + getMinutes(e3)) % t4.props.intervals != 0 && r3.push("react-datepicker__time-list-item--injected"), r3.join(" ");
    }), ye(we(t4), "handleOnKeyDown", function(e3, r3) {
      " " === e3.key && (e3.preventDefault(), e3.key = "Enter"), "ArrowUp" !== e3.key && "ArrowLeft" !== e3.key || !e3.target.previousSibling || (e3.preventDefault(), e3.target.previousSibling.focus()), "ArrowDown" !== e3.key && "ArrowRight" !== e3.key || !e3.target.nextSibling || (e3.preventDefault(), e3.target.nextSibling.focus()), "Enter" === e3.key && t4.handleClick(r3), t4.props.handleOnKeyDown(e3);
    }), ye(we(t4), "renderTimes", function() {
      for (var r3 = [], n3 = t4.props.format ? t4.props.format : "p", o3 = t4.props.intervals, a5 = t4.props.selected || t4.props.openToDate || Ye(), i3 = startOfDay(a5), p2 = t4.props.injectTimes && t4.props.injectTimes.sort(function(e3, t5) {
        return e3 - t5;
      }), c3 = 60 * function(e3) {
        var t5 = new Date(e3.getFullYear(), e3.getMonth(), e3.getDate()), r4 = new Date(e3.getFullYear(), e3.getMonth(), e3.getDate(), 24);
        return Math.round((+r4 - +t5) / 36e5);
      }(a5), l2 = c3 / o3, d4 = 0; d4 < l2; d4++) {
        var u3 = addMinutes(i3, d4 * o3);
        if (r3.push(u3), p2) {
          var h4 = gt(i3, u3, d4, o3, p2);
          r3 = r3.concat(h4);
        }
      }
      var m4 = r3.reduce(function(e3, t5) {
        return t5.getTime() <= a5.getTime() ? t5 : e3;
      }, r3[0]);
      return r3.map(function(r4, o4) {
        return e$1.createElement("li", { key: o4, onClick: t4.handleClick.bind(we(t4), r4), className: t4.liClasses(r4), ref: function(e3) {
          r4 === m4 && (t4.centerLi = e3);
        }, onKeyDown: function(e3) {
          t4.handleOnKeyDown(e3, r4);
        }, tabIndex: r4 === m4 ? 0 : -1, role: "option", "aria-selected": t4.isSelectedTime(r4) ? "true" : void 0, "aria-disabled": t4.isDisabledTime(r4) ? "true" : void 0 }, Ie(r4, n3, t4.props.locale));
      });
    }), t4;
  }
  return fe(n2, [{ key: "componentDidMount", value: function() {
    this.scrollToTheSelectedTime(), this.props.monthRef && this.header && this.setState({ height: this.props.monthRef.clientHeight - this.header.clientHeight });
  } }, { key: "render", value: function() {
    var t4 = this, r3 = this.state.height;
    return e$1.createElement("div", { className: "react-datepicker__time-container ".concat(this.props.todayButton ? "react-datepicker__time-container--with-today-button" : "") }, e$1.createElement("div", { className: "react-datepicker__header react-datepicker__header--time ".concat(this.props.showTimeSelectOnly ? "react-datepicker__header--time--only" : ""), ref: function(e3) {
      t4.header = e3;
    } }, e$1.createElement("div", { className: "react-datepicker-time__header" }, this.props.timeCaption)), e$1.createElement("div", { className: "react-datepicker__time" }, e$1.createElement("div", { className: "react-datepicker__time-box" }, e$1.createElement("ul", { className: "react-datepicker__time-list", ref: function(e3) {
      t4.list = e3;
    }, style: r3 ? { height: r3 } : {}, role: "listbox", "aria-label": this.props.timeCaption }, this.renderTimes()))));
  } }], [{ key: "defaultProps", get: function() {
    return { intervals: 30, onTimeChange: function() {
    }, todayButton: null, timeCaption: "Time" };
  } }]), n2;
}();
ye(Kt, "calcCenterPosition", function(e3, t3) {
  return t3.offsetTop - (e3 / 2 - t3.clientHeight / 2);
});
var Bt = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2(t4) {
    var a4;
    return he(this, o2), ye(we(a4 = n2.call(this, t4)), "YEAR_REFS", Se(Array(a4.props.yearItemNumber)).map(function() {
      return e$1.createRef();
    })), ye(we(a4), "isDisabled", function(e3) {
      return Ze(e3, a4.props);
    }), ye(we(a4), "isExcluded", function(e3) {
      return et(e3, a4.props);
    }), ye(we(a4), "selectingDate", function() {
      var e3;
      return null !== (e3 = a4.props.selectingDate) && void 0 !== e3 ? e3 : a4.props.preSelection;
    }), ye(we(a4), "updateFocusOnPaginate", function(e3) {
      var t5 = (function() {
        this.YEAR_REFS[e3].current.focus();
      }).bind(we(a4));
      window.requestAnimationFrame(t5);
    }), ye(we(a4), "handleYearClick", function(e3, t5) {
      a4.props.onDayClick && a4.props.onDayClick(e3, t5);
    }), ye(we(a4), "handleYearNavigation", function(e3, t5) {
      var r2 = a4.props, n3 = r2.date, o3 = r2.yearItemNumber, s4 = wt(n3, o3).startPeriod;
      a4.isDisabled(t5) || a4.isExcluded(t5) || (a4.props.setPreSelection(t5), e3 - s4 == -1 ? a4.updateFocusOnPaginate(o3 - 1) : e3 - s4 === o3 ? a4.updateFocusOnPaginate(0) : a4.YEAR_REFS[e3 - s4].current.focus());
    }), ye(we(a4), "isSameDay", function(e3, t5) {
      return je(e3, t5);
    }), ye(we(a4), "isCurrentYear", function(e3) {
      return e3 === getYear(Ye());
    }), ye(we(a4), "isRangeStart", function(e3) {
      return a4.props.startDate && a4.props.endDate && Be(setYear(Ye(), e3), a4.props.startDate);
    }), ye(we(a4), "isRangeEnd", function(e3) {
      return a4.props.startDate && a4.props.endDate && Be(setYear(Ye(), e3), a4.props.endDate);
    }), ye(we(a4), "isInRange", function(e3) {
      return ot(e3, a4.props.startDate, a4.props.endDate);
    }), ye(we(a4), "isInSelectingRange", function(e3) {
      var t5 = a4.props, r2 = t5.selectsStart, n3 = t5.selectsEnd, o3 = t5.selectsRange, s4 = t5.startDate, i2 = t5.endDate;
      return !(!(r2 || n3 || o3) || !a4.selectingDate()) && (r2 && i2 ? ot(e3, a4.selectingDate(), i2) : (n3 && s4 || !(!o3 || !s4 || i2)) && ot(e3, s4, a4.selectingDate()));
    }), ye(we(a4), "isSelectingRangeStart", function(e3) {
      if (!a4.isInSelectingRange(e3))
        return false;
      var t5 = a4.props, r2 = t5.startDate, n3 = t5.selectsStart, o3 = setYear(Ye(), e3);
      return Be(o3, n3 ? a4.selectingDate() : r2);
    }), ye(we(a4), "isSelectingRangeEnd", function(e3) {
      if (!a4.isInSelectingRange(e3))
        return false;
      var t5 = a4.props, r2 = t5.endDate, n3 = t5.selectsEnd, o3 = t5.selectsRange, s4 = setYear(Ye(), e3);
      return Be(s4, n3 || o3 ? a4.selectingDate() : r2);
    }), ye(we(a4), "isKeyboardSelected", function(e3) {
      var t5 = Ae(setYear(a4.props.date, e3));
      return !a4.props.disabledKeyboardNavigation && !a4.props.inline && !je(t5, Ae(a4.props.selected)) && je(t5, Ae(a4.props.preSelection));
    }), ye(we(a4), "onYearClick", function(e3, t5) {
      var r2 = a4.props.date;
      a4.handleYearClick(Ae(setYear(r2, t5)), e3);
    }), ye(we(a4), "onYearKeyDown", function(e3, t5) {
      var r2 = e3.key;
      if (!a4.props.disabledKeyboardNavigation)
        switch (r2) {
          case "Enter":
            a4.onYearClick(e3, t5), a4.props.setPreSelection(a4.props.selected);
            break;
          case "ArrowRight":
            a4.handleYearNavigation(t5 + 1, addYears(a4.props.preSelection, 1));
            break;
          case "ArrowLeft":
            a4.handleYearNavigation(t5 - 1, subYears(a4.props.preSelection, 1));
        }
    }), ye(we(a4), "getYearClassNames", function(e3) {
      var t5 = a4.props, n3 = t5.minDate, o3 = t5.maxDate, s4 = t5.selected, i2 = t5.excludeDates, p2 = t5.includeDates, c3 = t5.filterDate;
      return r("react-datepicker__year-text", { "react-datepicker__year-text--selected": e3 === getYear(s4), "react-datepicker__year-text--disabled": (n3 || o3 || i2 || p2 || c3) && at(e3, a4.props), "react-datepicker__year-text--keyboard-selected": a4.isKeyboardSelected(e3), "react-datepicker__year-text--range-start": a4.isRangeStart(e3), "react-datepicker__year-text--range-end": a4.isRangeEnd(e3), "react-datepicker__year-text--in-range": a4.isInRange(e3), "react-datepicker__year-text--in-selecting-range": a4.isInSelectingRange(e3), "react-datepicker__year-text--selecting-range-start": a4.isSelectingRangeStart(e3), "react-datepicker__year-text--selecting-range-end": a4.isSelectingRangeEnd(e3), "react-datepicker__year-text--today": a4.isCurrentYear(e3) });
    }), ye(we(a4), "getYearTabIndex", function(e3) {
      return a4.props.disabledKeyboardNavigation ? "-1" : e3 === getYear(a4.props.preSelection) ? "0" : "-1";
    }), ye(we(a4), "getYearContainerClassNames", function() {
      var e3 = a4.props, t5 = e3.selectingDate, n3 = e3.selectsStart, o3 = e3.selectsEnd, s4 = e3.selectsRange;
      return r("react-datepicker__year", { "react-datepicker__year--selecting-range": t5 && (n3 || o3 || s4) });
    }), ye(we(a4), "getYearContent", function(e3) {
      return a4.props.renderYearContent ? a4.props.renderYearContent(e3) : e3;
    }), a4;
  }
  return fe(o2, [{ key: "render", value: function() {
    for (var t4 = this, r2 = [], n3 = this.props, o3 = n3.date, a4 = n3.yearItemNumber, s4 = n3.onYearMouseEnter, i2 = n3.onYearMouseLeave, p2 = wt(o3, a4), c3 = p2.startPeriod, l2 = p2.endPeriod, d4 = function(n4) {
      r2.push(e$1.createElement("div", { ref: t4.YEAR_REFS[n4 - c3], onClick: function(e3) {
        t4.onYearClick(e3, n4);
      }, onKeyDown: function(e3) {
        t4.onYearKeyDown(e3, n4);
      }, tabIndex: t4.getYearTabIndex(n4), className: t4.getYearClassNames(n4), onMouseEnter: function(e3) {
        return s4(e3, n4);
      }, onMouseLeave: function(e3) {
        return i2(e3, n4);
      }, key: n4, "aria-current": t4.isCurrentYear(n4) ? "date" : void 0 }, t4.getYearContent(n4)));
    }, u3 = c3; u3 <= l2; u3++)
      d4(u3);
    return e$1.createElement("div", { className: this.getYearContainerClassNames() }, e$1.createElement("div", { className: "react-datepicker__year-wrapper", onMouseLeave: this.props.clearSelectingDate }, r2));
  } }]), o2;
}(), Qt = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2(t4) {
    var o2;
    return he(this, n2), ye(we(o2 = r2.call(this, t4)), "onTimeChange", function(e3) {
      o2.setState({ time: e3 });
      var t5 = o2.props.date, r3 = t5 instanceof Date && !isNaN(t5) ? t5 : /* @__PURE__ */ new Date();
      r3.setHours(e3.split(":")[0]), r3.setMinutes(e3.split(":")[1]), o2.props.onChange(r3);
    }), ye(we(o2), "renderTimeInput", function() {
      var t5 = o2.state.time, r3 = o2.props, n3 = r3.date, a4 = r3.timeString, s4 = r3.customTimeInput;
      return s4 ? e$1.cloneElement(s4, { date: n3, value: t5, onChange: o2.onTimeChange }) : e$1.createElement("input", { type: "time", className: "react-datepicker-time__input", placeholder: "Time", name: "time-input", required: true, value: t5, onChange: function(e3) {
        o2.onTimeChange(e3.target.value || a4);
      } });
    }), o2.state = { time: o2.props.timeString }, o2;
  }
  return fe(n2, [{ key: "render", value: function() {
    return e$1.createElement("div", { className: "react-datepicker__input-time-container" }, e$1.createElement("div", { className: "react-datepicker-time__caption" }, this.props.timeInputLabel), e$1.createElement("div", { className: "react-datepicker-time__input-container" }, e$1.createElement("div", { className: "react-datepicker-time__input" }, this.renderTimeInput())));
  } }], [{ key: "getDerivedStateFromProps", value: function(e3, t4) {
    return e3.timeString !== t4.time ? { time: e3.timeString } : null;
  } }]), n2;
}();
function Ht(t3) {
  var r2 = t3.className, n2 = t3.children, o2 = t3.showPopperArrow, a4 = t3.arrowProps, s4 = void 0 === a4 ? {} : a4;
  return e$1.createElement("div", { className: r2 }, o2 && e$1.createElement("div", ve({ className: "react-datepicker__triangle" }, s4)), n2);
}
var jt = ["react-datepicker__year-select", "react-datepicker__month-select", "react-datepicker__month-year-select"], Vt = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2(t4) {
    var a4;
    return he(this, o2), ye(we(a4 = n2.call(this, t4)), "handleClickOutside", function(e3) {
      a4.props.onClickOutside(e3);
    }), ye(we(a4), "setClickOutsideRef", function() {
      return a4.containerRef.current;
    }), ye(we(a4), "handleDropdownFocus", function(e3) {
      (function() {
        var e4 = ((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).className || "").split(/\s+/);
        return jt.some(function(t5) {
          return e4.indexOf(t5) >= 0;
        });
      })(e3.target) && a4.props.onDropdownFocus();
    }), ye(we(a4), "getDateInView", function() {
      var e3 = a4.props, t5 = e3.preSelection, r2 = e3.selected, n3 = e3.openToDate, o3 = ft(a4.props), s4 = yt(a4.props), i2 = Ye(), p2 = n3 || r2 || t5;
      return p2 || (o3 && isBefore(i2, o3) ? o3 : s4 && isAfter(i2, s4) ? s4 : i2);
    }), ye(we(a4), "increaseMonth", function() {
      a4.setState(function(e3) {
        var t5 = e3.date;
        return { date: addMonths(t5, 1) };
      }, function() {
        return a4.handleMonthChange(a4.state.date);
      });
    }), ye(we(a4), "decreaseMonth", function() {
      a4.setState(function(e3) {
        var t5 = e3.date;
        return { date: subMonths(t5, 1) };
      }, function() {
        return a4.handleMonthChange(a4.state.date);
      });
    }), ye(we(a4), "handleDayClick", function(e3, t5, r2) {
      a4.props.onSelect(e3, t5, r2), a4.props.setPreSelection && a4.props.setPreSelection(e3);
    }), ye(we(a4), "handleDayMouseEnter", function(e3) {
      a4.setState({ selectingDate: e3 }), a4.props.onDayMouseEnter && a4.props.onDayMouseEnter(e3);
    }), ye(we(a4), "handleMonthMouseLeave", function() {
      a4.setState({ selectingDate: null }), a4.props.onMonthMouseLeave && a4.props.onMonthMouseLeave();
    }), ye(we(a4), "handleYearMouseEnter", function(e3, t5) {
      a4.setState({ selectingDate: setYear(Ye(), t5) }), a4.props.onYearMouseEnter && a4.props.onYearMouseEnter(e3, t5);
    }), ye(we(a4), "handleYearMouseLeave", function(e3, t5) {
      a4.props.onYearMouseLeave && a4.props.onYearMouseLeave(e3, t5);
    }), ye(we(a4), "handleYearChange", function(e3) {
      a4.props.onYearChange && (a4.props.onYearChange(e3), a4.setState({ isRenderAriaLiveMessage: true })), a4.props.adjustDateOnChange && (a4.props.onSelect && a4.props.onSelect(e3), a4.props.setOpen && a4.props.setOpen(true)), a4.props.setPreSelection && a4.props.setPreSelection(e3);
    }), ye(we(a4), "handleMonthChange", function(e3) {
      a4.handleCustomMonthChange(e3), a4.props.adjustDateOnChange && (a4.props.onSelect && a4.props.onSelect(e3), a4.props.setOpen && a4.props.setOpen(true)), a4.props.setPreSelection && a4.props.setPreSelection(e3);
    }), ye(we(a4), "handleCustomMonthChange", function(e3) {
      a4.props.onMonthChange && (a4.props.onMonthChange(e3), a4.setState({ isRenderAriaLiveMessage: true }));
    }), ye(we(a4), "handleMonthYearChange", function(e3) {
      a4.handleYearChange(e3), a4.handleMonthChange(e3);
    }), ye(we(a4), "changeYear", function(e3) {
      a4.setState(function(t5) {
        var r2 = t5.date;
        return { date: setYear(r2, e3) };
      }, function() {
        return a4.handleYearChange(a4.state.date);
      });
    }), ye(we(a4), "changeMonth", function(e3) {
      a4.setState(function(t5) {
        var r2 = t5.date;
        return { date: setMonth(r2, e3) };
      }, function() {
        return a4.handleMonthChange(a4.state.date);
      });
    }), ye(we(a4), "changeMonthYear", function(e3) {
      a4.setState(function(t5) {
        var r2 = t5.date;
        return { date: setYear(setMonth(r2, getMonth(e3)), getYear(e3)) };
      }, function() {
        return a4.handleMonthYearChange(a4.state.date);
      });
    }), ye(we(a4), "header", function() {
      var t5 = Le(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a4.state.date, a4.props.locale, a4.props.calendarStartDay), n3 = [];
      return a4.props.showWeekNumbers && n3.push(e$1.createElement("div", { key: "W", className: "react-datepicker__day-name" }, a4.props.weekLabel || "#")), n3.concat([0, 1, 2, 3, 4, 5, 6].map(function(n4) {
        var o3 = addDays(t5, n4), s4 = a4.formatWeekday(o3, a4.props.locale), i2 = a4.props.weekDayClassName ? a4.props.weekDayClassName(o3) : void 0;
        return e$1.createElement("div", { key: n4, className: r("react-datepicker__day-name", i2) }, s4);
      }));
    }), ye(we(a4), "formatWeekday", function(e3, t5) {
      return a4.props.formatWeekDay ? function(e4, t6, r2) {
        return t6(Ie(e4, "EEEE", r2));
      }(e3, a4.props.formatWeekDay, t5) : a4.props.useWeekdaysShort ? function(e4, t6) {
        return Ie(e4, "EEE", t6);
      }(e3, t5) : function(e4, t6) {
        return Ie(e4, "EEEEEE", t6);
      }(e3, t5);
    }), ye(we(a4), "decreaseYear", function() {
      a4.setState(function(e3) {
        var t5 = e3.date;
        return { date: subYears(t5, a4.props.showYearPicker ? a4.props.yearItemNumber : 1) };
      }, function() {
        return a4.handleYearChange(a4.state.date);
      });
    }), ye(we(a4), "clearSelectingDate", function() {
      a4.setState({ selectingDate: null });
    }), ye(we(a4), "renderPreviousButton", function() {
      if (!a4.props.renderCustomHeader) {
        var t5;
        switch (true) {
          case a4.props.showMonthYearPicker:
            t5 = ht(a4.state.date, a4.props);
            break;
          case a4.props.showYearPicker:
            t5 = function(e3) {
              var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = t6.minDate, n4 = t6.yearItemNumber, o4 = void 0 === n4 ? Ne : n4, a5 = wt(Ae(subYears(e3, o4)), o4).endPeriod, s5 = r3 && getYear(r3);
              return s5 && s5 > a5 || false;
            }(a4.state.date, a4.props);
            break;
          default:
            t5 = dt(a4.state.date, a4.props);
        }
        if ((a4.props.forceShowMonthNavigation || a4.props.showDisabledMonthNavigation || !t5) && !a4.props.showTimeSelectOnly) {
          var r2 = ["react-datepicker__navigation", "react-datepicker__navigation--previous"], n3 = a4.decreaseMonth;
          (a4.props.showMonthYearPicker || a4.props.showQuarterYearPicker || a4.props.showYearPicker) && (n3 = a4.decreaseYear), t5 && a4.props.showDisabledMonthNavigation && (r2.push("react-datepicker__navigation--previous--disabled"), n3 = null);
          var o3 = a4.props.showMonthYearPicker || a4.props.showQuarterYearPicker || a4.props.showYearPicker, s4 = a4.props, i2 = s4.previousMonthButtonLabel, p2 = s4.previousYearButtonLabel, c3 = a4.props, l2 = c3.previousMonthAriaLabel, d4 = void 0 === l2 ? "string" == typeof i2 ? i2 : "Previous Month" : l2, u3 = c3.previousYearAriaLabel, h4 = void 0 === u3 ? "string" == typeof p2 ? p2 : "Previous Year" : u3;
          return e$1.createElement("button", { type: "button", className: r2.join(" "), onClick: n3, onKeyDown: a4.props.handleOnKeyDown, "aria-label": o3 ? h4 : d4 }, e$1.createElement("span", { className: ["react-datepicker__navigation-icon", "react-datepicker__navigation-icon--previous"].join(" ") }, o3 ? a4.props.previousYearButtonLabel : a4.props.previousMonthButtonLabel));
        }
      }
    }), ye(we(a4), "increaseYear", function() {
      a4.setState(function(e3) {
        var t5 = e3.date;
        return { date: addYears(t5, a4.props.showYearPicker ? a4.props.yearItemNumber : 1) };
      }, function() {
        return a4.handleYearChange(a4.state.date);
      });
    }), ye(we(a4), "renderNextButton", function() {
      if (!a4.props.renderCustomHeader) {
        var t5;
        switch (true) {
          case a4.props.showMonthYearPicker:
            t5 = mt(a4.state.date, a4.props);
            break;
          case a4.props.showYearPicker:
            t5 = function(e3) {
              var t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = t6.maxDate, n4 = t6.yearItemNumber, o4 = void 0 === n4 ? Ne : n4, a5 = wt(addYears(e3, o4), o4).startPeriod, s5 = r3 && getYear(r3);
              return s5 && s5 < a5 || false;
            }(a4.state.date, a4.props);
            break;
          default:
            t5 = ut(a4.state.date, a4.props);
        }
        if ((a4.props.forceShowMonthNavigation || a4.props.showDisabledMonthNavigation || !t5) && !a4.props.showTimeSelectOnly) {
          var r2 = ["react-datepicker__navigation", "react-datepicker__navigation--next"];
          a4.props.showTimeSelect && r2.push("react-datepicker__navigation--next--with-time"), a4.props.todayButton && r2.push("react-datepicker__navigation--next--with-today-button");
          var n3 = a4.increaseMonth;
          (a4.props.showMonthYearPicker || a4.props.showQuarterYearPicker || a4.props.showYearPicker) && (n3 = a4.increaseYear), t5 && a4.props.showDisabledMonthNavigation && (r2.push("react-datepicker__navigation--next--disabled"), n3 = null);
          var o3 = a4.props.showMonthYearPicker || a4.props.showQuarterYearPicker || a4.props.showYearPicker, s4 = a4.props, i2 = s4.nextMonthButtonLabel, p2 = s4.nextYearButtonLabel, c3 = a4.props, l2 = c3.nextMonthAriaLabel, d4 = void 0 === l2 ? "string" == typeof i2 ? i2 : "Next Month" : l2, h4 = c3.nextYearAriaLabel, m4 = void 0 === h4 ? "string" == typeof p2 ? p2 : "Next Year" : h4;
          return e$1.createElement("button", { type: "button", className: r2.join(" "), onClick: n3, onKeyDown: a4.props.handleOnKeyDown, "aria-label": o3 ? m4 : d4 }, e$1.createElement("span", { className: ["react-datepicker__navigation-icon", "react-datepicker__navigation-icon--next"].join(" ") }, o3 ? a4.props.nextYearButtonLabel : a4.props.nextMonthButtonLabel));
        }
      }
    }), ye(we(a4), "renderCurrentMonth", function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a4.state.date, r2 = ["react-datepicker__current-month"];
      return a4.props.showYearDropdown && r2.push("react-datepicker__current-month--hasYearDropdown"), a4.props.showMonthDropdown && r2.push("react-datepicker__current-month--hasMonthDropdown"), a4.props.showMonthYearDropdown && r2.push("react-datepicker__current-month--hasMonthYearDropdown"), e$1.createElement("div", { className: r2.join(" ") }, Ie(t5, a4.props.dateFormat, a4.props.locale));
    }), ye(we(a4), "renderYearDropdown", function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (a4.props.showYearDropdown && !t5)
        return e$1.createElement(_t, { adjustDateOnChange: a4.props.adjustDateOnChange, date: a4.state.date, onSelect: a4.props.onSelect, setOpen: a4.props.setOpen, dropdownMode: a4.props.dropdownMode, onChange: a4.changeYear, minDate: a4.props.minDate, maxDate: a4.props.maxDate, year: getYear(a4.state.date), scrollableYearDropdown: a4.props.scrollableYearDropdown, yearDropdownItemNumber: a4.props.yearDropdownItemNumber });
    }), ye(we(a4), "renderMonthDropdown", function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (a4.props.showMonthDropdown && !t5)
        return e$1.createElement(Pt, { dropdownMode: a4.props.dropdownMode, locale: a4.props.locale, onChange: a4.changeMonth, month: getMonth(a4.state.date), useShortMonthInDropdown: a4.props.useShortMonthInDropdown });
    }), ye(we(a4), "renderMonthYearDropdown", function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (a4.props.showMonthYearDropdown && !t5)
        return e$1.createElement(xt, { dropdownMode: a4.props.dropdownMode, locale: a4.props.locale, dateFormat: a4.props.dateFormat, onChange: a4.changeMonthYear, minDate: a4.props.minDate, maxDate: a4.props.maxDate, date: a4.state.date, scrollableMonthYearDropdown: a4.props.scrollableMonthYearDropdown });
    }), ye(we(a4), "handleTodayButtonClick", function(e3) {
      a4.props.onSelect(Ke(), e3), a4.props.setPreSelection && a4.props.setPreSelection(Ke());
    }), ye(we(a4), "renderTodayButton", function() {
      if (a4.props.todayButton && !a4.props.showTimeSelectOnly)
        return e$1.createElement("div", { className: "react-datepicker__today-button", onClick: function(e3) {
          return a4.handleTodayButtonClick(e3);
        } }, a4.props.todayButton);
    }), ye(we(a4), "renderDefaultHeader", function(t5) {
      var r2 = t5.monthDate, n3 = t5.i;
      return e$1.createElement("div", { className: "react-datepicker__header ".concat(a4.props.showTimeSelect ? "react-datepicker__header--has-time-select" : "") }, a4.renderCurrentMonth(r2), e$1.createElement("div", { className: "react-datepicker__header__dropdown react-datepicker__header__dropdown--".concat(a4.props.dropdownMode), onFocus: a4.handleDropdownFocus }, a4.renderMonthDropdown(0 !== n3), a4.renderMonthYearDropdown(0 !== n3), a4.renderYearDropdown(0 !== n3)), e$1.createElement("div", { className: "react-datepicker__day-names" }, a4.header(r2)));
    }), ye(we(a4), "renderCustomHeader", function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r2 = t5.monthDate, n3 = t5.i;
      if (a4.props.showTimeSelect && !a4.state.monthContainer || a4.props.showTimeSelectOnly)
        return null;
      var o3 = dt(a4.state.date, a4.props), s4 = ut(a4.state.date, a4.props), i2 = ht(a4.state.date, a4.props), p2 = mt(a4.state.date, a4.props), c3 = !a4.props.showMonthYearPicker && !a4.props.showQuarterYearPicker && !a4.props.showYearPicker;
      return e$1.createElement("div", { className: "react-datepicker__header react-datepicker__header--custom", onFocus: a4.props.onDropdownFocus }, a4.props.renderCustomHeader(de(de({}, a4.state), {}, { customHeaderCount: n3, monthDate: r2, changeMonth: a4.changeMonth, changeYear: a4.changeYear, decreaseMonth: a4.decreaseMonth, increaseMonth: a4.increaseMonth, decreaseYear: a4.decreaseYear, increaseYear: a4.increaseYear, prevMonthButtonDisabled: o3, nextMonthButtonDisabled: s4, prevYearButtonDisabled: i2, nextYearButtonDisabled: p2 })), c3 && e$1.createElement("div", { className: "react-datepicker__day-names" }, a4.header(r2)));
    }), ye(we(a4), "renderYearHeader", function() {
      var t5 = a4.state.date, r2 = a4.props, n3 = r2.showYearPicker, o3 = wt(t5, r2.yearItemNumber), s4 = o3.startPeriod, i2 = o3.endPeriod;
      return e$1.createElement("div", { className: "react-datepicker__header react-datepicker-year-header" }, n3 ? "".concat(s4, " - ").concat(i2) : getYear(t5));
    }), ye(we(a4), "renderHeader", function(e3) {
      switch (true) {
        case void 0 !== a4.props.renderCustomHeader:
          return a4.renderCustomHeader(e3);
        case (a4.props.showMonthYearPicker || a4.props.showQuarterYearPicker || a4.props.showYearPicker):
          return a4.renderYearHeader(e3);
        default:
          return a4.renderDefaultHeader(e3);
      }
    }), ye(we(a4), "renderMonths", function() {
      var t5;
      if (!a4.props.showTimeSelectOnly && !a4.props.showYearPicker) {
        for (var r2 = [], n3 = a4.props.showPreviousMonths ? a4.props.monthsShown - 1 : 0, o3 = subMonths(a4.state.date, n3), s4 = null !== (t5 = a4.props.monthSelectedIn) && void 0 !== t5 ? t5 : n3, i2 = 0; i2 < a4.props.monthsShown; ++i2) {
          var p2 = addMonths(o3, i2 - s4 + n3), c3 = "month-".concat(i2), d4 = i2 < a4.props.monthsShown - 1, u3 = i2 > 0;
          r2.push(e$1.createElement("div", { key: c3, ref: function(e3) {
            a4.monthContainer = e3;
          }, className: "react-datepicker__month-container" }, a4.renderHeader({ monthDate: p2, i: i2 }), e$1.createElement(Wt, { chooseDayAriaLabelPrefix: a4.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: a4.props.disabledDayAriaLabelPrefix, weekAriaLabelPrefix: a4.props.weekAriaLabelPrefix, ariaLabelPrefix: a4.props.monthAriaLabelPrefix, onChange: a4.changeMonthYear, day: p2, dayClassName: a4.props.dayClassName, calendarStartDay: a4.props.calendarStartDay, monthClassName: a4.props.monthClassName, onDayClick: a4.handleDayClick, handleOnKeyDown: a4.props.handleOnDayKeyDown, onDayMouseEnter: a4.handleDayMouseEnter, onMouseLeave: a4.handleMonthMouseLeave, onWeekSelect: a4.props.onWeekSelect, orderInDisplay: i2, formatWeekNumber: a4.props.formatWeekNumber, locale: a4.props.locale, minDate: a4.props.minDate, maxDate: a4.props.maxDate, excludeDates: a4.props.excludeDates, excludeDateIntervals: a4.props.excludeDateIntervals, highlightDates: a4.props.highlightDates, holidays: a4.props.holidays, selectingDate: a4.state.selectingDate, includeDates: a4.props.includeDates, includeDateIntervals: a4.props.includeDateIntervals, inline: a4.props.inline, shouldFocusDayInline: a4.props.shouldFocusDayInline, fixedHeight: a4.props.fixedHeight, filterDate: a4.props.filterDate, preSelection: a4.props.preSelection, setPreSelection: a4.props.setPreSelection, selected: a4.props.selected, selectsStart: a4.props.selectsStart, selectsEnd: a4.props.selectsEnd, selectsRange: a4.props.selectsRange, selectsDisabledDaysInRange: a4.props.selectsDisabledDaysInRange, showWeekNumbers: a4.props.showWeekNumbers, startDate: a4.props.startDate, endDate: a4.props.endDate, peekNextMonth: a4.props.peekNextMonth, setOpen: a4.props.setOpen, shouldCloseOnSelect: a4.props.shouldCloseOnSelect, renderDayContents: a4.props.renderDayContents, renderMonthContent: a4.props.renderMonthContent, renderQuarterContent: a4.props.renderQuarterContent, renderYearContent: a4.props.renderYearContent, disabledKeyboardNavigation: a4.props.disabledKeyboardNavigation, showMonthYearPicker: a4.props.showMonthYearPicker, showFullMonthYearPicker: a4.props.showFullMonthYearPicker, showTwoColumnMonthYearPicker: a4.props.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker: a4.props.showFourColumnMonthYearPicker, showYearPicker: a4.props.showYearPicker, showQuarterYearPicker: a4.props.showQuarterYearPicker, showWeekPicker: a4.props.showWeekPicker, isInputFocused: a4.props.isInputFocused, containerRef: a4.containerRef, monthShowsDuplicateDaysEnd: d4, monthShowsDuplicateDaysStart: u3 })));
        }
        return r2;
      }
    }), ye(we(a4), "renderYears", function() {
      if (!a4.props.showTimeSelectOnly)
        return a4.props.showYearPicker ? e$1.createElement("div", { className: "react-datepicker__year--container" }, a4.renderHeader(), e$1.createElement(Bt, ve({ onDayClick: a4.handleDayClick, selectingDate: a4.state.selectingDate, clearSelectingDate: a4.clearSelectingDate, date: a4.state.date }, a4.props, { onYearMouseEnter: a4.handleYearMouseEnter, onYearMouseLeave: a4.handleYearMouseLeave }))) : void 0;
    }), ye(we(a4), "renderTimeSection", function() {
      if (a4.props.showTimeSelect && (a4.state.monthContainer || a4.props.showTimeSelectOnly))
        return e$1.createElement(Kt, { selected: a4.props.selected, openToDate: a4.props.openToDate, onChange: a4.props.onTimeChange, timeClassName: a4.props.timeClassName, format: a4.props.timeFormat, includeTimes: a4.props.includeTimes, intervals: a4.props.timeIntervals, minTime: a4.props.minTime, maxTime: a4.props.maxTime, excludeTimes: a4.props.excludeTimes, filterTime: a4.props.filterTime, timeCaption: a4.props.timeCaption, todayButton: a4.props.todayButton, showMonthDropdown: a4.props.showMonthDropdown, showMonthYearDropdown: a4.props.showMonthYearDropdown, showYearDropdown: a4.props.showYearDropdown, withPortal: a4.props.withPortal, monthRef: a4.state.monthContainer, injectTimes: a4.props.injectTimes, locale: a4.props.locale, handleOnKeyDown: a4.props.handleOnKeyDown, showTimeSelectOnly: a4.props.showTimeSelectOnly });
    }), ye(we(a4), "renderInputTimeSection", function() {
      var t5 = new Date(a4.props.selected), r2 = Te(t5) && Boolean(a4.props.selected) ? "".concat(kt(t5.getHours()), ":").concat(kt(t5.getMinutes())) : "";
      if (a4.props.showTimeInput)
        return e$1.createElement(Qt, { date: t5, timeString: r2, timeInputLabel: a4.props.timeInputLabel, onChange: a4.props.onTimeChange, customTimeInput: a4.props.customTimeInput });
    }), ye(we(a4), "renderAriaLiveRegion", function() {
      var t5, r2 = wt(a4.state.date, a4.props.yearItemNumber), n3 = r2.startPeriod, o3 = r2.endPeriod;
      return t5 = a4.props.showYearPicker ? "".concat(n3, " - ").concat(o3) : a4.props.showMonthYearPicker || a4.props.showQuarterYearPicker ? getYear(a4.state.date) : "".concat(Je(getMonth(a4.state.date), a4.props.locale), " ").concat(getYear(a4.state.date)), e$1.createElement("span", { role: "alert", "aria-live": "polite", className: "react-datepicker__aria-live" }, a4.state.isRenderAriaLiveMessage && t5);
    }), ye(we(a4), "renderChildren", function() {
      if (a4.props.children)
        return e$1.createElement("div", { className: "react-datepicker__children-container" }, a4.props.children);
    }), a4.containerRef = e$1.createRef(), a4.state = { date: a4.getDateInView(), selectingDate: null, monthContainer: null, isRenderAriaLiveMessage: false }, a4;
  }
  return fe(o2, [{ key: "componentDidMount", value: function() {
    var e3 = this;
    this.props.showTimeSelect && (this.assignMonthContainer = void e3.setState({ monthContainer: e3.monthContainer }));
  } }, { key: "componentDidUpdate", value: function(e3) {
    var t4 = this;
    if (!this.props.preSelection || je(this.props.preSelection, e3.preSelection) && this.props.monthSelectedIn === e3.monthSelectedIn)
      this.props.openToDate && !je(this.props.openToDate, e3.openToDate) && this.setState({ date: this.props.openToDate });
    else {
      var r2 = !Qe(this.state.date, this.props.preSelection);
      this.setState({ date: this.props.preSelection }, function() {
        return r2 && t4.handleCustomMonthChange(t4.state.date);
      });
    }
  } }, { key: "render", value: function() {
    var t4 = this.props.container || Ht;
    return e$1.createElement("div", { style: { display: "contents" }, ref: this.containerRef }, e$1.createElement(t4, { className: r("react-datepicker", this.props.className, { "react-datepicker--time-only": this.props.showTimeSelectOnly }), showPopperArrow: this.props.showPopperArrow, arrowProps: this.props.arrowProps }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));
  } }], [{ key: "defaultProps", get: function() {
    return { onDropdownFocus: function() {
    }, monthsShown: 1, forceShowMonthNavigation: false, timeCaption: "Time", previousYearButtonLabel: "Previous Year", nextYearButtonLabel: "Next Year", previousMonthButtonLabel: "Previous Month", nextMonthButtonLabel: "Next Month", customTimeInput: null, yearItemNumber: Ne };
  } }]), o2;
}(), qt = function(t3) {
  var r2 = t3.icon, n2 = t3.className, o2 = void 0 === n2 ? "" : n2, a4 = t3.onClick, s4 = "react-datepicker__calendar-icon";
  return e$1.isValidElement(r2) ? e$1.cloneElement(r2, { className: "".concat(r2.props.className || "", " ").concat(s4, " ").concat(o2), onClick: function(e3) {
    "function" == typeof r2.props.onClick && r2.props.onClick(e3), "function" == typeof a4 && a4(e3);
  } }) : "string" == typeof r2 ? e$1.createElement("i", { className: "".concat(s4, " ").concat(r2, " ").concat(o2), "aria-hidden": "true", onClick: a4 }) : e$1.createElement("svg", { className: "".concat(s4, " ").concat(o2), xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", onClick: a4 }, e$1.createElement("path", { d: "M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z" }));
}, Ut = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2(e3) {
    var t4;
    return he(this, n2), (t4 = r2.call(this, e3)).el = document.createElement("div"), t4;
  }
  return fe(n2, [{ key: "componentDidMount", value: function() {
    this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId), this.portalRoot || (this.portalRoot = document.createElement("div"), this.portalRoot.setAttribute("id", this.props.portalId), (this.props.portalHost || document.body).appendChild(this.portalRoot)), this.portalRoot.appendChild(this.el);
  } }, { key: "componentWillUnmount", value: function() {
    this.portalRoot.removeChild(this.el);
  } }, { key: "render", value: function() {
    return ae.createPortal(this.props.children, this.el);
  } }]), n2;
}(), zt = function(e3) {
  return !e3.disabled && -1 !== e3.tabIndex;
}, $t = function(t3) {
  De(n2, e$1.Component);
  var r2 = be(n2);
  function n2(t4) {
    var o2;
    return he(this, n2), ye(we(o2 = r2.call(this, t4)), "getTabChildren", function() {
      return Array.prototype.slice.call(o2.tabLoopRef.current.querySelectorAll("[tabindex], a, button, input, select, textarea"), 1, -1).filter(zt);
    }), ye(we(o2), "handleFocusStart", function() {
      var e3 = o2.getTabChildren();
      e3 && e3.length > 1 && e3[e3.length - 1].focus();
    }), ye(we(o2), "handleFocusEnd", function() {
      var e3 = o2.getTabChildren();
      e3 && e3.length > 1 && e3[0].focus();
    }), o2.tabLoopRef = e$1.createRef(), o2;
  }
  return fe(n2, [{ key: "render", value: function() {
    return this.props.enableTabLoop ? e$1.createElement("div", { className: "react-datepicker__tab-loop", ref: this.tabLoopRef }, e$1.createElement("div", { className: "react-datepicker__tab-loop__start", tabIndex: "0", onFocus: this.handleFocusStart }), this.props.children, e$1.createElement("div", { className: "react-datepicker__tab-loop__end", tabIndex: "0", onFocus: this.handleFocusEnd })) : this.props.children;
  } }], [{ key: "defaultProps", get: function() {
    return { enableTabLoop: true };
  } }]), n2;
}(), Gt = function(t3) {
  De(o2, e$1.Component);
  var n2 = be(o2);
  function o2() {
    return he(this, o2), n2.apply(this, arguments);
  }
  return fe(o2, [{ key: "render", value: function() {
    var t4, n3 = this.props, o3 = n3.className, a4 = n3.wrapperClassName, s4 = n3.hidePopper, i2 = n3.popperComponent, p2 = n3.popperModifiers, c3 = n3.popperPlacement, l2 = n3.popperProps, d4 = n3.targetComponent, u3 = n3.enableTabLoop, h4 = n3.popperOnKeyDown, m4 = n3.portalId, f2 = n3.portalHost;
    if (!s4) {
      var y4 = r("react-datepicker-popper", o3);
      t4 = e$1.createElement(Popper, ve({ modifiers: p2, placement: c3 }, l2), function(t5) {
        var r2 = t5.ref, n4 = t5.style, o4 = t5.placement, a5 = t5.arrowProps;
        return e$1.createElement($t, { enableTabLoop: u3 }, e$1.createElement("div", { ref: r2, style: n4, className: y4, "data-placement": o4, onKeyDown: h4 }, e$1.cloneElement(i2, { arrowProps: a5 })));
      });
    }
    this.props.popperContainer && (t4 = e$1.createElement(this.props.popperContainer, {}, t4)), m4 && !s4 && (t4 = e$1.createElement(Ut, { portalId: m4, portalHost: f2 }, t4));
    var v2 = r("react-datepicker-wrapper", a4);
    return e$1.createElement(Manager, { className: "react-datepicker-manager" }, e$1.createElement(Reference, null, function(t5) {
      var r2 = t5.ref;
      return e$1.createElement("div", { ref: r2, className: v2 }, d4);
    }), t4);
  } }], [{ key: "defaultProps", get: function() {
    return { hidePopper: true, popperModifiers: [], popperProps: {}, popperPlacement: "bottom-start" };
  } }]), o2;
}(), Jt = "react-datepicker-ignore-onclickoutside", Xt = onClickOutsideHOC(Vt);
var Zt = "Date input not valid.", er = function(t3) {
  De(s4, e$1.Component);
  var a4 = be(s4);
  function s4(t4) {
    var i2;
    return he(this, s4), ye(we(i2 = a4.call(this, t4)), "getPreSelection", function() {
      return i2.props.openToDate ? i2.props.openToDate : i2.props.selectsEnd && i2.props.startDate ? i2.props.startDate : i2.props.selectsStart && i2.props.endDate ? i2.props.endDate : Ye();
    }), ye(we(i2), "modifyHolidays", function() {
      var e3;
      return null === (e3 = i2.props.holidays) || void 0 === e3 ? void 0 : e3.reduce(function(e4, t5) {
        var r2 = new Date(t5.date);
        return isValid(r2) ? [].concat(Se(e4), [de(de({}, t5), {}, { date: r2 })]) : e4;
      }, []);
    }), ye(we(i2), "calcInitialState", function() {
      var e3, t5 = i2.getPreSelection(), r2 = ft(i2.props), n2 = yt(i2.props), o2 = r2 && isBefore(t5, startOfDay(r2)) ? r2 : n2 && isAfter(t5, endOfDay(n2)) ? n2 : t5;
      return { open: i2.props.startOpen || false, preventFocus: false, preSelection: null !== (e3 = i2.props.selectsRange ? i2.props.startDate : i2.props.selected) && void 0 !== e3 ? e3 : o2, highlightDates: vt(i2.props.highlightDates), focused: false, shouldFocusDayInline: false, isRenderAriaLiveMessage: false };
    }), ye(we(i2), "clearPreventFocusTimeout", function() {
      i2.preventFocusTimeout && clearTimeout(i2.preventFocusTimeout);
    }), ye(we(i2), "setFocus", function() {
      i2.input && i2.input.focus && i2.input.focus({ preventScroll: true });
    }), ye(we(i2), "setBlur", function() {
      i2.input && i2.input.blur && i2.input.blur(), i2.cancelFocusInput();
    }), ye(we(i2), "setOpen", function(e3) {
      var t5 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      i2.setState({ open: e3, preSelection: e3 && i2.state.open ? i2.state.preSelection : i2.calcInitialState().preSelection, lastPreSelectChange: rr }, function() {
        e3 || i2.setState(function(e4) {
          return { focused: !!t5 && e4.focused };
        }, function() {
          !t5 && i2.setBlur(), i2.setState({ inputValue: null });
        });
      });
    }), ye(we(i2), "inputOk", function() {
      return isDate(i2.state.preSelection);
    }), ye(we(i2), "isCalendarOpen", function() {
      return void 0 === i2.props.open ? i2.state.open && !i2.props.disabled && !i2.props.readOnly : i2.props.open;
    }), ye(we(i2), "handleFocus", function(e3) {
      i2.state.preventFocus || (i2.props.onFocus(e3), i2.props.preventOpenOnFocus || i2.props.readOnly || i2.setOpen(true)), i2.setState({ focused: true });
    }), ye(we(i2), "sendFocusBackToInput", function() {
      i2.preventFocusTimeout && i2.clearPreventFocusTimeout(), i2.setState({ preventFocus: true }, function() {
        i2.preventFocusTimeout = setTimeout(function() {
          i2.setFocus(), i2.setState({ preventFocus: false });
        });
      });
    }), ye(we(i2), "cancelFocusInput", function() {
      clearTimeout(i2.inputFocusTimeout), i2.inputFocusTimeout = null;
    }), ye(we(i2), "deferFocusInput", function() {
      i2.cancelFocusInput(), i2.inputFocusTimeout = setTimeout(function() {
        return i2.setFocus();
      }, 1);
    }), ye(we(i2), "handleDropdownFocus", function() {
      i2.cancelFocusInput();
    }), ye(we(i2), "handleBlur", function(e3) {
      (!i2.state.open || i2.props.withPortal || i2.props.showTimeInput) && i2.props.onBlur(e3), i2.setState({ focused: false });
    }), ye(we(i2), "handleCalendarClickOutside", function(e3) {
      i2.props.inline || i2.setOpen(false), i2.props.onClickOutside(e3), i2.props.withPortal && e3.preventDefault();
    }), ye(we(i2), "handleChange", function() {
      for (var e3 = arguments.length, t5 = new Array(e3), r2 = 0; r2 < e3; r2++)
        t5[r2] = arguments[r2];
      var n2 = t5[0];
      if (!i2.props.onChangeRaw || (i2.props.onChangeRaw.apply(we(i2), t5), "function" == typeof n2.isDefaultPrevented && !n2.isDefaultPrevented())) {
        i2.setState({ inputValue: n2.target.value, lastPreSelectChange: tr });
        var o2, a5, s5, p2, c3, l2, d4, u3, h4 = (o2 = n2.target.value, a5 = i2.props.dateFormat, s5 = i2.props.locale, p2 = i2.props.strictParsing, c3 = i2.props.minDate, l2 = null, d4 = Ge(s5) || Ge($e()), u3 = true, Array.isArray(a5) ? (a5.forEach(function(e4) {
          var t6 = parse(o2, e4, /* @__PURE__ */ new Date(), { locale: d4 });
          p2 && (u3 = Te(t6, c3) && o2 === Ie(t6, e4, s5)), Te(t6, c3) && u3 && (l2 = t6);
        }), l2) : (l2 = parse(o2, a5, /* @__PURE__ */ new Date(), { locale: d4 }), p2 ? u3 = Te(l2) && o2 === Ie(l2, a5, s5) : Te(l2) || (a5 = a5.match(xe).map(function(e4) {
          var t6 = e4[0];
          return "p" === t6 || "P" === t6 ? d4 ? (0, Ee[t6])(e4, d4.formatLong) : t6 : e4;
        }).join(""), o2.length > 0 && (l2 = parse(o2, a5.slice(0, o2.length), /* @__PURE__ */ new Date())), Te(l2) || (l2 = new Date(o2))), Te(l2) && u3 ? l2 : null));
        i2.props.showTimeSelectOnly && i2.props.selected && h4 && !je(h4, i2.props.selected) && (h4 = set(i2.props.selected, { hours: getHours(h4), minutes: getMinutes(h4), seconds: getSeconds(h4) })), !h4 && n2.target.value || (i2.props.showWeekPicker && (h4 = Le(h4, i2.props.locale, i2.props.calendarStartDay)), i2.setSelected(h4, n2, true));
      }
    }), ye(we(i2), "handleSelect", function(e3, t5, r2) {
      if (i2.props.shouldCloseOnSelect && !i2.props.showTimeSelect && i2.sendFocusBackToInput(), i2.props.onChangeRaw && i2.props.onChangeRaw(t5), i2.props.showWeekPicker && (e3 = Le(e3, i2.props.locale, i2.props.calendarStartDay)), i2.setSelected(e3, t5, false, r2), i2.props.showDateSelect && i2.setState({ isRenderAriaLiveMessage: true }), !i2.props.shouldCloseOnSelect || i2.props.showTimeSelect)
        i2.setPreSelection(e3);
      else if (!i2.props.inline) {
        i2.props.selectsRange || i2.setOpen(false);
        var n2 = i2.props, o2 = n2.startDate, a5 = n2.endDate;
        !o2 || a5 || isBefore(e3, o2) || i2.setOpen(false);
      }
    }), ye(we(i2), "setSelected", function(e3, t5, r2, n2) {
      var o2 = e3;
      if (i2.props.showYearPicker) {
        if (null !== o2 && at(getYear(o2), i2.props))
          return;
      } else if (i2.props.showMonthYearPicker) {
        if (null !== o2 && tt(o2, i2.props))
          return;
      } else if (null !== o2 && Ze(o2, i2.props))
        return;
      var a5 = i2.props, s5 = a5.onChange, p2 = a5.selectsRange, c3 = a5.startDate, l2 = a5.endDate;
      if (!Ve(i2.props.selected, o2) || i2.props.allowSameDay || p2)
        if (null !== o2 && (!i2.props.selected || r2 && (i2.props.showTimeSelect || i2.props.showTimeSelectOnly || i2.props.showTimeInput) || (o2 = Re(o2, { hour: getHours(i2.props.selected), minute: getMinutes(i2.props.selected), second: getSeconds(i2.props.selected) })), i2.props.inline || i2.setState({ preSelection: o2 }), i2.props.focusSelectedMonth || i2.setState({ monthSelectedIn: n2 })), p2) {
          var d4 = c3 && !l2, u3 = c3 && l2;
          !c3 && !l2 ? s5([o2, null], t5) : d4 && (isBefore(o2, c3) ? s5([o2, null], t5) : s5([c3, o2], t5)), u3 && s5([o2, null], t5);
        } else
          s5(o2, t5);
      r2 || (i2.props.onSelect(o2, t5), i2.setState({ inputValue: null }));
    }), ye(we(i2), "setPreSelection", function(e3) {
      var t5 = void 0 !== i2.props.minDate, r2 = void 0 !== i2.props.maxDate, n2 = true;
      if (e3) {
        i2.props.showWeekPicker && (e3 = Le(e3, i2.props.locale, i2.props.calendarStartDay));
        var o2 = startOfDay(e3);
        if (t5 && r2)
          n2 = qe(e3, i2.props.minDate, i2.props.maxDate);
        else if (t5) {
          var a5 = startOfDay(i2.props.minDate);
          n2 = isAfter(e3, a5) || Ve(o2, a5);
        } else if (r2) {
          var s5 = endOfDay(i2.props.maxDate);
          n2 = isBefore(e3, s5) || Ve(o2, s5);
        }
      }
      n2 && i2.setState({ preSelection: e3 });
    }), ye(we(i2), "toggleCalendar", function() {
      i2.setOpen(!i2.state.open);
    }), ye(we(i2), "handleTimeChange", function(e3) {
      var t5 = i2.props.selected ? i2.props.selected : i2.getPreSelection(), r2 = i2.props.selected ? e3 : Re(t5, { hour: getHours(e3), minute: getMinutes(e3) });
      i2.setState({ preSelection: r2 }), i2.props.onChange(r2), i2.props.shouldCloseOnSelect && (i2.sendFocusBackToInput(), i2.setOpen(false)), i2.props.showTimeInput && i2.setOpen(true), (i2.props.showTimeSelectOnly || i2.props.showTimeSelect) && i2.setState({ isRenderAriaLiveMessage: true }), i2.setState({ inputValue: null });
    }), ye(we(i2), "onInputClick", function() {
      i2.props.disabled || i2.props.readOnly || i2.setOpen(true), i2.props.onInputClick();
    }), ye(we(i2), "onInputKeyDown", function(e3) {
      i2.props.onKeyDown(e3);
      var t5 = e3.key;
      if (i2.state.open || i2.props.inline || i2.props.preventOpenOnFocus) {
        if (i2.state.open) {
          if ("ArrowDown" === t5 || "ArrowUp" === t5) {
            e3.preventDefault();
            var r2 = i2.props.showWeekPicker && i2.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex="0"]' : '.react-datepicker__day[tabindex="0"]', n2 = i2.calendar.componentNode && i2.calendar.componentNode.querySelector(r2);
            return void (n2 && n2.focus({ preventScroll: true }));
          }
          var o2 = Ye(i2.state.preSelection);
          "Enter" === t5 ? (e3.preventDefault(), i2.inputOk() && i2.state.lastPreSelectChange === rr ? (i2.handleSelect(o2, e3), !i2.props.shouldCloseOnSelect && i2.setPreSelection(o2)) : i2.setOpen(false)) : "Escape" === t5 ? (e3.preventDefault(), i2.sendFocusBackToInput(), i2.setOpen(false)) : "Tab" === t5 && i2.setOpen(false), i2.inputOk() || i2.props.onInputError({ code: 1, msg: Zt });
        }
      } else
        "ArrowDown" !== t5 && "ArrowUp" !== t5 && "Enter" !== t5 || i2.onInputClick();
    }), ye(we(i2), "onPortalKeyDown", function(e3) {
      "Escape" === e3.key && (e3.preventDefault(), i2.setState({ preventFocus: true }, function() {
        i2.setOpen(false), setTimeout(function() {
          i2.setFocus(), i2.setState({ preventFocus: false });
        });
      }));
    }), ye(we(i2), "onDayKeyDown", function(e3) {
      i2.props.onKeyDown(e3);
      var t5 = e3.key, r2 = Ye(i2.state.preSelection);
      if ("Enter" === t5)
        e3.preventDefault(), i2.handleSelect(r2, e3), !i2.props.shouldCloseOnSelect && i2.setPreSelection(r2);
      else if ("Escape" === t5)
        e3.preventDefault(), i2.setOpen(false), i2.inputOk() || i2.props.onInputError({ code: 1, msg: Zt });
      else if (!i2.props.disabledKeyboardNavigation) {
        var n2;
        switch (t5) {
          case "ArrowLeft":
            n2 = i2.props.showWeekPicker ? subWeeks(r2, 1) : subDays(r2, 1);
            break;
          case "ArrowRight":
            n2 = i2.props.showWeekPicker ? addWeeks(r2, 1) : addDays(r2, 1);
            break;
          case "ArrowUp":
            n2 = subWeeks(r2, 1);
            break;
          case "ArrowDown":
            n2 = addWeeks(r2, 1);
            break;
          case "PageUp":
            n2 = subMonths(r2, 1);
            break;
          case "PageDown":
            n2 = addMonths(r2, 1);
            break;
          case "Home":
            n2 = subYears(r2, 1);
            break;
          case "End":
            n2 = addYears(r2, 1);
            break;
          default:
            n2 = null;
        }
        if (!n2)
          return void (i2.props.onInputError && i2.props.onInputError({ code: 1, msg: Zt }));
        if (e3.preventDefault(), i2.setState({ lastPreSelectChange: rr }), i2.props.adjustDateOnChange && i2.setSelected(n2), i2.setPreSelection(n2), i2.props.inline) {
          var o2 = getMonth(r2), a5 = getMonth(n2), s5 = getYear(r2), d4 = getYear(n2);
          o2 !== a5 || s5 !== d4 ? i2.setState({ shouldFocusDayInline: true }) : i2.setState({ shouldFocusDayInline: false });
        }
      }
    }), ye(we(i2), "onPopperKeyDown", function(e3) {
      "Escape" === e3.key && (e3.preventDefault(), i2.sendFocusBackToInput());
    }), ye(we(i2), "onClearClick", function(e3) {
      e3 && e3.preventDefault && e3.preventDefault(), i2.sendFocusBackToInput(), i2.props.selectsRange ? i2.props.onChange([null, null], e3) : i2.props.onChange(null, e3), i2.setState({ inputValue: null });
    }), ye(we(i2), "clear", function() {
      i2.onClearClick();
    }), ye(we(i2), "onScroll", function(e3) {
      "boolean" == typeof i2.props.closeOnScroll && i2.props.closeOnScroll ? e3.target !== document && e3.target !== document.documentElement && e3.target !== document.body || i2.setOpen(false) : "function" == typeof i2.props.closeOnScroll && i2.props.closeOnScroll(e3) && i2.setOpen(false);
    }), ye(we(i2), "renderCalendar", function() {
      return i2.props.inline || i2.isCalendarOpen() ? e$1.createElement(Xt, { ref: function(e3) {
        i2.calendar = e3;
      }, locale: i2.props.locale, calendarStartDay: i2.props.calendarStartDay, chooseDayAriaLabelPrefix: i2.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: i2.props.disabledDayAriaLabelPrefix, weekAriaLabelPrefix: i2.props.weekAriaLabelPrefix, monthAriaLabelPrefix: i2.props.monthAriaLabelPrefix, adjustDateOnChange: i2.props.adjustDateOnChange, setOpen: i2.setOpen, shouldCloseOnSelect: i2.props.shouldCloseOnSelect, dateFormat: i2.props.dateFormatCalendar, useWeekdaysShort: i2.props.useWeekdaysShort, formatWeekDay: i2.props.formatWeekDay, dropdownMode: i2.props.dropdownMode, selected: i2.props.selected, preSelection: i2.state.preSelection, onSelect: i2.handleSelect, onWeekSelect: i2.props.onWeekSelect, openToDate: i2.props.openToDate, minDate: i2.props.minDate, maxDate: i2.props.maxDate, selectsStart: i2.props.selectsStart, selectsEnd: i2.props.selectsEnd, selectsRange: i2.props.selectsRange, startDate: i2.props.startDate, endDate: i2.props.endDate, excludeDates: i2.props.excludeDates, excludeDateIntervals: i2.props.excludeDateIntervals, filterDate: i2.props.filterDate, onClickOutside: i2.handleCalendarClickOutside, formatWeekNumber: i2.props.formatWeekNumber, highlightDates: i2.state.highlightDates, holidays: Dt(i2.modifyHolidays()), includeDates: i2.props.includeDates, includeDateIntervals: i2.props.includeDateIntervals, includeTimes: i2.props.includeTimes, injectTimes: i2.props.injectTimes, inline: i2.props.inline, shouldFocusDayInline: i2.state.shouldFocusDayInline, peekNextMonth: i2.props.peekNextMonth, showMonthDropdown: i2.props.showMonthDropdown, showPreviousMonths: i2.props.showPreviousMonths, useShortMonthInDropdown: i2.props.useShortMonthInDropdown, showMonthYearDropdown: i2.props.showMonthYearDropdown, showWeekNumbers: i2.props.showWeekNumbers, showYearDropdown: i2.props.showYearDropdown, withPortal: i2.props.withPortal, forceShowMonthNavigation: i2.props.forceShowMonthNavigation, showDisabledMonthNavigation: i2.props.showDisabledMonthNavigation, scrollableYearDropdown: i2.props.scrollableYearDropdown, scrollableMonthYearDropdown: i2.props.scrollableMonthYearDropdown, todayButton: i2.props.todayButton, weekLabel: i2.props.weekLabel, outsideClickIgnoreClass: Jt, fixedHeight: i2.props.fixedHeight, monthsShown: i2.props.monthsShown, monthSelectedIn: i2.state.monthSelectedIn, onDropdownFocus: i2.handleDropdownFocus, onMonthChange: i2.props.onMonthChange, onYearChange: i2.props.onYearChange, dayClassName: i2.props.dayClassName, weekDayClassName: i2.props.weekDayClassName, monthClassName: i2.props.monthClassName, timeClassName: i2.props.timeClassName, showDateSelect: i2.props.showDateSelect, showTimeSelect: i2.props.showTimeSelect, showTimeSelectOnly: i2.props.showTimeSelectOnly, onTimeChange: i2.handleTimeChange, timeFormat: i2.props.timeFormat, timeIntervals: i2.props.timeIntervals, minTime: i2.props.minTime, maxTime: i2.props.maxTime, excludeTimes: i2.props.excludeTimes, filterTime: i2.props.filterTime, timeCaption: i2.props.timeCaption, className: i2.props.calendarClassName, container: i2.props.calendarContainer, yearItemNumber: i2.props.yearItemNumber, yearDropdownItemNumber: i2.props.yearDropdownItemNumber, previousMonthAriaLabel: i2.props.previousMonthAriaLabel, previousMonthButtonLabel: i2.props.previousMonthButtonLabel, nextMonthAriaLabel: i2.props.nextMonthAriaLabel, nextMonthButtonLabel: i2.props.nextMonthButtonLabel, previousYearAriaLabel: i2.props.previousYearAriaLabel, previousYearButtonLabel: i2.props.previousYearButtonLabel, nextYearAriaLabel: i2.props.nextYearAriaLabel, nextYearButtonLabel: i2.props.nextYearButtonLabel, timeInputLabel: i2.props.timeInputLabel, disabledKeyboardNavigation: i2.props.disabledKeyboardNavigation, renderCustomHeader: i2.props.renderCustomHeader, popperProps: i2.props.popperProps, renderDayContents: i2.props.renderDayContents, renderMonthContent: i2.props.renderMonthContent, renderQuarterContent: i2.props.renderQuarterContent, renderYearContent: i2.props.renderYearContent, onDayMouseEnter: i2.props.onDayMouseEnter, onMonthMouseLeave: i2.props.onMonthMouseLeave, onYearMouseEnter: i2.props.onYearMouseEnter, onYearMouseLeave: i2.props.onYearMouseLeave, selectsDisabledDaysInRange: i2.props.selectsDisabledDaysInRange, showTimeInput: i2.props.showTimeInput, showMonthYearPicker: i2.props.showMonthYearPicker, showFullMonthYearPicker: i2.props.showFullMonthYearPicker, showTwoColumnMonthYearPicker: i2.props.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker: i2.props.showFourColumnMonthYearPicker, showYearPicker: i2.props.showYearPicker, showQuarterYearPicker: i2.props.showQuarterYearPicker, showWeekPicker: i2.props.showWeekPicker, showPopperArrow: i2.props.showPopperArrow, excludeScrollbar: i2.props.excludeScrollbar, handleOnKeyDown: i2.props.onKeyDown, handleOnDayKeyDown: i2.onDayKeyDown, isInputFocused: i2.state.focused, customTimeInput: i2.props.customTimeInput, setPreSelection: i2.setPreSelection }, i2.props.children) : null;
    }), ye(we(i2), "renderAriaLiveRegion", function() {
      var t5, r2 = i2.props, n2 = r2.dateFormat, o2 = r2.locale, a5 = i2.props.showTimeInput || i2.props.showTimeSelect ? "PPPPp" : "PPPP";
      return t5 = i2.props.selectsRange ? "Selected start date: ".concat(Oe(i2.props.startDate, { dateFormat: a5, locale: o2 }), ". ").concat(i2.props.endDate ? "End date: " + Oe(i2.props.endDate, { dateFormat: a5, locale: o2 }) : "") : i2.props.showTimeSelectOnly ? "Selected time: ".concat(Oe(i2.props.selected, { dateFormat: n2, locale: o2 })) : i2.props.showYearPicker ? "Selected year: ".concat(Oe(i2.props.selected, { dateFormat: "yyyy", locale: o2 })) : i2.props.showMonthYearPicker ? "Selected month: ".concat(Oe(i2.props.selected, { dateFormat: "MMMM yyyy", locale: o2 })) : i2.props.showQuarterYearPicker ? "Selected quarter: ".concat(Oe(i2.props.selected, { dateFormat: "yyyy, QQQ", locale: o2 })) : "Selected date: ".concat(Oe(i2.props.selected, { dateFormat: a5, locale: o2 })), e$1.createElement("span", { role: "alert", "aria-live": "polite", className: "react-datepicker__aria-live" }, t5);
    }), ye(we(i2), "renderDateInput", function() {
      var t5, n2 = r(i2.props.className, ye({}, Jt, i2.state.open)), o2 = i2.props.customInput || e$1.createElement("input", { type: "text" }), a5 = i2.props.customInputRef || "ref", s5 = "string" == typeof i2.props.value ? i2.props.value : "string" == typeof i2.state.inputValue ? i2.state.inputValue : i2.props.selectsRange ? function(e3, t6, r2) {
        if (!e3)
          return "";
        var n3 = Oe(e3, r2), o3 = t6 ? Oe(t6, r2) : "";
        return "".concat(n3, " - ").concat(o3);
      }(i2.props.startDate, i2.props.endDate, i2.props) : Oe(i2.props.selected, i2.props);
      return e$1.cloneElement(o2, (ye(ye(ye(ye(ye(ye(ye(ye(ye(ye(t5 = {}, a5, function(e3) {
        i2.input = e3;
      }), "value", s5), "onBlur", i2.handleBlur), "onChange", i2.handleChange), "onClick", i2.onInputClick), "onFocus", i2.handleFocus), "onKeyDown", i2.onInputKeyDown), "id", i2.props.id), "name", i2.props.name), "form", i2.props.form), ye(ye(ye(ye(ye(ye(ye(ye(ye(ye(t5, "autoFocus", i2.props.autoFocus), "placeholder", i2.props.placeholderText), "disabled", i2.props.disabled), "autoComplete", i2.props.autoComplete), "className", r(o2.props.className, n2)), "title", i2.props.title), "readOnly", i2.props.readOnly), "required", i2.props.required), "tabIndex", i2.props.tabIndex), "aria-describedby", i2.props.ariaDescribedBy), ye(ye(ye(t5, "aria-invalid", i2.props.ariaInvalid), "aria-labelledby", i2.props.ariaLabelledBy), "aria-required", i2.props.ariaRequired)));
    }), ye(we(i2), "renderClearButton", function() {
      var t5 = i2.props, n2 = t5.isClearable, o2 = t5.disabled, a5 = t5.selected, s5 = t5.startDate, p2 = t5.endDate, c3 = t5.clearButtonTitle, l2 = t5.clearButtonClassName, d4 = void 0 === l2 ? "" : l2, u3 = t5.ariaLabelClose, h4 = void 0 === u3 ? "Close" : u3;
      return !n2 || null == a5 && null == s5 && null == p2 ? null : e$1.createElement("button", { type: "button", className: r("react-datepicker__close-icon", d4, { "react-datepicker__close-icon--disabled": o2 }), disabled: o2, "aria-label": h4, onClick: i2.onClearClick, title: c3, tabIndex: -1 });
    }), i2.state = i2.calcInitialState(), i2.preventFocusTimeout = null, i2;
  }
  return fe(s4, [{ key: "componentDidMount", value: function() {
    window.addEventListener("scroll", this.onScroll, true);
  } }, { key: "componentDidUpdate", value: function(e3, t4) {
    var r2, n2;
    e3.inline && (r2 = e3.selected, n2 = this.props.selected, r2 && n2 ? getMonth(r2) !== getMonth(n2) || getYear(r2) !== getYear(n2) : r2 !== n2) && this.setPreSelection(this.props.selected), void 0 !== this.state.monthSelectedIn && e3.monthsShown !== this.props.monthsShown && this.setState({ monthSelectedIn: 0 }), e3.highlightDates !== this.props.highlightDates && this.setState({ highlightDates: vt(this.props.highlightDates) }), t4.focused || Ve(e3.selected, this.props.selected) || this.setState({ inputValue: null }), t4.open !== this.state.open && (false === t4.open && true === this.state.open && this.props.onCalendarOpen(), true === t4.open && false === this.state.open && this.props.onCalendarClose());
  } }, { key: "componentWillUnmount", value: function() {
    this.clearPreventFocusTimeout(), window.removeEventListener("scroll", this.onScroll, true);
  } }, { key: "renderInputContainer", value: function() {
    var t4 = this.props, r2 = t4.showIcon, n2 = t4.icon, o2 = t4.calendarIconClassname, a5 = t4.toggleCalendarOnIconClick, s5 = this.state.open;
    return e$1.createElement("div", { className: "react-datepicker__input-container".concat(r2 ? " react-datepicker__view-calendar-icon" : "") }, r2 && e$1.createElement(qt, ve({ icon: n2, className: "".concat(o2, " ").concat(s5 && "react-datepicker-ignore-onclickoutside") }, a5 ? { onClick: this.toggleCalendar } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());
  } }, { key: "render", value: function() {
    var t4 = this.renderCalendar();
    if (this.props.inline)
      return t4;
    if (this.props.withPortal) {
      var r2 = this.state.open ? e$1.createElement($t, { enableTabLoop: this.props.enableTabLoop }, e$1.createElement("div", { className: "react-datepicker__portal", tabIndex: -1, onKeyDown: this.onPortalKeyDown }, t4)) : null;
      return this.state.open && this.props.portalId && (r2 = e$1.createElement(Ut, { portalId: this.props.portalId, portalHost: this.props.portalHost }, r2)), e$1.createElement("div", null, this.renderInputContainer(), r2);
    }
    return e$1.createElement(Gt, { className: this.props.popperClassName, wrapperClassName: this.props.wrapperClassName, hidePopper: !this.isCalendarOpen(), portalId: this.props.portalId, portalHost: this.props.portalHost, popperModifiers: this.props.popperModifiers, targetComponent: this.renderInputContainer(), popperContainer: this.props.popperContainer, popperComponent: t4, popperPlacement: this.props.popperPlacement, popperProps: this.props.popperProps, popperOnKeyDown: this.onPopperKeyDown, enableTabLoop: this.props.enableTabLoop });
  } }], [{ key: "defaultProps", get: function() {
    return { allowSameDay: false, dateFormat: "MM/dd/yyyy", dateFormatCalendar: "LLLL yyyy", onChange: function() {
    }, disabled: false, disabledKeyboardNavigation: false, dropdownMode: "scroll", onFocus: function() {
    }, onBlur: function() {
    }, onKeyDown: function() {
    }, onInputClick: function() {
    }, onSelect: function() {
    }, onClickOutside: function() {
    }, onMonthChange: function() {
    }, onCalendarOpen: function() {
    }, onCalendarClose: function() {
    }, preventOpenOnFocus: false, onYearChange: function() {
    }, onInputError: function() {
    }, monthsShown: 1, readOnly: false, withPortal: false, selectsDisabledDaysInRange: false, shouldCloseOnSelect: true, showTimeSelect: false, showTimeInput: false, showPreviousMonths: false, showMonthYearPicker: false, showFullMonthYearPicker: false, showTwoColumnMonthYearPicker: false, showFourColumnMonthYearPicker: false, showYearPicker: false, showQuarterYearPicker: false, showWeekPicker: false, strictParsing: false, timeIntervals: 30, timeCaption: "Time", previousMonthAriaLabel: "Previous Month", previousMonthButtonLabel: "Previous Month", nextMonthAriaLabel: "Next Month", nextMonthButtonLabel: "Next Month", previousYearAriaLabel: "Previous Year", previousYearButtonLabel: "Previous Year", nextYearAriaLabel: "Next Year", nextYearButtonLabel: "Next Year", timeInputLabel: "Time", enableTabLoop: true, yearItemNumber: Ne, focusSelectedMonth: false, showPopperArrow: true, excludeScrollbar: true, customTimeInput: null, calendarStartDay: void 0, toggleCalendarOnIconClick: false };
  } }]), s4;
}(), tr = "input", rr = "navigate";
function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const DatePickerCss = process.env.NODE_ENV === "production" ? {
  name: "1b2vhat",
  styles: ".react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow,.react-datepicker__navigation-icon::before{border-color:#ccc;border-style:solid;border-width:3px 3px 0 0;content:'';display:block;height:9px;position:absolute;top:6px;width:9px;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle{margin-left:-4px;position:absolute;width:0;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::after,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after{box-sizing:content-box;position:absolute;border:8px solid transparent;height:0;width:1px;content:'';z-index:-1;border-width:8px;left:-8px;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before{border-bottom-color:#aeaeae;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle{top:0;margin-top:-8px;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after{border-top:none;border-bottom-color:#f0f0f0;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after{top:0;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before{top:-1px;border-bottom-color:#aeaeae;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle{bottom:0;margin-bottom:-8px;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::after{border-bottom:none;border-top-color:#fff;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::after{bottom:0;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before{bottom:-1px;border-top-color:#aeaeae;}.react-datepicker-wrapper{display:inline-block;padding:0;border:0;width:100%;}.react-datepicker{font-family:'Helvetica Neue',helvetica,arial,sans-serif;font-size:0.8rem;background-color:#fff;color:#000;border:1px solid #aeaeae;border-radius:0.3rem;display:inline-block;position:relative;}.react-datepicker--time-only .react-datepicker__triangle{left:35px;}.react-datepicker--time-only .react-datepicker__time-container{border-left:0;}.react-datepicker--time-only .react-datepicker__time,.react-datepicker--time-only .react-datepicker__time-box{border-bottom-left-radius:0.3rem;border-bottom-right-radius:0.3rem;}.react-datepicker__triangle{position:absolute;left:50px;}.react-datepicker-popper{z-index:1;}.react-datepicker-popper[data-placement^='bottom']{padding-top:10px;}.react-datepicker-popper[data-placement='bottom-end'] .react-datepicker__triangle,.react-datepicker-popper[data-placement='top-end'] .react-datepicker__triangle{left:auto;right:50px;}.react-datepicker-popper[data-placement^='top']{padding-bottom:10px;}.react-datepicker-popper[data-placement^='right']{padding-left:8px;}.react-datepicker-popper[data-placement^='right'] .react-datepicker__triangle{left:auto;right:42px;}.react-datepicker-popper[data-placement^='left']{padding-right:8px;}.react-datepicker-popper[data-placement^='left'] .react-datepicker__triangle{left:42px;right:auto;}.react-datepicker__header{text-align:center;background-color:#f0f0f0;border-bottom:1px solid #aeaeae;border-top-left-radius:0.3rem;padding:8px 0;position:relative;}.react-datepicker__header--time{padding-bottom:8px;padding-left:5px;padding-right:5px;}.react-datepicker__header--time:not(.react-datepicker__header--time--only){border-top-left-radius:0;}.react-datepicker__header:not(.react-datepicker__header--has-time-select){border-top-right-radius:0.3rem;}.react-datepicker__year-dropdown-container--select,.react-datepicker__month-dropdown-container--select,.react-datepicker__month-year-dropdown-container--select,.react-datepicker__year-dropdown-container--scroll,.react-datepicker__month-dropdown-container--scroll,.react-datepicker__month-year-dropdown-container--scroll{display:inline-block;margin:0 2px;}.react-datepicker__current-month,.react-datepicker-time__header,.react-datepicker-year-header{margin-top:0;color:#000;font-weight:bold;font-size:0.944rem;}.react-datepicker-time__header{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;}.react-datepicker__navigation{align-items:center;background:none;display:flex;justify-content:center;text-align:center;cursor:pointer;position:absolute;top:2px;padding:0;border:none;z-index:1;height:32px;width:32px;text-indent:-999em;overflow:hidden;}.react-datepicker__navigation--previous{left:2px;}.react-datepicker__navigation--next{right:2px;}.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button){right:85px;}.react-datepicker__navigation--years{position:relative;top:0;display:block;margin-left:auto;margin-right:auto;}.react-datepicker__navigation--years-previous{top:4px;}.react-datepicker__navigation--years-upcoming{top:-4px;}.react-datepicker__navigation:hover *::before{border-color:#a6a6a6;}.react-datepicker__navigation-icon{position:relative;top:-1px;font-size:20px;width:0;}.react-datepicker__navigation-icon--next{left:-2px;}.react-datepicker__navigation-icon--next::before{transform:rotate(45deg);left:-7px;}.react-datepicker__navigation-icon--previous{right:-2px;}.react-datepicker__navigation-icon--previous::before{transform:rotate(225deg);right:-7px;}.react-datepicker__month-container{float:left;}.react-datepicker__year{margin:0.4rem;text-align:center;}.react-datepicker__year-wrapper{display:flex;flex-wrap:wrap;max-width:180px;}.react-datepicker__year .react-datepicker__year-text{display:inline-block;width:4rem;margin:2px;}.react-datepicker__month{margin:0.4rem;text-align:center;}.react-datepicker__month .react-datepicker__month-text,.react-datepicker__month .react-datepicker__quarter-text{display:inline-block;width:4rem;margin:2px;}.react-datepicker__input-time-container{clear:both;width:100%;float:left;margin:5px 0 10px 15px;text-align:left;}.react-datepicker__input-time-container .react-datepicker-time__caption{display:inline-block;}.react-datepicker__input-time-container .react-datepicker-time__input-container{display:inline-block;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input{display:inline-block;margin-left:10px;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input{width:auto;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type='time']::-webkit-inner-spin-button,.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type='time']::-webkit-outer-spin-button{-webkit-appearance:none;margin:0;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type='time']{-moz-appearance:textfield;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__delimiter{margin-left:5px;display:inline-block;}.react-datepicker__time-container{float:right;border-left:1px solid #aeaeae;width:85px;}.react-datepicker__time-container--with-today-button{display:inline;border:1px solid #aeaeae;border-radius:0.3rem;position:absolute;right:-72px;top:0;}.react-datepicker__time-container .react-datepicker__time{position:relative;background:white;border-bottom-right-radius:0.3rem;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box{width:85px;overflow-x:hidden;margin:0 auto;text-align:center;border-bottom-right-radius:0.3rem;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list{list-style:none;margin:0;height:calc(195px + (1.7rem / 2));overflow-y:scroll;padding-right:0;padding-left:0;width:100%;box-sizing:content-box;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item{height:30px;padding:5px 10px;white-space:nowrap;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover{cursor:pointer;background-color:#f0f0f0;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected{background-color:#216ba5;color:white;font-weight:bold;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover{background-color:#216ba5;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled{color:#ccc;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover{cursor:default;background-color:transparent;}.react-datepicker__week-number{color:#ccc;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:0.166rem;}.react-datepicker__week-number.react-datepicker__week-number--clickable{cursor:pointer;}.react-datepicker__week-number.react-datepicker__week-number--clickable:hover{border-radius:0.3rem;background-color:#f0f0f0;}.react-datepicker__day-names,.react-datepicker__week{white-space:nowrap;}.react-datepicker__day-names{margin-bottom:-8px;}.react-datepicker__day-name,.react-datepicker__day,.react-datepicker__time-name{color:#000;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:0.166rem;}.react-datepicker__month--selected,.react-datepicker__month--in-selecting-range,.react-datepicker__month--in-range,.react-datepicker__quarter--selected,.react-datepicker__quarter--in-selecting-range,.react-datepicker__quarter--in-range{border-radius:0.3rem;background-color:#216ba5;color:#fff;}.react-datepicker__month--selected:hover,.react-datepicker__month--in-selecting-range:hover,.react-datepicker__month--in-range:hover,.react-datepicker__quarter--selected:hover,.react-datepicker__quarter--in-selecting-range:hover,.react-datepicker__quarter--in-range:hover{background-color:#1d5d90;}.react-datepicker__month--disabled,.react-datepicker__quarter--disabled{color:#ccc;pointer-events:none;}.react-datepicker__month--disabled:hover,.react-datepicker__quarter--disabled:hover{cursor:default;background-color:transparent;}.react-datepicker__day,.react-datepicker__month-text,.react-datepicker__quarter-text,.react-datepicker__year-text{cursor:pointer;}.react-datepicker__day:hover,.react-datepicker__month-text:hover,.react-datepicker__quarter-text:hover,.react-datepicker__year-text:hover{border-radius:0.3rem;background-color:#f0f0f0;}.react-datepicker__day--today,.react-datepicker__month-text--today,.react-datepicker__quarter-text--today,.react-datepicker__year-text--today{font-weight:bold;}.react-datepicker__day--highlighted,.react-datepicker__month-text--highlighted,.react-datepicker__quarter-text--highlighted,.react-datepicker__year-text--highlighted{border-radius:0.3rem;background-color:#3dcc4a;color:#fff;}.react-datepicker__day--highlighted:hover,.react-datepicker__month-text--highlighted:hover,.react-datepicker__quarter-text--highlighted:hover,.react-datepicker__year-text--highlighted:hover{background-color:#32be3f;}.react-datepicker__day--highlighted-custom-1,.react-datepicker__month-text--highlighted-custom-1,.react-datepicker__quarter-text--highlighted-custom-1,.react-datepicker__year-text--highlighted-custom-1{color:magenta;}.react-datepicker__day--highlighted-custom-2,.react-datepicker__month-text--highlighted-custom-2,.react-datepicker__quarter-text--highlighted-custom-2,.react-datepicker__year-text--highlighted-custom-2{color:green;}.react-datepicker__day--selected,.react-datepicker__day--in-selecting-range,.react-datepicker__day--in-range,.react-datepicker__month-text--selected,.react-datepicker__month-text--in-selecting-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--selected,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--selected,.react-datepicker__year-text--in-selecting-range,.react-datepicker__year-text--in-range{border-radius:0.3rem;background-color:#216ba5;color:#fff;}.react-datepicker__day--selected:hover,.react-datepicker__day--in-selecting-range:hover,.react-datepicker__day--in-range:hover,.react-datepicker__month-text--selected:hover,.react-datepicker__month-text--in-selecting-range:hover,.react-datepicker__month-text--in-range:hover,.react-datepicker__quarter-text--selected:hover,.react-datepicker__quarter-text--in-selecting-range:hover,.react-datepicker__quarter-text--in-range:hover,.react-datepicker__year-text--selected:hover,.react-datepicker__year-text--in-selecting-range:hover,.react-datepicker__year-text--in-range:hover{background-color:#1d5d90;}.react-datepicker__day--keyboard-selected,.react-datepicker__month-text--keyboard-selected,.react-datepicker__quarter-text--keyboard-selected,.react-datepicker__year-text--keyboard-selected{border-radius:0.3rem;background-color:#2a87d0;color:#fff;}.react-datepicker__day--keyboard-selected:hover,.react-datepicker__month-text--keyboard-selected:hover,.react-datepicker__quarter-text--keyboard-selected:hover,.react-datepicker__year-text--keyboard-selected:hover{background-color:#1d5d90;}.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range),.react-datepicker__month-text--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range),.react-datepicker__quarter-text--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range),.react-datepicker__year-text--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range){background-color:rgba(33, 107, 165, 0.5);}.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range){background-color:#f0f0f0;color:#000;}.react-datepicker__day--disabled,.react-datepicker__month-text--disabled,.react-datepicker__quarter-text--disabled,.react-datepicker__year-text--disabled{cursor:default;color:#ccc;}.react-datepicker__day--disabled:hover,.react-datepicker__month-text--disabled:hover,.react-datepicker__quarter-text--disabled:hover,.react-datepicker__year-text--disabled:hover{background-color:transparent;}.react-datepicker__month-text.react-datepicker__month--selected:hover,.react-datepicker__month-text.react-datepicker__month--in-range:hover,.react-datepicker__month-text.react-datepicker__quarter--selected:hover,.react-datepicker__month-text.react-datepicker__quarter--in-range:hover,.react-datepicker__quarter-text.react-datepicker__month--selected:hover,.react-datepicker__quarter-text.react-datepicker__month--in-range:hover,.react-datepicker__quarter-text.react-datepicker__quarter--selected:hover,.react-datepicker__quarter-text.react-datepicker__quarter--in-range:hover{background-color:#216ba5;}.react-datepicker__month-text:hover,.react-datepicker__quarter-text:hover{background-color:#f0f0f0;}.react-datepicker__input-container{position:relative;display:inline-block;width:100%;}.react-datepicker__year-read-view,.react-datepicker__month-read-view,.react-datepicker__month-year-read-view{border:1px solid transparent;border-radius:0.3rem;position:relative;}.react-datepicker__year-read-view:hover,.react-datepicker__month-read-view:hover,.react-datepicker__month-year-read-view:hover{cursor:pointer;}.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow{border-top-color:#b3b3b3;}.react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow{transform:rotate(135deg);right:-16px;top:0;}.react-datepicker__year-dropdown,.react-datepicker__month-dropdown,.react-datepicker__month-year-dropdown{background-color:#f0f0f0;position:absolute;width:50%;left:25%;top:30px;z-index:1;text-align:center;border-radius:0.3rem;border:1px solid #aeaeae;}.react-datepicker__year-dropdown:hover,.react-datepicker__month-dropdown:hover,.react-datepicker__month-year-dropdown:hover{cursor:pointer;}.react-datepicker__year-dropdown--scrollable,.react-datepicker__month-dropdown--scrollable,.react-datepicker__month-year-dropdown--scrollable{height:150px;overflow-y:scroll;}.react-datepicker__year-option,.react-datepicker__month-option,.react-datepicker__month-year-option{line-height:20px;width:100%;display:block;margin-left:auto;margin-right:auto;}.react-datepicker__year-option:first-of-type,.react-datepicker__month-option:first-of-type,.react-datepicker__month-year-option:first-of-type{border-top-left-radius:0.3rem;border-top-right-radius:0.3rem;}.react-datepicker__year-option:last-of-type,.react-datepicker__month-option:last-of-type,.react-datepicker__month-year-option:last-of-type{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-bottom-left-radius:0.3rem;border-bottom-right-radius:0.3rem;}.react-datepicker__year-option:hover,.react-datepicker__month-option:hover,.react-datepicker__month-year-option:hover{background-color:#ccc;}.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming{border-bottom-color:#b3b3b3;}.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous{border-top-color:#b3b3b3;}.react-datepicker__year-option--selected,.react-datepicker__month-option--selected,.react-datepicker__month-year-option--selected{position:absolute;left:15px;}.react-datepicker__close-icon{cursor:pointer;background-color:transparent;border:0;outline:0;padding:0 6px 0 0;position:absolute;top:0;right:0;height:100%;display:table-cell;vertical-align:middle;}.react-datepicker__close-icon::after{cursor:pointer;background-color:#216ba5;color:#fff;border-radius:50%;height:16px;width:16px;padding:2px;font-size:12px;line-height:1;text-align:center;display:table-cell;vertical-align:middle;content:'×';}.react-datepicker__today-button{background:#f0f0f0;border-top:1px solid #aeaeae;cursor:pointer;text-align:center;font-weight:bold;padding:5px 0;clear:left;}.react-datepicker__portal{position:fixed;width:100vw;height:100vh;background-color:rgba(0, 0, 0, 0.8);left:0;top:0;justify-content:center;align-items:center;display:flex;z-index:2147483647;}.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:3rem;line-height:3rem;}@media (max-width: 400px),(max-height: 550px){.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:2rem;line-height:2rem;}}.react-datepicker__portal .react-datepicker__current-month,.react-datepicker__portal .react-datepicker-time__header{font-size:1.44rem;}"
} : {
  name: "850x2u-DatePickerCss",
  styles: ".react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow,.react-datepicker__navigation-icon::before{border-color:#ccc;border-style:solid;border-width:3px 3px 0 0;content:'';display:block;height:9px;position:absolute;top:6px;width:9px;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle{margin-left:-4px;position:absolute;width:0;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::after,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after{box-sizing:content-box;position:absolute;border:8px solid transparent;height:0;width:1px;content:'';z-index:-1;border-width:8px;left:-8px;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before{border-bottom-color:#aeaeae;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle{top:0;margin-top:-8px;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after{border-top:none;border-bottom-color:#f0f0f0;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after{top:0;}.react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before{top:-1px;border-bottom-color:#aeaeae;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle{bottom:0;margin-bottom:-8px;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before,.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::after{border-bottom:none;border-top-color:#fff;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::after{bottom:0;}.react-datepicker-popper[data-placement^='top'] .react-datepicker__triangle::before{bottom:-1px;border-top-color:#aeaeae;}.react-datepicker-wrapper{display:inline-block;padding:0;border:0;width:100%;}.react-datepicker{font-family:'Helvetica Neue',helvetica,arial,sans-serif;font-size:0.8rem;background-color:#fff;color:#000;border:1px solid #aeaeae;border-radius:0.3rem;display:inline-block;position:relative;}.react-datepicker--time-only .react-datepicker__triangle{left:35px;}.react-datepicker--time-only .react-datepicker__time-container{border-left:0;}.react-datepicker--time-only .react-datepicker__time,.react-datepicker--time-only .react-datepicker__time-box{border-bottom-left-radius:0.3rem;border-bottom-right-radius:0.3rem;}.react-datepicker__triangle{position:absolute;left:50px;}.react-datepicker-popper{z-index:1;}.react-datepicker-popper[data-placement^='bottom']{padding-top:10px;}.react-datepicker-popper[data-placement='bottom-end'] .react-datepicker__triangle,.react-datepicker-popper[data-placement='top-end'] .react-datepicker__triangle{left:auto;right:50px;}.react-datepicker-popper[data-placement^='top']{padding-bottom:10px;}.react-datepicker-popper[data-placement^='right']{padding-left:8px;}.react-datepicker-popper[data-placement^='right'] .react-datepicker__triangle{left:auto;right:42px;}.react-datepicker-popper[data-placement^='left']{padding-right:8px;}.react-datepicker-popper[data-placement^='left'] .react-datepicker__triangle{left:42px;right:auto;}.react-datepicker__header{text-align:center;background-color:#f0f0f0;border-bottom:1px solid #aeaeae;border-top-left-radius:0.3rem;padding:8px 0;position:relative;}.react-datepicker__header--time{padding-bottom:8px;padding-left:5px;padding-right:5px;}.react-datepicker__header--time:not(.react-datepicker__header--time--only){border-top-left-radius:0;}.react-datepicker__header:not(.react-datepicker__header--has-time-select){border-top-right-radius:0.3rem;}.react-datepicker__year-dropdown-container--select,.react-datepicker__month-dropdown-container--select,.react-datepicker__month-year-dropdown-container--select,.react-datepicker__year-dropdown-container--scroll,.react-datepicker__month-dropdown-container--scroll,.react-datepicker__month-year-dropdown-container--scroll{display:inline-block;margin:0 2px;}.react-datepicker__current-month,.react-datepicker-time__header,.react-datepicker-year-header{margin-top:0;color:#000;font-weight:bold;font-size:0.944rem;}.react-datepicker-time__header{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;}.react-datepicker__navigation{align-items:center;background:none;display:flex;justify-content:center;text-align:center;cursor:pointer;position:absolute;top:2px;padding:0;border:none;z-index:1;height:32px;width:32px;text-indent:-999em;overflow:hidden;}.react-datepicker__navigation--previous{left:2px;}.react-datepicker__navigation--next{right:2px;}.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button){right:85px;}.react-datepicker__navigation--years{position:relative;top:0;display:block;margin-left:auto;margin-right:auto;}.react-datepicker__navigation--years-previous{top:4px;}.react-datepicker__navigation--years-upcoming{top:-4px;}.react-datepicker__navigation:hover *::before{border-color:#a6a6a6;}.react-datepicker__navigation-icon{position:relative;top:-1px;font-size:20px;width:0;}.react-datepicker__navigation-icon--next{left:-2px;}.react-datepicker__navigation-icon--next::before{transform:rotate(45deg);left:-7px;}.react-datepicker__navigation-icon--previous{right:-2px;}.react-datepicker__navigation-icon--previous::before{transform:rotate(225deg);right:-7px;}.react-datepicker__month-container{float:left;}.react-datepicker__year{margin:0.4rem;text-align:center;}.react-datepicker__year-wrapper{display:flex;flex-wrap:wrap;max-width:180px;}.react-datepicker__year .react-datepicker__year-text{display:inline-block;width:4rem;margin:2px;}.react-datepicker__month{margin:0.4rem;text-align:center;}.react-datepicker__month .react-datepicker__month-text,.react-datepicker__month .react-datepicker__quarter-text{display:inline-block;width:4rem;margin:2px;}.react-datepicker__input-time-container{clear:both;width:100%;float:left;margin:5px 0 10px 15px;text-align:left;}.react-datepicker__input-time-container .react-datepicker-time__caption{display:inline-block;}.react-datepicker__input-time-container .react-datepicker-time__input-container{display:inline-block;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input{display:inline-block;margin-left:10px;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input{width:auto;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type='time']::-webkit-inner-spin-button,.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type='time']::-webkit-outer-spin-button{-webkit-appearance:none;margin:0;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type='time']{-moz-appearance:textfield;}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__delimiter{margin-left:5px;display:inline-block;}.react-datepicker__time-container{float:right;border-left:1px solid #aeaeae;width:85px;}.react-datepicker__time-container--with-today-button{display:inline;border:1px solid #aeaeae;border-radius:0.3rem;position:absolute;right:-72px;top:0;}.react-datepicker__time-container .react-datepicker__time{position:relative;background:white;border-bottom-right-radius:0.3rem;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box{width:85px;overflow-x:hidden;margin:0 auto;text-align:center;border-bottom-right-radius:0.3rem;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list{list-style:none;margin:0;height:calc(195px + (1.7rem / 2));overflow-y:scroll;padding-right:0;padding-left:0;width:100%;box-sizing:content-box;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item{height:30px;padding:5px 10px;white-space:nowrap;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover{cursor:pointer;background-color:#f0f0f0;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected{background-color:#216ba5;color:white;font-weight:bold;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover{background-color:#216ba5;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled{color:#ccc;}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover{cursor:default;background-color:transparent;}.react-datepicker__week-number{color:#ccc;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:0.166rem;}.react-datepicker__week-number.react-datepicker__week-number--clickable{cursor:pointer;}.react-datepicker__week-number.react-datepicker__week-number--clickable:hover{border-radius:0.3rem;background-color:#f0f0f0;}.react-datepicker__day-names,.react-datepicker__week{white-space:nowrap;}.react-datepicker__day-names{margin-bottom:-8px;}.react-datepicker__day-name,.react-datepicker__day,.react-datepicker__time-name{color:#000;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:0.166rem;}.react-datepicker__month--selected,.react-datepicker__month--in-selecting-range,.react-datepicker__month--in-range,.react-datepicker__quarter--selected,.react-datepicker__quarter--in-selecting-range,.react-datepicker__quarter--in-range{border-radius:0.3rem;background-color:#216ba5;color:#fff;}.react-datepicker__month--selected:hover,.react-datepicker__month--in-selecting-range:hover,.react-datepicker__month--in-range:hover,.react-datepicker__quarter--selected:hover,.react-datepicker__quarter--in-selecting-range:hover,.react-datepicker__quarter--in-range:hover{background-color:#1d5d90;}.react-datepicker__month--disabled,.react-datepicker__quarter--disabled{color:#ccc;pointer-events:none;}.react-datepicker__month--disabled:hover,.react-datepicker__quarter--disabled:hover{cursor:default;background-color:transparent;}.react-datepicker__day,.react-datepicker__month-text,.react-datepicker__quarter-text,.react-datepicker__year-text{cursor:pointer;}.react-datepicker__day:hover,.react-datepicker__month-text:hover,.react-datepicker__quarter-text:hover,.react-datepicker__year-text:hover{border-radius:0.3rem;background-color:#f0f0f0;}.react-datepicker__day--today,.react-datepicker__month-text--today,.react-datepicker__quarter-text--today,.react-datepicker__year-text--today{font-weight:bold;}.react-datepicker__day--highlighted,.react-datepicker__month-text--highlighted,.react-datepicker__quarter-text--highlighted,.react-datepicker__year-text--highlighted{border-radius:0.3rem;background-color:#3dcc4a;color:#fff;}.react-datepicker__day--highlighted:hover,.react-datepicker__month-text--highlighted:hover,.react-datepicker__quarter-text--highlighted:hover,.react-datepicker__year-text--highlighted:hover{background-color:#32be3f;}.react-datepicker__day--highlighted-custom-1,.react-datepicker__month-text--highlighted-custom-1,.react-datepicker__quarter-text--highlighted-custom-1,.react-datepicker__year-text--highlighted-custom-1{color:magenta;}.react-datepicker__day--highlighted-custom-2,.react-datepicker__month-text--highlighted-custom-2,.react-datepicker__quarter-text--highlighted-custom-2,.react-datepicker__year-text--highlighted-custom-2{color:green;}.react-datepicker__day--selected,.react-datepicker__day--in-selecting-range,.react-datepicker__day--in-range,.react-datepicker__month-text--selected,.react-datepicker__month-text--in-selecting-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--selected,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--selected,.react-datepicker__year-text--in-selecting-range,.react-datepicker__year-text--in-range{border-radius:0.3rem;background-color:#216ba5;color:#fff;}.react-datepicker__day--selected:hover,.react-datepicker__day--in-selecting-range:hover,.react-datepicker__day--in-range:hover,.react-datepicker__month-text--selected:hover,.react-datepicker__month-text--in-selecting-range:hover,.react-datepicker__month-text--in-range:hover,.react-datepicker__quarter-text--selected:hover,.react-datepicker__quarter-text--in-selecting-range:hover,.react-datepicker__quarter-text--in-range:hover,.react-datepicker__year-text--selected:hover,.react-datepicker__year-text--in-selecting-range:hover,.react-datepicker__year-text--in-range:hover{background-color:#1d5d90;}.react-datepicker__day--keyboard-selected,.react-datepicker__month-text--keyboard-selected,.react-datepicker__quarter-text--keyboard-selected,.react-datepicker__year-text--keyboard-selected{border-radius:0.3rem;background-color:#2a87d0;color:#fff;}.react-datepicker__day--keyboard-selected:hover,.react-datepicker__month-text--keyboard-selected:hover,.react-datepicker__quarter-text--keyboard-selected:hover,.react-datepicker__year-text--keyboard-selected:hover{background-color:#1d5d90;}.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range),.react-datepicker__month-text--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range),.react-datepicker__quarter-text--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range),.react-datepicker__year-text--in-selecting-range:not(.react-datepicker__day--in-range, .react-datepicker__month-text--in-range, .react-datepicker__quarter-text--in-range, .react-datepicker__year-text--in-range){background-color:rgba(33, 107, 165, 0.5);}.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range, .react-datepicker__month-text--in-selecting-range, .react-datepicker__quarter-text--in-selecting-range, .react-datepicker__year-text--in-selecting-range){background-color:#f0f0f0;color:#000;}.react-datepicker__day--disabled,.react-datepicker__month-text--disabled,.react-datepicker__quarter-text--disabled,.react-datepicker__year-text--disabled{cursor:default;color:#ccc;}.react-datepicker__day--disabled:hover,.react-datepicker__month-text--disabled:hover,.react-datepicker__quarter-text--disabled:hover,.react-datepicker__year-text--disabled:hover{background-color:transparent;}.react-datepicker__month-text.react-datepicker__month--selected:hover,.react-datepicker__month-text.react-datepicker__month--in-range:hover,.react-datepicker__month-text.react-datepicker__quarter--selected:hover,.react-datepicker__month-text.react-datepicker__quarter--in-range:hover,.react-datepicker__quarter-text.react-datepicker__month--selected:hover,.react-datepicker__quarter-text.react-datepicker__month--in-range:hover,.react-datepicker__quarter-text.react-datepicker__quarter--selected:hover,.react-datepicker__quarter-text.react-datepicker__quarter--in-range:hover{background-color:#216ba5;}.react-datepicker__month-text:hover,.react-datepicker__quarter-text:hover{background-color:#f0f0f0;}.react-datepicker__input-container{position:relative;display:inline-block;width:100%;}.react-datepicker__year-read-view,.react-datepicker__month-read-view,.react-datepicker__month-year-read-view{border:1px solid transparent;border-radius:0.3rem;position:relative;}.react-datepicker__year-read-view:hover,.react-datepicker__month-read-view:hover,.react-datepicker__month-year-read-view:hover{cursor:pointer;}.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow{border-top-color:#b3b3b3;}.react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow{transform:rotate(135deg);right:-16px;top:0;}.react-datepicker__year-dropdown,.react-datepicker__month-dropdown,.react-datepicker__month-year-dropdown{background-color:#f0f0f0;position:absolute;width:50%;left:25%;top:30px;z-index:1;text-align:center;border-radius:0.3rem;border:1px solid #aeaeae;}.react-datepicker__year-dropdown:hover,.react-datepicker__month-dropdown:hover,.react-datepicker__month-year-dropdown:hover{cursor:pointer;}.react-datepicker__year-dropdown--scrollable,.react-datepicker__month-dropdown--scrollable,.react-datepicker__month-year-dropdown--scrollable{height:150px;overflow-y:scroll;}.react-datepicker__year-option,.react-datepicker__month-option,.react-datepicker__month-year-option{line-height:20px;width:100%;display:block;margin-left:auto;margin-right:auto;}.react-datepicker__year-option:first-of-type,.react-datepicker__month-option:first-of-type,.react-datepicker__month-year-option:first-of-type{border-top-left-radius:0.3rem;border-top-right-radius:0.3rem;}.react-datepicker__year-option:last-of-type,.react-datepicker__month-option:last-of-type,.react-datepicker__month-year-option:last-of-type{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-bottom-left-radius:0.3rem;border-bottom-right-radius:0.3rem;}.react-datepicker__year-option:hover,.react-datepicker__month-option:hover,.react-datepicker__month-year-option:hover{background-color:#ccc;}.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming{border-bottom-color:#b3b3b3;}.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous{border-top-color:#b3b3b3;}.react-datepicker__year-option--selected,.react-datepicker__month-option--selected,.react-datepicker__month-year-option--selected{position:absolute;left:15px;}.react-datepicker__close-icon{cursor:pointer;background-color:transparent;border:0;outline:0;padding:0 6px 0 0;position:absolute;top:0;right:0;height:100%;display:table-cell;vertical-align:middle;}.react-datepicker__close-icon::after{cursor:pointer;background-color:#216ba5;color:#fff;border-radius:50%;height:16px;width:16px;padding:2px;font-size:12px;line-height:1;text-align:center;display:table-cell;vertical-align:middle;content:'×';}.react-datepicker__today-button{background:#f0f0f0;border-top:1px solid #aeaeae;cursor:pointer;text-align:center;font-weight:bold;padding:5px 0;clear:left;}.react-datepicker__portal{position:fixed;width:100vw;height:100vh;background-color:rgba(0, 0, 0, 0.8);left:0;top:0;justify-content:center;align-items:center;display:flex;z-index:2147483647;}.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:3rem;line-height:3rem;}@media (max-width: 400px),(max-height: 550px){.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:2rem;line-height:2rem;}}.react-datepicker__portal .react-datepicker__current-month,.react-datepicker__portal .react-datepicker-time__header{font-size:1.44rem;};label:DatePickerCss;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9EYXRlUGlja2VyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQnlCIiwiZmlsZSI6Ii9Vc2Vycy94c3RldmVueXVuZy9Db2RlL2tsYXBhdWRpZW5jZS9wYWNrYWdlcy92aXN1YWwtZWRpdG9yL3Zpc3VhbC1lZGl0b3Ivc3JjL2ZpZWxkcy9EYXRlUGlja2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpZWxkQ29tcG9uZW50IH0gZnJvbSAnc3JjL3R5cGVzJ1xuaW1wb3J0IHsgQnV0dG9uSWNvbiwgRmllbGQsIEljb25DYWxlbmRhciwgSW5wdXQgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aSdcbmltcG9ydCB7IGRlZmluZUZpZWxkIH0gZnJvbSAnc3JjL2ZpZWxkcy91dGlscydcbmltcG9ydCBSZWFjdERhdGVQaWNrZXIgZnJvbSAncmVhY3QtZGF0ZXBpY2tlcidcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHByZXZlbnQgfSBmcm9tICdzcmMvZnVuY3Rpb25zL2Z1bmN0aW9ucydcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHsgdXNlVW5pcUlkIH0gZnJvbSAnc3JjL2hvb2tzL3VzZVVuaXFJZCdcblxudHlwZSBGaWVsZEFyZ3MgPSB7XG4gIGxhYmVsPzogc3RyaW5nXG4gIGhlbHA/OiBzdHJpbmdcbiAgZGVmYXVsdD86IHN0cmluZ1xuICB0aW1lPzogYm9vbGVhblxufVxuXG5jb25zdCBEYXRlUGlja2VyQ3NzID0gY3NzYFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3csXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvdyxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvbjo6YmVmb3JlIHtcbiAgICBib3JkZXItY29sb3I6ICNjY2M7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDNweCAzcHggMCAwO1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogOXB4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDZweDtcbiAgICB3aWR0aDogOXB4O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49J3RvcCddIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0nYm90dG9tJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xuICAgIG1hcmdpbi1sZWZ0OiAtNHB4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSd0b3AnXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlLFxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdib3R0b20nXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlLFxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSd0b3AnXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YWZ0ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49J2JvdHRvbSddXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlOjphZnRlciB7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvcmRlcjogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIGhlaWdodDogMDtcbiAgICB3aWR0aDogMXB4O1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHotaW5kZXg6IC0xO1xuICAgIGJvcmRlci13aWR0aDogOHB4O1xuICAgIGxlZnQ6IC04cHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ndG9wJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0nYm90dG9tJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSB7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2FlYWVhZTtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49J2JvdHRvbSddXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlIHtcbiAgICB0b3A6IDA7XG4gICAgbWFyZ2luLXRvcDogLThweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdib3R0b20nXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlLFxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdib3R0b20nXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YWZ0ZXIge1xuICAgIGJvcmRlci10b3A6IG5vbmU7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2YwZjBmMDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdib3R0b20nXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YWZ0ZXIge1xuICAgIHRvcDogMDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdib3R0b20nXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZTo6YmVmb3JlIHtcbiAgICB0b3A6IC0xcHg7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2FlYWVhZTtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudF49J3RvcCddIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSB7XG4gICAgYm90dG9tOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IC04cHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ndG9wJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ndG9wJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmFmdGVyIHtcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xuICAgIGJvcmRlci10b3AtY29sb3I6ICNmZmY7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ndG9wJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmFmdGVyIHtcbiAgICBib3R0b206IDA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ndG9wJ11cbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGU6OmJlZm9yZSB7XG4gICAgYm90dG9tOiAtMXB4O1xuICAgIGJvcmRlci10b3AtY29sb3I6ICNhZWFlYWU7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlci13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlciB7XG4gICAgZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EgTmV1ZScsIGhlbHZldGljYSwgYXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiAwLjhyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBjb2xvcjogIzAwMDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYWVhZWFlO1xuICAgIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXItLXRpbWUtb25seSAucmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGUge1xuICAgIGxlZnQ6IDM1cHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItLXRpbWUtb25seSAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIge1xuICAgIGJvcmRlci1sZWZ0OiAwO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHkgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUsXG4gIC5yZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHkgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtYm94IHtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjNyZW07XG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuM3JlbTtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDUwcHg7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXIge1xuICAgIHotaW5kZXg6IDE7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0nYm90dG9tJ10ge1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyLXBvcHBlcltkYXRhLXBsYWNlbWVudD0nYm90dG9tLWVuZCddXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlLFxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnQ9J3RvcC1lbmQnXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSB7XG4gICAgbGVmdDogYXV0bztcbiAgICByaWdodDogNTBweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSd0b3AnXSB7XG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ncmlnaHQnXSB7XG4gICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXItcG9wcGVyW2RhdGEtcGxhY2VtZW50Xj0ncmlnaHQnXVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190cmlhbmdsZSB7XG4gICAgbGVmdDogYXV0bztcbiAgICByaWdodDogNDJweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdsZWZ0J10ge1xuICAgIHBhZGRpbmctcmlnaHQ6IDhweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJbZGF0YS1wbGFjZW1lbnRePSdsZWZ0J10gLnJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlIHtcbiAgICBsZWZ0OiA0MnB4O1xuICAgIHJpZ2h0OiBhdXRvO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhZWFlYWU7XG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4zcmVtO1xuICAgIHBhZGRpbmc6IDhweCAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS10aW1lIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogOHB4O1xuICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS10aW1lOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS10aW1lLS1vbmx5KSB7XG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS1oYXMtdGltZS1zZWxlY3QpIHtcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4zcmVtO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyLS1zZWxlY3QsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bi1jb250YWluZXItLXNlbGVjdCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tY29udGFpbmVyLS1zZWxlY3QsXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tc2Nyb2xsLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24tY29udGFpbmVyLS1zY3JvbGwsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tc2Nyb2xsIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgbWFyZ2luOiAwIDJweDtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyX19jdXJyZW50LW1vbnRoLFxuICAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyLXllYXItaGVhZGVyIHtcbiAgICBtYXJnaW4tdG9wOiAwO1xuICAgIGNvbG9yOiAjMDAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMC45NDRyZW07XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDJweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICB6LWluZGV4OiAxO1xuICAgIGhlaWdodDogMzJweDtcbiAgICB3aWR0aDogMzJweDtcbiAgICB0ZXh0LWluZGVudDogLTk5OWVtO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzIHtcbiAgICBsZWZ0OiAycHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQge1xuICAgIHJpZ2h0OiAycHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLXdpdGgtdGltZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLXdpdGgtdG9kYXktYnV0dG9uKSB7XG4gICAgcmlnaHQ6IDg1cHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAwO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMge1xuICAgIHRvcDogNHB4O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZyB7XG4gICAgdG9wOiAtNHB4O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uOmhvdmVyICo6OmJlZm9yZSB7XG4gICAgYm9yZGVyLWNvbG9yOiAjYTZhNmE2O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvbiB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogLTFweDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvbi0tbmV4dCB7XG4gICAgbGVmdDogLTJweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi1pY29uLS1uZXh0OjpiZWZvcmUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICBsZWZ0OiAtN3B4O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLWljb24tLXByZXZpb3VzIHtcbiAgICByaWdodDogLTJweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi1pY29uLS1wcmV2aW91czo6YmVmb3JlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgyMjVkZWcpO1xuICAgIHJpZ2h0OiAtN3B4O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWNvbnRhaW5lciB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhciB7XG4gICAgbWFyZ2luOiAwLjRyZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXdyYXBwZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIG1heC13aWR0aDogMTgwcHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXIgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiA0cmVtO1xuICAgIG1hcmdpbjogMnB4O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoIHtcbiAgICBtYXJnaW46IDAuNHJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGggLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiA0cmVtO1xuICAgIG1hcmdpbjogMnB4O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LXRpbWUtY29udGFpbmVyIHtcbiAgICBjbGVhcjogYm90aDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW46IDVweCAwIDEwcHggMTVweDtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19pbnB1dC10aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19jYXB0aW9uIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LXRpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LXRpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9faW5wdXQtdGltZS1jb250YWluZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19pbnB1dC1jb250YWluZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19pbnB1dFxuICAgIGlucHV0IHtcbiAgICB3aWR0aDogYXV0bztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9faW5wdXQtdGltZS1jb250YWluZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19pbnB1dC1jb250YWluZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19pbnB1dFxuICAgIGlucHV0W3R5cGU9J3RpbWUnXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LXRpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXRcbiAgICBpbnB1dFt0eXBlPSd0aW1lJ106Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICBtYXJnaW46IDA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LXRpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXRcbiAgICBpbnB1dFt0eXBlPSd0aW1lJ10ge1xuICAgIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19pbnB1dC10aW1lLWNvbnRhaW5lclxuICAgIC5yZWFjdC1kYXRlcGlja2VyLXRpbWVfX2lucHV0LWNvbnRhaW5lclxuICAgIC5yZWFjdC1kYXRlcGlja2VyLXRpbWVfX2RlbGltaXRlciB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNhZWFlYWU7XG4gICAgd2lkdGg6IDg1cHg7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyLS13aXRoLXRvZGF5LWJ1dHRvbiB7XG4gICAgZGlzcGxheTogaW5saW5lO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhZWFlYWU7XG4gICAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogLTcycHg7XG4gICAgdG9wOiAwO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjNyZW07XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWVcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3gge1xuICAgIHdpZHRoOiA4NXB4O1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuM3JlbTtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWJveFxuICAgIHVsLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBtYXJnaW46IDA7XG4gICAgaGVpZ2h0OiBjYWxjKDE5NXB4ICsgKDEuN3JlbSAvIDIpKTtcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWVcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3hcbiAgICB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3RcbiAgICBsaS5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbSB7XG4gICAgaGVpZ2h0OiAzMHB4O1xuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWVcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3hcbiAgICB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3RcbiAgICBsaS5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWVcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3hcbiAgICB1bC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3RcbiAgICBsaS5yZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbS0tc2VsZWN0ZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTZiYTU7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lclxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190aW1lXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtYm94XG4gICAgdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0XG4gICAgbGkucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0tLXNlbGVjdGVkOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE2YmE1O1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lclxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190aW1lXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtYm94XG4gICAgdWwucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0XG4gICAgbGkucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0tLWRpc2FibGVkIHtcbiAgICBjb2xvcjogI2NjYztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZVxuICAgIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLWJveFxuICAgIHVsLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdFxuICAgIGxpLnJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1kaXNhYmxlZDpob3ZlciB7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyIHtcbiAgICBjb2xvcjogI2NjYztcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDEuN3JlbTtcbiAgICBsaW5lLWhlaWdodDogMS43cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDAuMTY2cmVtO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci5yZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci0tY2xpY2thYmxlIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyLS1jbGlja2FibGU6aG92ZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lcyxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWsge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAtOHB4O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1uYW1lIHtcbiAgICBjb2xvcjogIzAwMDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDEuN3JlbTtcbiAgICBsaW5lLWhlaWdodDogMS43cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDAuMTY2cmVtO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1zZWxlY3RlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1pbi1zZWxlY3RpbmctcmFuZ2UsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC0taW4tcmFuZ2UsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLS1zZWxlY3RlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLWluLXNlbGVjdGluZy1yYW5nZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLWluLXJhbmdlIHtcbiAgICBib3JkZXItcmFkaXVzOiAwLjNyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIxNmJhNTtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLXNlbGVjdGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLWluLXNlbGVjdGluZy1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1pbi1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLXNlbGVjdGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0taW4tc2VsZWN0aW5nLXJhbmdlOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0taW4tcmFuZ2U6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZDVkOTA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1kaXNhYmxlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLWRpc2FibGVkIHtcbiAgICBjb2xvcjogI2NjYztcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLWRpc2FibGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0tZGlzYWJsZWQ6aG92ZXIge1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyX19kYXksXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0IHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQ6aG92ZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19kYXktLXRvZGF5LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tdG9kYXksXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLXRvZGF5LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS10b2RheSB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1oaWdobGlnaHRlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0taGlnaGxpZ2h0ZWQsXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWhpZ2hsaWdodGVkIHtcbiAgICBib3JkZXItcmFkaXVzOiAwLjNyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNkY2M0YTtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1oaWdobGlnaHRlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWhpZ2hsaWdodGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1oaWdobGlnaHRlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taGlnaGxpZ2h0ZWQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMmJlM2Y7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQtY3VzdG9tLTEsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1oaWdobGlnaHRlZC1jdXN0b20tMSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0taGlnaGxpZ2h0ZWQtY3VzdG9tLTEsXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWhpZ2hsaWdodGVkLWN1c3RvbS0xIHtcbiAgICBjb2xvcjogbWFnZW50YTtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1oaWdobGlnaHRlZC1jdXN0b20tMixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWhpZ2hsaWdodGVkLWN1c3RvbS0yLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1oaWdobGlnaHRlZC1jdXN0b20tMixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taGlnaGxpZ2h0ZWQtY3VzdG9tLTIge1xuICAgIGNvbG9yOiBncmVlbjtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXNlbGVjdGVkLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tcmFuZ2UsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLXNlbGVjdGVkLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2UsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWluLXJhbmdlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1zZWxlY3RlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1pbi1yYW5nZSB7XG4gICAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTZiYTU7XG4gICAgY29sb3I6ICNmZmY7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0ZWQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2U6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1zZWxlY3RlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXJhbmdlOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1zZWxlY3RlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tc2VsZWN0ZWQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tcmFuZ2U6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZDVkOTA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0ta2V5Ym9hcmQtc2VsZWN0ZWQsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1rZXlib2FyZC1zZWxlY3RlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0ta2V5Ym9hcmQtc2VsZWN0ZWQsXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWtleWJvYXJkLXNlbGVjdGVkIHtcbiAgICBib3JkZXItcmFkaXVzOiAwLjNyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJhODdkMDtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1rZXlib2FyZC1zZWxlY3RlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWtleWJvYXJkLXNlbGVjdGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1rZXlib2FyZC1zZWxlY3RlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0ta2V5Ym9hcmQtc2VsZWN0ZWQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZDVkOTA7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tcmFuZ2UpLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tcmFuZ2UpLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2U6bm90KC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWluLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1pbi1yYW5nZSksXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1pbi1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0taW4tcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWluLXJhbmdlKSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgzMywgMTA3LCAxNjUsIDAuNSk7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1zZWxlY3RpbmctcmFuZ2VcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZSksXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC0tc2VsZWN0aW5nLXJhbmdlXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXJhbmdlOm5vdCgucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1zZWxlY3RpbmctcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlKSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1zZWxlY3RpbmctcmFuZ2VcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1yYW5nZTpub3QoLnJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2UsIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZSksXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC0tc2VsZWN0aW5nLXJhbmdlXG4gICAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tcmFuZ2U6bm90KC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXNlbGVjdGluZy1yYW5nZSwgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlLCAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2UpIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xuICAgIGNvbG9yOiAjMDAwO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tZGlzYWJsZWQsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWRpc2FibGVkLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1kaXNhYmxlZCB7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIGNvbG9yOiAjY2NjO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tZGlzYWJsZWQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWRpc2FibGVkOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1kaXNhYmxlZDpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC5yZWFjdC1kYXRlcGlja2VyX19tb250aC0tc2VsZWN0ZWQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1pbi1yYW5nZTpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0tc2VsZWN0ZWQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLWluLXJhbmdlOmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1zZWxlY3RlZDpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC5yZWFjdC1kYXRlcGlja2VyX19tb250aC0taW4tcmFuZ2U6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0tc2VsZWN0ZWQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQucmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0taW4tcmFuZ2U6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTZiYTU7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQ6aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9faW5wdXQtY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXcge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3OmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3OmhvdmVyLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXc6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXc6aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3csXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldzpob3ZlclxuICAgIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3csXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXc6aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3csXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXc6aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXc6aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3csXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldzpob3ZlclxuICAgIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3cge1xuICAgIGJvcmRlci10b3AtY29sb3I6ICNiM2IzYjM7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1kb3duLWFycm93LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3cge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDEzNWRlZyk7XG4gICAgcmlnaHQ6IC0xNnB4O1xuICAgIHRvcDogMDtcbiAgfVxuXG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24sXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogNTAlO1xuICAgIGxlZnQ6IDI1JTtcbiAgICB0b3A6IDMwcHg7XG4gICAgei1pbmRleDogMTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhZWFlYWU7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd246aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bjpob3ZlcixcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd246aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi0tc2Nyb2xsYWJsZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duLS1zY3JvbGxhYmxlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93bi0tc2Nyb2xsYWJsZSB7XG4gICAgaGVpZ2h0OiAxNTBweDtcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24sXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb24sXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbiB7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICB9XG4gIC5yZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvbjpmaXJzdC1vZi10eXBlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmZpcnN0LW9mLXR5cGUsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbjpmaXJzdC1vZi10eXBlIHtcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjNyZW07XG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuM3JlbTtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246bGFzdC1vZi10eXBlLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uOmxhc3Qtb2YtdHlwZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uOmxhc3Qtb2YtdHlwZSB7XG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjNyZW07XG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuM3JlbTtcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb246aG92ZXIsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtdXBjb21pbmcsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb246aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtdXBjb21pbmcsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbjpob3ZlclxuICAgIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy11cGNvbWluZyB7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2IzYjNiMztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb246aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb246aG92ZXJcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXMsXG4gIC5yZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLW9wdGlvbjpob3ZlclxuICAgIC5yZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS15ZWFycy1wcmV2aW91cyB7XG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2IzYjNiMztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkLFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uLS1zZWxlY3RlZCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uLS1zZWxlY3RlZCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDE1cHg7XG4gIH1cblxuICAucmVhY3QtZGF0ZXBpY2tlcl9fY2xvc2UtaWNvbiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogMDtcbiAgICBvdXRsaW5lOiAwO1xuICAgIHBhZGRpbmc6IDAgNnB4IDAgMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX2Nsb3NlLWljb246OmFmdGVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIxNmJhNTtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgaGVpZ2h0OiAxNnB4O1xuICAgIHdpZHRoOiAxNnB4O1xuICAgIHBhZGRpbmc6IDJweDtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICBjb250ZW50OiAnw5cnO1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3RvZGF5LWJ1dHRvbiB7XG4gICAgYmFja2dyb3VuZDogI2YwZjBmMDtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2FlYWVhZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHBhZGRpbmc6IDVweCAwO1xuICAgIGNsZWFyOiBsZWZ0O1xuICB9XG5cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHdpZHRoOiAxMDB2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgei1pbmRleDogMjE0NzQ4MzY0NztcbiAgfVxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZSxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LFxuICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLW5hbWUge1xuICAgIHdpZHRoOiAzcmVtO1xuICAgIGxpbmUtaGVpZ2h0OiAzcmVtO1xuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCksIChtYXgtaGVpZ2h0OiA1NTBweCkge1xuICAgIC5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lLFxuICAgIC5yZWFjdC1kYXRlcGlja2VyX19wb3J0YWwgLnJlYWN0LWRhdGVwaWNrZXJfX2RheSxcbiAgICAucmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsIC5yZWFjdC1kYXRlcGlja2VyX190aW1lLW5hbWUge1xuICAgICAgd2lkdGg6IDJyZW07XG4gICAgICBsaW5lLWhlaWdodDogMnJlbTtcbiAgICB9XG4gIH1cbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aCxcbiAgLnJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbCAucmVhY3QtZGF0ZXBpY2tlci10aW1lX19oZWFkZXIge1xuICAgIGZvbnQtc2l6ZTogMS40NHJlbTtcbiAgfVxuYFxuXG5jb25zdCBDb21wb25lbnQ6IEZpZWxkQ29tcG9uZW50PEZpZWxkQXJncywgbnVtYmVyPiA9ICh7XG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3QgZGF0ZSA9IHZhbHVlID8gbmV3IERhdGUodmFsdWUgKiAxMDAwKSA6IG51bGxcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBkYXRlXG4gICAgPyBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCh1bmRlZmluZWQsIHtcbiAgICAgICAgZGF0ZVN0eWxlOiAnbG9uZycsXG4gICAgICAgIHRpbWVTdHlsZTogb3B0aW9ucy50aW1lID8gJ3Nob3J0JyA6IHVuZGVmaW5lZCxcbiAgICAgIH0pLmZvcm1hdChkYXRlKVxuICAgIDogJydcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGRhdGU6IERhdGUpID0+IHtcbiAgICBvbkNoYW5nZShkYXRlLmdldFRpbWUoKSAvIDEwMDApXG4gICAgaWYgKCFvcHRpb25zLnRpbWUpIHtcbiAgICAgIHNldE9wZW4oZmFsc2UpXG4gICAgfVxuICB9XG4gIC8vIEZpeCBhbiBpc3N1ZSB3aXRoIHRoZSBpbXBvcnQgbm90IHVzaW5nIHRoZSBkZWZhdWx0IGJ5IGRlZmF1bHRcbiAgY29uc3QgUmVhY3REYXRlUGlja2VyQ29tcG9uZW50ID1cbiAgICB0eXBlb2YgUmVhY3REYXRlUGlja2VyID09PSAnZnVuY3Rpb24nXG4gICAgICA/IFJlYWN0RGF0ZVBpY2tlclxuICAgICAgOiAoUmVhY3REYXRlUGlja2VyIGFzIGFueSkuZGVmYXVsdFxuICBjb25zdCBpZCA9IHVzZVVuaXFJZCgnZGF0ZXBpY2tlcmlucHV0JylcbiAgcmV0dXJuIChcbiAgICA8RmllbGRcbiAgICAgIGlkPXtpZH1cbiAgICAgIGxhYmVsPXtvcHRpb25zLmxhYmVsfVxuICAgICAgaGVscD17b3B0aW9ucy5oZWxwfVxuICAgICAgaWNvbj17XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17cHJldmVudCgoKSA9PiBzZXRPcGVuKHRydWUpKX0+XG4gICAgICAgICAgPEljb25DYWxlbmRhciBzaXplPXsxNn0gLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICB9XG4gICAgPlxuICAgICAgPGRpdiBjc3M9e0RhdGVQaWNrZXJDc3N9PlxuICAgICAgICA8SW5wdXRcbiAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgb25Gb2N1cz17KCkgPT4gc2V0T3Blbih0cnVlKX1cbiAgICAgICAgICB2YWx1ZT17Zm9ybWF0dGVkRGF0ZX1cbiAgICAgICAgICByZWFkT25seVxuICAgICAgICAvPlxuICAgICAgICB7b3BlbiAmJiAoXG4gICAgICAgICAgPGRpdiBjc3M9e3sgcG9zaXRpb246ICdhYnNvbHV0ZScsIHpJbmRleDogNCB9fT5cbiAgICAgICAgICAgIDxSZWFjdERhdGVQaWNrZXJDb21wb25lbnRcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2RhdGV9XG4gICAgICAgICAgICAgIHNob3dUaW1lSW5wdXQ9e29wdGlvbnMudGltZX1cbiAgICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgIG9uQ2xpY2tPdXRzaWRlPXsoKSA9PiBzZXRPcGVuKGZhbHNlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZpZWxkPlxuICApXG59XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZChCdXR0b25JY29uKSh7XG4gIHdpZHRoOiAnMzJweCcsXG4gIGhlaWdodDogJzMycHgnLFxuICBjb2xvcjogJ3ZhcigtLXZlLWNvbG9yLWxpZ2h0KScsXG59KVxuXG5leHBvcnQgY29uc3QgRGF0ZVBpY2tlciA9IGRlZmluZUZpZWxkPEZpZWxkQXJncywgbnVtYmVyPih7XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgZGVmYXVsdDogJycsXG4gICAgdGltZTogZmFsc2UsXG4gIH0sXG4gIHJlbmRlcjogQ29tcG9uZW50LFxufSlcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1epaze0",
  styles: "position:absolute;z-index:4"
} : {
  name: "1okkg44-Component",
  styles: "position:absolute;z-index:4;label:Component;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const Component$1 = ({
  value,
  onChange,
  options
}) => {
  const date = value ? new Date(value * 1e3) : null;
  const [open, setOpen] = reactExports.useState(false);
  const formattedDate = date ? new Intl.DateTimeFormat(void 0, {
    dateStyle: "long",
    timeStyle: options.time ? "short" : void 0
  }).format(date) : "";
  const handleChange = (date2) => {
    onChange(date2.getTime() / 1e3);
    if (!options.time) {
      setOpen(false);
    }
  };
  const ReactDatePickerComponent = typeof er === "function" ? er : er.default;
  const id = useUniqId("datepickerinput");
  return /* @__PURE__ */ jsx(Field$1, {
    id,
    label: options.label,
    help: options.help,
    icon: /* @__PURE__ */ jsx(Button, {
      onClick: prevent(() => setOpen(true)),
      children: /* @__PURE__ */ jsx(IconCalendar, {
        size: 16
      })
    }),
    children: /* @__PURE__ */ jsxs("div", {
      css: DatePickerCss,
      children: [/* @__PURE__ */ jsx(Input$2, {
        id,
        onFocus: () => setOpen(true),
        value: formattedDate,
        readOnly: true
      }), open && /* @__PURE__ */ jsx("div", {
        css: _ref,
        children: /* @__PURE__ */ jsx(ReactDatePickerComponent, {
          selected: date,
          showTimeInput: options.time,
          inline: true,
          onChange: handleChange,
          onClickOutside: () => setOpen(false)
        })
      })]
    })
  });
};
const Button = /* @__PURE__ */ createStyled(ButtonIcon, process.env.NODE_ENV === "production" ? {
  target: "e1mbyeim0"
} : {
  target: "e1mbyeim0",
  label: "Button"
})(process.env.NODE_ENV === "production" ? {
  name: "fcl53z",
  styles: "width:32px;height:32px;color:var(--ve-color-light)"
} : {
  name: "fcl53z",
  styles: "width:32px;height:32px;color:var(--ve-color-light)",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const DatePicker = defineField({
  defaultOptions: {
    default: "",
    time: false
  },
  render: Component$1
});
const AlignmentIcons = {
  left: IconTextLeft,
  center: IconTextCenter,
  right: IconTextRight
};
const Component = ({
  value,
  onChange,
  options
}) => {
  const alignements = Object.keys(AlignmentIcons);
  const id = useUniqId();
  return /* @__PURE__ */ jsx(Field$1, {
    label: options.label,
    children: /* @__PURE__ */ jsx(AlignmentButtons, {
      children: alignements.map((alignment) => /* @__PURE__ */ jsx(AlignmentButton, {
        name: id,
        value: alignment,
        checked: value === alignment,
        onChange,
        icon: AlignmentIcons[alignment]
      }, alignment))
    })
  });
};
const TextAlign = defineField({
  defaultOptions: {
    default: "left"
  },
  render: Component
});
const Translations = {
  copyPage: "Copier le code de la page",
  deleteComponent: "Supprimer le bloc",
  copyComponent: "Copier le  bloc",
  searchComponent: "Rechercher un bloc",
  copySuccess: "Le code a bién été copié",
  copyInstructions: "vous pouvez le coller sur une autre page (CTRL + V)",
  addComponent: "Ajouter un bloc",
  responsiveView: "Vue responsive",
  addItem: "Ajouter un élément",
  deleteItem: "Supprimer l'élément",
  rollback: "Rétablir",
  deleteItemConfirm: "Le bloc a bien été supprimé",
  unknownComponent: "Bloc inconnu",
  save: "Sauvegarder",
  close: "Fermer",
  poweredBy: "Propulsé par",
  noContent: `Vous n'avez pas encore de contenu`,
  useTemplate: "Utilisez un template"
};
const components = {};
const templates = [];
const defaultDevices = [{
  name: "Mobile",
  width: 390,
  height: "100%",
  icon: "mobile"
}, {
  name: "Desktop",
  width: "100%",
  height: "100%",
  icon: "desktop"
}];
const _VisualEditor = class _VisualEditor {
  constructor(options = {}) {
    _VisualEditor.i18n = options.lang ?? Translations$1;
    _VisualEditor.devices = options.devices ?? defaultDevices;
    _VisualEditor.postMessagePreview = options.postMessagePreview ?? false;
  }
  registerComponent(name, definition) {
    components[name] = {
      label: "title",
      ...definition
    };
  }
  registerTemplate(template) {
    templates.push(template);
  }
  defineElement(elementName = "visual-editor") {
    class VisualEditorElement extends HTMLElement {
      constructor() {
        super(...arguments);
        // React root
        __publicField(this, "_root", null);
        // Access zustand store used by the VisualEditor
        __publicField(this, "_store", null);
      }
      static get observedAttributes() {
        return ["hidden", "value"];
      }
      get value() {
        return stringifyFields(this.valueAsArray);
      }
      get valueAsArray() {
        var _a;
        return ((_a = this._store) == null ? void 0 : _a.getState().data) ?? [];
      }
      set value(v2) {
        if (!this._store) {
          console.error("Cannot set value for an unconnected visual editor");
          return;
        }
        const state = this._store.getState();
        if (typeof v2 === "string") {
          state.setDataFromOutside(this.parseValue(v2));
          return;
        }
        if (typeof v2 === "function") {
          state.setDataFromOutside(v2(state.data));
          return;
        }
        state.setDataFromOutside(indexify(v2));
      }
      connectedCallback() {
        this.render();
      }
      attributeChangedCallback(name, oldValue, newValue) {
        if (!this._root) {
          return false;
        }
        if (name === "value" && newValue) {
          this.value = newValue;
          return;
        }
        this.render();
      }
      disconnectedCallback() {
        if (!this._root) {
          return;
        }
        this._root.unmount();
        this._store = null;
        this._root = null;
      }
      parseValue(value) {
        if (!value) {
          return [];
        }
        try {
          const json = JSON.parse(value);
          return indexify(json).map((value2) => {
            var _a;
            return fillDefaults(value2, ((_a = components[value2._name]) == null ? void 0 : _a.fields) ?? []);
          });
        } catch (e3) {
          console.error("Impossible de parser les données", value, e3);
          alert("Impossible de parser les données de l'éditeur visuel");
          return [];
        }
      }
      render() {
        var _a, _b;
        const data = this.parseValue((_a = this.getAttribute("value")) == null ? void 0 : _a.toString());
        const hiddenCategories = ((_b = this.getAttribute("hidden-categories")) == null ? void 0 : _b.split(";")) ?? [];
        if (!this._root) {
          this._root = createRoot(this);
        }
        this._root.render(/* @__PURE__ */ jsx(StoreProvider, {
          data,
          definitions: components,
          templates,
          hiddenCategories,
          rootElement: this,
          devices: _VisualEditor.devices,
          insertPosition: this.getAttribute("insertPosition") ?? InsertPosition.Start,
          onStore: (store) => this._store = store,
          children: /* @__PURE__ */ jsx(VisualEditorComponent, {
            element: this,
            previewUrl: this.getAttribute("preview") ?? "",
            iconsUrl: this.getAttribute("iconsUrl") ?? "/",
            name: this.getAttribute("name") ?? "",
            visible: this.getAttribute("hidden") === null
          })
        }));
      }
    }
    __publicField(VisualEditorElement, "changeEventName", "change");
    customElements.define(elementName, VisualEditorElement);
  }
};
__publicField(_VisualEditor, "i18n", Translations$1);
__publicField(_VisualEditor, "postMessagePreview", false);
__publicField(_VisualEditor, "devices");
let VisualEditor = _VisualEditor;
function VisualEditorComponent({
  previewUrl,
  name,
  element,
  iconsUrl,
  visible: visibleProps
}) {
  const visible = useStateDelayed(visibleProps);
  const handleClose = () => {
    element.dispatchEvent(new Event("close"));
  };
  useClipboardPaste(visible);
  const div2 = reactExports.useRef(null);
  useStopPropagation(div2, ["change", "close"]);
  if (!visible) {
    return /* @__PURE__ */ jsx(HiddenTextarea, {
      name
    });
  }
  return /* @__PURE__ */ jsxs("div", {
    ref: div2,
    children: [/* @__PURE__ */ jsx(BaseStyles, {
      children: /* @__PURE__ */ jsx(Layout, {
        onClose: handleClose,
        previewUrl,
        iconsUrl
      })
    }), /* @__PURE__ */ jsx(HiddenTextarea, {
      name
    })]
  });
}
function HiddenTextarea({
  name
}) {
  const doNothing = () => null;
  const {
    data
  } = usePartialStore("data");
  const cleanedData = reactExports.useMemo(() => stringifyFields(data), [data]);
  return /* @__PURE__ */ jsx("textarea", {
    hidden: true,
    name,
    value: cleanedData,
    onChange: doNothing
  });
}
export {
  AddButton,
  Alignment,
  BaseStyles,
  Checkbox,
  Color,
  DatePicker,
  Translations$1 as EN,
  Translations as FR,
  Field$1 as Field,
  FieldsRenderer,
  HTMLText,
  ImageUrl,
  Number$1 as Number,
  PreviewWrapper,
  Range,
  e$1 as React,
  Repeater,
  Row,
  Select,
  Tabs,
  Text$2 as Text,
  TextAlign,
  VisualEditor,
  VisualEditorComponent,
  defineField,
  defineFieldGroup
};
